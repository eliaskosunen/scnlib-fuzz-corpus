_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  11.9M|{
 3803|  11.9M|    if constexpr (sizeof(U) == 1) {
 3804|  11.9M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  11.9M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  11.9M|{
 3767|  11.9M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  11.9M|    SCN_GCC_COMPAT_PUSH
 3770|  11.9M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  11.9M|    constexpr char lengths[] =
 3772|  11.9M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  11.9M|        "\1\1\1\1\1\1\1\1"
 3774|  11.9M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  11.9M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  11.9M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  11.9M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  11.9M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  11.9M|    SCN_GCC_COMPAT_POP
 3781|  11.9M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  11.4M|{
 4009|  11.4M|    if constexpr (sizeof(CharT) == 1) {
 4010|  11.4M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  11.4M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  11.4M|{
 3822|  11.4M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  11.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  11.4M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  11.4M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  11.4M|    };
 3827|       |
 3828|  11.4M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 10.5M, False: 951k]
  ------------------
 3829|  10.5M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 579, False: 10.5M]
  ------------------
 3830|    579|            SCN_UNLIKELY_ATTR
 3831|    579|            return invalid_code_point;
 3832|    579|        }
 3833|  10.5M|        return static_cast<char32_t>(input[0]);
 3834|  10.5M|    }
 3835|       |
 3836|   951k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 253k, False: 697k]
  ------------------
 3837|   253k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 475, False: 252k]
  ------------------
 3838|    475|            SCN_UNLIKELY_ATTR
 3839|    475|            return invalid_code_point;
 3840|    475|        }
 3841|   252k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 44.3k, False: 208k]
  ------------------
 3842|  44.3k|            SCN_UNLIKELY_ATTR
 3843|  44.3k|            return invalid_code_point;
 3844|  44.3k|        }
 3845|       |
 3846|   208k|        char32_t cp{};
 3847|   208k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|   208k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|   208k|        return cp;
 3850|   252k|    }
 3851|       |
 3852|   697k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 659k, False: 38.6k]
  ------------------
 3853|   659k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 106, False: 659k]
  ------------------
 3854|    106|            SCN_UNLIKELY_ATTR
 3855|    106|            return invalid_code_point;
 3856|    106|        }
 3857|   659k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 9.19k, False: 649k]
  ------------------
 3858|   659k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 2.68k, False: 647k]
  ------------------
 3859|  11.8k|            SCN_UNLIKELY_ATTR
 3860|  11.8k|            return invalid_code_point;
 3861|  11.8k|        }
 3862|       |
 3863|   647k|        char32_t cp{};
 3864|   647k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|   647k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|   647k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|   647k|        return cp;
 3868|   659k|    }
 3869|       |
 3870|  38.6k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 38.6k, False: 0]
  ------------------
 3871|  38.6k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 38.6k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  38.6k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 23.4k, False: 15.2k]
  ------------------
 3876|  23.4k|            SCN_UNLIKELY_ATTR
 3877|  23.4k|            return invalid_code_point;
 3878|  23.4k|        }
 3879|  15.2k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 3.54k, False: 11.7k]
  ------------------
 3880|  15.2k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 197, False: 11.5k]
  ------------------
 3881|  15.2k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 298, False: 11.2k]
  ------------------
 3882|  4.03k|            SCN_UNLIKELY_ATTR
 3883|  4.03k|            return invalid_code_point;
 3884|  4.03k|        }
 3885|       |
 3886|  11.2k|        char32_t cp{};
 3887|  11.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  11.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  11.2k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  11.2k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  11.2k|        return cp;
 3892|  15.2k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|  1.60M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  1.60M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  1.60M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  10.1M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  10.1M|    else {
 3701|  10.1M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  10.1M|                                       to_address(first), to_address(last)))};
 3703|  10.1M|    }
 3704|  10.1M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  31.1M|{
  326|  31.1M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  31.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  31.1M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  34.0M|{
  304|  34.0M|    return p;
  305|  34.0M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  4.82M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  4.82M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  4.82M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  4.82M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  4.82M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  4.82M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  64.1k|    {
 2724|  64.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  64.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  64.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  64.1k|    {
 2705|  64.1k|        return decay_copy(t.begin());
 2706|  64.1k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  5.11M|{
 1949|  5.11M|    return SCN_FWD(t);
  ------------------
  |  |  930|  5.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  5.11M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.19M|    {
 2781|  1.19M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.19M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.19M|    {
 2763|  1.19M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.19M|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8876|   121k|{
 8877|   121k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   121k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   121k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   121k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|   532k|{
 5406|   532k|    detail::check_scan_arg_types<Args...>();
 5407|   532k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   532k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|   655k|{
 5145|   655k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   655k|                  "Scan argument types must be default constructible");
 5147|   655k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   655k|                  "Scan argument types must be Destructible");
 5149|   655k|    static_assert(
 5150|   655k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   655k|        "Scan argument types must not be references");
 5152|   655k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|   532k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   532k|    {
 5359|   532k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   532k|    {
 5370|   532k|        return {detail::make_arg<
 5371|   532k|            kind, Context,
 5372|   532k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   532k|                                 typename Context::char_type>::value>(args)...};
 5374|   532k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|   532k|{
 5180|   532k|    return make_value<Context>(value).ref_value;
 5181|   532k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|   655k|{
 5130|   655k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   655k|                                  needs_context_tag>) {
 5134|   655k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   655k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   655k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|   655k|    {                                                                        \
 4969|   655k|        return val;                                                          \
 4970|   655k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|   655k|{
 5099|   655k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   655k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   655k|    constexpr bool scannable_char =
 5103|   655k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   655k|    static_assert(scannable_char,
 5105|   655k|                  "Cannot scan an argument of an unsupported character "
 5106|   655k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   655k|    constexpr bool scannable_const =
 5109|   655k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   655k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   655k|    constexpr bool scannable_disabled =
 5113|   655k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   655k|    static_assert(scannable_disabled,
 5115|   655k|                  "Cannot scan an argument that has been disabled by "
 5116|   655k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   655k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   655k|    static_assert(
 5120|   655k|        scannable,
 5121|   655k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   655k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   655k|    return arg_value{arg};
 5125|   655k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|   655k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   655k|    {
 4911|   655k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|   242k|{
 8664|   242k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|   242k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8600|   242k|{
 8601|   242k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   242k|    auto result = vscan_impl(buffer, format, args);
 8604|   242k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 214k]
  |  |  ------------------
  ------------------
 8605|  28.5k|        return unexpected(result.error());
 8606|  28.5k|    }
 8607|   214k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   242k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   596k|{
 4729|   596k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   596k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   596k|                  "\n"
 4733|   596k|                  "Unsupported range type given as input to a scanning "
 4734|   596k|                  "function.\n"
 4735|   596k|                  "A range needs to have a character type (value type) "
 4736|   596k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   596k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   596k|                  "to be included.\n"
 4739|   596k|                  "See the scnlib documentation for more details.");
 4740|   596k|    static_assert(
 4741|   596k|        !std::is_same_v<T, custom_char_traits>,
 4742|   596k|        "\n"
 4743|   596k|        "Unsupported range type given as input to a scanning "
 4744|   596k|        "function.\n"
 4745|   596k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   596k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   596k|        "not supported.");
 4748|   596k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   596k|                  "\n"
 4750|   596k|                  "Unsupported range type given as input to a scanning "
 4751|   596k|                  "function.\n"
 4752|   596k|                  "file_marker_found cannot be used as an "
 4753|   596k|                  "source range type to scn::scan.\n"
 4754|   596k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   596k|                  "and do not provide an explicit source range, "
 4756|   596k|                  "or use scn::scan with a FILE* directly.");
 4757|   596k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   596k|                  "\n"
 4759|   596k|                  "Unsupported range type given as input to a scanning "
 4760|   596k|                  "function.\n"
 4761|   596k|                  "In order to be scannable, a range needs to satisfy "
 4762|   596k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   596k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   596k|                  "\n"
 4765|   596k|                  "Unsupported range type given as input to a scanning "
 4766|   596k|                  "function.\n"
 4767|   596k|                  "A range needs to model forward_range and have a valid "
 4768|   596k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   596k|                  "Examples of scannable ranges are std::string, "
 4770|   596k|                  "std::string_view, "
 4771|   596k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   596k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   596k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   596k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   596k|{
 4668|   596k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   596k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   596k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   596k|    {
 2855|   596k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   596k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   596k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   596k|    {
 2836|   596k|        return t.data();
 2837|   596k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   596k|    {
 3229|   596k|        return detail::to_address(ranges::begin(derived()));
 3230|   596k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.91M|{
  326|  2.91M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.91M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.13M|    {
 2724|  1.13M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.13M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.13M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.13M|    {
 2705|  1.13M|        return decay_copy(t.begin());
 2706|  1.13M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  6.60M|    {
 3326|  6.60M|        return m_iterator;
 3327|  6.60M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   596k|    {
 3185|   596k|        return static_cast<const D&>(*this);
 3186|   596k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   596k|    {
 2930|   596k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   596k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   596k|    {
 2896|   596k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   596k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   596k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  6.61M|{
 1949|  6.61M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.61M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  2.24M|    {
 3342|  2.24M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  2.24M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  13.3M|    {
 1598|  13.3M|        return has_value();
 1599|  13.3M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  26.6M|    {
  485|  26.6M|        return m_has_value;
  486|  26.6M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   277k|    {
 1604|   277k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   277k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   277k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   277k|        return this->get_unexpected().error();
 1606|   277k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   277k|    {
  468|   277k|        return m_unexpected;
  469|   277k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  2.05M|    {
  361|  2.05M|        return m_unexpected;
  362|  2.05M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|  1.03M|        : m_unexpected(std::forward<Err>(e))
  346|  1.03M|    {
  347|  1.03M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.03M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  1.03M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  61.7k|        : base(unexpect, std::move(e.error())),
 1474|  61.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  61.7k|    {
 1476|  61.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  61.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  61.7k|          m_has_value(false)
  446|  61.7k|    {
  447|  61.7k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|  1.18M|        : m_unexpected(std::forward<Args>(args)...)
  355|  1.18M|    {
  356|  1.18M|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  1.18M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  1.18M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   596k|    {
 1177|   596k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   534k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   534k|                      ranges::iterator_t<SourceRange>>) {
 5935|   534k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   534k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.18M|    {
 2724|  2.18M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.18M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.18M|    {
 2705|  2.18M|        return decay_copy(t.begin());
 2706|  2.18M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   534k|{
 5920|   534k|    return ranges::end(source);
 5921|   534k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   534k|    {
 2781|   534k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   534k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   534k|    {
 2763|   534k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   534k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   534k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  3.43M|    {
 3330|  3.43M|        return m_sentinel;
 3331|  3.43M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  12.9M|    {
 1653|  12.9M|        return value();
 1654|  12.9M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  12.9M|    {
 1627|  12.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  12.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  12.9M|        return this->get_value();
 1629|  12.9M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  12.9M|    {
  451|  12.9M|        return m_value;
  452|  12.9M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   534k|        : base(std::in_place, std::forward<U>(val)),
 1428|   534k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   534k|    {
 1430|   534k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   534k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   534k|    {
  437|   534k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7984|   242k|    {
 7985|   242k|        return m_str;
 7986|   242k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   532k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   532k|    {
 5436|   532k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|   532k|    {
 5389|   532k|        return m_argptrs;
 5390|   532k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   775k|        : m_desc(desc), m_builtin_values(data)
 5487|   775k|    {
 5488|   775k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|   242k|{
 8830|   242k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 214k]
  |  |  ------------------
  ------------------
 8831|  28.5k|        return unexpected(result.error());
 8832|  28.5k|    }
 8833|   214k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   214k|    static_cast<    \
  |  |  929|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   214k|    static_cast<    \
  |  |  929|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   242k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   596k|    {
 1598|   596k|        return has_value();
 1599|   596k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.19M|    {
  485|  1.19M|        return m_has_value;
  486|  1.19M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  61.7k|    {
 1604|  61.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  61.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  61.7k|        return this->get_unexpected().error();
 1606|  61.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  61.7k|    {
  468|  61.7k|        return m_unexpected;
  469|  61.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  30.8k|        : base(unexpect, std::move(e.error())),
 1474|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.8k|    {
 1476|  30.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  30.8k|        : m_has_value(false)
  625|  30.8k|    {
  626|  30.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  30.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  30.8k|    {
  689|  30.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  30.8k|                                  std::forward<Args>(args)...);
  691|  30.8k|        m_has_value = false;
  692|  30.8k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   185k|{
  392|   185k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   185k|        T(std::forward<Args>(args)...);
  394|   185k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  61.7k|    {
  718|  61.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  61.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  61.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  61.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   298k|    {
 1177|   298k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   428k|    {
 1653|   428k|        return value();
 1654|   428k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   534k|    {
 1627|   534k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   534k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   534k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   534k|        return this->get_value();
 1629|   534k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   534k|    {
  451|   534k|        return m_value;
  452|   534k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|   267k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   267k|    {
 5840|   267k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   534k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   534k|    static_cast<    \
  |  |  929|   534k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   534k|    {
 5691|   534k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|   593k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   593k|    static_cast<    \
  |  |  929|   593k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   593k|    {
 5626|   593k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   267k|        : base(std::in_place, std::forward<U>(val)),
 1428|   267k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   267k|    {
 1430|   267k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   267k|        : m_has_value(true)
  615|   267k|    {
  616|   267k|        construct(std::forward<Args>(args)...);
  617|   267k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   267k|    {
  682|   267k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   267k|        m_has_value = true;
  684|   267k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   267k|{
  392|   267k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   267k|        T(std::forward<Args>(args)...);
  394|   267k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|   267k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   802k|    {
  706|   802k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   802k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   802k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|   534k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|   532k|    {
 5384|   532k|        return m_args;
 5385|   532k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|   532k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  3.85M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.85M|    static_cast<    \
  |  |  929|  3.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.85M|    static_cast<    \
  |  |  929|  3.85M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  3.85M|    {
 3312|  3.85M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7700|   775k|{
 7701|   775k|    return s;
 7702|   775k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7677|   775k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   242k|        : m_str(r.str)
 7980|   242k|    {
 7981|   242k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   298k|    {
 1598|   298k|        return has_value();
 1599|   298k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   863k|    {
  675|   863k|        return m_has_value;
  676|   863k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   267k|    {
 1673|   267k|        return &value();
 1674|   267k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   267k|    {
 1627|   267k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   267k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   267k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   267k|        return this->get_value();
 1629|   267k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   267k|    {
  641|   267k|        return *value_ptr();
  642|   267k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   534k|    {
 5708|   534k|        return ranges::begin(m_range);
 5709|   534k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   298k|    {
  631|   298k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 267k, False: 30.8k]
  ------------------
  632|   267k|            destroy_value();
  633|   267k|        }
  634|  30.8k|        else {
  635|  30.8k|            destroy_unexpected();
  636|  30.8k|        }
  637|   298k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   267k|    {
  696|   267k|        scn::detail::destroy_at(value_ptr());
  697|   267k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   267k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   267k|    else {
  404|   267k|        p->~T();
  405|   267k|    }
  406|   267k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  30.8k|    {
  700|  30.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  30.8k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   185k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   185k|    else {
  404|   185k|        p->~T();
  405|   185k|    }
  406|   185k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8943|   121k|{
 8944|   121k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   121k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   121k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   121k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|   242k|{
 8682|   242k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   242k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|   242k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8616|   242k|{
 8617|   242k|#if !SCN_DISABLE_LOCALE
 8618|   242k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   242k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   242k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   242k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   242k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 214k]
  |  |  ------------------
  ------------------
 8625|  28.5k|        return unexpected(result.error());
 8626|  28.5k|    }
 8627|   214k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   214k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   242k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8982|  55.4k|{
 8983|  55.4k|    T value;
 8984|  55.4k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  55.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  55.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.37k, False: 53.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.37k|    }                                                  \
  |  |  |  | 3667|  55.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  53.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  53.0k|    static_cast<    \
  |  |  929|  53.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  53.0k|    static_cast<    \
  |  |  929|  53.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  55.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   122k|{
 5165|   122k|    check_scan_arg_types<T>();
 5166|       |
 5167|   122k|    basic_scan_arg<Context> arg;
 5168|   122k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   122k|    arg.m_value = make_value<Context>(value);
 5170|   122k|    return arg;
 5171|   122k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   953k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  9.98M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8694|   110k|{
 8695|   110k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8696|   110k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|   110k|{
 8641|   110k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|   110k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|   110k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 106k]
  |  |  ------------------
  ------------------
 8645|  4.75k|        return unexpected(result.error());
 8646|  4.75k|    }
 8647|   106k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|   110k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   106k|    {
 1663|   106k|        return std::move(value());
 1664|   106k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8876|   121k|{
 8877|   121k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   121k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   121k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   121k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|   242k|{
 5406|   242k|    detail::check_scan_arg_types<Args...>();
 5407|   242k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   242k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|   298k|{
 5145|   298k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   298k|                  "Scan argument types must be default constructible");
 5147|   298k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   298k|                  "Scan argument types must be Destructible");
 5149|   298k|    static_assert(
 5150|   298k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   298k|        "Scan argument types must not be references");
 5152|   298k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|   242k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   242k|    {
 5359|   242k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   242k|    {
 5370|   242k|        return {detail::make_arg<
 5371|   242k|            kind, Context,
 5372|   242k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   242k|                                 typename Context::char_type>::value>(args)...};
 5374|   242k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|   242k|{
 5180|   242k|    return make_value<Context>(value).ref_value;
 5181|   242k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|   298k|{
 5130|   298k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   298k|                                  needs_context_tag>) {
 5134|   298k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   298k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|   298k|    {                                                                        \
 4969|   298k|        return val;                                                          \
 4970|   298k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|   298k|{
 5099|   298k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   298k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   298k|    constexpr bool scannable_char =
 5103|   298k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   298k|    static_assert(scannable_char,
 5105|   298k|                  "Cannot scan an argument of an unsupported character "
 5106|   298k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   298k|    constexpr bool scannable_const =
 5109|   298k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   298k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   298k|    constexpr bool scannable_disabled =
 5113|   298k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   298k|    static_assert(scannable_disabled,
 5115|   298k|                  "Cannot scan an argument that has been disabled by "
 5116|   298k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   298k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   298k|    static_assert(
 5120|   298k|        scannable,
 5121|   298k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   298k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   298k|    return arg_value{arg};
 5125|   298k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|   298k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   298k|    {
 4911|   298k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7984|   242k|    {
 7985|   242k|        return m_str;
 7986|   242k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   242k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   242k|    {
 5436|   242k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|   242k|    {
 5389|   242k|        return m_argptrs;
 5390|   242k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8829|   242k|{
 8830|   242k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   242k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 214k]
  |  |  ------------------
  ------------------
 8831|  28.5k|        return unexpected(result.error());
 8832|  28.5k|    }
 8833|   214k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   214k|    static_cast<    \
  |  |  929|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   214k|    static_cast<    \
  |  |  929|   214k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   242k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  30.8k|        : base(unexpect, std::move(e.error())),
 1474|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.8k|    {
 1476|  30.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  30.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.8k|          m_has_value(false)
  446|  30.8k|    {
  447|  30.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   298k|    {
 1177|   298k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|   267k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   267k|    {
 5840|   267k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|   267k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   267k|    static_cast<    \
  |  |  929|   267k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   267k|    {
 5626|   267k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   267k|        : base(std::in_place, std::forward<U>(val)),
 1428|   267k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   267k|    {
 1430|   267k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   267k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   267k|    {
  437|   267k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|   242k|    {
 5384|   242k|        return m_args;
 5385|   242k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   242k|        : m_str(r.str)
 7980|   242k|    {
 7981|   242k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   298k|    {
 1598|   298k|        return has_value();
 1599|   298k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   565k|    {
  485|   565k|        return m_has_value;
  486|   565k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   267k|    {
 1673|   267k|        return &value();
 1674|   267k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   267k|    {
 1627|   267k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   267k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   267k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   267k|        return this->get_value();
 1629|   267k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   267k|    {
  451|   267k|        return m_value;
  452|   267k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8943|   121k|{
 8944|   121k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   121k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   121k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   121k|    static_cast<    \
  |  |  929|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   121k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8982|  55.4k|{
 8983|  55.4k|    T value;
 8984|  55.4k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  55.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  55.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  55.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  55.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  55.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.37k, False: 53.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.37k|    }                                                  \
  |  |  |  | 3667|  55.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  53.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  53.0k|    static_cast<    \
  |  |  929|  53.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  53.0k|    static_cast<    \
  |  |  929|  53.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  55.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  55.4k|{
 5165|  55.4k|    check_scan_arg_types<T>();
 5166|       |
 5167|  55.4k|    basic_scan_arg<Context> arg;
 5168|  55.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  55.4k|    arg.m_value = make_value<Context>(value);
 5170|  55.4k|    return arg;
 5171|  55.4k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  30.8k|    {
 2724|  30.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  30.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  30.8k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  30.8k|    {
 2705|  30.8k|        return decay_copy(t.begin());
 2706|  30.8k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  14.8M|{
 1949|  14.8M|    return SCN_FWD(t);
  ------------------
  |  |  930|  14.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  14.8M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   714k|    {
 2781|   714k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   714k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   714k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   714k|    {
 2763|   714k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   714k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   714k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8876|   145k|{
 8877|   145k|    auto args = make_scan_args<scan_context, Args...>();
 8878|   145k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8879|   145k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8880|   145k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8663|   145k|{
 8664|   145k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8665|   145k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8600|   145k|{
 8601|   145k|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|   145k|    auto result = vscan_impl(buffer, format, args);
 8604|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 130k]
  |  |  ------------------
  ------------------
 8605|  14.2k|        return unexpected(result.error());
 8606|  14.2k|    }
 8607|   130k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|   145k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|   357k|{
 4729|   357k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   357k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   357k|                  "\n"
 4733|   357k|                  "Unsupported range type given as input to a scanning "
 4734|   357k|                  "function.\n"
 4735|   357k|                  "A range needs to have a character type (value type) "
 4736|   357k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   357k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   357k|                  "to be included.\n"
 4739|   357k|                  "See the scnlib documentation for more details.");
 4740|   357k|    static_assert(
 4741|   357k|        !std::is_same_v<T, custom_char_traits>,
 4742|   357k|        "\n"
 4743|   357k|        "Unsupported range type given as input to a scanning "
 4744|   357k|        "function.\n"
 4745|   357k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   357k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   357k|        "not supported.");
 4748|   357k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   357k|                  "\n"
 4750|   357k|                  "Unsupported range type given as input to a scanning "
 4751|   357k|                  "function.\n"
 4752|   357k|                  "file_marker_found cannot be used as an "
 4753|   357k|                  "source range type to scn::scan.\n"
 4754|   357k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   357k|                  "and do not provide an explicit source range, "
 4756|   357k|                  "or use scn::scan with a FILE* directly.");
 4757|   357k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   357k|                  "\n"
 4759|   357k|                  "Unsupported range type given as input to a scanning "
 4760|   357k|                  "function.\n"
 4761|   357k|                  "In order to be scannable, a range needs to satisfy "
 4762|   357k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   357k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   357k|                  "\n"
 4765|   357k|                  "Unsupported range type given as input to a scanning "
 4766|   357k|                  "function.\n"
 4767|   357k|                  "A range needs to model forward_range and have a valid "
 4768|   357k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   357k|                  "Examples of scannable ranges are std::string, "
 4770|   357k|                  "std::string_view, "
 4771|   357k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   357k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   357k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   357k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   357k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   357k|    else {
 4714|   357k|        return make_forward_scan_buffer(r);
 4715|   357k|    }
 4716|   357k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|   357k|{
 4533|   357k|    return basic_scan_forward_buffer_impl(range);
 4534|   357k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   357k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   357k|          m_cursor(ranges::begin(*m_range))
 4419|   357k|    {
 4420|   357k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|   357k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   357k|    {
 4391|   357k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|   357k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   357k|    {
 4159|   357k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|   357k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   683k|    {
 2724|   683k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   683k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   683k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   683k|    {
 2705|   683k|        return decay_copy(t.begin());
 2706|   683k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|  1.00M|    {
 3326|  1.00M|        return m_iterator;
 3327|  1.00M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  4.29M|    {
 4424|  4.29M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 37.9k, False: 4.25M]
  ------------------
 4425|  37.9k|            return false;
 4426|  37.9k|        }
 4427|  4.25M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  4.25M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  4.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  4.25M|        }
 4430|  4.25M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 3.91M, False: 339k]
  ------------------
 4431|  3.91M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  3.91M|                                          this->m_current_view.begin(),
 4433|  3.91M|                                          this->m_current_view.end());
 4434|  3.91M|        }
 4435|  4.25M|        m_latest = *m_cursor;
 4436|  4.25M|        ++m_cursor;
 4437|  4.25M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  4.25M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  4.25M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  4.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  4.25M|        }
 4441|  4.25M|        return true;
 4442|  4.29M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  12.8M|    {
 2781|  12.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  12.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  12.8M|    {
 2763|  12.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  12.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  12.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  13.1M|    {
 3330|  13.1M|        return m_sentinel;
 3331|  13.1M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|   357k|    {
 4079|   357k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   357k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   357k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  30.8k|        : base(unexpect, std::move(e.error())),
 1474|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.8k|    {
 1476|  30.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  30.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  30.8k|          m_has_value(false)
  446|  30.8k|    {
  447|  30.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   357k|    {
 1177|   357k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   326k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   326k|                      ranges::iterator_t<SourceRange>>) {
 5935|   326k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   326k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   326k|    {
 2724|   326k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   326k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   326k|    {
 2705|   326k|        return decay_copy(t.begin());
 2706|   326k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|   326k|{
 5920|   326k|    return ranges::end(source);
 5921|   326k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   326k|    {
 2781|   326k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   326k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   326k|    {
 2763|   326k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   326k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   326k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   326k|        : base(std::in_place, std::forward<U>(val)),
 1428|   326k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   326k|    {
 1430|   326k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   326k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   326k|    {
  437|   326k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7984|   290k|    {
 7985|   290k|        return m_str;
 7986|   290k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8829|   290k|{
 8830|   290k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 261k]
  |  |  ------------------
  ------------------
 8831|  28.5k|        return unexpected(result.error());
 8832|  28.5k|    }
 8833|   261k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   261k|    static_cast<    \
  |  |  929|   261k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   261k|    static_cast<    \
  |  |  929|   261k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|   290k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   357k|    {
 1598|   357k|        return has_value();
 1599|   357k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   714k|    {
  485|   714k|        return m_has_value;
  486|   714k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  30.8k|    {
 1604|  30.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  30.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  30.8k|        return this->get_unexpected().error();
 1606|  30.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  30.8k|    {
  468|  30.8k|        return m_unexpected;
  469|  30.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  30.8k|        : base(unexpect, std::move(e.error())),
 1474|  30.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.8k|    {
 1476|  30.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  30.8k|        : m_has_value(false)
  625|  30.8k|    {
  626|  30.8k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  30.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  30.8k|    {
  689|  30.8k|        scn::detail::construct_at(unexpected_ptr(),
  690|  30.8k|                                  std::forward<Args>(args)...);
  691|  30.8k|        m_has_value = false;
  692|  30.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  61.7k|    {
  718|  61.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  61.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  61.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  61.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   357k|    {
 1177|   357k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   261k|    {
 1653|   261k|        return value();
 1654|   261k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   326k|    {
 1627|   326k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   326k|        return this->get_value();
 1629|   326k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   326k|    {
  451|   326k|        return m_value;
  452|   326k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|   326k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   326k|    {
 5840|   326k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|   326k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   326k|    static_cast<    \
  |  |  929|   326k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   326k|    {
 5691|   326k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   326k|        : base(std::in_place, std::forward<U>(val)),
 1428|   326k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   326k|    {
 1430|   326k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   326k|        : m_has_value(true)
  615|   326k|    {
  616|   326k|        construct(std::forward<Args>(args)...);
  617|   326k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   326k|    {
  682|   326k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   326k|        m_has_value = true;
  684|   326k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   326k|{
  392|   326k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   326k|        T(std::forward<Args>(args)...);
  394|   326k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5831|   326k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   978k|    {
  706|   978k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   978k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   978k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5835|   652k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   683k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   683k|    static_cast<    \
  |  |  929|   683k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   683k|    static_cast<    \
  |  |  929|   683k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   683k|    {
 3312|   683k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7979|   290k|        : m_str(r.str)
 7980|   290k|    {
 7981|   290k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   357k|    {
 1598|   357k|        return has_value();
 1599|   357k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  1.04M|    {
  675|  1.04M|        return m_has_value;
  676|  1.04M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   326k|    {
 1673|   326k|        return &value();
 1674|   326k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   326k|    {
 1627|   326k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   326k|        return this->get_value();
 1629|   326k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   326k|    {
  641|   326k|        return *value_ptr();
  642|   326k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|   326k|    {
 5708|   326k|        return ranges::begin(m_range);
 5709|   326k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   357k|    {
  631|   357k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 326k, False: 30.8k]
  ------------------
  632|   326k|            destroy_value();
  633|   326k|        }
  634|  30.8k|        else {
  635|  30.8k|            destroy_unexpected();
  636|  30.8k|        }
  637|   357k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   326k|    {
  696|   326k|        scn::detail::destroy_at(value_ptr());
  697|   326k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   326k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   326k|    else {
  404|   326k|        p->~T();
  405|   326k|    }
  406|   326k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  30.8k|    {
  700|  30.8k|        scn::detail::destroy_at(unexpected_ptr());
  701|  30.8k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8943|   145k|{
 8944|   145k|    auto args = make_scan_args<scan_context, Args...>();
 8945|   145k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8946|   145k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8947|   145k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8681|   145k|{
 8682|   145k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8683|   145k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8616|   145k|{
 8617|   145k|#if !SCN_DISABLE_LOCALE
 8618|   145k|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|   145k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|   145k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|   145k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 130k]
  |  |  ------------------
  ------------------
 8625|  14.2k|        return unexpected(result.error());
 8626|  14.2k|    }
 8627|   130k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|   145k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8982|  66.9k|{
 8983|  66.9k|    T value;
 8984|  66.9k|    auto arg = detail::make_arg<scan_context>(value);
 8985|  66.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  66.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  66.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  66.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.37k, False: 64.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.37k|    }                                                  \
  |  |  |  | 3667|  66.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  64.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8986|  64.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  64.5k|    static_cast<    \
  |  |  929|  64.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  64.5k|    static_cast<    \
  |  |  929|  64.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  66.9k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8694|  66.9k|{
 8695|  66.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  66.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8696|  66.9k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|  66.9k|{
 8641|  66.9k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|  66.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|  66.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.37k, False: 64.5k]
  |  |  ------------------
  ------------------
 8645|  2.37k|        return unexpected(result.error());
 8646|  2.37k|    }
 8647|  64.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  64.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|  66.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  64.5k|    {
 1663|  64.5k|        return std::move(value());
 1664|  64.5k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   128k|    {
 2724|   128k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   128k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   128k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   128k|    {
 2705|   128k|        return decay_copy(t.begin());
 2706|   128k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  41.8M|{
 1949|  41.8M|    return SCN_FWD(t);
  ------------------
  |  |  930|  41.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  41.8M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  12.0M|    {
 2781|  12.0M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  12.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  12.0M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  12.0M|    {
 2763|  12.0M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  12.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  12.0M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  4.83M|{
 5406|  4.83M|    detail::check_scan_arg_types<Args...>();
 5407|  4.83M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  4.83M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  6.02M|{
 5145|  6.02M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  6.02M|                  "Scan argument types must be default constructible");
 5147|  6.02M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  6.02M|                  "Scan argument types must be Destructible");
 5149|  6.02M|    static_assert(
 5150|  6.02M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  6.02M|        "Scan argument types must not be references");
 5152|  6.02M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  4.83M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  4.83M|    {
 5359|  4.83M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  4.83M|    {
 5370|  4.83M|        return {detail::make_arg<
 5371|  4.83M|            kind, Context,
 5372|  4.83M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  4.83M|                                 typename Context::char_type>::value>(args)...};
 5374|  4.83M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  4.83M|{
 5180|  4.83M|    return make_value<Context>(value).ref_value;
 5181|  4.83M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  6.02M|{
 5130|  6.02M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  6.02M|                                  needs_context_tag>) {
 5134|  6.02M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  6.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  6.02M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  6.02M|    {                                                                        \
 4969|  6.02M|        return val;                                                          \
 4970|  6.02M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  6.02M|{
 5099|  6.02M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  6.02M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  6.02M|    constexpr bool scannable_char =
 5103|  6.02M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  6.02M|    static_assert(scannable_char,
 5105|  6.02M|                  "Cannot scan an argument of an unsupported character "
 5106|  6.02M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  6.02M|    constexpr bool scannable_const =
 5109|  6.02M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  6.02M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  6.02M|    constexpr bool scannable_disabled =
 5113|  6.02M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  6.02M|    static_assert(scannable_disabled,
 5115|  6.02M|                  "Cannot scan an argument that has been disabled by "
 5116|  6.02M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  6.02M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  6.02M|    static_assert(
 5120|  6.02M|        scannable,
 5121|  6.02M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  6.02M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  6.02M|    return arg_value{arg};
 5125|  6.02M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  6.02M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  6.02M|    {
 4911|  6.02M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8600|  2.41M|{
 8601|  2.41M|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|  2.41M|    auto result = vscan_impl(buffer, format, args);
 8604|  2.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.0k, False: 2.35M]
  |  |  ------------------
  ------------------
 8605|  57.0k|        return unexpected(result.error());
 8606|  57.0k|    }
 8607|  2.35M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|  2.41M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|  6.02M|{
 4729|  6.02M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  6.02M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  6.02M|                  "\n"
 4733|  6.02M|                  "Unsupported range type given as input to a scanning "
 4734|  6.02M|                  "function.\n"
 4735|  6.02M|                  "A range needs to have a character type (value type) "
 4736|  6.02M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  6.02M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  6.02M|                  "to be included.\n"
 4739|  6.02M|                  "See the scnlib documentation for more details.");
 4740|  6.02M|    static_assert(
 4741|  6.02M|        !std::is_same_v<T, custom_char_traits>,
 4742|  6.02M|        "\n"
 4743|  6.02M|        "Unsupported range type given as input to a scanning "
 4744|  6.02M|        "function.\n"
 4745|  6.02M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  6.02M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  6.02M|        "not supported.");
 4748|  6.02M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  6.02M|                  "\n"
 4750|  6.02M|                  "Unsupported range type given as input to a scanning "
 4751|  6.02M|                  "function.\n"
 4752|  6.02M|                  "file_marker_found cannot be used as an "
 4753|  6.02M|                  "source range type to scn::scan.\n"
 4754|  6.02M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  6.02M|                  "and do not provide an explicit source range, "
 4756|  6.02M|                  "or use scn::scan with a FILE* directly.");
 4757|  6.02M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  6.02M|                  "\n"
 4759|  6.02M|                  "Unsupported range type given as input to a scanning "
 4760|  6.02M|                  "function.\n"
 4761|  6.02M|                  "In order to be scannable, a range needs to satisfy "
 4762|  6.02M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  6.02M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  6.02M|                  "\n"
 4765|  6.02M|                  "Unsupported range type given as input to a scanning "
 4766|  6.02M|                  "function.\n"
 4767|  6.02M|                  "A range needs to model forward_range and have a valid "
 4768|  6.02M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  6.02M|                  "Examples of scannable ranges are std::string, "
 4770|  6.02M|                  "std::string_view, "
 4771|  6.02M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  6.02M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  6.02M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  6.02M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  6.02M|{
 4668|  6.02M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  6.02M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  6.02M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  6.02M|    {
 2855|  6.02M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  6.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  6.02M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  6.02M|    {
 2836|  6.02M|        return t.data();
 2837|  6.02M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|  6.02M|    {
 3229|  6.02M|        return detail::to_address(ranges::begin(derived()));
 3230|  6.02M|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  17.8M|{
  326|  17.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  17.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  17.8M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   573M|{
  304|   573M|    return p;
  305|   573M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  11.9M|    {
 2724|  11.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  11.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  11.9M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  11.9M|    {
 2705|  11.9M|        return decay_copy(t.begin());
 2706|  11.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   505M|    {
 3326|   505M|        return m_iterator;
 3327|   505M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  6.02M|    {
 3185|  6.02M|        return static_cast<const D&>(*this);
 3186|  6.02M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  6.02M|    {
 2930|  6.02M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  6.02M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  6.02M|    {
 2896|  6.02M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  6.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  6.02M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  11.9M|    {
 3342|  11.9M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  11.9M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|   123k|        : base(unexpect, std::move(e.error())),
 1474|   123k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   123k|    {
 1476|   123k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|   123k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   123k|          m_has_value(false)
  446|   123k|    {
  447|   123k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  6.02M|    {
 1177|  6.02M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  5.89M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  5.89M|                      ranges::iterator_t<SourceRange>>) {
 5935|  5.89M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  5.89M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  11.8M|    {
 2724|  11.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  11.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  11.8M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  11.8M|    {
 2705|  11.8M|        return decay_copy(t.begin());
 2706|  11.8M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  5.89M|{
 5920|  5.89M|    return ranges::end(source);
 5921|  5.89M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.89M|    {
 2781|  5.89M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.89M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.89M|    {
 2763|  5.89M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.89M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   478M|    {
 3330|   478M|        return m_sentinel;
 3331|   478M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  5.89M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.89M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.89M|    {
 1430|  5.89M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  5.89M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.89M|    {
  437|  5.89M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7984|  2.41M|    {
 7985|  2.41M|        return m_str;
 7986|  2.41M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  4.83M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  4.83M|    {
 5436|  4.83M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  4.83M|    {
 5389|  4.83M|        return m_argptrs;
 5390|  4.83M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  7.24M|        : m_desc(desc), m_builtin_values(data)
 5487|  7.24M|    {
 5488|  7.24M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8829|  2.41M|{
 8830|  2.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.0k, False: 2.35M]
  |  |  ------------------
  ------------------
 8831|  57.0k|        return unexpected(result.error());
 8832|  57.0k|    }
 8833|  2.35M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  2.35M|    static_cast<    \
  |  |  929|  2.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  2.35M|    static_cast<    \
  |  |  929|  2.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  2.41M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  6.02M|    {
 1598|  6.02M|        return has_value();
 1599|  6.02M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  12.0M|    {
  485|  12.0M|        return m_has_value;
  486|  12.0M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|   123k|    {
 1604|   123k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   123k|        return this->get_unexpected().error();
 1606|   123k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   123k|    {
  468|   123k|        return m_unexpected;
  469|   123k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  61.7k|        : base(unexpect, std::move(e.error())),
 1474|  61.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  61.7k|    {
 1476|  61.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  61.7k|        : m_has_value(false)
  625|  61.7k|    {
  626|  61.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  61.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  61.7k|    {
  689|  61.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  61.7k|                                  std::forward<Args>(args)...);
  691|  61.7k|        m_has_value = false;
  692|  61.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   123k|    {
  718|   123k|        return reinterpret_cast<unexpected<E>*>(
  719|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   123k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.01M|    {
 1177|  3.01M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  4.71M|    {
 1653|  4.71M|        return value();
 1654|  4.71M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  5.89M|    {
 1627|  5.89M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.89M|        return this->get_value();
 1629|  5.89M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  5.89M|    {
  451|  5.89M|        return m_value;
  452|  5.89M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|  2.94M|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  2.94M|    {
 5840|  2.94M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  5.89M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  5.89M|    static_cast<    \
  |  |  929|  5.89M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  5.89M|    {
 5691|  5.89M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  5.89M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  5.89M|    static_cast<    \
  |  |  929|  5.89M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  5.89M|    {
 5626|  5.89M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  2.94M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.94M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.94M|    {
 1430|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  2.94M|        : m_has_value(true)
  615|  2.94M|    {
  616|  2.94M|        construct(std::forward<Args>(args)...);
  617|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  2.94M|    {
  682|  2.94M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  2.94M|        m_has_value = true;
  684|  2.94M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  2.94M|{
  392|  2.94M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  2.94M|        T(std::forward<Args>(args)...);
  394|  2.94M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|  2.94M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  8.84M|    {
  706|  8.84M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  8.84M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  8.84M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  5.89M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  4.83M|    {
 5384|  4.83M|        return m_args;
 5385|  4.83M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  4.83M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|   191M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   191M|    static_cast<    \
  |  |  929|   191M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   191M|    static_cast<    \
  |  |  929|   191M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   191M|    {
 3312|   191M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7705|  7.24M|{
 7706|  7.24M|    return s;
 7707|  7.24M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7677|  7.24M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  2.41M|        : m_str(r.str)
 7980|  2.41M|    {
 7981|  2.41M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  3.01M|    {
 1598|  3.01M|        return has_value();
 1599|  3.01M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  8.97M|    {
  675|  8.97M|        return m_has_value;
  676|  8.97M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  2.94M|    {
 1673|  2.94M|        return &value();
 1674|  2.94M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|  2.94M|    {
 1627|  2.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94M|        return this->get_value();
 1629|  2.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  2.94M|    {
  641|  2.94M|        return *value_ptr();
  642|  2.94M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  5.89M|    {
 5708|  5.89M|        return ranges::begin(m_range);
 5709|  5.89M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  3.01M|    {
  631|  3.01M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 2.94M, False: 61.7k]
  ------------------
  632|  2.94M|            destroy_value();
  633|  2.94M|        }
  634|  61.7k|        else {
  635|  61.7k|            destroy_unexpected();
  636|  61.7k|        }
  637|  3.01M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  2.94M|    {
  696|  2.94M|        scn::detail::destroy_at(value_ptr());
  697|  2.94M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  2.94M|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  2.94M|    else {
  404|  2.94M|        p->~T();
  405|  2.94M|    }
  406|  2.94M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  61.7k|    {
  700|  61.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  61.7k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8616|  2.41M|{
 8617|  2.41M|#if !SCN_DISABLE_LOCALE
 8618|  2.41M|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|  2.41M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|  2.41M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|  2.41M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|  2.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.0k, False: 2.35M]
  |  |  ------------------
  ------------------
 8625|  57.0k|        return unexpected(result.error());
 8626|  57.0k|    }
 8627|  2.35M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  2.35M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|  2.41M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  1.18M|{
 5165|  1.18M|    check_scan_arg_types<T>();
 5166|       |
 5167|  1.18M|    basic_scan_arg<Context> arg;
 5168|  1.18M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  1.18M|    arg.m_value = make_value<Context>(value);
 5170|  1.18M|    return arg;
 5171|  1.18M|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  9.03M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|  1.18M|{
 8641|  1.18M|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|  1.18M|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|  1.18M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 1.17M]
  |  |  ------------------
  ------------------
 8645|  9.50k|        return unexpected(result.error());
 8646|  9.50k|    }
 8647|  1.17M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|  1.18M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  1.17M|    {
 1663|  1.17M|        return std::move(value());
 1664|  1.17M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|  2.41M|{
 5406|  2.41M|    detail::check_scan_arg_types<Args...>();
 5407|  2.41M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  2.41M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|  3.01M|{
 5145|  3.01M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  3.01M|                  "Scan argument types must be default constructible");
 5147|  3.01M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  3.01M|                  "Scan argument types must be Destructible");
 5149|  3.01M|    static_assert(
 5150|  3.01M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  3.01M|        "Scan argument types must not be references");
 5152|  3.01M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|  2.41M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  2.41M|    {
 5359|  2.41M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  2.41M|    {
 5370|  2.41M|        return {detail::make_arg<
 5371|  2.41M|            kind, Context,
 5372|  2.41M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  2.41M|                                 typename Context::char_type>::value>(args)...};
 5374|  2.41M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|  2.41M|{
 5180|  2.41M|    return make_value<Context>(value).ref_value;
 5181|  2.41M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|  3.01M|{
 5130|  3.01M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  3.01M|                                  needs_context_tag>) {
 5134|  3.01M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  3.01M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|  3.01M|    {                                                                        \
 4969|  3.01M|        return val;                                                          \
 4970|  3.01M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|  3.01M|{
 5099|  3.01M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  3.01M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  3.01M|    constexpr bool scannable_char =
 5103|  3.01M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  3.01M|    static_assert(scannable_char,
 5105|  3.01M|                  "Cannot scan an argument of an unsupported character "
 5106|  3.01M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  3.01M|    constexpr bool scannable_const =
 5109|  3.01M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  3.01M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  3.01M|    constexpr bool scannable_disabled =
 5113|  3.01M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  3.01M|    static_assert(scannable_disabled,
 5115|  3.01M|                  "Cannot scan an argument that has been disabled by "
 5116|  3.01M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  3.01M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  3.01M|    static_assert(
 5120|  3.01M|        scannable,
 5121|  3.01M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  3.01M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  3.01M|    return arg_value{arg};
 5125|  3.01M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|  3.01M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  3.01M|    {
 4911|  3.01M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7984|  2.41M|    {
 7985|  2.41M|        return m_str;
 7986|  2.41M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  2.41M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  2.41M|    {
 5436|  2.41M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|  2.41M|    {
 5389|  2.41M|        return m_argptrs;
 5390|  2.41M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8829|  2.41M|{
 8830|  2.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.0k, False: 2.35M]
  |  |  ------------------
  ------------------
 8831|  57.0k|        return unexpected(result.error());
 8832|  57.0k|    }
 8833|  2.35M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  2.35M|    static_cast<    \
  |  |  929|  2.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  2.35M|    static_cast<    \
  |  |  929|  2.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  2.41M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  61.7k|        : base(unexpect, std::move(e.error())),
 1474|  61.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  61.7k|    {
 1476|  61.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  61.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  61.7k|          m_has_value(false)
  446|  61.7k|    {
  447|  61.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.01M|    {
 1177|  3.01M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|  2.94M|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  2.94M|    {
 5840|  2.94M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|  2.94M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  2.94M|    {
 5626|  2.94M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  2.94M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.94M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.94M|    {
 1430|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|  2.94M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.94M|    {
  437|  2.94M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|  2.41M|    {
 5384|  2.41M|        return m_args;
 5385|  2.41M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  2.41M|        : m_str(r.str)
 7980|  2.41M|    {
 7981|  2.41M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  3.01M|    {
 1598|  3.01M|        return has_value();
 1599|  3.01M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.95M|    {
  485|  5.95M|        return m_has_value;
  486|  5.95M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  2.94M|    {
 1673|  2.94M|        return &value();
 1674|  2.94M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|  2.94M|    {
 1627|  2.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94M|        return this->get_value();
 1629|  2.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.94M|    {
  451|  2.94M|        return m_value;
  452|  2.94M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   594k|{
 5165|   594k|    check_scan_arg_types<T>();
 5166|       |
 5167|   594k|    basic_scan_arg<Context> arg;
 5168|   594k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   594k|    arg.m_value = make_value<Context>(value);
 5170|   594k|    return arg;
 5171|   594k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  61.7k|    {
 2724|  61.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  61.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  61.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  61.7k|    {
 2705|  61.7k|        return decay_copy(t.begin());
 2706|  61.7k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   235M|{
 1949|   235M|    return SCN_FWD(t);
  ------------------
  |  |  930|   235M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   235M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.02M|    {
 2781|  6.02M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.02M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.02M|    {
 2763|  6.02M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.02M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.02M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8600|  1.20M|{
 8601|  1.20M|    auto buffer = make_scan_buffer(range);
 8602|       |
 8603|  1.20M|    auto result = vscan_impl(buffer, format, args);
 8604|  1.20M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 1.17M]
  |  |  ------------------
  ------------------
 8605|  28.5k|        return unexpected(result.error());
 8606|  28.5k|    }
 8607|  1.17M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8608|  1.20M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|  3.01M|{
 4729|  3.01M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  3.01M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  3.01M|                  "\n"
 4733|  3.01M|                  "Unsupported range type given as input to a scanning "
 4734|  3.01M|                  "function.\n"
 4735|  3.01M|                  "A range needs to have a character type (value type) "
 4736|  3.01M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  3.01M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  3.01M|                  "to be included.\n"
 4739|  3.01M|                  "See the scnlib documentation for more details.");
 4740|  3.01M|    static_assert(
 4741|  3.01M|        !std::is_same_v<T, custom_char_traits>,
 4742|  3.01M|        "\n"
 4743|  3.01M|        "Unsupported range type given as input to a scanning "
 4744|  3.01M|        "function.\n"
 4745|  3.01M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  3.01M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  3.01M|        "not supported.");
 4748|  3.01M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  3.01M|                  "\n"
 4750|  3.01M|                  "Unsupported range type given as input to a scanning "
 4751|  3.01M|                  "function.\n"
 4752|  3.01M|                  "file_marker_found cannot be used as an "
 4753|  3.01M|                  "source range type to scn::scan.\n"
 4754|  3.01M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  3.01M|                  "and do not provide an explicit source range, "
 4756|  3.01M|                  "or use scn::scan with a FILE* directly.");
 4757|  3.01M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  3.01M|                  "\n"
 4759|  3.01M|                  "Unsupported range type given as input to a scanning "
 4760|  3.01M|                  "function.\n"
 4761|  3.01M|                  "In order to be scannable, a range needs to satisfy "
 4762|  3.01M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  3.01M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  3.01M|                  "\n"
 4765|  3.01M|                  "Unsupported range type given as input to a scanning "
 4766|  3.01M|                  "function.\n"
 4767|  3.01M|                  "A range needs to model forward_range and have a valid "
 4768|  3.01M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  3.01M|                  "Examples of scannable ranges are std::string, "
 4770|  3.01M|                  "std::string_view, "
 4771|  3.01M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  3.01M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  3.01M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  3.01M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|  3.01M|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|  3.01M|    else {
 4714|  3.01M|        return make_forward_scan_buffer(r);
 4715|  3.01M|    }
 4716|  3.01M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|  3.01M|{
 4533|  3.01M|    return basic_scan_forward_buffer_impl(range);
 4534|  3.01M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|  3.01M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|  3.01M|          m_cursor(ranges::begin(*m_range))
 4419|  3.01M|    {
 4420|  3.01M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|  3.01M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|  3.01M|    {
 4391|  3.01M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|  3.01M|        : m_current_view(sv), m_is_contiguous(false)
 4158|  3.01M|    {
 4159|  3.01M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|  3.01M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  5.95M|    {
 2724|  5.95M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.95M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  5.95M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  5.95M|    {
 2705|  5.95M|        return decay_copy(t.begin());
 2706|  5.95M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  8.90M|    {
 3326|  8.90M|        return m_iterator;
 3327|  8.90M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  72.6M|    {
 4424|  72.6M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 51.5k, False: 72.5M]
  ------------------
 4425|  51.5k|            return false;
 4426|  51.5k|        }
 4427|  72.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  72.5M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  72.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  72.5M|        }
 4430|  72.5M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 69.5M, False: 2.97M]
  ------------------
 4431|  69.5M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  69.5M|                                          this->m_current_view.begin(),
 4433|  69.5M|                                          this->m_current_view.end());
 4434|  69.5M|        }
 4435|  72.5M|        m_latest = *m_cursor;
 4436|  72.5M|        ++m_cursor;
 4437|  72.5M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  72.5M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  72.5M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  72.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  72.5M|        }
 4441|  72.5M|        return true;
 4442|  72.6M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   217M|    {
 2781|   217M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   217M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   217M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   217M|    {
 2763|   217M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   217M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   217M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|   220M|    {
 3330|   220M|        return m_sentinel;
 3331|   220M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|  3.01M|    {
 4079|  3.01M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  3.01M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|  3.01M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  61.7k|        : base(unexpect, std::move(e.error())),
 1474|  61.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  61.7k|    {
 1476|  61.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  61.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  61.7k|          m_has_value(false)
  446|  61.7k|    {
  447|  61.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.01M|    {
 1177|  3.01M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  2.94M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  2.94M|                      ranges::iterator_t<SourceRange>>) {
 5935|  2.94M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  2.94M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.94M|    {
 2724|  2.94M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.94M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.94M|    {
 2705|  2.94M|        return decay_copy(t.begin());
 2706|  2.94M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|  2.94M|{
 5920|  2.94M|    return ranges::end(source);
 5921|  2.94M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.94M|    {
 2781|  2.94M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.94M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.94M|    {
 2763|  2.94M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.94M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.94M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  2.94M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.94M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.94M|    {
 1430|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  2.94M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.94M|    {
  437|  2.94M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7984|  2.41M|    {
 7985|  2.41M|        return m_str;
 7986|  2.41M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8829|  2.41M|{
 8830|  2.41M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.0k, False: 2.35M]
  |  |  ------------------
  ------------------
 8831|  57.0k|        return unexpected(result.error());
 8832|  57.0k|    }
 8833|  2.35M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  2.35M|    static_cast<    \
  |  |  929|  2.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  2.35M|    static_cast<    \
  |  |  929|  2.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8834|  2.41M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  3.01M|    {
 1598|  3.01M|        return has_value();
 1599|  3.01M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  6.02M|    {
  485|  6.02M|        return m_has_value;
  486|  6.02M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  61.7k|    {
 1604|  61.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  61.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  61.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  61.7k|        return this->get_unexpected().error();
 1606|  61.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  61.7k|    {
  468|  61.7k|        return m_unexpected;
  469|  61.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  61.7k|        : base(unexpect, std::move(e.error())),
 1474|  61.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  61.7k|    {
 1476|  61.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  61.7k|        : m_has_value(false)
  625|  61.7k|    {
  626|  61.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  61.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  61.7k|    {
  689|  61.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  61.7k|                                  std::forward<Args>(args)...);
  691|  61.7k|        m_has_value = false;
  692|  61.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|   123k|    {
  718|   123k|        return reinterpret_cast<unexpected<E>*>(
  719|   123k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|   123k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|   123k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.01M|    {
 1177|  3.01M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  2.35M|    {
 1653|  2.35M|        return value();
 1654|  2.35M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  2.94M|    {
 1627|  2.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94M|        return this->get_value();
 1629|  2.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.94M|    {
  451|  2.94M|        return m_value;
  452|  2.94M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|  2.94M|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  2.94M|    {
 5840|  2.94M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|  2.94M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  2.94M|    {
 5691|  2.94M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|  2.94M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.94M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.94M|    {
 1430|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|  2.94M|        : m_has_value(true)
  615|  2.94M|    {
  616|  2.94M|        construct(std::forward<Args>(args)...);
  617|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  2.94M|    {
  682|  2.94M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  2.94M|        m_has_value = true;
  684|  2.94M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  2.94M|{
  392|  2.94M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  2.94M|        T(std::forward<Args>(args)...);
  394|  2.94M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5831|  2.94M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  8.84M|    {
  706|  8.84M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  8.84M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  8.84M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5835|  5.89M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  5.95M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.95M|    static_cast<    \
  |  |  929|  5.95M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.95M|    static_cast<    \
  |  |  929|  5.95M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.95M|    {
 3312|  5.95M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7979|  2.41M|        : m_str(r.str)
 7980|  2.41M|    {
 7981|  2.41M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  3.01M|    {
 1598|  3.01M|        return has_value();
 1599|  3.01M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  8.97M|    {
  675|  8.97M|        return m_has_value;
  676|  8.97M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  2.94M|    {
 1673|  2.94M|        return &value();
 1674|  2.94M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|  2.94M|    {
 1627|  2.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94M|        return this->get_value();
 1629|  2.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  2.94M|    {
  641|  2.94M|        return *value_ptr();
  642|  2.94M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|  2.94M|    {
 5708|  2.94M|        return ranges::begin(m_range);
 5709|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  3.01M|    {
  631|  3.01M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 2.94M, False: 61.7k]
  ------------------
  632|  2.94M|            destroy_value();
  633|  2.94M|        }
  634|  61.7k|        else {
  635|  61.7k|            destroy_unexpected();
  636|  61.7k|        }
  637|  3.01M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  2.94M|    {
  696|  2.94M|        scn::detail::destroy_at(value_ptr());
  697|  2.94M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|  2.94M|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  2.94M|    else {
  404|  2.94M|        p->~T();
  405|  2.94M|    }
  406|  2.94M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  61.7k|    {
  700|  61.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  61.7k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8616|  1.20M|{
 8617|  1.20M|#if !SCN_DISABLE_LOCALE
 8618|  1.20M|    auto buffer = detail::make_scan_buffer(range);
 8619|       |
 8620|  1.20M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8621|  1.20M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8622|  1.20M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8623|       |
 8624|  1.20M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 1.17M]
  |  |  ------------------
  ------------------
 8625|  28.5k|        return unexpected(result.error());
 8626|  28.5k|    }
 8627|  1.17M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8628|       |#else
 8629|       |    static_assert(dependent_false<Locale>::value,
 8630|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8631|       |
 8632|       |    return {};
 8633|       |#endif
 8634|  1.20M|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8640|   594k|{
 8641|   594k|    auto buffer = detail::make_scan_buffer(range);
 8642|       |
 8643|   594k|    auto result = detail::vscan_value_impl(buffer, arg);
 8644|   594k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   594k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 589k]
  |  |  ------------------
  ------------------
 8645|  4.75k|        return unexpected(result.error());
 8646|  4.75k|    }
 8647|   589k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   589k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8648|   594k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   589k|    {
 1663|   589k|        return std::move(value());
 1664|   589k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   363k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   363k|    {
 3564|   363k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   363k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   363k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  30.9M|    {
 3570|  30.9M|        return m_code == good;
 3571|  30.9M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|   128k|    {
 3581|   128k|        return m_code;
 3582|   128k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  14.2M|    {
 3326|  14.2M|        return m_iterator;
 3327|  14.2M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|   243M|    {
 3326|   243M|        return m_iterator;
 3327|   243M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  4.10M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6291|  85.5k|    {
 6292|  85.5k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6292:13): [True: 0, False: 85.5k]
  |  Branch (6292:39): [True: 0, False: 0]
  ------------------
 6293|       |            // clang-format off
 6294|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6295|       |            // clang-format on
 6296|      0|        }
 6297|       |
 6298|  85.5k|        m_specs.width = width;
 6299|  85.5k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6312|  4.01M|    {
 6313|  4.01M|        m_specs.type = type;
 6314|  4.01M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6329|  99.7k|    {
 6330|  99.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6331|  99.7k|        const auto end_value = static_cast<unsigned>(end);
 6332|  99.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  99.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6333|       |
 6334|  99.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  99.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 99.7k, False: 0]
  |  |  ------------------
  ------------------
 6335|       |            // No need to bit-twiddle with a mask, because with the
 6336|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6337|  99.7k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  99.7k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6338|  2.69M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6338:40): [True: 2.59M, False: 99.7k]
  ------------------
 6339|  2.59M|                m_specs.charset_literals[v / 8] |=
 6340|  2.59M|                    static_cast<unsigned char>(1ul << (v % 8));
 6341|  2.59M|            }
 6342|  99.7k|        }
 6343|      0|        else {
 6344|      0|            m_specs.charset_has_nonascii = true;
 6345|      0|        }
 6346|  99.7k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6374|  85.5k|    {
 6375|  85.5k|        SCN_UNLIKELY_ATTR
 6376|  85.5k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6377|  85.5k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6385|  4.25M|    {
 6386|  4.25M|        return static_cast<bool>(m_error);
 6387|  4.25M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|   128k|{
 3605|   128k|    return a.code() == b;
 3606|   128k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|   128k|{
 3609|   128k|    return !(a == b);
 3610|   128k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|   222M|{
 4043|       |    // Pattern_White_Space property
 4044|   222M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 64.4M, False: 157M]
  |  Branch (4044:27): [True: 9.27M, False: 55.1M]
  ------------------
 4045|   222M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 9.49M, False: 203M]
  ------------------
 4046|   222M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 1.42M, False: 202M]
  ------------------
 4047|   222M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 571k, False: 201M]
  ------------------
 4048|   222M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 649k, False: 200M]
  ------------------
 4049|   222M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 323k, False: 200M]
  ------------------
 4050|   222M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 285, False: 200M]
  ------------------
 4051|   222M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7072|  42.7k|{
 7073|  42.7k|    switch (type) {
 7074|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 42.7k]
  ------------------
 7075|      0|            return arg_type_category::none;
 7076|       |
 7077|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 42.7k]
  ------------------
 7078|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 42.7k]
  ------------------
 7079|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 42.7k]
  ------------------
 7080|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 42.7k]
  ------------------
 7081|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 42.7k]
  ------------------
 7082|      0|            return arg_type_category::integer;
 7083|       |
 7084|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7084:9): [True: 0, False: 42.7k]
  ------------------
 7085|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 42.7k]
  ------------------
 7086|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 42.7k]
  ------------------
 7087|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 42.7k]
  ------------------
 7088|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 42.7k]
  ------------------
 7089|      0|            return arg_type_category::unsigned_integer;
 7090|       |
 7091|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 42.7k]
  ------------------
 7092|      0|            return arg_type_category::pointer;
 7093|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7093:9): [True: 0, False: 42.7k]
  ------------------
 7094|      0|            return arg_type_category::boolean;
 7095|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7095:9): [True: 0, False: 42.7k]
  ------------------
 7096|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 42.7k]
  ------------------
 7097|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 42.7k]
  ------------------
 7098|      0|            return arg_type_category::character;
 7099|       |
 7100|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7100:9): [True: 0, False: 42.7k]
  ------------------
 7101|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 42.7k]
  ------------------
 7102|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 42.7k]
  ------------------
 7103|      0|            return arg_type_category::floating;
 7104|       |
 7105|  4.75k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7105:9): [True: 4.75k, False: 38.0k]
  ------------------
 7106|  14.2k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7106:9): [True: 9.50k, False: 33.2k]
  ------------------
 7107|  23.7k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7107:9): [True: 9.50k, False: 33.2k]
  ------------------
 7108|  42.7k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7108:9): [True: 19.0k, False: 23.7k]
  ------------------
 7109|  42.7k|            return arg_type_category::string;
 7110|       |
 7111|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7111:9): [True: 0, False: 42.7k]
  ------------------
 7112|      0|            return arg_type_category::custom;
 7113|       |
 7114|      0|            SCN_CLANG_PUSH
 7115|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7116|      0|        default:
  ------------------
  |  Branch (7116:9): [True: 0, False: 42.7k]
  ------------------
 7117|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7118|  42.7k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7119|  42.7k|            SCN_CLANG_POP
 7120|  42.7k|    }
 7121|       |
 7122|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7123|  42.7k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  42.7k|{
 3650|  42.7k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  42.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  42.7k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  53.1k|{
 3650|  53.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  53.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  53.1k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  27.1k|{
 3650|  27.1k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  27.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  27.1k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7214|  4.01M|{
 7215|  4.01M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7215:9): [True: 0, False: 4.01M]
  ------------------
 7216|  4.01M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7216:9): [True: 3.92M, False: 92.6k]
  ------------------
 7217|  4.01M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7217:9): [True: 49.8k, False: 42.7k]
  ------------------
 7218|  4.01M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7218:9): [True: 0, False: 42.7k]
  ------------------
 7219|  4.01M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7219:9): [True: 0, False: 42.7k]
  ------------------
 7220|  3.97M|        return;
 7221|  3.97M|    }
 7222|  42.7k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7222:9): [True: 42.7k, False: 0]
  ------------------
 7223|  42.7k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  42.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.7k, False: 0]
  |  |  ------------------
  ------------------
 7224|       |            // clang-format off
 7225|  42.7k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7226|       |            // clang-format on
 7227|  42.7k|        }
 7228|      0|        return;
 7229|  42.7k|    }
 7230|      0|    SCN_UNLIKELY_ATTR
 7231|      0|    handler.on_error("Invalid type specifier for string");
 7232|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  77.2M|    {
 4203|  77.2M|        assert(m_begin);
 4204|  77.2M|        return m_end == nullptr;
 4205|  77.2M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   325k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   325k|    else {
 3716|   325k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   325k|    }
 3718|   325k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|  1.67M|    {
 4220|  1.67M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 1.67M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  1.67M|        return parent()->get_segment_starting_at(position());
 4226|  1.67M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  45.0M|    {
 4214|  45.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  45.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  45.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  45.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|  1.67M|    {
 4109|  1.67M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 961k, False: 714k]
  |  |  ------------------
  ------------------
 4110|  1.67M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   961k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   961k|        }
 4113|   714k|        const auto start = pos - m_putback_buffer.size();
 4114|   714k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   714k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   714k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   714k|        return m_current_view.substr(start);
 4116|   714k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|  1.88M|    {
 4198|  1.88M|        return m_position;
 4199|  1.88M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|  1.07M|    {
 4131|  1.07M|        return m_is_contiguous;
 4132|  1.07M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|  1.32G|    {
 4203|  1.32G|        assert(m_begin);
 4204|  1.32G|        return m_end == nullptr;
 4205|  1.32G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  2.95M|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  2.95M|    else {
 3716|  2.95M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  2.95M|    }
 3718|  2.95M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  8.91M|    {
 4220|  8.91M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 8.91M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  8.91M|        return parent()->get_segment_starting_at(position());
 4226|  8.91M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|   769M|    {
 4214|   769M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   769M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   769M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   769M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   769M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  8.91M|    {
 4109|  8.91M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  8.91M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.91M, False: 2.99M]
  |  |  ------------------
  ------------------
 4110|  8.91M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  5.91M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  5.91M|        }
 4113|  2.99M|        const auto start = pos - m_putback_buffer.size();
 4114|  2.99M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  2.99M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.99M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|  2.99M|        return m_current_view.substr(start);
 4116|  2.99M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  10.7M|    {
 4198|  10.7M|        return m_position;
 4199|  10.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  9.03M|    {
 4131|  9.03M|        return m_is_contiguous;
 4132|  9.03M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.65M|    {
 3180|  1.65M|        return static_cast<D&>(*this);
 3181|  1.65M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  1.65M|    {
 3221|  1.65M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.65M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  5.93M|    {
 3180|  5.93M|        return static_cast<D&>(*this);
 3181|  5.93M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  5.93M|    {
 3221|  5.93M|        return detail::to_address(ranges::begin(derived()));
 3222|  5.93M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8178|   146k|    {
 8179|   146k|        return ranges::subrange{begin(), end()};
 8180|   146k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8162|   435k|    {
 8163|   435k|        return m_current;
 8164|   435k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8170|   146k|    {
 8171|   146k|        return ranges::default_sentinel;
 8172|   146k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  5.21M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.21M|    static_cast<    \
  |  |  929|  5.21M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  5.21M|    static_cast<    \
  |  |  929|  5.21M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  5.21M|    {
 3312|  5.21M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8000|  9.94M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   335k|    {
 1837|   335k|        return detail::transform_error_impl(std::move(*this),
 1838|   335k|                                            std::forward<F>(f));
 1839|   335k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   335k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   335k|    else {
 1333|   335k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   335k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   335k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 331k, False: 4.47k]
  |  |  ------------------
  ------------------
 1335|   335k|                   ? result(*std::forward<Exp>(exp))
 1336|   335k|                   : result(unexpect,
 1337|  4.47k|                            trivial_invoke(std::forward<F>(f),
 1338|  4.47k|                                           std::forward<Exp>(exp).error()));
 1339|   335k|    }
 1340|   335k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   671k|    {
  485|   671k|        return m_has_value;
  486|   671k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   331k|    {
 1663|   331k|        return std::move(value());
 1664|   331k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   331k|    {
 1627|   331k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   331k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   331k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   331k|        return this->get_value();
 1629|   331k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   331k|    {
  451|   331k|        return m_value;
  452|   331k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   789k|        : base(std::in_place, std::forward<U>(val)),
 1428|   789k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   789k|    {
 1430|   789k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   789k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   789k|    {
  437|   789k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   830k|    {
 1177|   830k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  26.6k|{
 1211|  26.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  26.6k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  4.47k|    {
 1614|  4.47k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.47k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.47k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  4.47k|        return std::move(this->get_unexpected().error());
 1616|  4.47k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  4.47k|    {
  468|  4.47k|        return m_unexpected;
  469|  4.47k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  53.3k|    {
  361|  53.3k|        return m_unexpected;
  362|  53.3k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  4.47k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  4.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  4.47k|    {
 1486|  4.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  38.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  38.1k|          m_has_value(false)
  446|  38.1k|    {
  447|  38.1k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8178|  1.20M|    {
 8179|  1.20M|        return ranges::subrange{begin(), end()};
 8180|  1.20M|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8162|  3.61M|    {
 8163|  3.61M|        return m_current;
 8164|  3.61M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8170|  1.20M|    {
 8171|  1.20M|        return ranges::default_sentinel;
 8172|  1.20M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  86.8M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  86.8M|    static_cast<    \
  |  |  929|  86.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  86.8M|    static_cast<    \
  |  |  929|  86.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  86.8M|    {
 3312|  86.8M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  2.97M|    {
 1837|  2.97M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.97M|                                            std::forward<F>(f));
 1839|  2.97M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  2.97M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.97M|    else {
 1333|  2.97M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.97M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.96M, False: 5.16k]
  |  |  ------------------
  ------------------
 1335|  2.97M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.97M|                   : result(unexpect,
 1337|  5.16k|                            trivial_invoke(std::forward<F>(f),
 1338|  5.16k|                                           std::forward<Exp>(exp).error()));
 1339|  2.97M|    }
 1340|  2.97M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  5.94M|    {
  485|  5.94M|        return m_has_value;
  486|  5.94M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  2.96M|    {
 1663|  2.96M|        return std::move(value());
 1664|  2.96M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  2.96M|    {
 1627|  2.96M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.96M|        return this->get_value();
 1629|  2.96M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.96M|    {
  451|  2.96M|        return m_value;
  452|  2.96M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  7.09M|        : base(std::in_place, std::forward<U>(val)),
 1428|  7.09M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  7.09M|    {
 1430|  7.09M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  7.09M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  7.09M|    {
  437|  7.09M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  7.17M|    {
 1177|  7.17M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  5.16k|    {
 1614|  5.16k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  5.16k|        return std::move(this->get_unexpected().error());
 1616|  5.16k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  5.16k|    {
  468|  5.16k|        return m_unexpected;
  469|  5.16k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  5.16k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  5.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  5.16k|    {
 1486|  5.16k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  74.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  74.3k|          m_has_value(false)
  446|  74.3k|    {
  447|  74.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|   123k|        : m_unexpected(std::forward<Err>(e))
  346|   123k|    {
  347|   123k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   123k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   123k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  68.5k|        : base(unexpect, std::move(e.error())),
 1474|  68.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  68.5k|    {
 1476|  68.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  75.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  75.3k|          m_has_value(false)
  446|  75.3k|    {
  447|  75.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.37M|    {
 1177|  1.37M|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  1.29M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.29M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.29M|    {
 1430|  1.29M|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.29M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.29M|    {
  437|  1.29M|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|  1.37M|    {
 1598|  1.37M|        return has_value();
 1599|  1.37M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  2.75M|    {
  485|  2.75M|        return m_has_value;
  486|  2.75M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  75.3k|    {
 1604|  75.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  75.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  75.3k|        return this->get_unexpected().error();
 1606|  75.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  75.3k|    {
  468|  75.3k|        return m_unexpected;
  469|  75.3k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  1.08M|    {
 1663|  1.08M|        return std::move(value());
 1664|  1.08M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  1.30M|    {
 1627|  1.30M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.30M|        return this->get_value();
 1629|  1.30M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|  1.30M|    {
  451|  1.30M|        return m_value;
  452|  1.30M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|   138k|        : base(unexpect, std::move(e.error())),
 1474|   138k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   138k|    {
 1476|   138k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|   148k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   148k|          m_has_value(false)
  446|   148k|    {
  447|   148k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  14.3M|    {
 1177|  14.3M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  14.1M|        : base(std::in_place, std::forward<U>(val)),
 1428|  14.1M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  14.1M|    {
 1430|  14.1M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  14.1M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  14.1M|    {
  437|  14.1M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  14.3M|    {
 1598|  14.3M|        return has_value();
 1599|  14.3M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  28.6M|    {
  485|  28.6M|        return m_has_value;
  486|  28.6M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|   148k|    {
 1604|   148k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   148k|        return this->get_unexpected().error();
 1606|   148k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   148k|    {
  468|   148k|        return m_unexpected;
  469|   148k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  11.8M|    {
 1663|  11.8M|        return std::move(value());
 1664|  11.8M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  14.1M|    {
 1627|  14.1M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  14.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  14.1M|        return this->get_value();
 1629|  14.1M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  14.1M|    {
  451|  14.1M|        return m_value;
  452|  14.1M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   554k|    {
 1837|   554k|        return detail::transform_error_impl(std::move(*this),
 1838|   554k|                                            std::forward<F>(f));
 1839|   554k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   554k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   554k|    else {
 1333|   554k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   554k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   554k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 547k, False: 6.72k]
  |  |  ------------------
  ------------------
 1335|   554k|                   ? result(*std::forward<Exp>(exp))
 1336|   554k|                   : result(unexpect,
 1337|  6.72k|                            trivial_invoke(std::forward<F>(f),
 1338|  6.72k|                                           std::forward<Exp>(exp).error()));
 1339|   554k|    }
 1340|   554k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.10M|    {
  485|  1.10M|        return m_has_value;
  486|  1.10M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   547k|    {
 1663|   547k|        return std::move(value());
 1664|   547k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   547k|    {
 1627|   547k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   547k|        return this->get_value();
 1629|   547k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   547k|    {
  451|   547k|        return m_value;
  452|   547k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  6.72k|    {
 1614|  6.72k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  6.72k|        return std::move(this->get_unexpected().error());
 1616|  6.72k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  6.72k|    {
  468|  6.72k|        return m_unexpected;
  469|  6.72k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  6.72k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  6.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  6.72k|    {
 1486|  6.72k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  22.6M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  33.6k|        : base(unexpect, std::move(e.error())),
 1474|  33.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  33.6k|    {
 1476|  33.6k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  4.07M|    {
 4289|  4.07M|        return x.is_at_end();
 4290|  4.07M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  8.32M|    {
 4333|  8.32M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 8.32M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  8.32M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 8.32M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  8.32M|        return !read_at_position();
 4340|  8.32M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  22.8M|    {
 4313|  22.8M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  22.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  22.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 22.8M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  22.8M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  22.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 18.5M, False: 4.29M]
  |  |  ------------------
  ------------------
 4320|  18.5M|            return true;
 4321|  18.5M|        }
 4322|       |
 4323|  8.54M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 4.29M, False: 4.25M]
  ------------------
 4324|  4.29M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 37.9k, False: 4.25M]
  ------------------
 4325|  37.9k|                return false;
 4326|  37.9k|            }
 4327|  4.29M|        }
 4328|  4.25M|        return true;
 4329|  4.29M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  31.4M|    {
 4089|  31.4M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  31.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  7.64M|    {
 4248|  7.64M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  7.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  7.64M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 7.64M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  7.64M|        auto res = read_at_position();
 4257|  7.64M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  7.64M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.64M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  7.64M|        return parent()->get_character_at(m_position);
 4259|  7.64M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  7.64M|    {
 4120|  7.64M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  7.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.15M, False: 3.48M]
  |  |  ------------------
  ------------------
 4121|  7.64M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  4.15M|            return m_putback_buffer[pos];
 4123|  4.15M|        }
 4124|  3.48M|        const auto start = pos - m_putback_buffer.size();
 4125|  3.48M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  3.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  3.48M|        return m_current_view[start];
 4127|  3.48M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   331k|        : base(std::in_place, std::forward<U>(val)),
 1428|   331k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   331k|    {
 1430|   331k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   331k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   331k|    {
  437|   331k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   335k|    {
 1177|   335k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  4.47k|        : base(unexpect, std::move(e.error())),
 1474|  4.47k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.47k|    {
 1476|  4.47k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  4.47k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.47k|          m_has_value(false)
  446|  4.47k|    {
  447|  4.47k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  26.6k|        : m_unexpected(std::forward<Args>(args)...)
  355|  26.6k|    {
  356|  26.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  26.6k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  2.92M|    {
 4283|  2.92M|        return !(lhs == rhs);
 4284|  2.92M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  2.93M|    {
 4278|  2.93M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 2.93M, False: 0]
  |  Branch (4278:46): [True: 482k, False: 2.45M]
  ------------------
 4279|  2.93M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  6.90M|    {
 4234|  6.90M|        ++m_position;
 4235|  6.90M|        (void)read_at_position();
 4236|  6.90M|        return *this;
 4237|  6.90M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  26.6k|        : m_unexpected(std::forward<Err>(e))
  346|  26.6k|    {
  347|  26.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  26.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  26.6k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.95k|        : base(unexpect, std::move(e.error())),
 1474|  1.95k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.95k|    {
 1476|  1.95k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.95k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.95k|          m_has_value(false)
  446|  1.95k|    {
  447|  1.95k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   272k|    {
 1177|   272k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   271k|        : base(std::in_place, std::forward<U>(val)),
 1428|   271k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   271k|    {
 1430|   271k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   271k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   271k|    {
  437|   271k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   272k|    {
 1598|   272k|        return has_value();
 1599|   272k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   545k|    {
  485|   545k|        return m_has_value;
  486|   545k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.95k|    {
 1604|  1.95k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.95k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.95k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.95k|        return this->get_unexpected().error();
 1606|  1.95k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.95k|    {
  468|  1.95k|        return m_unexpected;
  469|  1.95k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   271k|    {
 1663|   271k|        return std::move(value());
 1664|   271k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   271k|    {
 1627|   271k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   271k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   271k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   271k|        return this->get_value();
 1629|   271k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   271k|    {
  451|   271k|        return m_value;
  452|   271k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  12.7M|    {
 3330|  12.7M|        return m_sentinel;
 3331|  12.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   349k|    {
 3326|   349k|        return m_iterator;
 3327|   349k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   349k|    {
 3330|   349k|        return m_sentinel;
 3331|   349k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   830k|    {
 1598|   830k|        return has_value();
 1599|   830k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.66M|    {
  485|  1.66M|        return m_has_value;
  486|  1.66M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  38.1k|    {
 1604|  38.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  38.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  38.1k|        return this->get_unexpected().error();
 1606|  38.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  38.1k|    {
  468|  38.1k|        return m_unexpected;
  469|  38.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   657k|    {
 1663|   657k|        return std::move(value());
 1664|   657k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   791k|    {
 1627|   791k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   791k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   791k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   791k|        return this->get_value();
 1629|   791k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   791k|    {
  451|   791k|        return m_value;
  452|   791k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   333k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   333k|    static_cast<    \
  |  |  929|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   333k|    static_cast<    \
  |  |  929|   333k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   333k|    {
 3312|   333k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  4.25M|    {
 4300|  4.25M|        return !x.is_at_end();
 4301|  4.25M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  6.72k|        : base(unexpect, std::move(e.error())),
 1474|  6.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.72k|    {
 1476|  6.72k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  6.72k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.72k|          m_has_value(false)
  446|  6.72k|    {
  447|  6.72k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   554k|    {
 1177|   554k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   547k|        : base(std::in_place, std::forward<U>(val)),
 1428|   547k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   547k|    {
 1430|   547k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   547k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   547k|    {
  437|   547k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.68k|        : base(unexpect, std::move(e.error())),
 1474|  2.68k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.68k|    {
 1476|  2.68k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.68k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.68k|          m_has_value(false)
  446|  2.68k|    {
  447|  2.68k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   449k|    {
 1177|   449k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   447k|        : base(std::in_place, std::forward<U>(val)),
 1428|   447k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   447k|    {
 1430|   447k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   447k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   447k|    {
  437|   447k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   449k|    {
 1598|   449k|        return has_value();
 1599|   449k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   899k|    {
  485|   899k|        return m_has_value;
  486|   899k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  2.68k|    {
 1604|  2.68k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.68k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.68k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.68k|        return this->get_unexpected().error();
 1606|  2.68k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.68k|    {
  468|  2.68k|        return m_unexpected;
  469|  2.68k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   447k|    {
 1663|   447k|        return std::move(value());
 1664|   447k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   447k|    {
 1627|   447k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   447k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   447k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   447k|        return this->get_value();
 1629|   447k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   447k|    {
  451|   447k|        return m_value;
  452|   447k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.65M|    {
 2855|  1.65M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.65M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.65M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.65M|    {
 2836|  1.65M|        return t.data();
 2837|  1.65M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   277k|        : base(unexpect, std::move(e.error())),
 1474|   277k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   277k|    {
 1476|   277k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   277k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   277k|          m_has_value(false)
  446|   277k|    {
  447|   277k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  9.98M|    {
 1177|  9.98M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  9.70M|        : base(std::in_place, std::forward<U>(val)),
 1428|  9.70M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  9.70M|    {
 1430|  9.70M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  9.70M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  9.70M|    {
  437|  9.70M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   134k|    {
 1653|   134k|        return value();
 1654|   134k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   220k|    {
 1653|   220k|        return value();
 1654|   220k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|  2.09k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.09k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.09k|    {
 1430|  2.09k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.09k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.09k|    {
  437|  2.09k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  4.19k|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.19k|    {
 1430|  4.19k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.19k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.19k|    {
  437|  4.19k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  69.2k|        : base(unexpect, std::move(e.error())),
 1474|  69.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  69.2k|    {
 1476|  69.2k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  77.3M|    {
 4289|  77.3M|        return x.is_at_end();
 4290|  77.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|   151M|    {
 4333|   151M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 151M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|   151M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 151M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|   151M|        return !read_at_position();
 4340|   151M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|   397M|    {
 4313|   397M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   397M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   397M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   397M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 397M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   397M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   397M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 324M, False: 72.6M]
  |  |  ------------------
  ------------------
 4320|   324M|            return true;
 4321|   324M|        }
 4322|       |
 4323|   145M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 72.6M, False: 72.5M]
  ------------------
 4324|  72.6M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 51.5k, False: 72.5M]
  ------------------
 4325|  51.5k|                return false;
 4326|  51.5k|            }
 4327|  72.6M|        }
 4328|  72.5M|        return true;
 4329|  72.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|   542M|    {
 4089|   542M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   542M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|   146M|    {
 4248|   146M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   146M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|   146M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 146M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|   146M|        auto res = read_at_position();
 4257|   146M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   146M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|   146M|        return parent()->get_character_at(m_position);
 4259|   146M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|   146M|    {
 4120|   146M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   146M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 76.5M, False: 69.6M]
  |  |  ------------------
  ------------------
 4121|   146M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  76.5M|            return m_putback_buffer[pos];
 4123|  76.5M|        }
 4124|  69.6M|        const auto start = pos - m_putback_buffer.size();
 4125|  69.6M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  69.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  69.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  69.6M|        return m_current_view[start];
 4127|  69.6M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   403M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   403M|    else {
 3810|       |        // utf-32
 3811|   403M|        static_assert(sizeof(U) == 4);
 3812|   403M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   403M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   403M|        return 1;
 3814|   403M|    }
 3815|   403M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  2.96M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.96M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.96M|    {
 1430|  2.96M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.96M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.96M|    {
  437|  2.96M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.97M|    {
 1177|  2.97M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  5.16k|        : base(unexpect, std::move(e.error())),
 1474|  5.16k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.16k|    {
 1476|  5.16k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  5.16k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.16k|          m_has_value(false)
  446|  5.16k|    {
  447|  5.16k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  28.4M|    {
 4283|  28.4M|        return !(lhs == rhs);
 4284|  28.4M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  28.4M|    {
 4278|  28.4M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 28.4M, False: 0]
  |  Branch (4278:46): [True: 1.19M, False: 27.2M]
  ------------------
 4279|  28.4M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  99.8M|    {
 4234|  99.8M|        ++m_position;
 4235|  99.8M|        (void)read_at_position();
 4236|  99.8M|        return *this;
 4237|  99.8M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   403M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   403M|    else {
 4016|   403M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   403M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   403M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   403M|        auto cp = static_cast<char32_t>(input.front());
 4018|   403M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   403M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.48M, False: 400M]
  |  |  ------------------
  ------------------
 4019|  2.48M|            return invalid_code_point;
 4020|  2.48M|        }
 4021|   400M|        return cp;
 4022|   403M|    }
 4023|   403M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  2.06k|        : base(unexpect, std::move(e.error())),
 1474|  2.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.06k|    {
 1476|  2.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  2.06k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.06k|          m_has_value(false)
  446|  2.06k|    {
  447|  2.06k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.37M|    {
 1177|  2.37M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.37M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.37M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.37M|    {
 1430|  2.37M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  2.37M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.37M|    {
  437|  2.37M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  2.37M|    {
 1598|  2.37M|        return has_value();
 1599|  2.37M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.75M|    {
  485|  4.75M|        return m_has_value;
  486|  4.75M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  2.06k|    {
 1604|  2.06k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.06k|        return this->get_unexpected().error();
 1606|  2.06k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.06k|    {
  468|  2.06k|        return m_unexpected;
  469|  2.06k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  2.37M|    {
 1663|  2.37M|        return std::move(value());
 1664|  2.37M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  2.37M|    {
 1627|  2.37M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.37M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.37M|        return this->get_value();
 1629|  2.37M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.37M|    {
  451|  2.37M|        return m_value;
  452|  2.37M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|   233M|    {
 3330|   233M|        return m_sentinel;
 3331|   233M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|  2.98M|    {
 3326|  2.98M|        return m_iterator;
 3327|  2.98M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|  2.98M|    {
 3330|  2.98M|        return m_sentinel;
 3331|  2.98M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  7.17M|    {
 1598|  7.17M|        return has_value();
 1599|  7.17M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  14.3M|    {
  485|  14.3M|        return m_has_value;
  486|  14.3M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  74.3k|    {
 1604|  74.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  74.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  74.3k|        return this->get_unexpected().error();
 1606|  74.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  74.3k|    {
  468|  74.3k|        return m_unexpected;
  469|  74.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  5.91M|    {
 1663|  5.91M|        return std::move(value());
 1664|  5.91M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  7.09M|    {
 1627|  7.09M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  7.09M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.09M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  7.09M|        return this->get_value();
 1629|  7.09M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  7.09M|    {
  451|  7.09M|        return m_value;
  452|  7.09M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|   185M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|   185M|    else {
 3701|   185M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|   185M|                                       to_address(first), to_address(last)))};
 3703|   185M|    }
 3704|   185M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   555M|{
  326|   555M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   555M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   555M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  2.96M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.96M|    static_cast<    \
  |  |  929|  2.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.96M|    static_cast<    \
  |  |  929|  2.96M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.96M|    {
 3312|  2.96M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  73.7M|    {
 4300|  73.7M|        return !x.is_at_end();
 4301|  73.7M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  10.3k|        : base(unexpect, std::move(e.error())),
 1474|  10.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  10.3k|    {
 1476|  10.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  10.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  10.3k|          m_has_value(false)
  446|  10.3k|    {
  447|  10.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.94M|    {
 1177|  5.94M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  5.93M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.93M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.93M|    {
 1430|  5.93M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  5.93M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.93M|    {
  437|  5.93M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  11.8M|    {
  485|  11.8M|        return m_has_value;
  486|  11.8M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  5.93M|    {
 1627|  5.93M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.93M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.93M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.93M|        return this->get_value();
 1629|  5.93M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  5.93M|    {
  451|  5.93M|        return m_value;
  452|  5.93M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  4.12k|        : base(unexpect, std::move(e.error())),
 1474|  4.12k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.12k|    {
 1476|  4.12k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  4.12k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.12k|          m_has_value(false)
  446|  4.12k|    {
  447|  4.12k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.75M|    {
 1177|  4.75M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  4.74M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.74M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.74M|    {
 1430|  4.74M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  4.74M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.74M|    {
  437|  4.74M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  5.94M|    {
 1837|  5.94M|        return detail::transform_error_impl(std::move(*this),
 1838|  5.94M|                                            std::forward<F>(f));
 1839|  5.94M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  5.94M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  5.94M|    else {
 1333|  5.94M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  5.94M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  5.94M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.93M, False: 10.3k]
  |  |  ------------------
  ------------------
 1335|  5.94M|                   ? result(*std::forward<Exp>(exp))
 1336|  5.94M|                   : result(unexpect,
 1337|  10.3k|                            trivial_invoke(std::forward<F>(f),
 1338|  10.3k|                                           std::forward<Exp>(exp).error()));
 1339|  5.94M|    }
 1340|  5.94M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  5.93M|    {
 1663|  5.93M|        return std::move(value());
 1664|  5.93M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  10.3k|    {
 1614|  10.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  10.3k|        return std::move(this->get_unexpected().error());
 1616|  10.3k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  10.3k|    {
  468|  10.3k|        return m_unexpected;
  469|  10.3k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  10.3k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  10.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  10.3k|    {
 1486|  10.3k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  4.75M|    {
 1598|  4.75M|        return has_value();
 1599|  4.75M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  9.50M|    {
  485|  9.50M|        return m_has_value;
  486|  9.50M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  4.12k|    {
 1604|  4.12k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  4.12k|        return this->get_unexpected().error();
 1606|  4.12k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  4.12k|    {
  468|  4.12k|        return m_unexpected;
  469|  4.12k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  4.74M|    {
 1663|  4.74M|        return std::move(value());
 1664|  4.74M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  4.74M|    {
 1627|  4.74M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.74M|        return this->get_value();
 1629|  4.74M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  4.74M|    {
  451|  4.74M|        return m_value;
  452|  4.74M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  5.93M|    {
 2855|  5.93M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  5.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  5.93M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  5.93M|    {
 2836|  5.93M|        return t.data();
 2837|  5.93M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  1.17M|    {
 1653|  1.17M|        return value();
 1654|  1.17M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  2.35M|    {
 1653|  2.35M|        return value();
 1654|  2.35M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|    264|        : base(std::in_place, std::forward<U>(val)),
 1428|    264|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    264|    {
 1430|    264|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|    264|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    264|    {
  437|    264|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    528|        : base(std::in_place, std::forward<U>(val)),
 1428|    528|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    528|    {
 1430|    528|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    528|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    528|    {
  437|    528|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   775k|    {
 5476|   775k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   775k|        return static_cast<std::size_t>(m_desc &
 5481|   775k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   775k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|  1.55M|    {
 5501|  1.55M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  1.55M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   775k|    {
 5444|   775k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   775k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   775k|        const auto t = type(id);
 5456|   775k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   775k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 775k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   775k|        basic_scan_arg<Context> arg;
 5461|   775k|        arg.m_type = t;
 5462|   775k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 775k, False: 0]
  ------------------
 5463|   775k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   775k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   775k|        return arg;
 5469|   775k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   775k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   775k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   775k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   775k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   775k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   775k|    {
 5505|   775k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   775k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|  1.34M|    {
 5257|  1.34M|        return m_type != detail::arg_type::none_type;
 5258|  1.34M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   332k|{
 8427|   332k|#define SCN_VISIT(Type)                                         \
 8428|   332k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   332k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   332k|    }                                                           \
 8431|   332k|    else {                                                      \
 8432|   332k|        return vis(monostate_val);                              \
 8433|   332k|    }
 8434|       |
 8435|   332k|    monostate monostate_val{};
 8436|       |
 8437|   332k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 332k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 332k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 332k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 332k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 332k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 332k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 332k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 332k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 332k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 332k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 332k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 332k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 332k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 332k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 332k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 332k]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 332k]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 332k]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|   166k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 166k, False: 166k]
  ------------------
 8475|   166k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   166k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   166k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   166k|    }                                                           \
  |  | 8431|   166k|    else {                                                      \
  |  | 8432|   166k|        return vis(monostate_val);                              \
  |  | 8433|   166k|    }
  ------------------
 8476|   332k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 166k, False: 166k]
  ------------------
 8477|   332k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   332k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   332k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   332k|    }                                                           \
  |  | 8431|   332k|    else {                                                      \
  |  | 8432|   332k|        return vis(monostate_val);                              \
  |  | 8433|   332k|    }
  ------------------
 8478|   332k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 332k]
  ------------------
 8479|   332k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   332k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   332k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   332k|    }                                                           \
  |  | 8431|   332k|    else {                                                      \
  |  | 8432|   332k|        return vis(monostate_val);                              \
  |  | 8433|   332k|    }
  ------------------
 8480|   332k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 332k]
  ------------------
 8481|   332k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   332k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   332k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   332k|    }                                                           \
  |  | 8431|   332k|    else {                                                      \
  |  | 8432|   332k|        return vis(monostate_val);                              \
  |  | 8433|   332k|    }
  ------------------
 8482|   332k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 332k]
  ------------------
 8483|   332k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   332k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   332k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   332k|    }                                                           \
  |  | 8431|   332k|    else {                                                      \
  |  | 8432|   332k|        return vis(monostate_val);                              \
  |  | 8433|   332k|    }
  ------------------
 8484|   332k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 332k]
  ------------------
 8485|   332k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   332k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   332k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   332k|    }                                                           \
  |  | 8431|   332k|    else {                                                      \
  |  | 8432|   332k|        return vis(monostate_val);                              \
  |  | 8433|   332k|    }
  ------------------
 8486|       |
 8487|   332k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 332k]
  ------------------
 8488|   332k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   332k|            return vis(
 8490|   332k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 332k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 332k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   332k|            SCN_CLANG_POP
 8505|   332k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   420k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   420k|    {
 5555|   420k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8146|   156k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8147|   156k|    {
 8148|   156k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8064|   420k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   420k|    static_cast<    \
  |  |  929|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   420k|    static_cast<    \
  |  |  929|   420k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|   420k|    {
 8066|   420k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|   357k|{
 4353|   357k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 357k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   357k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   357k|                            ranges::default_sentinel};
 4359|   357k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|   357k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   357k|    {
 4185|   357k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   357k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   357k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   357k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   357k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   200k|{
 8427|   200k|#define SCN_VISIT(Type)                                         \
 8428|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   200k|    }                                                           \
 8431|   200k|    else {                                                      \
 8432|   200k|        return vis(monostate_val);                              \
 8433|   200k|    }
 8434|       |
 8435|   200k|    monostate monostate_val{};
 8436|       |
 8437|   200k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 200k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 200k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 200k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 200k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 200k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 200k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 200k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 200k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 200k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 200k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 200k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 200k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 200k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 200k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 200k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 200k]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 200k]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 200k]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 200k]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|   200k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 200k, False: 0]
  ------------------
 8477|   200k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   200k|    }                                                           \
  |  | 8431|   200k|    else {                                                      \
  |  | 8432|   200k|        return vis(monostate_val);                              \
  |  | 8433|   200k|    }
  ------------------
 8478|   200k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 200k]
  ------------------
 8479|   200k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   200k|    }                                                           \
  |  | 8431|   200k|    else {                                                      \
  |  | 8432|   200k|        return vis(monostate_val);                              \
  |  | 8433|   200k|    }
  ------------------
 8480|   200k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 200k]
  ------------------
 8481|   200k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   200k|    }                                                           \
  |  | 8431|   200k|    else {                                                      \
  |  | 8432|   200k|        return vis(monostate_val);                              \
  |  | 8433|   200k|    }
  ------------------
 8482|   200k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 200k]
  ------------------
 8483|   200k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   200k|    }                                                           \
  |  | 8431|   200k|    else {                                                      \
  |  | 8432|   200k|        return vis(monostate_val);                              \
  |  | 8433|   200k|    }
  ------------------
 8484|   200k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 200k]
  ------------------
 8485|   200k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   200k|    }                                                           \
  |  | 8431|   200k|    else {                                                      \
  |  | 8432|   200k|        return vis(monostate_val);                              \
  |  | 8433|   200k|    }
  ------------------
 8486|       |
 8487|   200k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 200k]
  ------------------
 8488|   200k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   200k|            return vis(
 8490|   200k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 200k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 200k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   200k|            SCN_CLANG_POP
 8505|   200k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   263k|{
 7054|   263k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   263k|    handler.check_args_exhausted();
 7056|   263k|    return handler.get_error();
 7057|   263k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   263k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   263k|    auto begin = format.data();
 7023|   263k|    auto it = begin;
 7024|   263k|    const auto end = format.data() + format.size();
 7025|       |
 7026|   480k|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 263k, False: 216k]
  ------------------
 7027|   263k|        const auto ch = *it++;
 7028|   263k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 263k, False: 0]
  ------------------
 7029|   263k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   263k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   263k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 47.5k, False: 216k]
  ------------------
 7033|  47.5k|                return;
 7034|  47.5k|            }
 7035|   263k|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|   263k|    }
 7046|       |
 7047|   216k|    handler.on_literal_text(begin, end);
 7048|   216k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6951|   263k|{
 6952|   263k|    struct id_adapter {
 6953|   263k|        constexpr void operator()()
 6954|   263k|        {
 6955|   263k|            arg_id = handler.on_arg_id();
 6956|   263k|        }
 6957|   263k|        constexpr void operator()(std::size_t id)
 6958|   263k|        {
 6959|   263k|            arg_id = handler.on_arg_id(id);
 6960|   263k|        }
 6961|       |
 6962|   263k|        constexpr void on_error(const char* msg)
 6963|   263k|        {
 6964|   263k|            SCN_UNLIKELY_ATTR
 6965|   263k|            handler.on_error(msg);
 6966|   263k|        }
 6967|       |
 6968|   263k|        Handler& handler;
 6969|   263k|        std::size_t arg_id;
 6970|   263k|    };
 6971|       |
 6972|   263k|    ++begin;
 6973|   263k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|   263k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 263k]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|   263k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 263k]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|   263k|    else {
 6985|   263k|        auto adapter = id_adapter{handler, 0};
 6986|   263k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   263k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|   263k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 263k]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|   263k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 263k, False: 0]
  ------------------
 6997|   263k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|   263k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   263k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   527k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.0k, False: 244k]
  |  |  |  Branch (859:45): [True: 0, False: 263k]
  |  |  |  Branch (859:45): [True: 19.0k, False: 244k]
  |  |  ------------------
  ------------------
 7003|  19.0k|                handler.on_error("Unknown format specifier");
 7004|  19.0k|                return begin;
 7005|  19.0k|            }
 7006|   263k|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|   263k|    }
 7013|   244k|    return begin + 1;
 7014|   263k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8048|   420k|    {
 8049|   420k|        return m_args.get(id);
 8050|   420k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8058|   391k|    {
 8059|   391k|        return m_locale;
 8060|   391k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   420k|    {
 5576|   420k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   420k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 420k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   420k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   420k|        do_check_arg_id(id);
 5584|   420k|        return id;
 5585|   420k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   420k|{
 6064|   420k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   420k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   420k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   263k|{
 6453|   263k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   263k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 263k, False: 0]
  |  Branch (6454:26): [True: 0, False: 263k]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|   263k|    handler();
 6459|   263k|    return begin;
 6460|   263k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6401|  28.5k|{
 6402|  28.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6403|  28.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  28.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|       |
 6405|  28.5k|    unsigned long long value = 0;
 6406|  57.0k|    do {
 6407|  57.0k|        value *= 10;
 6408|  57.0k|        value += static_cast<unsigned long long>(*begin - '0');
 6409|  57.0k|        if (value >
  ------------------
  |  Branch (6409:13): [True: 0, False: 57.0k]
  ------------------
 6410|  57.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6411|      0|            return -1;
 6412|      0|        }
 6413|  57.0k|        ++begin;
 6414|  57.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6414:14): [True: 57.0k, False: 0]
  |  Branch (6414:30): [True: 57.0k, False: 0]
  |  Branch (6414:47): [True: 28.5k, False: 28.5k]
  ------------------
 6415|  28.5k|    return static_cast<int>(value);
 6416|  28.5k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   263k|        {
 6955|   263k|            arg_id = handler.on_arg_id();
 6956|   263k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|   840k|    {
 5262|   840k|        return m_type;
 5263|   840k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   391k|    {
 5571|   391k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   391k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|   811k|    {
 5560|   811k|        return m_format.data();
 5561|   811k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|   263k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   263k|    {
 7132|   263k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   263k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   263k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   263k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6867|   263k|{
 6868|   263k|    auto do_presentation = [&]() -> const CharT* {
 6869|   263k|        if (*begin == CharT{'['}) {
 6870|   263k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   263k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   263k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   263k|                return begin;
 6876|   263k|            }
 6877|   263k|            handler.on_character_set_string(set);
 6878|   263k|            return begin;
 6879|   263k|        }
 6880|   263k|        if (*begin == CharT{'/'}) {
 6881|   263k|            return parse_presentation_regex(begin, end, handler);
 6882|   263k|        }
 6883|   263k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   263k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   263k|            handler.on_error("Invalid type specifier in format string");
 6886|   263k|            return begin;
 6887|   263k|        }
 6888|   263k|        handler.on_type(type);
 6889|   263k|        return begin;
 6890|   263k|    };
 6891|       |
 6892|   263k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 263k, False: 0]
  |  Branch (6892:28): [True: 231k, False: 32.7k]
  ------------------
 6893|   263k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 231k, False: 0]
  |  Branch (6893:36): [True: 221k, False: 9.50k]
  ------------------
 6894|   221k|        return do_presentation();
 6895|   221k|    }
 6896|       |
 6897|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  42.2k|    begin = parse_align(begin, end, handler);
 6903|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|  42.2k|    begin = parse_width(begin, end, handler);
 6909|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|  42.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 42.2k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|  42.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 9.50k, False: 32.7k]
  ------------------
 6928|  9.50k|        handler.on_localized();
 6929|  9.50k|        ++begin;
 6930|  9.50k|    }
 6931|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|  42.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 42.2k, False: 0]
  |  Branch (6936:25): [True: 32.7k, False: 9.50k]
  ------------------
 6937|  32.7k|        do_presentation();
 6938|  32.7k|    }
 6939|  42.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|  42.2k|    return begin;
 6945|  42.2k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6516|   370k|{
 6517|   370k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 356k, False: 14.2k]
  |  Branch (6517:33): [True: 356k, False: 0]
  ------------------
 6518|   370k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 14.2k, False: 0]
  |  Branch (6518:33): [True: 14.2k, False: 0]
  ------------------
 6519|   370k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|   254k|    auto do_presentation = [&]() -> const CharT* {
 6869|   254k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 13.7k, False: 240k]
  ------------------
 6870|  13.7k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  13.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|  13.7k|            handler.on_character_set_string(set);
 6878|  13.7k|            return begin;
 6879|  13.7k|        }
 6880|   240k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 240k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   240k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   240k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 231k]
  |  |  ------------------
  ------------------
 6885|  9.50k|            handler.on_error("Invalid type specifier in format string");
 6886|  9.50k|            return begin;
 6887|  9.50k|        }
 6888|   231k|        handler.on_type(type);
 6889|   231k|        return begin;
 6890|   240k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6706|  13.7k|{
 6707|  13.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  13.7k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  13.7k|    auto start = begin;
 6711|  13.7k|    ++begin;
 6712|       |
 6713|  13.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  13.7k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 0, False: 13.7k]
  ------------------
 6720|      0|        handler.on_charset_inverted();
 6721|      0|        ++begin;
 6722|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 0, False: 0]
  ------------------
 6729|      0|            handler.on_charset_single(char32_t{']'});
 6730|      0|            ++begin;
 6731|      0|        }
 6732|      0|    }
 6733|  13.7k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 13.7k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  41.1k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 41.1k, False: 0]
  ------------------
 6738|  41.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 41.1k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  41.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 13.7k, False: 27.4k]
  ------------------
 6743|  13.7k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  13.7k|        }
 6745|       |
 6746|  27.4k|        parse_presentation_set_literal(begin, end, handler);
 6747|  27.4k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  13.7k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6670|  27.4k|{
 6671|  27.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  27.4k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  27.4k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  27.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 27.4k, False: 0]
  |  Branch (6678:25): [True: 27.4k, False: 0]
  |  Branch (6678:49): [True: 27.4k, False: 0]
  ------------------
 6679|  27.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 27.4k, False: 0]
  ------------------
 6680|  27.4k|        ++begin;
 6681|       |
 6682|  27.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  27.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  27.4k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  27.4k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  27.4k|        return;
 6696|  27.4k|    }
 6697|       |
 6698|      0|    handler.on_charset_single(cp_first);
 6699|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6646|  54.8k|{
 6647|  54.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  54.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  54.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  54.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.8k]
  |  |  |  Branch (859:45): [True: 0, False: 54.8k]
  |  |  |  Branch (859:45): [True: 0, False: 54.8k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  54.8k|    const auto cp =
 6656|  54.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  54.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.8k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  54.8k|    begin += len;
 6663|  54.8k|    return cp;
 6664|  54.8k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6355|  20.5k|    {
 6356|  20.5k|        m_specs.charset_string_data = fmt.data();
 6357|  20.5k|        m_specs.charset_string_size = fmt.size();
 6358|  20.5k|        on_type(presentation_type::string_set);
 6359|  20.5k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6464|   385k|{
 6465|   385k|    switch (type) {
 6466|      0|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 0, False: 385k]
  ------------------
 6467|      0|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 0, False: 385k]
  ------------------
 6468|      0|            return presentation_type::int_binary;
 6469|      0|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 0, False: 385k]
  ------------------
 6470|      0|            return presentation_type::int_decimal;
 6471|      0|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 0, False: 385k]
  ------------------
 6472|      0|            return presentation_type::int_generic;
 6473|      0|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 0, False: 385k]
  ------------------
 6474|      0|            return presentation_type::int_unsigned_decimal;
 6475|      0|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 0, False: 385k]
  ------------------
 6476|      0|            return presentation_type::int_octal;
 6477|      0|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 0, False: 385k]
  ------------------
 6478|      0|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 0, False: 385k]
  ------------------
 6479|      0|            return presentation_type::int_hex;
 6480|      0|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 0, False: 385k]
  ------------------
 6481|      0|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 0, False: 385k]
  ------------------
 6482|      0|            return presentation_type::int_arbitrary_base;
 6483|      0|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 0, False: 385k]
  ------------------
 6484|      0|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 0, False: 385k]
  ------------------
 6485|      0|            return presentation_type::float_hex;
 6486|      0|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 0, False: 385k]
  ------------------
 6487|      0|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 0, False: 385k]
  ------------------
 6488|      0|            return presentation_type::float_scientific;
 6489|      0|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 0, False: 385k]
  ------------------
 6490|      0|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 0, False: 385k]
  ------------------
 6491|      0|            return presentation_type::float_fixed;
 6492|      0|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 0, False: 385k]
  ------------------
 6493|      0|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 0, False: 385k]
  ------------------
 6494|      0|            return presentation_type::float_general;
 6495|   356k|        case 's':
  ------------------
  |  Branch (6495:9): [True: 356k, False: 28.5k]
  ------------------
 6496|   356k|            return presentation_type::string;
 6497|  14.2k|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 14.2k, False: 370k]
  ------------------
 6498|  14.2k|            return presentation_type::character;
 6499|      0|        case '?':
  ------------------
  |  Branch (6499:9): [True: 0, False: 385k]
  ------------------
 6500|      0|            return presentation_type::escaped_character;
 6501|      0|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 0, False: 385k]
  ------------------
 6502|      0|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 385k]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 385k]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|  14.2k|        default:
  ------------------
  |  Branch (6509:9): [True: 14.2k, False: 370k]
  ------------------
 6510|  14.2k|            return presentation_type::none;
 6511|   385k|    }
 6512|   385k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6541|  42.2k|{
 6542|  42.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  42.2k|    auto check_align = [](wchar_t ch) {
 6545|  42.2k|        switch (ch) {
 6546|  42.2k|            case L'<':
 6547|  42.2k|                return align_type::left;
 6548|  42.2k|            case L'>':
 6549|  42.2k|                return align_type::right;
 6550|  42.2k|            case L'^':
 6551|  42.2k|                return align_type::center;
 6552|  42.2k|            default:
 6553|  42.2k|                return align_type::none;
 6554|  42.2k|        }
 6555|  42.2k|    };
 6556|       |
 6557|  42.2k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  42.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  84.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  |  Branch (859:45): [True: 0, False: 42.2k]
  |  |  |  Branch (859:45): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6559|  42.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  42.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  42.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  42.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  42.2k|    const auto begin_before_fill = begin;
 6569|  42.2k|    begin += potential_fill_len;
 6570|       |
 6571|  42.2k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 42.2k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|  42.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  42.2k|    const auto begin_after_fill = begin;
 6577|  42.2k|    ++begin;
 6578|       |
 6579|  42.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 42.2k, False: 0]
  ------------------
 6580|  42.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42.2k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|  42.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 13.7k, False: 28.5k]
  ------------------
 6585|  13.7k|            return begin_before_fill;
 6586|  13.7k|        }
 6587|  42.2k|    }
 6588|       |
 6589|  28.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 28.5k, False: 0]
  ------------------
 6590|  28.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 28.5k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|  28.5k|        return begin_before_fill;
 6595|  28.5k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|  28.5k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6523|  63.3k|{
 6524|  63.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  63.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  63.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|       |    if constexpr (sizeof(CharT) != 1) {
 6526|       |        return 1;
 6527|       |    }
 6528|  63.3k|    else {
 6529|  63.3k|        const auto lengths =
 6530|  63.3k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|  63.3k|            "\3\4";
 6532|  63.3k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|  63.3k|        return len;
 6534|  63.3k|    }
 6535|  63.3k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|  84.4k|    auto check_align = [](wchar_t ch) {
 6545|  84.4k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 84.4k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 84.4k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 84.4k]
  ------------------
 6551|      0|                return align_type::center;
 6552|  84.4k|            default:
  ------------------
  |  Branch (6552:13): [True: 84.4k, False: 0]
  ------------------
 6553|  84.4k|                return align_type::none;
 6554|  84.4k|        }
 6555|  84.4k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6606|  42.2k|{
 6607|  42.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  42.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  42.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  42.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 42.2k, False: 0]
  |  Branch (6609:33): [True: 19.0k, False: 23.2k]
  ------------------
 6610|  19.0k|        int width = parse_simple_int(begin, end);
 6611|  19.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.0k, False: 0]
  |  |  ------------------
  ------------------
 6612|  19.0k|            handler.on_width(width);
 6613|  19.0k|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|  19.0k|    }
 6619|  42.2k|    return begin;
 6620|  42.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7136|  9.50k|    {
 7137|  9.50k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|  9.50k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 9.50k, False: 0]
  ------------------
 7139|  9.50k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 9.50k, False: 0]
  ------------------
 7140|  9.50k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 9.50k, False: 0]
  ------------------
 7141|  9.50k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 9.50k, False: 0]
  ------------------
 7142|  9.50k|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|  9.50k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|  9.50k|        }
 7147|       |
 7148|      0|        Handler::on_localized();
 7149|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   244k|{
 8427|   244k|#define SCN_VISIT(Type)                                         \
 8428|   244k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   244k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   244k|    }                                                           \
 8431|   244k|    else {                                                      \
 8432|   244k|        return vis(monostate_val);                              \
 8433|   244k|    }
 8434|       |
 8435|   244k|    monostate monostate_val{};
 8436|       |
 8437|   244k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 244k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 244k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 244k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 244k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 244k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 244k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 244k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 244k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 244k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 244k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 244k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 244k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 244k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 244k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 244k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 244k]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 244k]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 244k]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|   122k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 122k, False: 122k]
  ------------------
 8475|   122k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|   122k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   122k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   122k|    }                                                           \
  |  | 8431|   122k|    else {                                                      \
  |  | 8432|   122k|        return vis(monostate_val);                              \
  |  | 8433|   122k|    }
  ------------------
 8476|   244k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 122k, False: 122k]
  ------------------
 8477|   244k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   244k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   244k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   244k|    }                                                           \
  |  | 8431|   244k|    else {                                                      \
  |  | 8432|   244k|        return vis(monostate_val);                              \
  |  | 8433|   244k|    }
  ------------------
 8478|   244k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 244k]
  ------------------
 8479|   244k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   244k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   244k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   244k|    }                                                           \
  |  | 8431|   244k|    else {                                                      \
  |  | 8432|   244k|        return vis(monostate_val);                              \
  |  | 8433|   244k|    }
  ------------------
 8480|   244k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 244k]
  ------------------
 8481|   244k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   244k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   244k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   244k|    }                                                           \
  |  | 8431|   244k|    else {                                                      \
  |  | 8432|   244k|        return vis(monostate_val);                              \
  |  | 8433|   244k|    }
  ------------------
 8482|   244k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 244k]
  ------------------
 8483|   244k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   244k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   244k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   244k|    }                                                           \
  |  | 8431|   244k|    else {                                                      \
  |  | 8432|   244k|        return vis(monostate_val);                              \
  |  | 8433|   244k|    }
  ------------------
 8484|   244k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 244k]
  ------------------
 8485|   244k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   244k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   244k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   244k|    }                                                           \
  |  | 8431|   244k|    else {                                                      \
  |  | 8432|   244k|        return vis(monostate_val);                              \
  |  | 8433|   244k|    }
  ------------------
 8486|       |
 8487|   244k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 244k]
  ------------------
 8488|   244k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   244k|            return vis(
 8490|   244k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 244k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 244k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   244k|            SCN_CLANG_POP
 8505|   244k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|   156k|{
 7054|   156k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|   156k|    handler.check_args_exhausted();
 7056|   156k|    return handler.get_error();
 7057|   156k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|   156k|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|   156k|    auto begin = format.data();
 7023|   156k|    auto it = begin;
 7024|   156k|    const auto end = format.data() + format.size();
 7025|       |
 7026|   288k|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 156k, False: 132k]
  ------------------
 7027|   156k|        const auto ch = *it++;
 7028|   156k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 156k, False: 0]
  ------------------
 7029|   156k|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|   156k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|   156k|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 23.7k, False: 132k]
  ------------------
 7033|  23.7k|                return;
 7034|  23.7k|            }
 7035|   156k|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|   156k|    }
 7046|       |
 7047|   132k|    handler.on_literal_text(begin, end);
 7048|   132k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8184|   132k|    {
 8185|   132k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   132k|    static_cast<    \
  |  |  929|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8186|   132k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6951|   156k|{
 6952|   156k|    struct id_adapter {
 6953|   156k|        constexpr void operator()()
 6954|   156k|        {
 6955|   156k|            arg_id = handler.on_arg_id();
 6956|   156k|        }
 6957|   156k|        constexpr void operator()(std::size_t id)
 6958|   156k|        {
 6959|   156k|            arg_id = handler.on_arg_id(id);
 6960|   156k|        }
 6961|       |
 6962|   156k|        constexpr void on_error(const char* msg)
 6963|   156k|        {
 6964|   156k|            SCN_UNLIKELY_ATTR
 6965|   156k|            handler.on_error(msg);
 6966|   156k|        }
 6967|       |
 6968|   156k|        Handler& handler;
 6969|   156k|        std::size_t arg_id;
 6970|   156k|    };
 6971|       |
 6972|   156k|    ++begin;
 6973|   156k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|   156k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 156k]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|   156k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 156k]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|   156k|    else {
 6985|   156k|        auto adapter = id_adapter{handler, 0};
 6986|   156k|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|   156k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|   156k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 156k]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|   156k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 156k, False: 0]
  ------------------
 6997|   156k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|   156k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|   156k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   312k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 146k]
  |  |  |  Branch (859:45): [True: 0, False: 156k]
  |  |  |  Branch (859:45): [True: 9.50k, False: 146k]
  |  |  ------------------
  ------------------
 7003|  9.50k|                handler.on_error("Unknown format specifier");
 7004|  9.50k|                return begin;
 7005|  9.50k|            }
 7006|   156k|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|   156k|    }
 7013|   146k|    return begin + 1;
 7014|   156k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|   156k|{
 6453|   156k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|   156k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 156k, False: 0]
  |  Branch (6454:26): [True: 0, False: 156k]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|   156k|    handler();
 6459|   156k|    return begin;
 6460|   156k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|   156k|        {
 6955|   156k|            arg_id = handler.on_arg_id();
 6956|   156k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7130|   156k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|   156k|    {
 7132|   156k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|   156k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6867|   156k|{
 6868|   156k|    auto do_presentation = [&]() -> const CharT* {
 6869|   156k|        if (*begin == CharT{'['}) {
 6870|   156k|            auto set = parse_presentation_set(begin, end, handler);
 6871|   156k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|   156k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|   156k|                return begin;
 6876|   156k|            }
 6877|   156k|            handler.on_character_set_string(set);
 6878|   156k|            return begin;
 6879|   156k|        }
 6880|   156k|        if (*begin == CharT{'/'}) {
 6881|   156k|            return parse_presentation_regex(begin, end, handler);
 6882|   156k|        }
 6883|   156k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   156k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|   156k|            handler.on_error("Invalid type specifier in format string");
 6886|   156k|            return begin;
 6887|   156k|        }
 6888|   156k|        handler.on_type(type);
 6889|   156k|        return begin;
 6890|   156k|    };
 6891|       |
 6892|   156k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 156k, False: 0]
  |  Branch (6892:28): [True: 139k, False: 16.3k]
  ------------------
 6893|   156k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 139k, False: 0]
  |  Branch (6893:36): [True: 134k, False: 4.75k]
  ------------------
 6894|   134k|        return do_presentation();
 6895|   134k|    }
 6896|       |
 6897|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  21.1k|    begin = parse_align(begin, end, handler);
 6903|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|  21.1k|    begin = parse_width(begin, end, handler);
 6909|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|  21.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 21.1k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|  21.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 4.75k, False: 16.3k]
  ------------------
 6928|  4.75k|        handler.on_localized();
 6929|  4.75k|        ++begin;
 6930|  4.75k|    }
 6931|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|  21.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 21.1k, False: 0]
  |  Branch (6936:25): [True: 16.3k, False: 4.75k]
  ------------------
 6937|  16.3k|        do_presentation();
 6938|  16.3k|    }
 6939|  21.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|  21.1k|    return begin;
 6945|  21.1k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6868|   151k|    auto do_presentation = [&]() -> const CharT* {
 6869|   151k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 6.85k, False: 144k]
  ------------------
 6870|  6.85k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  6.85k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  6.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.85k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|  6.85k|            handler.on_character_set_string(set);
 6878|  6.85k|            return begin;
 6879|  6.85k|        }
 6880|   144k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 144k]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|   144k|        presentation_type type = parse_presentation_type(*begin++);
 6884|   144k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 139k]
  |  |  ------------------
  ------------------
 6885|  4.75k|            handler.on_error("Invalid type specifier in format string");
 6886|  4.75k|            return begin;
 6887|  4.75k|        }
 6888|   139k|        handler.on_type(type);
 6889|   139k|        return begin;
 6890|   144k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6706|  6.85k|{
 6707|  6.85k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  6.85k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  6.85k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.85k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  6.85k|    auto start = begin;
 6711|  6.85k|    ++begin;
 6712|       |
 6713|  6.85k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.85k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  6.85k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 0, False: 6.85k]
  ------------------
 6720|      0|        handler.on_charset_inverted();
 6721|      0|        ++begin;
 6722|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 0, False: 0]
  ------------------
 6729|      0|            handler.on_charset_single(char32_t{']'});
 6730|      0|            ++begin;
 6731|      0|        }
 6732|      0|    }
 6733|  6.85k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 6.85k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  20.5k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 20.5k, False: 0]
  ------------------
 6738|  20.5k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  20.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.5k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  20.5k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 6.85k, False: 13.7k]
  ------------------
 6743|  6.85k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  6.85k|        }
 6745|       |
 6746|  13.7k|        parse_presentation_set_literal(begin, end, handler);
 6747|  13.7k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  6.85k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6670|  13.7k|{
 6671|  13.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  13.7k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  13.7k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  13.7k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 13.7k, False: 0]
  |  Branch (6678:25): [True: 13.7k, False: 0]
  |  Branch (6678:49): [True: 13.7k, False: 0]
  ------------------
 6679|  13.7k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 13.7k, False: 0]
  ------------------
 6680|  13.7k|        ++begin;
 6681|       |
 6682|  13.7k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  13.7k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  13.7k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  13.7k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  13.7k|        return;
 6696|  13.7k|    }
 6697|       |
 6698|      0|    handler.on_charset_single(cp_first);
 6699|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6646|  27.4k|{
 6647|  27.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  27.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  27.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  54.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.4k]
  |  |  |  Branch (859:45): [True: 0, False: 27.4k]
  |  |  |  Branch (859:45): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  27.4k|    const auto cp =
 6656|  27.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  27.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  27.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.4k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  27.4k|    begin += len;
 6663|  27.4k|    return cp;
 6664|  27.4k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6541|  21.1k|{
 6542|  21.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  21.1k|    auto check_align = [](wchar_t ch) {
 6545|  21.1k|        switch (ch) {
 6546|  21.1k|            case L'<':
 6547|  21.1k|                return align_type::left;
 6548|  21.1k|            case L'>':
 6549|  21.1k|                return align_type::right;
 6550|  21.1k|            case L'^':
 6551|  21.1k|                return align_type::center;
 6552|  21.1k|            default:
 6553|  21.1k|                return align_type::none;
 6554|  21.1k|        }
 6555|  21.1k|    };
 6556|       |
 6557|  21.1k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  21.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  42.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  |  Branch (859:45): [True: 0, False: 21.1k]
  |  |  |  Branch (859:45): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6559|  21.1k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  21.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  21.1k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  21.1k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  21.1k|    const auto begin_before_fill = begin;
 6569|  21.1k|    begin += potential_fill_len;
 6570|       |
 6571|  21.1k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 21.1k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|  21.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  21.1k|    const auto begin_after_fill = begin;
 6577|  21.1k|    ++begin;
 6578|       |
 6579|  21.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 21.1k, False: 0]
  ------------------
 6580|  21.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  21.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.1k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|  21.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 6.85k, False: 14.2k]
  ------------------
 6585|  6.85k|            return begin_before_fill;
 6586|  6.85k|        }
 6587|  21.1k|    }
 6588|       |
 6589|  14.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 14.2k, False: 0]
  ------------------
 6590|  14.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 14.2k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|  14.2k|        return begin_before_fill;
 6595|  14.2k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|  14.2k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6544|  42.2k|    auto check_align = [](wchar_t ch) {
 6545|  42.2k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 42.2k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 42.2k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 42.2k]
  ------------------
 6551|      0|                return align_type::center;
 6552|  42.2k|            default:
  ------------------
  |  Branch (6552:13): [True: 42.2k, False: 0]
  ------------------
 6553|  42.2k|                return align_type::none;
 6554|  42.2k|        }
 6555|  42.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6606|  21.1k|{
 6607|  21.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  21.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 21.1k, False: 0]
  |  Branch (6609:33): [True: 9.50k, False: 11.6k]
  ------------------
 6610|  9.50k|        int width = parse_simple_int(begin, end);
 6611|  9.50k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  9.50k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.50k, False: 0]
  |  |  ------------------
  ------------------
 6612|  9.50k|            handler.on_width(width);
 6613|  9.50k|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|  9.50k|    }
 6619|  21.1k|    return begin;
 6620|  21.1k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7136|  4.75k|    {
 7137|  4.75k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|  4.75k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 4.75k, False: 0]
  ------------------
 7139|  4.75k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 4.75k, False: 0]
  ------------------
 7140|  4.75k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 4.75k, False: 0]
  ------------------
 7141|  4.75k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 4.75k, False: 0]
  ------------------
 7142|  4.75k|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|  4.75k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|  4.75k|        }
 7147|       |
 7148|      0|        Handler::on_localized();
 7149|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|   146k|{
 8427|   146k|#define SCN_VISIT(Type)                                         \
 8428|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|   146k|    }                                                           \
 8431|   146k|    else {                                                      \
 8432|   146k|        return vis(monostate_val);                              \
 8433|   146k|    }
 8434|       |
 8435|   146k|    monostate monostate_val{};
 8436|       |
 8437|   146k|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 146k]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 146k]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 146k]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 146k]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 146k]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 146k]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 146k]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 146k]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 146k]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 146k]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 146k]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 146k]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 146k]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 146k]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 146k]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 146k]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 146k]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 146k]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 146k]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|   146k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 146k, False: 0]
  ------------------
 8477|   146k|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   146k|    }                                                           \
  |  | 8431|   146k|    else {                                                      \
  |  | 8432|   146k|        return vis(monostate_val);                              \
  |  | 8433|   146k|    }
  ------------------
 8478|   146k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 146k]
  ------------------
 8479|   146k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   146k|    }                                                           \
  |  | 8431|   146k|    else {                                                      \
  |  | 8432|   146k|        return vis(monostate_val);                              \
  |  | 8433|   146k|    }
  ------------------
 8480|   146k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 0, False: 146k]
  ------------------
 8481|   146k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   146k|    }                                                           \
  |  | 8431|   146k|    else {                                                      \
  |  | 8432|   146k|        return vis(monostate_val);                              \
  |  | 8433|   146k|    }
  ------------------
 8482|   146k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 146k]
  ------------------
 8483|   146k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   146k|    }                                                           \
  |  | 8431|   146k|    else {                                                      \
  |  | 8432|   146k|        return vis(monostate_val);                              \
  |  | 8433|   146k|    }
  ------------------
 8484|   146k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 146k]
  ------------------
 8485|   146k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|   146k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|   146k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|   146k|    }                                                           \
  |  | 8431|   146k|    else {                                                      \
  |  | 8432|   146k|        return vis(monostate_val);                              \
  |  | 8433|   146k|    }
  ------------------
 8486|       |
 8487|   146k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 146k]
  ------------------
 8488|   146k|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|   146k|            return vis(
 8490|   146k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 146k]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 146k]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|   146k|            SCN_CLANG_POP
 8505|   146k|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  30.8k|    {
 4084|  30.8k|        sync(0);
 4085|  30.8k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  7.24M|    {
 5476|  7.24M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  7.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.24M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  7.24M|        return static_cast<std::size_t>(m_desc &
 5481|  7.24M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  7.24M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  14.4M|    {
 5501|  14.4M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  14.4M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  7.24M|    {
 5444|  7.24M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  7.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.24M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  7.24M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  7.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.24M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  7.24M|        const auto t = type(id);
 5456|  7.24M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  7.24M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.24M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  7.24M|        basic_scan_arg<Context> arg;
 5461|  7.24M|        arg.m_type = t;
 5462|  7.24M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 7.24M, False: 0]
  ------------------
 5463|  7.24M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  7.24M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  7.24M|        return arg;
 5469|  7.24M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  7.24M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  7.24M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  7.24M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  7.24M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  7.24M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  7.24M|    {
 5505|  7.24M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  7.24M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  12.6M|    {
 5257|  12.6M|        return m_type != detail::arg_type::none_type;
 5258|  12.6M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  3.56M|{
 8427|  3.56M|#define SCN_VISIT(Type)                                         \
 8428|  3.56M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  3.56M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  3.56M|    }                                                           \
 8431|  3.56M|    else {                                                      \
 8432|  3.56M|        return vis(monostate_val);                              \
 8433|  3.56M|    }
 8434|       |
 8435|  3.56M|    monostate monostate_val{};
 8436|       |
 8437|  3.56M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 3.56M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 3.56M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 3.56M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 3.56M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 3.56M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 3.56M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 3.56M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 3.56M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 3.56M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 3.56M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 3.56M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 3.56M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 3.56M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 3.56M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 3.56M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 3.56M]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 3.56M]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 3.56M]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 3.56M]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 3.56M]
  ------------------
 8477|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8478|  1.78M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 1.78M, False: 1.78M]
  ------------------
 8479|  1.78M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  1.78M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.78M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.78M|    }                                                           \
  |  | 8431|  1.78M|    else {                                                      \
  |  | 8432|  1.78M|        return vis(monostate_val);                              \
  |  | 8433|  1.78M|    }
  ------------------
 8480|  3.56M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 1.78M, False: 1.78M]
  ------------------
 8481|  3.56M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  3.56M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.56M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.56M|    }                                                           \
  |  | 8431|  3.56M|    else {                                                      \
  |  | 8432|  3.56M|        return vis(monostate_val);                              \
  |  | 8433|  3.56M|    }
  ------------------
 8482|  3.56M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 3.56M]
  ------------------
 8483|  3.56M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  3.56M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.56M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.56M|    }                                                           \
  |  | 8431|  3.56M|    else {                                                      \
  |  | 8432|  3.56M|        return vis(monostate_val);                              \
  |  | 8433|  3.56M|    }
  ------------------
 8484|  3.56M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 3.56M]
  ------------------
 8485|  3.56M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  3.56M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  3.56M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  3.56M|    }                                                           \
  |  | 8431|  3.56M|    else {                                                      \
  |  | 8432|  3.56M|        return vis(monostate_val);                              \
  |  | 8433|  3.56M|    }
  ------------------
 8486|       |
 8487|  3.56M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 3.56M]
  ------------------
 8488|  3.56M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  3.56M|            return vis(
 8490|  3.56M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 3.56M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 3.56M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  3.56M|            SCN_CLANG_POP
 8505|  3.56M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|  3.68M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  3.68M|    {
 5555|  3.68M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8146|  1.22M|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8147|  1.22M|    {
 8148|  1.22M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8064|  3.68M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  3.68M|    static_cast<    \
  |  |  929|  3.68M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  3.68M|    static_cast<    \
  |  |  929|  3.68M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8065|  3.68M|    {
 8066|  3.68M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|  2.45M|{
 7054|  2.45M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|  2.45M|    handler.check_args_exhausted();
 7056|  2.45M|    return handler.get_error();
 7057|  2.45M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|  2.45M|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|  2.45M|    auto begin = format.data();
 7023|  2.45M|    auto it = begin;
 7024|  2.45M|    const auto end = format.data() + format.size();
 7025|       |
 7026|  4.81M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 2.45M, False: 2.35M]
  ------------------
 7027|  2.45M|        const auto ch = *it++;
 7028|  2.45M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 2.45M, False: 0]
  ------------------
 7029|  2.45M|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|  2.45M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|  2.45M|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 95.0k, False: 2.35M]
  ------------------
 7033|  95.0k|                return;
 7034|  95.0k|            }
 7035|  2.45M|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|  2.45M|    }
 7046|       |
 7047|  2.35M|    handler.on_literal_text(begin, end);
 7048|  2.35M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6951|  2.45M|{
 6952|  2.45M|    struct id_adapter {
 6953|  2.45M|        constexpr void operator()()
 6954|  2.45M|        {
 6955|  2.45M|            arg_id = handler.on_arg_id();
 6956|  2.45M|        }
 6957|  2.45M|        constexpr void operator()(std::size_t id)
 6958|  2.45M|        {
 6959|  2.45M|            arg_id = handler.on_arg_id(id);
 6960|  2.45M|        }
 6961|       |
 6962|  2.45M|        constexpr void on_error(const char* msg)
 6963|  2.45M|        {
 6964|  2.45M|            SCN_UNLIKELY_ATTR
 6965|  2.45M|            handler.on_error(msg);
 6966|  2.45M|        }
 6967|       |
 6968|  2.45M|        Handler& handler;
 6969|  2.45M|        std::size_t arg_id;
 6970|  2.45M|    };
 6971|       |
 6972|  2.45M|    ++begin;
 6973|  2.45M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|  2.45M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 2.45M]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|  2.45M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 2.45M]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|  2.45M|    else {
 6985|  2.45M|        auto adapter = id_adapter{handler, 0};
 6986|  2.45M|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|  2.45M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|  2.45M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 2.45M]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|  2.45M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 2.45M, False: 0]
  ------------------
 6997|  2.45M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|  2.45M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  2.45M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  4.90M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.0k, False: 2.41M]
  |  |  |  Branch (859:45): [True: 0, False: 2.45M]
  |  |  |  Branch (859:45): [True: 38.0k, False: 2.41M]
  |  |  ------------------
  ------------------
 7003|  38.0k|                handler.on_error("Unknown format specifier");
 7004|  38.0k|                return begin;
 7005|  38.0k|            }
 7006|  2.45M|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|  2.45M|    }
 7013|  2.41M|    return begin + 1;
 7014|  2.45M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8048|  3.68M|    {
 8049|  3.68M|        return m_args.get(id);
 8050|  3.68M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8058|  3.62M|    {
 8059|  3.62M|        return m_locale;
 8060|  3.62M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  3.68M|    {
 5576|  3.68M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  3.68M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.68M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  3.68M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  3.68M|        do_check_arg_id(id);
 5584|  3.68M|        return id;
 5585|  3.68M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  3.68M|{
 6064|  3.68M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  3.68M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  3.68M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|  2.45M|{
 6453|  2.45M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|  2.45M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 2.45M, False: 0]
  |  Branch (6454:26): [True: 0, False: 2.45M]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|  2.45M|    handler();
 6459|  2.45M|    return begin;
 6460|  2.45M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6401|  57.0k|{
 6402|  57.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  57.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6403|  57.0k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  57.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|       |
 6405|  57.0k|    unsigned long long value = 0;
 6406|   114k|    do {
 6407|   114k|        value *= 10;
 6408|   114k|        value += static_cast<unsigned long long>(*begin - '0');
 6409|   114k|        if (value >
  ------------------
  |  Branch (6409:13): [True: 0, False: 114k]
  ------------------
 6410|   114k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6411|      0|            return -1;
 6412|      0|        }
 6413|   114k|        ++begin;
 6414|   114k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6414:14): [True: 114k, False: 0]
  |  Branch (6414:30): [True: 114k, False: 0]
  |  Branch (6414:47): [True: 57.0k, False: 57.0k]
  ------------------
 6415|  57.0k|    return static_cast<int>(value);
 6416|  57.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  2.45M|        {
 6955|  2.45M|            arg_id = handler.on_arg_id();
 6956|  2.45M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  7.36M|    {
 5262|  7.36M|        return m_type;
 5263|  7.36M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  3.62M|    {
 5571|  3.62M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  3.62M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|  3.01M|{
 4353|  3.01M|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 3.01M]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|  3.01M|    return ranges::subrange{forward_iterator{this, 0},
 4358|  3.01M|                            ranges::default_sentinel};
 4359|  3.01M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|  3.01M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|  3.01M|    {
 4185|  3.01M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|  3.01M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  3.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|  3.01M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  7.30M|    {
 5560|  7.30M|        return m_format.data();
 5561|  7.30M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7130|  2.45M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  2.45M|    {
 7132|  2.45M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  2.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  2.45M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6867|  2.45M|{
 6868|  2.45M|    auto do_presentation = [&]() -> const CharT* {
 6869|  2.45M|        if (*begin == CharT{'['}) {
 6870|  2.45M|            auto set = parse_presentation_set(begin, end, handler);
 6871|  2.45M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  2.45M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  2.45M|                return begin;
 6876|  2.45M|            }
 6877|  2.45M|            handler.on_character_set_string(set);
 6878|  2.45M|            return begin;
 6879|  2.45M|        }
 6880|  2.45M|        if (*begin == CharT{'/'}) {
 6881|  2.45M|            return parse_presentation_regex(begin, end, handler);
 6882|  2.45M|        }
 6883|  2.45M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  2.45M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  2.45M|            handler.on_error("Invalid type specifier in format string");
 6886|  2.45M|            return begin;
 6887|  2.45M|        }
 6888|  2.45M|        handler.on_type(type);
 6889|  2.45M|        return begin;
 6890|  2.45M|    };
 6891|       |
 6892|  2.45M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 2.45M, False: 0]
  |  Branch (6892:28): [True: 2.39M, False: 57.5k]
  ------------------
 6893|  2.45M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 2.39M, False: 0]
  |  Branch (6893:36): [True: 2.37M, False: 19.0k]
  ------------------
 6894|  2.37M|        return do_presentation();
 6895|  2.37M|    }
 6896|       |
 6897|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  76.5k|    begin = parse_align(begin, end, handler);
 6903|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|  76.5k|    begin = parse_width(begin, end, handler);
 6909|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|  76.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 76.5k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|  76.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 19.0k, False: 57.5k]
  ------------------
 6928|  19.0k|        handler.on_localized();
 6929|  19.0k|        ++begin;
 6930|  19.0k|    }
 6931|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|  76.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 76.5k, False: 0]
  |  Branch (6936:25): [True: 57.5k, False: 19.0k]
  ------------------
 6937|  57.5k|        do_presentation();
 6938|  57.5k|    }
 6939|  76.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|  76.5k|    return begin;
 6945|  76.5k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6516|  3.59M|{
 6517|  3.59M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6517:13): [True: 3.56M, False: 28.5k]
  |  Branch (6517:33): [True: 3.56M, False: 0]
  ------------------
 6518|  3.59M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6518:13): [True: 28.5k, False: 0]
  |  Branch (6518:33): [True: 28.5k, False: 0]
  ------------------
 6519|  3.59M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6868|  2.43M|    auto do_presentation = [&]() -> const CharT* {
 6869|  2.43M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 19.5k, False: 2.41M]
  ------------------
 6870|  19.5k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  19.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|  19.5k|            handler.on_character_set_string(set);
 6878|  19.5k|            return begin;
 6879|  19.5k|        }
 6880|  2.41M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 2.41M]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|  2.41M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  2.41M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.0k, False: 2.39M]
  |  |  ------------------
  ------------------
 6885|  19.0k|            handler.on_error("Invalid type specifier in format string");
 6886|  19.0k|            return begin;
 6887|  19.0k|        }
 6888|  2.39M|        handler.on_type(type);
 6889|  2.39M|        return begin;
 6890|  2.41M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6706|  19.5k|{
 6707|  19.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  19.5k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  19.5k|    auto start = begin;
 6711|  19.5k|    ++begin;
 6712|       |
 6713|  19.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  19.5k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 0, False: 19.5k]
  ------------------
 6720|      0|        handler.on_charset_inverted();
 6721|      0|        ++begin;
 6722|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 0, False: 0]
  ------------------
 6729|      0|            handler.on_charset_single(char32_t{']'});
 6730|      0|            ++begin;
 6731|      0|        }
 6732|      0|    }
 6733|  19.5k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 19.5k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  58.6k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 58.6k, False: 0]
  ------------------
 6738|  58.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  58.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 58.6k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  58.6k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 19.5k, False: 39.0k]
  ------------------
 6743|  19.5k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  19.5k|        }
 6745|       |
 6746|  39.0k|        parse_presentation_set_literal(begin, end, handler);
 6747|  39.0k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  19.5k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6670|  39.0k|{
 6671|  39.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  39.0k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  39.0k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  39.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 39.0k, False: 0]
  |  Branch (6678:25): [True: 39.0k, False: 0]
  |  Branch (6678:49): [True: 39.0k, False: 0]
  ------------------
 6679|  39.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 39.0k, False: 0]
  ------------------
 6680|  39.0k|        ++begin;
 6681|       |
 6682|  39.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  39.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  39.0k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  39.0k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  39.0k|        return;
 6696|  39.0k|    }
 6697|       |
 6698|      0|    handler.on_charset_single(cp_first);
 6699|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6646|  78.1k|{
 6647|  78.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  78.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  78.1k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  78.1k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78.1k]
  |  |  |  Branch (859:45): [True: 0, False: 78.1k]
  |  |  |  Branch (859:45): [True: 0, False: 78.1k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  78.1k|    const auto cp =
 6656|  78.1k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  78.1k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  78.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 78.1k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  78.1k|    begin += len;
 6663|  78.1k|    return cp;
 6664|  78.1k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6355|  29.3k|    {
 6356|  29.3k|        m_specs.charset_string_data = fmt.data();
 6357|  29.3k|        m_specs.charset_string_size = fmt.size();
 6358|  29.3k|        on_type(presentation_type::string_set);
 6359|  29.3k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6464|  3.62M|{
 6465|  3.62M|    switch (type) {
 6466|      0|        case 'b':
  ------------------
  |  Branch (6466:9): [True: 0, False: 3.62M]
  ------------------
 6467|      0|        case 'B':
  ------------------
  |  Branch (6467:9): [True: 0, False: 3.62M]
  ------------------
 6468|      0|            return presentation_type::int_binary;
 6469|      0|        case 'd':
  ------------------
  |  Branch (6469:9): [True: 0, False: 3.62M]
  ------------------
 6470|      0|            return presentation_type::int_decimal;
 6471|      0|        case 'i':
  ------------------
  |  Branch (6471:9): [True: 0, False: 3.62M]
  ------------------
 6472|      0|            return presentation_type::int_generic;
 6473|      0|        case 'u':
  ------------------
  |  Branch (6473:9): [True: 0, False: 3.62M]
  ------------------
 6474|      0|            return presentation_type::int_unsigned_decimal;
 6475|      0|        case 'o':
  ------------------
  |  Branch (6475:9): [True: 0, False: 3.62M]
  ------------------
 6476|      0|            return presentation_type::int_octal;
 6477|      0|        case 'x':
  ------------------
  |  Branch (6477:9): [True: 0, False: 3.62M]
  ------------------
 6478|      0|        case 'X':
  ------------------
  |  Branch (6478:9): [True: 0, False: 3.62M]
  ------------------
 6479|      0|            return presentation_type::int_hex;
 6480|      0|        case 'r':
  ------------------
  |  Branch (6480:9): [True: 0, False: 3.62M]
  ------------------
 6481|      0|        case 'R':
  ------------------
  |  Branch (6481:9): [True: 0, False: 3.62M]
  ------------------
 6482|      0|            return presentation_type::int_arbitrary_base;
 6483|      0|        case 'a':
  ------------------
  |  Branch (6483:9): [True: 0, False: 3.62M]
  ------------------
 6484|      0|        case 'A':
  ------------------
  |  Branch (6484:9): [True: 0, False: 3.62M]
  ------------------
 6485|      0|            return presentation_type::float_hex;
 6486|      0|        case 'e':
  ------------------
  |  Branch (6486:9): [True: 0, False: 3.62M]
  ------------------
 6487|      0|        case 'E':
  ------------------
  |  Branch (6487:9): [True: 0, False: 3.62M]
  ------------------
 6488|      0|            return presentation_type::float_scientific;
 6489|      0|        case 'f':
  ------------------
  |  Branch (6489:9): [True: 0, False: 3.62M]
  ------------------
 6490|      0|        case 'F':
  ------------------
  |  Branch (6490:9): [True: 0, False: 3.62M]
  ------------------
 6491|      0|            return presentation_type::float_fixed;
 6492|      0|        case 'g':
  ------------------
  |  Branch (6492:9): [True: 0, False: 3.62M]
  ------------------
 6493|      0|        case 'G':
  ------------------
  |  Branch (6493:9): [True: 0, False: 3.62M]
  ------------------
 6494|      0|            return presentation_type::float_general;
 6495|  3.56M|        case 's':
  ------------------
  |  Branch (6495:9): [True: 3.56M, False: 57.0k]
  ------------------
 6496|  3.56M|            return presentation_type::string;
 6497|  28.5k|        case 'c':
  ------------------
  |  Branch (6497:9): [True: 28.5k, False: 3.59M]
  ------------------
 6498|  28.5k|            return presentation_type::character;
 6499|      0|        case '?':
  ------------------
  |  Branch (6499:9): [True: 0, False: 3.62M]
  ------------------
 6500|      0|            return presentation_type::escaped_character;
 6501|      0|        case 'p':
  ------------------
  |  Branch (6501:9): [True: 0, False: 3.62M]
  ------------------
 6502|      0|            return presentation_type::pointer;
 6503|      0|        case '[':
  ------------------
  |  Branch (6503:9): [True: 0, False: 3.62M]
  ------------------
 6504|      0|        case '/':
  ------------------
  |  Branch (6504:9): [True: 0, False: 3.62M]
  ------------------
 6505|       |            // Should be handled by parse_presentation_set and
 6506|       |            // parse_presentation_regex
 6507|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6508|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6509|  28.5k|        default:
  ------------------
  |  Branch (6509:9): [True: 28.5k, False: 3.59M]
  ------------------
 6510|  28.5k|            return presentation_type::none;
 6511|  3.62M|    }
 6512|  3.62M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6541|  76.5k|{
 6542|  76.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  76.5k|    auto check_align = [](wchar_t ch) {
 6545|  76.5k|        switch (ch) {
 6546|  76.5k|            case L'<':
 6547|  76.5k|                return align_type::left;
 6548|  76.5k|            case L'>':
 6549|  76.5k|                return align_type::right;
 6550|  76.5k|            case L'^':
 6551|  76.5k|                return align_type::center;
 6552|  76.5k|            default:
 6553|  76.5k|                return align_type::none;
 6554|  76.5k|        }
 6555|  76.5k|    };
 6556|       |
 6557|  76.5k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  76.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  |  Branch (859:45): [True: 0, False: 76.5k]
  |  |  |  Branch (859:45): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6559|  76.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  76.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  76.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  76.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  76.5k|    const auto begin_before_fill = begin;
 6569|  76.5k|    begin += potential_fill_len;
 6570|       |
 6571|  76.5k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 76.5k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|  76.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  76.5k|    const auto begin_after_fill = begin;
 6577|  76.5k|    ++begin;
 6578|       |
 6579|  76.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 76.5k, False: 0]
  ------------------
 6580|  76.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.5k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|  76.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 19.5k, False: 57.0k]
  ------------------
 6585|  19.5k|            return begin_before_fill;
 6586|  19.5k|        }
 6587|  76.5k|    }
 6588|       |
 6589|  57.0k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 57.0k, False: 0]
  ------------------
 6590|  57.0k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 57.0k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|  57.0k|        return begin_before_fill;
 6595|  57.0k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|  57.0k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6523|   114k|{
 6524|   114k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   114k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   114k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6525|   114k|    if constexpr (sizeof(CharT) != 1) {
 6526|   114k|        return 1;
 6527|       |    }
 6528|       |    else {
 6529|       |        const auto lengths =
 6530|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6531|       |            "\3\4";
 6532|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6533|       |        return len;
 6534|       |    }
 6535|   114k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6544|   153k|    auto check_align = [](wchar_t ch) {
 6545|   153k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 153k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 153k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 153k]
  ------------------
 6551|      0|                return align_type::center;
 6552|   153k|            default:
  ------------------
  |  Branch (6552:13): [True: 153k, False: 0]
  ------------------
 6553|   153k|                return align_type::none;
 6554|   153k|        }
 6555|   153k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6606|  76.5k|{
 6607|  76.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  76.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 76.5k, False: 0]
  |  Branch (6609:33): [True: 38.0k, False: 38.5k]
  ------------------
 6610|  38.0k|        int width = parse_simple_int(begin, end);
 6611|  38.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  38.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 38.0k, False: 0]
  |  |  ------------------
  ------------------
 6612|  38.0k|            handler.on_width(width);
 6613|  38.0k|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|  38.0k|    }
 6619|  76.5k|    return begin;
 6620|  76.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7136|  19.0k|    {
 7137|  19.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|  19.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 19.0k, False: 0]
  ------------------
 7139|  19.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 19.0k, False: 0]
  ------------------
 7140|  19.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 19.0k, False: 0]
  ------------------
 7141|  19.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 19.0k, False: 0]
  ------------------
 7142|  19.0k|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|  19.0k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|  19.0k|        }
 7147|       |
 7148|      0|        Handler::on_localized();
 7149|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  2.41M|{
 8427|  2.41M|#define SCN_VISIT(Type)                                         \
 8428|  2.41M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  2.41M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  2.41M|    }                                                           \
 8431|  2.41M|    else {                                                      \
 8432|  2.41M|        return vis(monostate_val);                              \
 8433|  2.41M|    }
 8434|       |
 8435|  2.41M|    monostate monostate_val{};
 8436|       |
 8437|  2.41M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 2.41M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 2.41M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 2.41M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 2.41M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 2.41M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 2.41M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 2.41M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 2.41M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 2.41M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 2.41M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 2.41M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 2.41M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 2.41M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 2.41M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 2.41M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 2.41M]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 2.41M]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 2.41M]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 2.41M]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 2.41M]
  ------------------
 8477|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8478|  1.20M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 1.20M, False: 1.20M]
  ------------------
 8479|  1.20M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|  1.20M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.20M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.20M|    }                                                           \
  |  | 8431|  1.20M|    else {                                                      \
  |  | 8432|  1.20M|        return vis(monostate_val);                              \
  |  | 8433|  1.20M|    }
  ------------------
 8480|  2.41M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 1.20M, False: 1.20M]
  ------------------
 8481|  2.41M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  2.41M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.41M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.41M|    }                                                           \
  |  | 8431|  2.41M|    else {                                                      \
  |  | 8432|  2.41M|        return vis(monostate_val);                              \
  |  | 8433|  2.41M|    }
  ------------------
 8482|  2.41M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 2.41M]
  ------------------
 8483|  2.41M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  2.41M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.41M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.41M|    }                                                           \
  |  | 8431|  2.41M|    else {                                                      \
  |  | 8432|  2.41M|        return vis(monostate_val);                              \
  |  | 8433|  2.41M|    }
  ------------------
 8484|  2.41M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 2.41M]
  ------------------
 8485|  2.41M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  2.41M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  2.41M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  2.41M|    }                                                           \
  |  | 8431|  2.41M|    else {                                                      \
  |  | 8432|  2.41M|        return vis(monostate_val);                              \
  |  | 8433|  2.41M|    }
  ------------------
 8486|       |
 8487|  2.41M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 2.41M]
  ------------------
 8488|  2.41M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  2.41M|            return vis(
 8490|  2.41M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 2.41M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 2.41M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  2.41M|            SCN_CLANG_POP
 8505|  2.41M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  1.78M|{
 8427|  1.78M|#define SCN_VISIT(Type)                                         \
 8428|  1.78M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  1.78M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  1.78M|    }                                                           \
 8431|  1.78M|    else {                                                      \
 8432|  1.78M|        return vis(monostate_val);                              \
 8433|  1.78M|    }
 8434|       |
 8435|  1.78M|    monostate monostate_val{};
 8436|       |
 8437|  1.78M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.78M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.78M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.78M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.78M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.78M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.78M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.78M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.78M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.78M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.78M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.78M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.78M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.78M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.78M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.78M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.78M]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.78M]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.78M]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.78M]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 1.78M]
  ------------------
 8477|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8478|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 1.78M]
  ------------------
 8479|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8480|  1.78M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 1.78M, False: 0]
  ------------------
 8481|  1.78M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  1.78M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.78M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.78M|    }                                                           \
  |  | 8431|  1.78M|    else {                                                      \
  |  | 8432|  1.78M|        return vis(monostate_val);                              \
  |  | 8433|  1.78M|    }
  ------------------
 8482|  1.78M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 1.78M]
  ------------------
 8483|  1.78M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  1.78M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.78M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.78M|    }                                                           \
  |  | 8431|  1.78M|    else {                                                      \
  |  | 8432|  1.78M|        return vis(monostate_val);                              \
  |  | 8433|  1.78M|    }
  ------------------
 8484|  1.78M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 1.78M]
  ------------------
 8485|  1.78M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  1.78M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.78M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.78M|    }                                                           \
  |  | 8431|  1.78M|    else {                                                      \
  |  | 8432|  1.78M|        return vis(monostate_val);                              \
  |  | 8433|  1.78M|    }
  ------------------
 8486|       |
 8487|  1.78M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 1.78M]
  ------------------
 8488|  1.78M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  1.78M|            return vis(
 8490|  1.78M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 1.78M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.78M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  1.78M|            SCN_CLANG_POP
 8505|  1.78M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7053|  1.22M|{
 7054|  1.22M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7055|  1.22M|    handler.check_args_exhausted();
 7056|  1.22M|    return handler.get_error();
 7057|  1.22M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7019|  1.22M|{
 7020|       |    // TODO: memchr fast path with a larger (> 32) format string
 7021|       |
 7022|  1.22M|    auto begin = format.data();
 7023|  1.22M|    auto it = begin;
 7024|  1.22M|    const auto end = format.data() + format.size();
 7025|       |
 7026|  2.40M|    while (it != end) {
  ------------------
  |  Branch (7026:12): [True: 1.22M, False: 1.17M]
  ------------------
 7027|  1.22M|        const auto ch = *it++;
 7028|  1.22M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7028:13): [True: 1.22M, False: 0]
  ------------------
 7029|  1.22M|            handler.on_literal_text(begin, it - 1);
 7030|       |
 7031|  1.22M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7032|  1.22M|            if (!handler) {
  ------------------
  |  Branch (7032:17): [True: 47.5k, False: 1.17M]
  ------------------
 7033|  47.5k|                return;
 7034|  47.5k|            }
 7035|  1.22M|        }
 7036|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7036:18): [True: 0, False: 0]
  ------------------
 7037|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7038|      0|                handler.on_error("Unmatched '}' in format string");
 7039|      0|                return;
 7040|      0|            }
 7041|       |
 7042|      0|            handler.on_literal_text(begin, it);
 7043|      0|            begin = ++it;
 7044|      0|        }
 7045|  1.22M|    }
 7046|       |
 7047|  1.17M|    handler.on_literal_text(begin, end);
 7048|  1.17M|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8184|  1.17M|    {
 8185|  1.17M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  1.17M|    static_cast<    \
  |  |  929|  1.17M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8186|  1.17M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6951|  1.22M|{
 6952|  1.22M|    struct id_adapter {
 6953|  1.22M|        constexpr void operator()()
 6954|  1.22M|        {
 6955|  1.22M|            arg_id = handler.on_arg_id();
 6956|  1.22M|        }
 6957|  1.22M|        constexpr void operator()(std::size_t id)
 6958|  1.22M|        {
 6959|  1.22M|            arg_id = handler.on_arg_id(id);
 6960|  1.22M|        }
 6961|       |
 6962|  1.22M|        constexpr void on_error(const char* msg)
 6963|  1.22M|        {
 6964|  1.22M|            SCN_UNLIKELY_ATTR
 6965|  1.22M|            handler.on_error(msg);
 6966|  1.22M|        }
 6967|       |
 6968|  1.22M|        Handler& handler;
 6969|  1.22M|        std::size_t arg_id;
 6970|  1.22M|    };
 6971|       |
 6972|  1.22M|    ++begin;
 6973|  1.22M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 6974|      0|        handler.on_error("Unexpected end of replacement field");
 6975|      0|        return begin;
 6976|      0|    }
 6977|       |
 6978|  1.22M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6978:9): [True: 0, False: 1.22M]
  ------------------
 6979|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6980|      0|    }
 6981|  1.22M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6981:14): [True: 0, False: 1.22M]
  ------------------
 6982|      0|        handler.on_literal_text(begin, begin + 1);
 6983|      0|    }
 6984|  1.22M|    else {
 6985|  1.22M|        auto adapter = id_adapter{handler, 0};
 6986|  1.22M|        begin = parse_arg_id(begin, end, adapter);
 6987|       |
 6988|  1.22M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 6989|      0|            handler.on_error("Missing '}' in format string");
 6990|      0|            return begin;
 6991|      0|        }
 6992|       |
 6993|  1.22M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6993:13): [True: 0, False: 1.22M]
  ------------------
 6994|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6995|      0|        }
 6996|  1.22M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6996:18): [True: 1.22M, False: 0]
  ------------------
 6997|  1.22M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 6998|      0|                handler.on_error("Unexpected end of replacement field");
 6999|      0|                return begin;
 7000|      0|            }
 7001|  1.22M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7002|  1.22M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.0k, False: 1.20M]
  |  |  |  Branch (859:45): [True: 0, False: 1.22M]
  |  |  |  Branch (859:45): [True: 19.0k, False: 1.20M]
  |  |  ------------------
  ------------------
 7003|  19.0k|                handler.on_error("Unknown format specifier");
 7004|  19.0k|                return begin;
 7005|  19.0k|            }
 7006|  1.22M|        }
 7007|      0|        else {
 7008|      0|            SCN_UNLIKELY_ATTR
 7009|      0|            handler.on_error("Missing '}' in format string");
 7010|      0|            return begin;
 7011|      0|        }
 7012|  1.22M|    }
 7013|  1.20M|    return begin + 1;
 7014|  1.22M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6452|  1.22M|{
 6453|  1.22M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6454|  1.22M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6454:9): [True: 1.22M, False: 0]
  |  Branch (6454:26): [True: 0, False: 1.22M]
  ------------------
 6455|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6456|      0|    }
 6457|       |
 6458|  1.22M|    handler();
 6459|  1.22M|    return begin;
 6460|  1.22M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6954|  1.22M|        {
 6955|  1.22M|            arg_id = handler.on_arg_id();
 6956|  1.22M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7130|  1.22M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7131|  1.22M|    {
 7132|  1.22M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7133|  1.22M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6867|  1.22M|{
 6868|  1.22M|    auto do_presentation = [&]() -> const CharT* {
 6869|  1.22M|        if (*begin == CharT{'['}) {
 6870|  1.22M|            auto set = parse_presentation_set(begin, end, handler);
 6871|  1.22M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6872|       |                // clang-format off
 6873|  1.22M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|  1.22M|                return begin;
 6876|  1.22M|            }
 6877|  1.22M|            handler.on_character_set_string(set);
 6878|  1.22M|            return begin;
 6879|  1.22M|        }
 6880|  1.22M|        if (*begin == CharT{'/'}) {
 6881|  1.22M|            return parse_presentation_regex(begin, end, handler);
 6882|  1.22M|        }
 6883|  1.22M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  1.22M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6885|  1.22M|            handler.on_error("Invalid type specifier in format string");
 6886|  1.22M|            return begin;
 6887|  1.22M|        }
 6888|  1.22M|        handler.on_type(type);
 6889|  1.22M|        return begin;
 6890|  1.22M|    };
 6891|       |
 6892|  1.22M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6892:9): [True: 1.22M, False: 0]
  |  Branch (6892:28): [True: 1.19M, False: 28.7k]
  ------------------
 6893|  1.22M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6893:9): [True: 1.19M, False: 0]
  |  Branch (6893:36): [True: 1.18M, False: 9.50k]
  ------------------
 6894|  1.18M|        return do_presentation();
 6895|  1.18M|    }
 6896|       |
 6897|  38.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.2k]
  |  |  ------------------
  ------------------
 6898|      0|        handler.on_error("Unexpected end of format string");
 6899|      0|        return begin;
 6900|      0|    }
 6901|       |
 6902|  38.2k|    begin = parse_align(begin, end, handler);
 6903|  38.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.2k]
  |  |  ------------------
  ------------------
 6904|      0|        handler.on_error("Unexpected end of format string");
 6905|      0|        return begin;
 6906|      0|    }
 6907|       |
 6908|  38.2k|    begin = parse_width(begin, end, handler);
 6909|  38.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.2k]
  |  |  ------------------
  ------------------
 6910|      0|        handler.on_error("Unexpected end of format string");
 6911|      0|        return begin;
 6912|      0|    }
 6913|       |
 6914|  38.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6914:9): [True: 0, False: 38.2k]
  ------------------
 6915|      0|        ++begin;
 6916|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6917|      0|            handler.on_error("Unexpected end of format string");
 6918|      0|            return begin;
 6919|      0|        }
 6920|      0|        begin = parse_precision(begin, end, handler);
 6921|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6922|      0|            handler.on_error("Unexpected end of format string");
 6923|      0|            return begin;
 6924|      0|        }
 6925|      0|    }
 6926|       |
 6927|  38.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6927:9): [True: 9.50k, False: 28.7k]
  ------------------
 6928|  9.50k|        handler.on_localized();
 6929|  9.50k|        ++begin;
 6930|  9.50k|    }
 6931|  38.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.2k]
  |  |  ------------------
  ------------------
 6932|      0|        handler.on_error("Unexpected end of format string");
 6933|      0|        return begin;
 6934|      0|    }
 6935|       |
 6936|  38.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6936:9): [True: 38.2k, False: 0]
  |  Branch (6936:25): [True: 28.7k, False: 9.50k]
  ------------------
 6937|  28.7k|        do_presentation();
 6938|  28.7k|    }
 6939|  38.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.2k]
  |  |  ------------------
  ------------------
 6940|      0|        handler.on_error("Unexpected end of format string");
 6941|      0|        return begin;
 6942|      0|    }
 6943|       |
 6944|  38.2k|    return begin;
 6945|  38.2k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6868|  1.21M|    auto do_presentation = [&]() -> const CharT* {
 6869|  1.21M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6869:13): [True: 9.76k, False: 1.20M]
  ------------------
 6870|  9.76k|            auto set = parse_presentation_set(begin, end, handler);
 6871|  9.76k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  9.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.76k]
  |  |  ------------------
  ------------------
 6872|       |                // clang-format off
 6873|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6874|       |                // clang-format on
 6875|      0|                return begin;
 6876|      0|            }
 6877|  9.76k|            handler.on_character_set_string(set);
 6878|  9.76k|            return begin;
 6879|  9.76k|        }
 6880|  1.20M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6880:13): [True: 0, False: 1.20M]
  ------------------
 6881|      0|            return parse_presentation_regex(begin, end, handler);
 6882|      0|        }
 6883|  1.20M|        presentation_type type = parse_presentation_type(*begin++);
 6884|  1.20M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 1.19M]
  |  |  ------------------
  ------------------
 6885|  9.50k|            handler.on_error("Invalid type specifier in format string");
 6886|  9.50k|            return begin;
 6887|  9.50k|        }
 6888|  1.19M|        handler.on_type(type);
 6889|  1.19M|        return begin;
 6890|  1.20M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6706|  9.76k|{
 6707|  9.76k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6708|  9.76k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  9.76k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.76k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|       |
 6710|  9.76k|    auto start = begin;
 6711|  9.76k|    ++begin;
 6712|       |
 6713|  9.76k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.76k]
  |  |  ------------------
  ------------------
 6714|       |        // clang-format off
 6715|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6716|       |        // clang-format on
 6717|      0|        return {};
 6718|      0|    }
 6719|  9.76k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6719:9): [True: 0, False: 9.76k]
  ------------------
 6720|      0|        handler.on_charset_inverted();
 6721|      0|        ++begin;
 6722|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6723|       |            // clang-format off
 6724|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6725|       |            // clang-format on
 6726|      0|            return {};
 6727|      0|        }
 6728|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6728:13): [True: 0, False: 0]
  ------------------
 6729|      0|            handler.on_charset_single(char32_t{']'});
 6730|      0|            ++begin;
 6731|      0|        }
 6732|      0|    }
 6733|  9.76k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6733:14): [True: 0, False: 9.76k]
  ------------------
 6734|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6735|      0|    }
 6736|       |
 6737|  29.3k|    while (begin != end) {
  ------------------
  |  Branch (6737:12): [True: 29.3k, False: 0]
  ------------------
 6738|  29.3k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  29.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.3k]
  |  |  ------------------
  ------------------
 6739|      0|            break;
 6740|      0|        }
 6741|       |
 6742|  29.3k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6742:13): [True: 9.76k, False: 19.5k]
  ------------------
 6743|  9.76k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6744|  9.76k|        }
 6745|       |
 6746|  19.5k|        parse_presentation_set_literal(begin, end, handler);
 6747|  19.5k|    }
 6748|       |
 6749|      0|    SCN_UNLIKELY_ATTR
 6750|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6751|      0|    return {};
 6752|  9.76k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6670|  19.5k|{
 6671|  19.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6672|       |
 6673|  19.5k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6674|  19.5k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6675|      0|        return;
 6676|      0|    }
 6677|       |
 6678|  19.5k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6678:9): [True: 19.5k, False: 0]
  |  Branch (6678:25): [True: 19.5k, False: 0]
  |  Branch (6678:49): [True: 19.5k, False: 0]
  ------------------
 6679|  19.5k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6679:9): [True: 19.5k, False: 0]
  ------------------
 6680|  19.5k|        ++begin;
 6681|       |
 6682|  19.5k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6683|  19.5k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6684|      0|            return;
 6685|      0|        }
 6686|       |
 6687|  19.5k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 6688|       |            // clang-format off
 6689|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6690|       |            // clang-format on
 6691|      0|            return;
 6692|      0|        }
 6693|       |
 6694|  19.5k|        handler.on_charset_range(cp_first, cp_second + 1);
 6695|  19.5k|        return;
 6696|  19.5k|    }
 6697|       |
 6698|      0|    handler.on_charset_single(cp_first);
 6699|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6646|  39.0k|{
 6647|  39.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  39.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6648|       |
 6649|  39.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6650|  39.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  78.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  |  Branch (859:45): [True: 0, False: 39.0k]
  |  |  |  Branch (859:45): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6651|      0|        handler.on_error("Invalid encoding in format string");
 6652|      0|        return invalid_code_point;
 6653|      0|    }
 6654|       |
 6655|  39.0k|    const auto cp =
 6656|  39.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6657|  39.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  39.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 39.0k]
  |  |  ------------------
  ------------------
 6658|      0|        handler.on_error("Invalid encoding in format string");
 6659|      0|        return invalid_code_point;
 6660|      0|    }
 6661|       |
 6662|  39.0k|    begin += len;
 6663|  39.0k|    return cp;
 6664|  39.0k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6541|  38.2k|{
 6542|  38.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  38.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6543|       |
 6544|  38.2k|    auto check_align = [](wchar_t ch) {
 6545|  38.2k|        switch (ch) {
 6546|  38.2k|            case L'<':
 6547|  38.2k|                return align_type::left;
 6548|  38.2k|            case L'>':
 6549|  38.2k|                return align_type::right;
 6550|  38.2k|            case L'^':
 6551|  38.2k|                return align_type::center;
 6552|  38.2k|            default:
 6553|  38.2k|                return align_type::none;
 6554|  38.2k|        }
 6555|  38.2k|    };
 6556|       |
 6557|  38.2k|    auto potential_fill_len = code_point_length(begin, end);
 6558|  38.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  76.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.2k]
  |  |  |  Branch (859:45): [True: 0, False: 38.2k]
  |  |  |  Branch (859:45): [True: 0, False: 38.2k]
  |  |  ------------------
  ------------------
 6559|  38.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6560|      0|        handler.on_error("Invalid encoding in fill character");
 6561|      0|        return begin;
 6562|      0|    }
 6563|       |
 6564|  38.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6565|       |
 6566|  38.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6567|  38.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6568|  38.2k|    const auto begin_before_fill = begin;
 6569|  38.2k|    begin += potential_fill_len;
 6570|       |
 6571|  38.2k|    if (begin == end) {
  ------------------
  |  Branch (6571:9): [True: 0, False: 38.2k]
  ------------------
 6572|      0|        return begin_before_fill;
 6573|      0|    }
 6574|       |
 6575|  38.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6576|  38.2k|    const auto begin_after_fill = begin;
 6577|  38.2k|    ++begin;
 6578|       |
 6579|  38.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6579:9): [True: 38.2k, False: 0]
  ------------------
 6580|  38.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  38.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 38.2k]
  |  |  ------------------
  ------------------
 6581|      0|            handler.on_error("Invalid fill character '{' in format string");
 6582|      0|            return begin;
 6583|      0|        }
 6584|  38.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6584:13): [True: 9.76k, False: 28.5k]
  ------------------
 6585|  9.76k|            return begin_before_fill;
 6586|  9.76k|        }
 6587|  38.2k|    }
 6588|       |
 6589|  28.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6589:9): [True: 28.5k, False: 0]
  ------------------
 6590|  28.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6590:13): [True: 0, False: 28.5k]
  ------------------
 6591|      0|            handler.on_align(potential_align_on_fill);
 6592|      0|            return begin_after_fill;
 6593|      0|        }
 6594|  28.5k|        return begin_before_fill;
 6595|  28.5k|    }
 6596|       |
 6597|      0|    handler.on_fill(potential_fill);
 6598|      0|    handler.on_align(potential_align_after_fill);
 6599|      0|    return begin;
 6600|  28.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6544|  76.5k|    auto check_align = [](wchar_t ch) {
 6545|  76.5k|        switch (ch) {
 6546|      0|            case L'<':
  ------------------
  |  Branch (6546:13): [True: 0, False: 76.5k]
  ------------------
 6547|      0|                return align_type::left;
 6548|      0|            case L'>':
  ------------------
  |  Branch (6548:13): [True: 0, False: 76.5k]
  ------------------
 6549|      0|                return align_type::right;
 6550|      0|            case L'^':
  ------------------
  |  Branch (6550:13): [True: 0, False: 76.5k]
  ------------------
 6551|      0|                return align_type::center;
 6552|  76.5k|            default:
  ------------------
  |  Branch (6552:13): [True: 76.5k, False: 0]
  ------------------
 6553|  76.5k|                return align_type::none;
 6554|  76.5k|        }
 6555|  76.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6606|  38.2k|{
 6607|  38.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  38.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  38.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6608|       |
 6609|  38.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6609:9): [True: 38.2k, False: 0]
  |  Branch (6609:33): [True: 19.0k, False: 19.2k]
  ------------------
 6610|  19.0k|        int width = parse_simple_int(begin, end);
 6611|  19.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  19.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 19.0k, False: 0]
  |  |  ------------------
  ------------------
 6612|  19.0k|            handler.on_width(width);
 6613|  19.0k|        }
 6614|      0|        else {
 6615|      0|            handler.on_error("Invalid field width");
 6616|      0|            return begin;
 6617|      0|        }
 6618|  19.0k|    }
 6619|  38.2k|    return begin;
 6620|  38.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7136|  9.50k|    {
 7137|  9.50k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7138|  9.50k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7138:13): [True: 9.50k, False: 0]
  ------------------
 7139|  9.50k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7139:13): [True: 9.50k, False: 0]
  ------------------
 7140|  9.50k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7140:13): [True: 9.50k, False: 0]
  ------------------
 7141|  9.50k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7141:13): [True: 9.50k, False: 0]
  ------------------
 7142|  9.50k|            SCN_UNLIKELY_ATTR
 7143|       |            // clang-format off
 7144|  9.50k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7145|       |            // clang-format on
 7146|  9.50k|        }
 7147|       |
 7148|      0|        Handler::on_localized();
 7149|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8426|  1.20M|{
 8427|  1.20M|#define SCN_VISIT(Type)                                         \
 8428|  1.20M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8429|  1.20M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8430|  1.20M|    }                                                           \
 8431|  1.20M|    else {                                                      \
 8432|  1.20M|        return vis(monostate_val);                              \
 8433|  1.20M|    }
 8434|       |
 8435|  1.20M|    monostate monostate_val{};
 8436|       |
 8437|  1.20M|    switch (arg.m_type) {
 8438|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.20M]
  ------------------
 8439|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.20M]
  ------------------
 8441|      0|            SCN_VISIT(short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.20M]
  ------------------
 8443|      0|            SCN_VISIT(int);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.20M]
  ------------------
 8445|      0|            SCN_VISIT(long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.20M]
  ------------------
 8447|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.20M]
  ------------------
 8449|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.20M]
  ------------------
 8451|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.20M]
  ------------------
 8453|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.20M]
  ------------------
 8455|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.20M]
  ------------------
 8457|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.20M]
  ------------------
 8459|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.20M]
  ------------------
 8461|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.20M]
  ------------------
 8463|      0|            SCN_VISIT(char);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.20M]
  ------------------
 8465|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.20M]
  ------------------
 8467|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 1.20M]
  ------------------
 8469|      0|            SCN_VISIT(float);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 1.20M]
  ------------------
 8471|      0|            SCN_VISIT(double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.20M]
  ------------------
 8473|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.20M]
  ------------------
 8475|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8476|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8476:9): [True: 0, False: 1.20M]
  ------------------
 8477|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8478|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8478:9): [True: 0, False: 1.20M]
  ------------------
 8479|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8428|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|      0|    }                                                           \
  |  | 8431|      0|    else {                                                      \
  |  | 8432|      0|        return vis(monostate_val);                              \
  |  | 8433|      0|    }
  ------------------
 8480|  1.20M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8480:9): [True: 1.20M, False: 0]
  ------------------
 8481|  1.20M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8428|  1.20M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.20M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.20M|    }                                                           \
  |  | 8431|  1.20M|    else {                                                      \
  |  | 8432|  1.20M|        return vis(monostate_val);                              \
  |  | 8433|  1.20M|    }
  ------------------
 8482|  1.20M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8482:9): [True: 0, False: 1.20M]
  ------------------
 8483|  1.20M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8428|  1.20M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.20M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.20M|    }                                                           \
  |  | 8431|  1.20M|    else {                                                      \
  |  | 8432|  1.20M|        return vis(monostate_val);                              \
  |  | 8433|  1.20M|    }
  ------------------
 8484|  1.20M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8484:9): [True: 0, False: 1.20M]
  ------------------
 8485|  1.20M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8428|  1.20M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8429|  1.20M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8430|  1.20M|    }                                                           \
  |  | 8431|  1.20M|    else {                                                      \
  |  | 8432|  1.20M|        return vis(monostate_val);                              \
  |  | 8433|  1.20M|    }
  ------------------
 8486|       |
 8487|  1.20M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8487:9): [True: 0, False: 1.20M]
  ------------------
 8488|  1.20M|#if !SCN_DISABLE_TYPE_CUSTOM
 8489|  1.20M|            return vis(
 8490|  1.20M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8491|       |#else
 8492|       |            return vis(monostate_val);
 8493|       |#endif
 8494|       |
 8495|      0|            SCN_CLANG_PUSH
 8496|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8497|       |
 8498|      0|            SCN_UNLIKELY_ATTR
 8499|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8499:9): [True: 0, False: 1.20M]
  ------------------
 8500|      0|        default: {
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.20M]
  ------------------
 8501|      0|            return vis(monostate_val);
 8502|      0|        }
 8503|       |
 8504|  1.20M|            SCN_CLANG_POP
 8505|  1.20M|    }
 8506|       |
 8507|      0|#undef SCN_VISIT
 8508|       |
 8509|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8510|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8511|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|  61.7k|    {
 4084|  61.7k|        sync(0);
 4085|  61.7k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|   177k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|  1.78M|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|  1.20M|{
   89|  1.20M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  1.20M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  1.20M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  1.20M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  2.41M|{
   44|  2.41M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  2.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  2.41M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|  1.20M|{
  127|  1.20M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  1.20M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  1.20M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  1.20M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  2.41M|{
   60|  2.41M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  2.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  2.41M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  162|   594k|{
  163|   594k|    T value;
  164|   594k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   594k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   594k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   594k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   594k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   594k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.75k, False: 589k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.75k|    }                                                  \
  |  |  |  | 3667|   594k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   589k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   589k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   589k|    static_cast<    \
  |  |  929|   589k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   589k|    static_cast<    \
  |  |  929|   589k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   594k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  1.18M|{
   72|  1.18M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  1.18M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|  1.20M|{
   89|  1.20M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  1.20M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  1.20M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  1.20M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  126|  1.20M|{
  127|  1.20M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  1.20M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  1.20M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  1.20M|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  162|   594k|{
  163|   594k|    T value;
  164|   594k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   594k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   594k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   594k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   594k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   594k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.75k, False: 589k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.75k|    }                                                  \
  |  |  |  | 3667|   594k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   589k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   589k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   589k|    static_cast<    \
  |  |  929|   589k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   589k|    static_cast<    \
  |  |  929|   589k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   594k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|  1.20M|{
   89|  1.20M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  1.20M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  1.20M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  1.20M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  1.20M|{
   44|  1.20M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  1.20M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  126|  1.20M|{
  127|  1.20M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  1.20M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  1.20M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  1.20M|    static_cast<    \
  |  |  929|  1.20M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  1.20M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  1.20M|{
   60|  1.20M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  1.20M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  162|   594k|{
  163|   594k|    T value;
  164|   594k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   594k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   594k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   594k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   594k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   594k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.75k, False: 589k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.75k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.75k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.75k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.75k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.75k|    }                                                  \
  |  |  |  | 3667|   594k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   589k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   589k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   589k|    static_cast<    \
  |  |  929|   589k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   589k|    static_cast<    \
  |  |  929|   589k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   594k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   594k|{
   72|   594k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   594k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  4.01M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  4.01M|{
  653|  4.01M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  4.01M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   242k|{
 2184|   242k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   242k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|   145k|{
 2192|   145k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|   145k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 130k, False: 14.2k]
  |  |  ------------------
  ------------------
 2194|   130k|        source.sync(*n);
 2195|   130k|    }
 2196|  14.2k|    else {
 2197|  14.2k|        source.sync_all();
 2198|  14.2k|    }
 2199|   145k|    return n;
 2200|   145k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  2.41M|{
 2208|  2.41M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  2.41M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|  1.20M|{
 2216|  1.20M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|  1.20M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.17M, False: 28.5k]
  |  |  ------------------
  ------------------
 2218|  1.17M|        source.sync(*n);
 2219|  1.17M|    }
 2220|  28.5k|    else {
 2221|  28.5k|        source.sync_all();
 2222|  28.5k|    }
 2223|  1.20M|    return n;
 2224|  1.20M|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   879k|{
  194|   879k|    return find_classic_impl(
  195|   879k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   879k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|   879k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   885k|{
  202|   885k|    return find_classic_impl(
  203|   885k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   885k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|   885k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   242k|{
 2141|   242k|    return vscan_internal(source, format, args);
 2142|   242k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|   145k|{
 2147|   145k|    auto n = vscan_internal(source, format, args);
 2148|   145k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   145k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 130k, False: 14.2k]
  |  |  ------------------
  ------------------
 2149|   130k|        source.sync(*n);
 2150|   130k|    }
 2151|  14.2k|    else {
 2152|  14.2k|        source.sync_all();
 2153|  14.2k|    }
 2154|   145k|    return n;
 2155|   145k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  2.41M|{
 2161|  2.41M|    return vscan_internal(source, format, args);
 2162|  2.41M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|  1.20M|{
 2167|  1.20M|    auto n = vscan_internal(source, format, args);
 2168|  1.20M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  1.20M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.17M, False: 28.5k]
  |  |  ------------------
  ------------------
 2169|  1.17M|        source.sync(*n);
 2170|  1.17M|    }
 2171|  28.5k|    else {
 2172|  28.5k|        source.sync_all();
 2173|  28.5k|    }
 2174|  1.20M|    return n;
 2175|  1.20M|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|   110k|{
 2251|   110k|    return vscan_value_internal(source, arg);
 2252|   110k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  66.9k|{
 2256|  66.9k|    auto n = vscan_value_internal(source, arg);
 2257|  66.9k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  66.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 64.5k, False: 2.37k]
  |  |  ------------------
  ------------------
 2258|  64.5k|        source.sync(*n);
 2259|  64.5k|    }
 2260|  2.37k|    else {
 2261|  2.37k|        source.sync_all();
 2262|  2.37k|    }
 2263|  66.9k|    return n;
 2264|  66.9k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  1.18M|{
 2270|  1.18M|    return vscan_value_internal(source, arg);
 2271|  1.18M|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|   594k|{
 2276|   594k|    auto n = vscan_value_internal(source, arg);
 2277|   594k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   594k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 589k, False: 4.75k]
  |  |  ------------------
  ------------------
 2278|   589k|        source.sync(*n);
 2279|   589k|    }
 2280|  4.75k|    else {
 2281|  4.75k|        source.sync_all();
 2282|  4.75k|    }
 2283|   594k|    return n;
 2284|   594k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   879k|{
  118|   879k|    auto it = source.begin();
  119|       |
  120|  1.64M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 1.29M, False: 343k]
  ------------------
  121|  1.29M|        auto sv =
  122|  1.29M|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|  1.29M|                .substr(0, 8);
  124|       |
  125|  1.29M|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 956k, False: 341k]
  ------------------
  126|   956k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   956k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   956k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 400k, False: 556k]
  ------------------
  129|   400k|                break;
  130|   400k|            }
  131|   556k|            continue;
  132|   956k|        }
  133|       |
  134|  1.03M|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 828k, False: 206k]
  ------------------
  135|   828k|            auto tmp =
  136|   828k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   828k|            auto res = get_next_code_point(tmp);
  138|   828k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 134k, False: 693k]
  ------------------
  139|   134k|                return it;
  140|   134k|            }
  141|   693k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   693k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   693k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   693k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   693k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   693k|        }
  145|   341k|    }
  146|       |
  147|   744k|    return detail::make_string_view_iterator(source, it);
  148|   879k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  2.13M|{
  105|  2.13M|    static_assert(sizeof(*source.data()) == 1);
  106|  2.13M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  2.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  2.13M|    uint64_t word{};
  108|  2.13M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  2.13M|    return has_byte_greater(word, 127) != 0;
  111|  2.13M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  4.03M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   828k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   885k|{
  118|   885k|    auto it = source.begin();
  119|       |
  120|  1.14M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 832k, False: 312k]
  ------------------
  121|   832k|        auto sv =
  122|   832k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   832k|                .substr(0, 8);
  124|       |
  125|   832k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 665k, False: 167k]
  ------------------
  126|   665k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   665k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   665k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 410k, False: 254k]
  ------------------
  129|   410k|                break;
  130|   410k|            }
  131|   254k|            continue;
  132|   665k|        }
  133|       |
  134|   323k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 319k, False: 4.78k]
  ------------------
  135|   319k|            auto tmp =
  136|   319k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   319k|            auto res = get_next_code_point(tmp);
  138|   319k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 162k, False: 156k]
  ------------------
  139|   162k|                return it;
  140|   162k|            }
  141|   156k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   156k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   156k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   156k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   156k|        }
  145|   167k|    }
  146|       |
  147|   723k|    return detail::make_string_view_iterator(source, it);
  148|   885k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.76M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   319k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   290k|{
 2073|   290k|    const auto argcount = args.size();
 2074|   290k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 133k, False: 156k]
  |  Branch (2074:60): [True: 133k, False: 0]
  ------------------
 2075|   133k|        auto arg = args.get(0);
 2076|   133k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   133k|    static_cast<    \
  |  |  929|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   133k|    }
 2078|       |
 2079|   156k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 156k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   156k|    SCN_UNLIKELY_ATTR
 2087|   156k|    {
 2088|   156k|        auto handler = format_handler<false, CharT>{
 2089|   156k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   156k|        return vscan_parse_format_string(format, handler);
 2091|   156k|    }
 2092|   156k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   775k|{
 1625|   775k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 420k, False: 355k]
  ------------------
 1626|   420k|        return false;
 1627|   420k|    }
 1628|   355k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 355k, False: 0]
  |  Branch (1628:39): [True: 355k, False: 0]
  ------------------
 1629|   775k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   200k|{
 1658|   200k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   200k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   200k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   200k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   200k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   200k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 7.12k, False: 193k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  7.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  7.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  7.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  7.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  7.12k|    }                                                  \
  |  |  |  | 3667|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   193k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   193k|    return it.position();
 1675|   200k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   263k|        : format_handler_base{argcount},
 1900|   263k|          parse_ctx{format},
 1901|   263k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   263k|    {
 1903|   263k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  4.10M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  4.10M|    {
 1722|  4.10M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  4.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.10M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  4.10M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   263k|        : contiguous_ctx(source, args, loc)
 1852|   263k|    {
 1853|   263k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   263k|{
 2038|   263k|    const auto beg = handler.get_ctx().begin();
 2039|   263k|    detail::parse_format_string<false>(format, handler);
 2040|   263k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.5k, False: 216k]
  |  |  ------------------
  ------------------
 2041|  47.5k|        return unexpected(handler.error);
 2042|  47.5k|    }
 2043|   216k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   263k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  1.71M|    {
 2022|  1.71M|        return ctx.get();
 2023|  1.71M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.71M|    {
 1857|  1.71M|        return contiguous_ctx;
 1858|  1.71M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   480k|    {
 1907|   480k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 480k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   480k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   263k|{
 1681|   263k|    auto arg = ctx.arg(id);
 1682|   263k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 263k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   263k|    return arg;
 1686|   263k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  4.10M|    {
 1797|  4.10M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.10M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  4.10M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  4.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.10M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  4.10M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.10M, False: 0]
  |  |  ------------------
  ------------------
 1807|  4.10M|            visited_args_lower64 |= (1ull << id);
 1808|  4.10M|            return;
 1809|  4.10M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  4.10M|    {
 1782|  4.10M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  4.10M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.10M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  4.10M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  4.10M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.10M, False: 0]
  |  |  ------------------
  ------------------
 1788|  4.10M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  4.10M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  4.10M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|   128k|    {
 1766|   128k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|   128k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 128k, False: 0]
  |  |  ------------------
  ------------------
 1767|   128k|            error = err;
 1768|   128k|        }
 1769|   128k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   263k|    {
 1944|   263k|        return parse_ctx.next_arg_id();
 1945|   263k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   263k|    {
 1985|   263k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   263k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   263k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 263k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   263k|        auto specs = detail::format_specs{};
 1998|   263k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   263k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   263k|            arg.type()};
 2001|       |
 2002|   263k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   263k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 263k]
  |  Branch (2003:29): [True: 0, False: 263k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   263k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   263k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.0k, False: 244k]
  |  |  ------------------
  ------------------
 2009|  19.0k|            return parse_ctx.begin();
 2010|  19.0k|        }
 2011|   244k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   244k|        on_visit_scan_arg(
 2014|   244k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   244k|                                           get_ctx().locale()},
 2016|   244k|            arg);
 2017|   244k|        return parse_ctx.begin();
 2018|   263k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   263k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   263k|    {
 1701|   263k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   244k|    {
 1956|   244k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 244k]
  |  Branch (1956:23): [True: 0, False: 244k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   244k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   244k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 216k]
  |  |  ------------------
  ------------------
 1963|  28.5k|            on_error(r.error());
 1964|  28.5k|        }
 1965|   216k|        else {
 1966|   216k|            get_ctx().advance_to(*r);
 1967|   216k|        }
 1968|   244k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  85.5k|    {
 1761|  85.5k|        SCN_UNLIKELY_ATTR
 1762|  85.5k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  85.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  4.10M|    {
 1729|  4.10M|        {
 1730|  4.10M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 4.10M]
  ------------------
 1731|  4.10M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 4.10M]
  ------------------
 1732|  4.10M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  4.10M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  4.10M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 4.10M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  4.10M|        }
 1739|       |
 1740|  4.10M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 4.10M, False: 0]
  ------------------
 1741|  4.10M|            return;
 1742|  4.10M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  4.10M|    {
 1777|  4.10M|        return error;
 1778|  4.10M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  12.2M|    {
 1773|  12.2M|        return static_cast<bool>(error);
 1774|  12.2M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|   156k|        : format_handler_base{argcount},
 1900|   156k|          parse_ctx{format},
 1901|   156k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   156k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   156k|    {
 1903|   156k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|   156k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   156k|    static_cast<    \
  |  |  929|   156k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   156k|    {
 1830|   156k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   156k|{
 2038|   156k|    const auto beg = handler.get_ctx().begin();
 2039|   156k|    detail::parse_format_string<false>(format, handler);
 2040|   156k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 23.7k, False: 132k]
  |  |  ------------------
  ------------------
 2041|  23.7k|        return unexpected(handler.error);
 2042|  23.7k|    }
 2043|   132k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   156k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|  1.02M|    {
 2022|  1.02M|        return ctx.get();
 2023|  1.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|  1.02M|    {
 1834|  1.02M|        return ctx;
 1835|  1.02M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   288k|    {
 1907|   288k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 288k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   288k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   156k|{
 1681|   156k|    auto arg = ctx.arg(id);
 1682|   156k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 156k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   156k|    return arg;
 1686|   156k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   156k|    {
 1944|   156k|        return parse_ctx.next_arg_id();
 1945|   156k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   156k|    {
 1985|   156k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   156k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   156k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 156k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   156k|        auto specs = detail::format_specs{};
 1998|   156k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   156k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   156k|            arg.type()};
 2001|       |
 2002|   156k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   156k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 156k]
  |  Branch (2003:29): [True: 0, False: 156k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   156k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 146k]
  |  |  ------------------
  ------------------
 2009|  9.50k|            return parse_ctx.begin();
 2010|  9.50k|        }
 2011|   146k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   146k|        on_visit_scan_arg(
 2014|   146k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   146k|                                           get_ctx().locale()},
 2016|   146k|            arg);
 2017|   146k|        return parse_ctx.begin();
 2018|   156k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|   156k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   156k|    {
 1701|   156k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   146k|    {
 1956|   146k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 146k]
  |  Branch (1956:23): [True: 0, False: 146k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   146k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   146k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   146k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 132k]
  |  |  ------------------
  ------------------
 1963|  14.2k|            on_error(r.error());
 1964|  14.2k|        }
 1965|   132k|        else {
 1966|   132k|            get_ctx().advance_to(*r);
 1967|   132k|        }
 1968|   146k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   485k|{
 2053|   485k|    const auto argcount = args.size();
 2054|   485k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 221k, False: 263k]
  |  Branch (2054:60): [True: 221k, False: 0]
  ------------------
 2055|   221k|        auto arg = args.get(0);
 2056|   221k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   221k|    static_cast<    \
  |  |  929|   221k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   221k|    }
 2058|       |
 2059|   263k|    auto handler = format_handler<true, CharT>{
 2060|   263k|        ranges::subrange<const CharT*>{source.data(),
 2061|   263k|                                       source.data() + source.size()},
 2062|   263k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   263k|    return vscan_parse_format_string(format, handler);
 2064|   485k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   332k|{
 1638|   332k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 332k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   332k|    auto reader =
 1644|   332k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   332k|            ranges::subrange<const CharT*>{source.data(),
 1646|   332k|                                           source.data() + source.size()},
 1647|   332k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   332k|    static_cast<    \
  |  |  929|   332k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   332k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   332k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   332k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   332k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 318k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|   332k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   318k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   318k|    return ranges::distance(source.data(), it);
 1650|   332k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  4.83M|{
 2053|  4.83M|    const auto argcount = args.size();
 2054|  4.83M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 2.37M, False: 2.45M]
  |  Branch (2054:60): [True: 2.37M, False: 0]
  ------------------
 2055|  2.37M|        auto arg = args.get(0);
 2056|  2.37M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  2.37M|    static_cast<    \
  |  |  929|  2.37M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  2.37M|    }
 2058|       |
 2059|  2.45M|    auto handler = format_handler<true, CharT>{
 2060|  2.45M|        ranges::subrange<const CharT*>{source.data(),
 2061|  2.45M|                                       source.data() + source.size()},
 2062|  2.45M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.45M|    static_cast<    \
  |  |  929|  2.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  2.45M|    static_cast<    \
  |  |  929|  2.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  2.45M|    return vscan_parse_format_string(format, handler);
 2064|  4.83M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  7.24M|{
 1625|  7.24M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 3.68M, False: 3.56M]
  ------------------
 1626|  3.68M|        return false;
 1627|  3.68M|    }
 1628|  3.56M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 3.56M, False: 0]
  |  Branch (1628:39): [True: 3.56M, False: 0]
  ------------------
 1629|  7.24M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  3.56M|{
 1638|  3.56M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  3.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.56M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  3.56M|    auto reader =
 1644|  3.56M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  3.56M|            ranges::subrange<const CharT*>{source.data(),
 1646|  3.56M|                                           source.data() + source.size()},
 1647|  3.56M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  3.56M|    static_cast<    \
  |  |  929|  3.56M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  3.56M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  3.56M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  3.56M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  3.56M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  3.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 28.5k, False: 3.53M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  28.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  28.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  28.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  28.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  28.5k|    }                                                  \
  |  |  |  | 3667|  3.56M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  3.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  3.53M|    return ranges::distance(source.data(), it);
 1650|  3.56M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|  2.45M|        : format_handler_base{argcount},
 1900|  2.45M|          parse_ctx{format},
 1901|  2.45M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  2.45M|    static_cast<    \
  |  |  929|  2.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  2.45M|    static_cast<    \
  |  |  929|  2.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  2.45M|    {
 1903|  2.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|  2.45M|        : contiguous_ctx(source, args, loc)
 1852|  2.45M|    {
 1853|  2.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  2.45M|{
 2038|  2.45M|    const auto beg = handler.get_ctx().begin();
 2039|  2.45M|    detail::parse_format_string<false>(format, handler);
 2040|  2.45M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 95.0k, False: 2.35M]
  |  |  ------------------
  ------------------
 2041|  95.0k|        return unexpected(handler.error);
 2042|  95.0k|    }
 2043|  2.35M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  2.45M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  16.9M|    {
 2022|  16.9M|        return ctx.get();
 2023|  16.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  16.9M|    {
 1857|  16.9M|        return contiguous_ctx;
 1858|  16.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  4.81M|    {
 1907|  4.81M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 4.81M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  4.81M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  2.45M|{
 1681|  2.45M|    auto arg = ctx.arg(id);
 1682|  2.45M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.45M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  2.45M|    return arg;
 1686|  2.45M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  2.45M|    {
 1944|  2.45M|        return parse_ctx.next_arg_id();
 1945|  2.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  2.45M|    {
 1985|  2.45M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  2.45M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  2.45M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 2.45M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  2.45M|        auto specs = detail::format_specs{};
 1998|  2.45M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  2.45M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  2.45M|            arg.type()};
 2001|       |
 2002|  2.45M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  2.45M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 2.45M]
  |  Branch (2003:29): [True: 0, False: 2.45M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  2.45M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  2.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.0k, False: 2.41M]
  |  |  ------------------
  ------------------
 2009|  38.0k|            return parse_ctx.begin();
 2010|  38.0k|        }
 2011|  2.41M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  2.41M|        on_visit_scan_arg(
 2014|  2.41M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  2.41M|                                           get_ctx().locale()},
 2016|  2.41M|            arg);
 2017|  2.41M|        return parse_ctx.begin();
 2018|  2.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|  2.45M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  2.45M|    {
 1701|  2.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  2.41M|    {
 1956|  2.41M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 2.41M]
  |  Branch (1956:23): [True: 0, False: 2.41M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  2.41M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  2.41M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  2.41M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  2.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 57.0k, False: 2.35M]
  |  |  ------------------
  ------------------
 1963|  57.0k|            on_error(r.error());
 1964|  57.0k|        }
 1965|  2.35M|        else {
 1966|  2.35M|            get_ctx().advance_to(*r);
 1967|  2.35M|        }
 1968|  2.41M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  2.41M|{
 2073|  2.41M|    const auto argcount = args.size();
 2074|  2.41M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 1.18M, False: 1.22M]
  |  Branch (2074:60): [True: 1.18M, False: 0]
  ------------------
 2075|  1.18M|        auto arg = args.get(0);
 2076|  1.18M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  1.18M|    static_cast<    \
  |  |  929|  1.18M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  1.18M|    }
 2078|       |
 2079|  1.22M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 1.22M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  1.22M|    SCN_UNLIKELY_ATTR
 2087|  1.22M|    {
 2088|  1.22M|        auto handler = format_handler<false, CharT>{
 2089|  1.22M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  1.22M|        return vscan_parse_format_string(format, handler);
 2091|  1.22M|    }
 2092|  1.22M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  1.78M|{
 1658|  1.78M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  1.78M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  1.78M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 1.78M]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  1.78M|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  1.78M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  1.78M|    static_cast<    \
  |  |  929|  1.78M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  1.78M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  1.78M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.78M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.78M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 14.2k, False: 1.76M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  14.2k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  14.2k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  14.2k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  14.2k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  14.2k|    }                                                  \
  |  |  |  | 3667|  1.78M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  1.76M|    return it.position();
 1675|  1.78M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|  1.22M|        : format_handler_base{argcount},
 1900|  1.22M|          parse_ctx{format},
 1901|  1.22M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.22M|    {
 1903|  1.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|  1.22M|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  1.22M|    {
 1830|  1.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.22M|{
 2038|  1.22M|    const auto beg = handler.get_ctx().begin();
 2039|  1.22M|    detail::parse_format_string<false>(format, handler);
 2040|  1.22M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 47.5k, False: 1.17M]
  |  |  ------------------
  ------------------
 2041|  47.5k|        return unexpected(handler.error);
 2042|  47.5k|    }
 2043|  1.17M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.22M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  8.45M|    {
 2022|  8.45M|        return ctx.get();
 2023|  8.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  8.45M|    {
 1834|  8.45M|        return ctx;
 1835|  8.45M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  2.40M|    {
 1907|  2.40M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.40M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.40M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  1.22M|{
 1681|  1.22M|    auto arg = ctx.arg(id);
 1682|  1.22M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.22M|    return arg;
 1686|  1.22M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|  1.22M|    {
 1944|  1.22M|        return parse_ctx.next_arg_id();
 1945|  1.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|  1.22M|    {
 1985|  1.22M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.22M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.22M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.22M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.22M|        auto specs = detail::format_specs{};
 1998|  1.22M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.22M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.22M|            arg.type()};
 2001|       |
 2002|  1.22M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.22M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.22M]
  |  Branch (2003:29): [True: 0, False: 1.22M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.22M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.0k, False: 1.20M]
  |  |  ------------------
  ------------------
 2009|  19.0k|            return parse_ctx.begin();
 2010|  19.0k|        }
 2011|  1.20M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.20M|        on_visit_scan_arg(
 2014|  1.20M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.20M|                                           get_ctx().locale()},
 2016|  1.20M|            arg);
 2017|  1.20M|        return parse_ctx.begin();
 2018|  1.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|  1.22M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.22M|    {
 1701|  1.22M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  1.20M|    {
 1956|  1.20M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.20M]
  |  Branch (1956:23): [True: 0, False: 1.20M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.20M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.20M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 1.17M]
  |  |  ------------------
  ------------------
 1963|  28.5k|            on_error(r.error());
 1964|  28.5k|        }
 1965|  1.17M|        else {
 1966|  1.17M|            get_ctx().advance_to(*r);
 1967|  1.17M|        }
 1968|  1.20M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   110k|{
 2099|   110k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   110k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   110k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  66.9k|{
 2099|  66.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  66.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  66.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  1.18M|{
 2099|  1.18M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  1.18M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   594k|{
 2099|   594k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   594k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  2.37k|{
 1351|  2.37k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  2.37k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  2.37k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  2.37k|            return transcode_to_string_impl_to32(src, dest);
 1362|  2.37k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  2.37k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  2.37k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  2.37k|{
 1244|  2.37k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  2.37k|    auto it = src.begin();
 1247|   891k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 888k, False: 2.37k]
  ------------------
 1248|   888k|        auto res = get_next_code_point(
 1249|   888k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   888k|                                                                 src.end()));
 1251|   888k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   888k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.4k, False: 877k]
  |  |  ------------------
  ------------------
 1252|  11.4k|            dest.push_back(DestCharT{0xfffd});
 1253|  11.4k|        }
 1254|   877k|        else {
 1255|   877k|            dest.push_back(res.value);
 1256|   877k|        }
 1257|   888k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   888k|    }
 1259|  2.37k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  2.03M|{
 1169|  2.03M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  2.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  2.03M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  2.03M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 50.3k, False: 1.98M]
  |  |  ------------------
  ------------------
 1173|  50.3k|        return {get_start_for_next_code_point(input),
 1174|  50.3k|                detail::invalid_code_point};
 1175|  50.3k|    }
 1176|  1.98M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 43.1k, False: 1.94M]
  |  |  ------------------
  ------------------
 1177|  43.1k|        return {input.end(), detail::invalid_code_point};
 1178|  43.1k|    }
 1179|       |
 1180|  1.94M|    return {input.begin() + len,
 1181|  1.94M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.98M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  50.3k|{
 1155|  50.3k|    auto it = input.begin();
 1156|   223k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 218k, False: 5.55k]
  ------------------
 1157|   218k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 44.7k, False: 173k]
  ------------------
 1158|  44.7k|            break;
 1159|  44.7k|        }
 1160|   218k|    }
 1161|  50.3k|    return it;
 1162|  50.3k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|  42.7k|    {
 2920|  42.7k|        SCN_UNLIKELY_ATTR
 2921|  42.7k|        m_msg = msg;
 2922|  42.7k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  4.01M|    {
 2925|  4.01M|        return m_msg == nullptr;
 2926|  4.01M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  5.79M|{
  458|  5.79M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  5.79M|        static_cast<unsigned char>(ch))];
  460|  5.79M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|   119k|{
  469|   119k|    return static_cast<unsigned char>(ch) <= 127;
  470|   119k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  31.8k|{
  474|  31.8k|#if WCHAR_MIN < 0
  475|  31.8k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 29.3k, False: 2.44k]
  |  Branch (475:23): [True: 18.5k, False: 10.7k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  31.8k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  2.13M|{
  539|  2.13M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  2.13M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  15.6M|{
  784|  15.6M|    return e != eof_error::good;
  785|  15.6M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  26.6k|{
  798|  26.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  26.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  26.6k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  26.6k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  3.88M|{
 5997|  3.88M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 3.88M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  3.88M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 3.88M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  3.88M|    return {};
 6012|  3.88M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|  1.09M|    {
  304|  1.09M|        ranges::advance(x, n);
  305|  1.09M|        return x;
  306|  1.09M|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|  1.09M|    {
  268|  1.09M|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|  1.09M|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|  1.09M|    {
  151|  1.09M|        i += n;
  152|  1.09M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.51M|    {
  108|  2.51M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.51M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.51M|    {
   87|  2.51M|        return s - i;
   88|  2.51M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  5.89M|    {
  108|  5.89M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  5.89M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  5.89M|    {
   87|  5.89M|        return s - i;
   88|  5.89M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   342k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   342k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   342k|        auto beg = r.begin();
  990|   342k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 342k, False: 0]
  ------------------
  991|   342k|            return false;
  992|   342k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   342k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|   104k|    {
  763|   104k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   104k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   104k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  20.5k|        : m_fptr([](storage fn,
  743|  20.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.5k|              cvref<T> obj = *get<T>(fn);
  745|  20.5k|              if constexpr (std::is_void_v<R>) {
  746|  20.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  20.5k|              }
  748|  20.5k|              else {
  749|  20.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.5k|              }
  751|  20.5k|          }),
  752|  20.5k|          m_storage(std::addressof(f))
  753|  20.5k|    {
  754|  20.5k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  52.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  52.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  52.2k|              else {
  749|  52.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  52.2k|              }
  751|  52.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  52.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  52.2k|        else if constexpr (std::is_object_v<T>) {
  688|  52.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  52.2k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  20.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  20.5k|        {
  662|  20.5k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   242M|    {
  763|   242M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   242M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   242M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  9.21M|        : m_fptr([](storage fn,
  743|  9.21M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.21M|              cvref<T> obj = *get<T>(fn);
  745|  9.21M|              if constexpr (std::is_void_v<R>) {
  746|  9.21M|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.21M|              }
  748|  9.21M|              else {
  749|  9.21M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.21M|              }
  751|  9.21M|          }),
  752|  9.21M|          m_storage(std::addressof(f))
  753|  9.21M|    {
  754|  9.21M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  21.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.4M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.4M|              else {
  749|  21.4M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.4M|              }
  751|  21.4M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  21.4M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.4M|        else if constexpr (std::is_object_v<T>) {
  688|  21.4M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.4M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  9.21M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  9.21M|        {
  662|  9.21M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   141k|    {
 6026|   141k|        const bool need_skipped_width =
 6027|   141k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 141k]
  |  Branch (6027:33): [True: 0, False: 141k]
  ------------------
 6028|   141k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   141k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 141k]
  ------------------
 6032|   141k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 141k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   141k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 141k, False: 0]
  |  Branch (6036:56): [True: 134k, False: 6.85k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   134k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 134k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   268k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   134k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   134k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   134k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   134k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.95k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.95k|    }                                                  \
  |  |  |  | 3667|   134k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   268k|                            make_eof_scan_error));
 6047|       |
 6048|   268k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 133k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   133k|            return result_type{it, 0};
 6056|   268k|        }
 6057|       |
 6058|  6.85k|        return result_type{rng.begin(), 0};
 6059|   141k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  6.85k|{
 1964|  6.85k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  6.85k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  6.85k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  6.85k|    else {
 1949|  6.85k|        auto first = range.begin();
 1950|  17.5k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 17.4k, False: 100]
  ------------------
 1951|  17.4k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 6.75k, False: 10.6k]
  ------------------
 1952|  6.75k|                return first;
 1953|  6.75k|            }
 1954|  17.4k|        }
 1955|    100|        return first;
 1956|  6.85k|    }
 1957|  6.85k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   132k|    {
  108|   132k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   132k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   132k|    {
   94|   132k|        iter_difference_t<I> counter{0};
   95|  1.45M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 1.31M, False: 132k]
  ------------------
   96|  1.31M|            ++i;
   97|  1.31M|            ++counter;
   98|  1.31M|        }
   99|   132k|        return counter;
  100|   132k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   535k|{
  950|   535k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   535k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.47k, False: 530k]
  |  |  ------------------
  ------------------
  951|  4.47k|        return eof_error::eof;
  952|  4.47k|    }
  953|   530k|    return eof_error::good;
  954|   535k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  4.07M|{
  944|  4.07M|    return is_range_eof(r.begin(), r.end());
  945|  4.07M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  4.07M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  4.07M|    {
  937|  4.07M|        return begin == end;
  938|  4.07M|    }
  939|  4.07M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|   333k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   333k|    else {
 1677|   333k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   333k|    }
 1679|   333k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   333k|    {
 1525|   333k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   333k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   333k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   333k|    {
 1609|   333k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   333k|                           ranges::common_range<Range>) {
 1626|   333k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   333k|            auto end_seg = range.end().contiguous_segment();
 1628|   333k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.09k, False: 325k]
  |  |  ------------------
  ------------------
 1629|   333k|                             detail::to_address(end_seg.end()))) {
 1630|  8.09k|                auto& str = m_storage.emplace();
 1631|  8.09k|                str.reserve(range.end().position() - range.begin().position());
 1632|  8.09k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  8.09k|                m_view = string_view_type{str};
 1634|  8.09k|                return;
 1635|  8.09k|            }
 1636|       |
 1637|   325k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   325k|                                                            end_seg.data());
 1639|   325k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   333k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   654k|    {
 1570|   654k|        return m_view;
 1571|   654k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|   333k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   131k|    {
 6068|   131k|        const bool need_skipped_width =
 6069|   131k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 131k]
  |  Branch (6069:33): [True: 0, False: 131k]
  ------------------
 6070|   131k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   131k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 131k]
  ------------------
 6073|   131k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 131k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   131k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 131k, False: 0]
  ------------------
 6082|   131k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 2.04k, False: 129k]
  ------------------
 6083|   131k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 2.04k]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|  2.04k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 2.04k]
  ------------------
 6085|  2.04k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   131k|        return result_type{rng.begin(), 0};
 6107|   131k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   884k|{
  950|   884k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   884k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.72k, False: 877k]
  |  |  ------------------
  ------------------
  951|  6.72k|        return eof_error::eof;
  952|  6.72k|    }
  953|   877k|    return eof_error::good;
  954|   884k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   884k|{
  944|   884k|    return is_range_eof(r.begin(), r.end());
  945|   884k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   884k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   884k|    {
  937|   884k|        return begin == end;
  938|   884k|    }
  939|   884k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   551k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   551k|                  ranges::sized_range<Range>) {
 1674|   551k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   551k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   551k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   551k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   551k|    {
 1478|   551k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  3.01M|    {
 1491|  3.01M|        return sv;
 1492|  3.01M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  13.7k|{
 1964|  13.7k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  13.7k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  13.7k|{
 1945|  13.7k|    if constexpr (ranges::common_range<Range>) {
 1946|  13.7k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  13.7k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   551k|{
 2940|   551k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 551k, False: 0]
  ------------------
 2941|   551k|        auto it = read_while_classic_space(range);
 2942|   551k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   551k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.88k, False: 547k]
  |  |  ------------------
  ------------------
 2944|  3.88k|            return unexpected(e);
 2945|  3.88k|        }
 2946|       |
 2947|   547k|        return it;
 2948|   551k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   551k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   551k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   551k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   551k|        auto buf = make_contiguous_buffer(range);
 2109|   551k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   551k|        return ranges::next(range.begin(),
 2111|   551k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   551k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|  1.09M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.09M|                  ranges::sized_range<Range>) {
 1674|  1.09M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.09M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.09M|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|  1.09M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.09M|    {
 1478|  1.09M|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  25.6k|    {
  304|  25.6k|        ranges::advance(x, n);
  305|  25.6k|        return x;
  306|  25.6k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   665k|    {
  268|   665k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   665k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   665k|    {
  181|  1.22M|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 555k, False: 665k]
  ------------------
  182|   555k|            ++i;
  183|   555k|        }
  184|   665k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|   330k|    {
 1575|   330k|        return m_storage.has_value();
 1576|   330k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  4.75k|    {
 1580|  4.75k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  4.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  4.75k|        return *m_storage;
 1582|  4.75k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|   146k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   146k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   146k|            auto rd = make_reader<T, char_type>();
 6195|   146k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   146k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 141k]
  |  |  ------------------
  ------------------
 6196|  4.75k|                return unexpected(e);
 6197|  4.75k|            }
 6198|       |
 6199|   141k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 141k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   141k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   141k|                return impl(rd, range, value);
 6202|   141k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   146k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|   636k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|   636k|                       std::is_same_v<T, std::wstring>) {
 5816|   636k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   636k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|   925k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   391k|    {
 3029|   391k|        reader_error_handler eh{};
 3030|   391k|        get_derived().check_specs_impl(specs, eh);
 3031|   391k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   391k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 377k]
  |  |  ------------------
  ------------------
 3032|  14.2k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  14.2k|        }
 3034|   377k|        return {};
 3035|   391k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|   391k|    {
 3040|   391k|        return static_cast<Derived&>(*this);
 3041|   391k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|   391k|    {
 5199|   391k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|   391k|        SCN_GCC_PUSH
 5202|   391k|        SCN_GCC_IGNORE("-Wswitch")
 5203|   391k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|   391k|        SCN_CLANG_PUSH
 5206|   391k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|   391k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|   391k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 391k]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 391k]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|   356k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 356k, False: 34.8k]
  ------------------
 5215|   356k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 356k]
  ------------------
 5216|   356k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 356k]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|   356k|                else {
 5220|   356k|                    m_type = reader_type::word;
 5221|   356k|                }
 5222|   356k|                break;
 5223|      0|            }
 5224|       |
 5225|  14.2k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 14.2k, False: 377k]
  ------------------
 5226|  14.2k|                m_type = reader_type::character;
 5227|  14.2k|                break;
 5228|       |
 5229|  20.5k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 20.5k, False: 370k]
  ------------------
 5230|  20.5k|                m_type = reader_type::character_set;
 5231|  20.5k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 391k]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 391k]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|   391k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|   391k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|   141k|    {
 6113|   141k|        const bool need_skipped_width =
 6114|   141k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 141k]
  |  Branch (6114:33): [True: 0, False: 141k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   141k|        auto it = rng.begin();
 6118|   141k|        std::ptrdiff_t prefix_width = 0;
 6119|   141k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 141k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   141k|        else {
 6127|   141k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   141k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   141k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   141k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.95k, False: 139k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.95k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.95k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.95k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.95k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.95k|    }                                                  \
  |  |  |  | 3667|   141k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   139k|            std::tie(it, prefix_width) = prefix_result;
 6129|   139k|        }
 6130|   139k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   139k|        std::ptrdiff_t value_width = 0;
 6134|   139k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 139k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   139k|        else {
 6150|   139k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   139k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   139k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.55k, False: 132k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.55k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.55k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.55k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.55k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.55k|    }                                                  \
  |  | 3667|   139k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   139k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   132k|                                             specs, value, loc));
 6152|       |
 6153|   132k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 132k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   132k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   132k|        std::ptrdiff_t postfix_width = 0;
 6162|   132k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 131k, False: 1.17k]
  ------------------
 6163|   131k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   131k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   131k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   131k|                                 value_width));
 6167|   131k|            std::tie(it, postfix_width) = postfix_result;
 6168|   131k|        }
 6169|       |
 6170|   132k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   132k|                                                 value_width, postfix_width);
 6172|   132k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 132k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   132k|        return it;
 6177|   132k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|  1.25M|    {
 5248|  1.25M|        return m_type == reader_type::word;
 5249|  1.25M|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   885k|{
 1132|   885k|    auto it = src.begin();
 1133|  6.81M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 5.95M, False: 860k]
  ------------------
 1134|  5.95M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  5.95M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 14.3k, False: 5.94M]
  ------------------
 1136|  14.3k|            return false;
 1137|  14.3k|        }
 1138|  5.94M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 1.55k, False: 5.94M]
  ------------------
 1139|  1.55k|            return false;
 1140|  1.55k|        }
 1141|  5.94M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  5.94M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  5.94M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 8.57k, False: 5.93M]
  ------------------
 1144|  8.57k|            return false;
 1145|  8.57k|        }
 1146|  5.93M|        it += len;
 1147|  5.93M|    }
 1148|   860k|    return true;
 1149|   885k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|   326k|{
 2982|   326k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|   326k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 4.75k, False: 321k]
  ------------------
 2984|  4.75k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  4.75k|    static_cast<    \
  |  |  929|  4.75k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  4.75k|        }
 2986|   321k|        else {
 2987|   321k|            dest.assign(source.view());
 2988|   321k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|   326k|    return {};
 2995|   326k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  20.5k|        {
 5092|  20.5k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 20.5k, False: 0]
  ------------------
 5093|  20.5k|                return {};
 5094|  20.5k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|  48.5k|        {
 5065|  48.5k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  48.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  48.5k|            const auto val =
 5067|  48.5k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  48.5k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  48.5k|                    (val % 8)) &
 5070|  48.5k|                   1u;
 5071|  48.5k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  52.2k|        {
 5118|  52.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 3.67k, False: 48.5k]
  ------------------
 5119|  3.67k|                return false;
 5120|  3.67k|            }
 5121|       |
 5122|  48.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  52.2k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  20.5k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|   139k|    {
 5266|   139k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   139k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   139k|        return read_impl(range, specs, value);
 5268|   139k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|   139k|    {
 5284|   139k|        SCN_CLANG_PUSH
 5285|   139k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   139k|        switch (m_type) {
 5288|   133k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 133k, False: 6.85k]
  ------------------
 5289|   133k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 139k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 139k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  6.85k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 6.85k, False: 133k]
  ------------------
 5299|  6.85k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  6.85k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 139k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 139k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 139k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   139k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   139k|        }
 5320|       |
 5321|   139k|        SCN_CLANG_POP
 5322|   139k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|   331k|    {
 4809|   331k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   331k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|   331k|{
 4741|   331k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   331k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   331k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 7.40k, False: 324k]
  ------------------
 4745|  7.40k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  7.40k|                                     "Invalid encoding in scanned string");
 4747|  7.40k|    }
 4748|   324k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   324k|    static_cast<    \
  |  |  929|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   324k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   324k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 324k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   324k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   324k|    static_cast<    \
  |  |  929|   324k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   324k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|   331k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   331k|    else {
 2085|   331k|        auto it = range.begin();
 2086|       |
 2087|   331k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|   331k|            auto seg = get_contiguous_beginning(range);
 2089|   331k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|   331k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 331k]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|   331k|            ranges::advance(it, seg.size());
 2094|   331k|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|   331k|            ranges::subrange{it, range.end()},
 2098|   331k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   331k|    }
 2100|   331k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   665k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   665k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   665k|        else {
 1054|   665k|            return r.begin().contiguous_segment();
 1055|   665k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   665k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   639k|{
 2049|   639k|    auto it = range.begin();
 2050|  3.54M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 3.53M, False: 8.91k]
  ------------------
 2051|  3.53M|        const auto val =
 2052|  3.53M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  3.53M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  3.53M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.49M, False: 38.9k]
  |  |  ------------------
  ------------------
 2054|  3.49M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  3.49M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  3.49M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 631k, False: 2.86M]
  ------------------
 2057|   631k|                return it;
 2058|   631k|            }
 2059|  3.49M|        }
 2060|  2.90M|        it = val.iterator;
 2061|  2.90M|    }
 2062|       |
 2063|  8.91k|    return it;
 2064|   639k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  3.53M|{
 1887|  3.53M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  3.53M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.53M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  3.53M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  3.53M|    auto it = range.begin();
 1891|  3.53M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  3.53M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  3.53M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 38.9k, False: 3.49M]
  |  |  ------------------
  ------------------
 1894|  38.9k|        ++it;
 1895|  38.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  38.9k|        return {it, {}};
 1897|  38.9k|    }
 1898|       |
 1899|  3.49M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 3.32M, False: 168k]
  ------------------
 1900|  3.32M|        ++it;
 1901|  3.32M|        return {it, string_type(1, *range.begin())};
 1902|  3.32M|    }
 1903|       |
 1904|   168k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|   168k|    return {it, string_type{range.begin(), it}};
 1906|  3.49M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  38.9k|{
 1155|  38.9k|    auto it = input.begin();
 1156|  97.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 95.7k, False: 1.45k]
  ------------------
 1157|  95.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 37.4k, False: 58.2k]
  ------------------
 1158|  37.4k|            break;
 1159|  37.4k|        }
 1160|  95.7k|    }
 1161|  38.9k|    return it;
 1162|  38.9k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|   168k|    {
  283|   168k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   168k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|   168k|    {
  252|   168k|        constexpr iter_difference_t<I> zero{0};
  253|   168k|        iter_difference_t<I> counter{0};
  254|       |
  255|   631k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 464k, False: 167k]
  |  Branch (255:30): [True: 462k, False: 1.16k]
  ------------------
  256|   462k|            ++i;
  257|   462k|            ++counter;
  258|   462k|        }
  259|       |
  260|   168k|        return counter;
  261|   168k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  3.53M|    {
 1878|  3.53M|        return !codepoint.empty();
 1879|  3.53M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   331k|        : m_fptr([](storage fn,
  743|   331k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   331k|              cvref<T> obj = *get<T>(fn);
  745|   331k|              if constexpr (std::is_void_v<R>) {
  746|   331k|                  obj(static_cast<decltype(args)>(args)...);
  747|   331k|              }
  748|   331k|              else {
  749|   331k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   331k|              }
  751|   331k|          }),
  752|   331k|          m_storage(std::addressof(f))
  753|   331k|    {
  754|   331k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.28M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.28M|              else {
  749|  2.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.28M|              }
  751|  2.28M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.28M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.28M|        else if constexpr (std::is_object_v<T>) {
  688|  2.28M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.28M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|  2.28M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   331k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   331k|        {
  662|   331k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  6.85k|    {
 5037|  6.85k|        auto it = read_source_impl(range, {specs});
 5038|  6.85k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 2.09k]
  |  |  ------------------
  ------------------
 5039|  4.75k|            return unexpected(it.error());
 5040|  4.75k|        }
 5041|       |
 5042|  2.09k|        return read_string_impl(range, *it, value);
 5043|  6.85k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  6.85k|    {
 5142|  6.85k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  6.85k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  6.85k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.85k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  6.85k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  6.85k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 6.85k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  6.85k|        const auto cb = [&](SourceCharT ch) {
 5165|  6.85k|            return cb_wrapper.on_ascii_only(ch);
 5166|  6.85k|        };
 5167|       |
 5168|  6.85k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 6.85k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  6.85k|        auto it = read_while_code_unit(range, cb);
 5173|  6.85k|        return check_nonempty(it, range);
 5174|  6.85k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  6.85k|    {
 5180|  6.85k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 4.75k, False: 2.09k]
  ------------------
 5181|  4.75k|            return unexpected_scan_error(
 5182|  4.75k|                scan_error::invalid_scanned_value,
 5183|  4.75k|                "No characters matched in [character set]");
 5184|  4.75k|        }
 5185|       |
 5186|  2.09k|        return it;
 5187|  6.85k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   308k|{
 2070|   308k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   308k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  6.85k|        : m_fptr([](storage fn,
  743|  6.85k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.85k|              cvref<T> obj = *get<T>(fn);
  745|  6.85k|              if constexpr (std::is_void_v<R>) {
  746|  6.85k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.85k|              }
  748|  6.85k|              else {
  749|  6.85k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.85k|              }
  751|  6.85k|          }),
  752|  6.85k|          m_storage(std::addressof(f))
  753|  6.85k|    {
  754|  6.85k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  17.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.4k|              else {
  749|  17.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.4k|              }
  751|  17.4k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  17.4k|    {
  684|  17.4k|        if constexpr (std::is_const_v<T>) {
  685|  17.4k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.4k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5164|  17.4k|        const auto cb = [&](SourceCharT ch) {
 5165|  17.4k|            return cb_wrapper.on_ascii_only(ch);
 5166|  17.4k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  6.85k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  6.85k|        {
  667|  6.85k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|  2.09k|{
 4741|  2.09k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.09k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.09k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 2.09k]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|  2.09k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.09k|    static_cast<    \
  |  |  929|  2.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  2.09k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.09k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  2.09k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.09k|    static_cast<    \
  |  |  929|  2.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  2.09k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|   116k|    {
 5266|   116k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   116k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   116k|        return read_impl(range, specs, value);
 5268|   116k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|   116k|    {
 5284|   116k|        SCN_CLANG_PUSH
 5285|   116k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   116k|        switch (m_type) {
 5288|   109k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 109k, False: 6.85k]
  ------------------
 5289|   109k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 116k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 116k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  6.85k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 6.85k, False: 109k]
  ------------------
 5299|  6.85k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  6.85k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 116k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 116k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 116k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   116k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   116k|        }
 5320|       |
 5321|   116k|        SCN_CLANG_POP
 5322|   116k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|   273k|    {
 4809|   273k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   273k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|   273k|{
 4741|   273k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   273k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   273k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 8.52k, False: 265k]
  ------------------
 4745|  8.52k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  8.52k|                                     "Invalid encoding in scanned string");
 4747|  8.52k|    }
 4748|   265k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   265k|    static_cast<    \
  |  |  929|   265k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   265k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   265k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 265k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   265k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   265k|    static_cast<    \
  |  |  929|   265k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   265k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|   267k|{
 3001|   267k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|   267k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|   267k|    return {};
 3009|   267k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|   547k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|   547k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|   547k|        auto buf = make_contiguous_buffer(range);
 2080|   547k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|   547k|        return ranges::next(range.begin(),
 2082|   547k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|   547k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  6.85k|    {
 5037|  6.85k|        auto it = read_source_impl(range, {specs});
 5038|  6.85k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 2.09k]
  |  |  ------------------
  ------------------
 5039|  4.75k|            return unexpected(it.error());
 5040|  4.75k|        }
 5041|       |
 5042|  2.09k|        return read_string_impl(range, *it, value);
 5043|  6.85k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  13.7k|    {
 5142|  13.7k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  13.7k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  13.7k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  13.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.7k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  13.7k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  13.7k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 13.7k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  13.7k|        const auto cb = [&](SourceCharT ch) {
 5165|  13.7k|            return cb_wrapper.on_ascii_only(ch);
 5166|  13.7k|        };
 5167|       |
 5168|  13.7k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 13.7k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  13.7k|        auto it = read_while_code_unit(range, cb);
 5173|  13.7k|        return check_nonempty(it, range);
 5174|  13.7k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  13.7k|    {
 5180|  13.7k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 9.50k, False: 4.19k]
  ------------------
 5181|  9.50k|            return unexpected_scan_error(
 5182|  9.50k|                scan_error::invalid_scanned_value,
 5183|  9.50k|                "No characters matched in [character set]");
 5184|  9.50k|        }
 5185|       |
 5186|  4.19k|        return it;
 5187|  13.7k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  13.7k|        : m_fptr([](storage fn,
  743|  13.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.7k|              cvref<T> obj = *get<T>(fn);
  745|  13.7k|              if constexpr (std::is_void_v<R>) {
  746|  13.7k|                  obj(static_cast<decltype(args)>(args)...);
  747|  13.7k|              }
  748|  13.7k|              else {
  749|  13.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.7k|              }
  751|  13.7k|          }),
  752|  13.7k|          m_storage(std::addressof(f))
  753|  13.7k|    {
  754|  13.7k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  34.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.8k|              else {
  749|  34.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.8k|              }
  751|  34.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  34.8k|    {
  684|  34.8k|        if constexpr (std::is_const_v<T>) {
  685|  34.8k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.8k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  34.8k|        const auto cb = [&](SourceCharT ch) {
 5165|  34.8k|            return cb_wrapper.on_ascii_only(ch);
 5166|  34.8k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  13.7k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  13.7k|        {
  667|  13.7k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|  2.09k|{
 4741|  2.09k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.09k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.09k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 2.09k]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|  2.09k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.09k|    static_cast<    \
  |  |  929|  2.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  2.09k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.09k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.09k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  2.09k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.09k|    static_cast<    \
  |  |  929|  2.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  2.09k|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|   288k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|   288k|                       std::is_same_v<T, std::wstring_view>) {
 5812|   288k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   288k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|   116k|    {
 5266|   116k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   116k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   116k|        return read_impl(range, specs, value);
 5268|   116k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|   116k|    {
 5284|   116k|        SCN_CLANG_PUSH
 5285|   116k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   116k|        switch (m_type) {
 5288|   109k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 109k, False: 6.85k]
  ------------------
 5289|   109k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 116k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 116k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  6.85k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 6.85k, False: 109k]
  ------------------
 5299|  6.85k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  6.85k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 116k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 116k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 116k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   116k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   116k|        }
 5320|       |
 5321|   116k|        SCN_CLANG_POP
 5322|   116k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|   273k|    {
 4816|   273k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|   273k|                                     value);
 4818|   273k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|   273k|{
 4762|   273k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|   273k|    auto src = [&]() {
 4765|   273k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|   273k|            return make_contiguous_buffer(
 4767|   273k|                ranges::subrange{range.begin().base(), result.base()});
 4768|   273k|        }
 4769|   273k|        else {
 4770|   273k|            return make_contiguous_buffer(
 4771|   273k|                ranges::subrange{range.begin(), result});
 4772|   273k|        }
 4773|   273k|    }();
 4774|   273k|    using src_type = decltype(src);
 4775|       |
 4776|   273k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|   273k|    else {
 4789|   273k|        const auto view = src.view();
 4790|   273k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|   273k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 8.52k, False: 265k]
  ------------------
 4793|  8.52k|            return unexpected_scan_error(
 4794|  8.52k|                scan_error::invalid_scanned_value,
 4795|  8.52k|                "Invalid encoding in scanned string_view");
 4796|  8.52k|        }
 4797|       |
 4798|   265k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   265k|    static_cast<    \
  |  |  929|   265k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|   273k|    }
 4800|   273k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|   273k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|   273k|        else {
 4770|   273k|            return make_contiguous_buffer(
 4771|   273k|                ranges::subrange{range.begin(), result});
 4772|   273k|        }
 4773|   273k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  6.85k|    {
 5051|  6.85k|        auto it = read_source_impl(range, {specs});
 5052|  6.85k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  6.85k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 2.09k]
  |  |  ------------------
  ------------------
 5053|  4.75k|            return unexpected(it.error());
 5054|  4.75k|        }
 5055|       |
 5056|  2.09k|        return read_string_view_impl(range, *it, value);
 5057|  6.85k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|  2.09k|{
 4762|  2.09k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  2.09k|    auto src = [&]() {
 4765|  2.09k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  2.09k|            return make_contiguous_buffer(
 4767|  2.09k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  2.09k|        }
 4769|  2.09k|        else {
 4770|  2.09k|            return make_contiguous_buffer(
 4771|  2.09k|                ranges::subrange{range.begin(), result});
 4772|  2.09k|        }
 4773|  2.09k|    }();
 4774|  2.09k|    using src_type = decltype(src);
 4775|       |
 4776|  2.09k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  2.09k|    else {
 4789|  2.09k|        const auto view = src.view();
 4790|  2.09k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  2.09k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 2.09k]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|  2.09k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  2.09k|    static_cast<    \
  |  |  929|  2.09k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  2.09k|    }
 4800|  2.09k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|  2.09k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  2.09k|        else {
 4770|  2.09k|            return make_contiguous_buffer(
 4771|  2.09k|                ranges::subrange{range.begin(), result});
 4772|  2.09k|        }
 4773|  2.09k|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   334k|{
 2940|   334k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 334k, False: 0]
  ------------------
 2941|   334k|        auto it = read_while_classic_space(range);
 2942|   334k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   334k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   334k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.80k, False: 331k]
  |  |  ------------------
  ------------------
 2944|  2.80k|            return unexpected(e);
 2945|  2.80k|        }
 2946|       |
 2947|   331k|        return it;
 2948|   334k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   334k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   334k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   334k|    else {
 2114|   334k|        auto it = range.begin();
 2115|       |
 2116|   334k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|   334k|            auto seg = get_contiguous_beginning(range);
 2118|   334k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|   334k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 25.6k, False: 308k]
  ------------------
 2120|  25.6k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  25.6k|            }
 2122|   308k|            ranges::advance(it, seg.size());
 2123|   308k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   334k|            return detail::is_cp_space(cp);
 2127|   334k|        });
 2128|   334k|    }
 2129|   334k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   308k|        : m_fptr([](storage fn,
  743|   308k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   308k|              cvref<T> obj = *get<T>(fn);
  745|   308k|              if constexpr (std::is_void_v<R>) {
  746|   308k|                  obj(static_cast<decltype(args)>(args)...);
  747|   308k|              }
  748|   308k|              else {
  749|   308k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   308k|              }
  751|   308k|          }),
  752|   308k|          m_storage(std::addressof(f))
  753|   308k|    {
  754|   308k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.21M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.21M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.21M|              else {
  749|  1.21M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.21M|              }
  751|  1.21M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.21M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.21M|        else if constexpr (std::is_object_v<T>) {
  688|  1.21M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.21M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.21M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.21M|            return detail::is_cp_space(cp);
 2127|  1.21M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   308k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   308k|        {
  662|   308k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  2.98M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  2.98M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  2.98M|        auto beg = r.begin();
  990|  2.98M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 2.98M, False: 0]
  ------------------
  991|  2.98M|            return false;
  992|  2.98M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  2.98M|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  63.6k|    {
  763|  63.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  63.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  63.6k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  29.3k|        : m_fptr([](storage fn,
  743|  29.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  29.3k|              cvref<T> obj = *get<T>(fn);
  745|  29.3k|              if constexpr (std::is_void_v<R>) {
  746|  29.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  29.3k|              }
  748|  29.3k|              else {
  749|  29.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  29.3k|              }
  751|  29.3k|          }),
  752|  29.3k|          m_storage(std::addressof(f))
  753|  29.3k|    {
  754|  29.3k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  31.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.8k|              else {
  749|  31.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.8k|              }
  751|  31.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  31.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.8k|        else if constexpr (std::is_object_v<T>) {
  688|  31.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.8k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  29.3k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  29.3k|        {
  662|  29.3k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|  1.19M|    {
 6026|  1.19M|        const bool need_skipped_width =
 6027|  1.19M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 1.19M]
  |  Branch (6027:33): [True: 0, False: 1.19M]
  ------------------
 6028|  1.19M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  1.19M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 1.19M]
  ------------------
 6032|  1.19M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 1.19M]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  1.19M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 1.19M, False: 0]
  |  Branch (6036:56): [True: 1.18M, False: 9.76k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  1.18M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 1.18M]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  2.37M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  1.18M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.18M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.18M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 1.18M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.06k|    }                                                  \
  |  |  |  | 3667|  1.18M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.18M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  2.37M|                            make_eof_scan_error));
 6047|       |
 6048|  2.37M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 1.18M]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  1.18M|            return result_type{it, 0};
 6056|  2.37M|        }
 6057|       |
 6058|  9.76k|        return result_type{rng.begin(), 0};
 6059|  1.19M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  9.76k|{
 1964|  9.76k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  9.76k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  9.76k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  9.76k|    else {
 1949|  9.76k|        auto first = range.begin();
 1950|  10.7k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 10.6k, False: 96]
  ------------------
 1951|  10.6k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 9.67k, False: 934]
  ------------------
 1952|  9.67k|                return first;
 1953|  9.67k|            }
 1954|  10.6k|        }
 1955|     96|        return first;
 1956|  9.76k|    }
 1957|  9.76k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  1.17M|    {
  108|  1.17M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.17M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  1.17M|    {
   94|  1.17M|        iter_difference_t<I> counter{0};
   95|  27.3M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 26.1M, False: 1.17M]
  ------------------
   96|  26.1M|            ++i;
   97|  26.1M|            ++counter;
   98|  26.1M|        }
   99|  1.17M|        return counter;
  100|  1.17M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  4.75M|{
  950|  4.75M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  4.75M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.16k, False: 4.74M]
  |  |  ------------------
  ------------------
  951|  5.16k|        return eof_error::eof;
  952|  5.16k|    }
  953|  4.74M|    return eof_error::good;
  954|  4.75M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  77.3M|{
  944|  77.3M|    return is_range_eof(r.begin(), r.end());
  945|  77.3M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  77.3M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  77.3M|    {
  937|  77.3M|        return begin == end;
  938|  77.3M|    }
  939|  77.3M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|  2.96M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  2.96M|    else {
 1677|  2.96M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  2.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  2.96M|    }
 1679|  2.96M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|  2.96M|    {
 1525|  2.96M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  2.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  2.96M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|  2.96M|    {
 1609|  2.96M|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  2.96M|                           ranges::common_range<Range>) {
 1626|  2.96M|            auto beg_seg = range.begin().contiguous_segment();
 1627|  2.96M|            auto end_seg = range.end().contiguous_segment();
 1628|  2.96M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.71k, False: 2.95M]
  |  |  ------------------
  ------------------
 1629|  2.96M|                             detail::to_address(end_seg.end()))) {
 1630|  9.71k|                auto& str = m_storage.emplace();
 1631|  9.71k|                str.reserve(range.end().position() - range.begin().position());
 1632|  9.71k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  9.71k|                m_view = string_view_type{str};
 1634|  9.71k|                return;
 1635|  9.71k|            }
 1636|       |
 1637|  2.95M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|  2.95M|                                                            end_seg.data());
 1639|  2.95M|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  2.96M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  5.91M|    {
 1570|  5.91M|        return m_view;
 1571|  5.91M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|  2.96M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  1.17M|    {
 6068|  1.17M|        const bool need_skipped_width =
 6069|  1.17M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 1.17M]
  |  Branch (6069:33): [True: 0, False: 1.17M]
  ------------------
 6070|  1.17M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  1.17M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 1.17M]
  ------------------
 6073|  1.17M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 1.17M]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  1.17M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 1.17M, False: 0]
  ------------------
 6082|  1.17M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 216, False: 1.17M]
  ------------------
 6083|  1.17M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 216]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    216|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 216]
  ------------------
 6085|    216|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  1.17M|        return result_type{rng.begin(), 0};
 6107|  1.17M|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|   145M|{
 1887|   145M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   145M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   145M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   145M|    auto it = range.begin();
 1891|   145M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   145M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   145M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 145M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|   145M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 145M, False: 0]
  ------------------
 1900|   145M|        ++it;
 1901|   145M|        return {it, string_type(1, *range.begin())};
 1902|   145M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|   145M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   154M|{
  944|   154M|    return is_range_eof(r.begin(), r.end());
  945|   154M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   154M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   154M|    {
  937|   154M|        return begin == end;
  938|   154M|    }
  939|   154M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|   145M|    {
 1878|   145M|        return !codepoint.empty();
 1879|   145M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  9.50M|{
  950|  9.50M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  9.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 9.49M]
  |  |  ------------------
  ------------------
  951|  10.3k|        return eof_error::eof;
  952|  10.3k|    }
  953|  9.49M|    return eof_error::good;
  954|  9.50M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  5.93M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  5.93M|                  ranges::sized_range<Range>) {
 1674|  5.93M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  5.93M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  5.93M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  5.93M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  5.93M|    {
 1478|  5.93M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  8.88M|    {
 1491|  8.88M|        return sv;
 1492|  8.88M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  19.5k|{
 1964|  19.5k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  19.5k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  19.5k|{
 1945|  19.5k|    if constexpr (ranges::common_range<Range>) {
 1946|  19.5k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  19.5k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  5.93M|{
 2940|  5.93M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 5.93M, False: 0]
  ------------------
 2941|  5.93M|        auto it = read_while_classic_space(range);
 2942|  5.93M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  5.93M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.93M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.91k, False: 5.93M]
  |  |  ------------------
  ------------------
 2944|  4.91k|            return unexpected(e);
 2945|  4.91k|        }
 2946|       |
 2947|  5.93M|        return it;
 2948|  5.93M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  5.93M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  5.93M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  5.93M|    else {
 2114|  5.93M|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  5.93M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  5.93M|            return detail::is_cp_space(cp);
 2127|  5.93M|        });
 2128|  5.93M|    }
 2129|  5.93M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  5.93M|{
 2070|  5.93M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  5.93M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  11.8M|{
 2049|  11.8M|    auto it = range.begin();
 2050|   145M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 145M, False: 30.8k]
  ------------------
 2051|   145M|        const auto val =
 2052|   145M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   145M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   145M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 145M, False: 0]
  |  |  ------------------
  ------------------
 2054|   145M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   145M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   145M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 11.8M, False: 133M]
  ------------------
 2057|  11.8M|                return it;
 2058|  11.8M|            }
 2059|   145M|        }
 2060|   133M|        it = val.iterator;
 2061|   133M|    }
 2062|       |
 2063|  30.8k|    return it;
 2064|  11.8M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  5.93M|        : m_fptr([](storage fn,
  743|  5.93M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.93M|              cvref<T> obj = *get<T>(fn);
  745|  5.93M|              if constexpr (std::is_void_v<R>) {
  746|  5.93M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.93M|              }
  748|  5.93M|              else {
  749|  5.93M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.93M|              }
  751|  5.93M|          }),
  752|  5.93M|          m_storage(std::addressof(f))
  753|  5.93M|    {
  754|  5.93M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  13.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.5M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.5M|              else {
  749|  13.5M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.5M|              }
  751|  13.5M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  13.5M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  13.5M|        else if constexpr (std::is_object_v<T>) {
  688|  13.5M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.5M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  13.5M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  13.5M|            return detail::is_cp_space(cp);
 2127|  13.5M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  5.93M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.93M|        {
  662|  5.93M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|  2.95M|    {
 1575|  2.95M|        return m_storage.has_value();
 1576|  2.95M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|  3.00k|    {
 1580|  3.00k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.00k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.00k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  3.00k|        return *m_storage;
 1582|  3.00k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  8.97M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  3.62M|    {
 3029|  3.62M|        reader_error_handler eh{};
 3030|  3.62M|        get_derived().check_specs_impl(specs, eh);
 3031|  3.62M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  3.62M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.5k, False: 3.59M]
  |  |  ------------------
  ------------------
 3032|  28.5k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  28.5k|        }
 3034|  3.59M|        return {};
 3035|  3.62M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|  3.62M|    {
 3040|  3.62M|        return static_cast<Derived&>(*this);
 3041|  3.62M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  3.62M|    {
 5199|  3.62M|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  3.62M|        SCN_GCC_PUSH
 5202|  3.62M|        SCN_GCC_IGNORE("-Wswitch")
 5203|  3.62M|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  3.62M|        SCN_CLANG_PUSH
 5206|  3.62M|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  3.62M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  3.62M|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 3.62M]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 3.62M]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|  3.56M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 3.56M, False: 57.8k]
  ------------------
 5215|  3.56M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 3.56M]
  ------------------
 5216|  3.56M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 3.56M]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|  3.56M|                else {
 5220|  3.56M|                    m_type = reader_type::word;
 5221|  3.56M|                }
 5222|  3.56M|                break;
 5223|      0|            }
 5224|       |
 5225|  28.5k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 28.5k, False: 3.59M]
  ------------------
 5226|  28.5k|                m_type = reader_type::character;
 5227|  28.5k|                break;
 5228|       |
 5229|  29.3k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 29.3k, False: 3.59M]
  ------------------
 5230|  29.3k|                m_type = reader_type::character_set;
 5231|  29.3k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 3.62M]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 3.62M]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|  3.62M|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  3.62M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  12.4M|    {
 5248|  12.4M|        return m_type == reader_type::word;
 5249|  12.4M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  8.90M|{
 1132|  8.90M|    auto it = src.begin();
 1133|   194M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 185M, False: 8.84M]
  ------------------
 1134|   185M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   185M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 185M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   185M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 185M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   185M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   185M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   185M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 55.8k, False: 185M]
  ------------------
 1144|  55.8k|            return false;
 1145|  55.8k|        }
 1146|   185M|        it += len;
 1147|   185M|    }
 1148|  8.84M|    return true;
 1149|  8.90M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|  29.3k|        {
 5092|  29.3k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 29.3k, False: 0]
  ------------------
 5093|  29.3k|                return {};
 5094|  29.3k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  18.5k|        {
 5065|  18.5k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  18.5k|            const auto val =
 5067|  18.5k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  18.5k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  18.5k|                    (val % 8)) &
 5070|  18.5k|                   1u;
 5071|  18.5k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  31.8k|        {
 5118|  31.8k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 13.2k, False: 18.5k]
  ------------------
 5119|  13.2k|                return false;
 5120|  13.2k|            }
 5121|       |
 5122|  18.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  31.8k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  29.3k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|  2.96M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  2.96M|    else {
 2085|  2.96M|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  2.96M|        return read_until_code_point(
 2097|  2.96M|            ranges::subrange{it, range.end()},
 2098|  2.96M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  2.96M|    }
 2100|  2.96M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  5.93M|{
 2049|  5.93M|    auto it = range.begin();
 2050|  72.5M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 72.5M, False: 15.4k]
  ------------------
 2051|  72.5M|        const auto val =
 2052|  72.5M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  72.5M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  72.5M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 72.5M, False: 0]
  |  |  ------------------
  ------------------
 2054|  72.5M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  72.5M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  72.5M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 5.92M, False: 66.6M]
  ------------------
 2057|  5.92M|                return it;
 2058|  5.92M|            }
 2059|  72.5M|        }
 2060|  66.6M|        it = val.iterator;
 2061|  66.6M|    }
 2062|       |
 2063|  15.4k|    return it;
 2064|  5.93M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  72.5M|{
 1887|  72.5M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  72.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  72.5M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  72.5M|    auto it = range.begin();
 1891|  72.5M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  72.5M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  72.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 72.5M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  72.5M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 72.5M, False: 0]
  ------------------
 1900|  72.5M|        ++it;
 1901|  72.5M|        return {it, string_type(1, *range.begin())};
 1902|  72.5M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  72.5M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|  72.5M|    {
 1878|  72.5M|        return !codepoint.empty();
 1879|  72.5M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.96M|        : m_fptr([](storage fn,
  743|  2.96M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.96M|              cvref<T> obj = *get<T>(fn);
  745|  2.96M|              if constexpr (std::is_void_v<R>) {
  746|  2.96M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.96M|              }
  748|  2.96M|              else {
  749|  2.96M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.96M|              }
  751|  2.96M|          }),
  752|  2.96M|          m_storage(std::addressof(f))
  753|  2.96M|    {
  754|  2.96M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  65.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  65.8M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  65.8M|              else {
  749|  65.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  65.8M|              }
  751|  65.8M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  65.8M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  65.8M|        else if constexpr (std::is_object_v<T>) {
  688|  65.8M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  65.8M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|  65.8M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.96M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.96M|        {
  662|  2.96M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  9.76k|    {
 5142|  9.76k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  9.76k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  9.76k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.76k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  9.76k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  9.76k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 9.76k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  9.76k|        const auto cb = [&](SourceCharT ch) {
 5165|  9.76k|            return cb_wrapper.on_ascii_only(ch);
 5166|  9.76k|        };
 5167|       |
 5168|  9.76k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 9.76k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  9.76k|        auto it = read_while_code_unit(range, cb);
 5173|  9.76k|        return check_nonempty(it, range);
 5174|  9.76k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  9.76k|    {
 5180|  9.76k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 9.50k, False: 264]
  ------------------
 5181|  9.50k|            return unexpected_scan_error(
 5182|  9.50k|                scan_error::invalid_scanned_value,
 5183|  9.50k|                "No characters matched in [character set]");
 5184|  9.50k|        }
 5185|       |
 5186|    264|        return it;
 5187|  9.76k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  2.96M|{
 2070|  2.96M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  2.96M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  9.76k|        : m_fptr([](storage fn,
  743|  9.76k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.76k|              cvref<T> obj = *get<T>(fn);
  745|  9.76k|              if constexpr (std::is_void_v<R>) {
  746|  9.76k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.76k|              }
  748|  9.76k|              else {
  749|  9.76k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.76k|              }
  751|  9.76k|          }),
  752|  9.76k|          m_storage(std::addressof(f))
  753|  9.76k|    {
  754|  9.76k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  10.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.6k|              else {
  749|  10.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.6k|              }
  751|  10.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  10.6k|    {
  684|  10.6k|        if constexpr (std::is_const_v<T>) {
  685|  10.6k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.6k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5164|  10.6k|        const auto cb = [&](SourceCharT ch) {
 5165|  10.6k|            return cb_wrapper.on_ascii_only(ch);
 5166|  10.6k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  9.76k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  9.76k|        {
  667|  9.76k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  5.93M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  5.93M|    else {
 2085|  5.93M|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  5.93M|        return read_until_code_point(
 2097|  5.93M|            ranges::subrange{it, range.end()},
 2098|  5.93M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  5.93M|    }
 2100|  5.93M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  5.93M|        : m_fptr([](storage fn,
  743|  5.93M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.93M|              cvref<T> obj = *get<T>(fn);
  745|  5.93M|              if constexpr (std::is_void_v<R>) {
  746|  5.93M|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.93M|              }
  748|  5.93M|              else {
  749|  5.93M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.93M|              }
  751|  5.93M|          }),
  752|  5.93M|          m_storage(std::addressof(f))
  753|  5.93M|    {
  754|  5.93M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|   131M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   131M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   131M|              else {
  749|   131M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   131M|              }
  751|   131M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   131M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   131M|        else if constexpr (std::is_object_v<T>) {
  688|   131M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   131M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|   131M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  5.93M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  5.93M|        {
  662|  5.93M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  19.5k|    {
 5142|  19.5k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  19.5k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  19.5k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  19.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.5k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  19.5k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  19.5k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 19.5k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  19.5k|        const auto cb = [&](SourceCharT ch) {
 5165|  19.5k|            return cb_wrapper.on_ascii_only(ch);
 5166|  19.5k|        };
 5167|       |
 5168|  19.5k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 19.5k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  19.5k|        auto it = read_while_code_unit(range, cb);
 5173|  19.5k|        return check_nonempty(it, range);
 5174|  19.5k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  19.5k|    {
 5180|  19.5k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 19.0k, False: 528]
  ------------------
 5181|  19.0k|            return unexpected_scan_error(
 5182|  19.0k|                scan_error::invalid_scanned_value,
 5183|  19.0k|                "No characters matched in [character set]");
 5184|  19.0k|        }
 5185|       |
 5186|    528|        return it;
 5187|  19.5k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  19.5k|        : m_fptr([](storage fn,
  743|  19.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.5k|              cvref<T> obj = *get<T>(fn);
  745|  19.5k|              if constexpr (std::is_void_v<R>) {
  746|  19.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.5k|              }
  748|  19.5k|              else {
  749|  19.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.5k|              }
  751|  19.5k|          }),
  752|  19.5k|          m_storage(std::addressof(f))
  753|  19.5k|    {
  754|  19.5k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  21.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.2k|              else {
  749|  21.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.2k|              }
  751|  21.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  21.2k|    {
  684|  21.2k|        if constexpr (std::is_const_v<T>) {
  685|  21.2k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.2k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  21.2k|        const auto cb = [&](SourceCharT ch) {
 5165|  21.2k|            return cb_wrapper.on_ascii_only(ch);
 5166|  21.2k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  19.5k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  19.5k|        {
  667|  19.5k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|  1.20M|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  1.20M|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  1.20M|            auto rd = make_reader<T, char_type>();
 6195|  1.20M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 1.19M]
  |  |  ------------------
  ------------------
 6196|  9.50k|                return unexpected(e);
 6197|  9.50k|            }
 6198|       |
 6199|  1.19M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 1.19M, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  1.19M|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  1.19M|                return impl(rd, range, value);
 6202|  1.19M|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  1.20M|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  5.98M|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  5.98M|                       std::is_same_v<T, std::wstring>) {
 5816|  5.98M|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  5.98M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|  1.19M|    {
 6113|  1.19M|        const bool need_skipped_width =
 6114|  1.19M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 1.19M]
  |  Branch (6114:33): [True: 0, False: 1.19M]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  1.19M|        auto it = rng.begin();
 6118|  1.19M|        std::ptrdiff_t prefix_width = 0;
 6119|  1.19M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.19M]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  1.19M|        else {
 6127|  1.19M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.19M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 1.19M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.06k|    }                                                  \
  |  |  |  | 3667|  1.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  1.19M|            std::tie(it, prefix_width) = prefix_result;
 6129|  1.19M|        }
 6130|  1.19M|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  1.19M|        std::ptrdiff_t value_width = 0;
 6134|  1.19M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 1.19M]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  1.19M|        else {
 6150|  1.19M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 1.17M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  1.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.17M|                                             specs, value, loc));
 6152|       |
 6153|  1.17M|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 1.17M]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  1.17M|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.17M|        std::ptrdiff_t postfix_width = 0;
 6162|  1.17M|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.17M, False: 1.85k]
  ------------------
 6163|  1.17M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.17M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.17M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.17M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.17M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.17M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.17M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.17M|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.17M|                                 value_width));
 6167|  1.17M|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.17M|        }
 6169|       |
 6170|  1.17M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.17M|                                                 value_width, postfix_width);
 6172|  1.17M|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 1.17M]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  1.17M|        return it;
 6177|  1.17M|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|  2.94M|{
 2982|  2.94M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|  2.94M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 3.00k, False: 2.94M]
  ------------------
 2984|  3.00k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.00k|    static_cast<    \
  |  |  929|  3.00k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  3.00k|        }
 2986|  2.94M|        else {
 2987|  2.94M|            dest.assign(source.view());
 2988|  2.94M|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|  2.94M|    return {};
 2995|  2.94M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|  1.19M|    {
 5266|  1.19M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.19M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.19M|        return read_impl(range, specs, value);
 5268|  1.19M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|  1.19M|    {
 5284|  1.19M|        SCN_CLANG_PUSH
 5285|  1.19M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.19M|        switch (m_type) {
 5288|  1.18M|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 1.18M, False: 9.76k]
  ------------------
 5289|  1.18M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 1.19M]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 1.19M]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  9.76k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 9.76k, False: 1.18M]
  ------------------
 5299|  9.76k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  9.76k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 1.19M]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 1.19M]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.19M]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.19M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.19M|        }
 5320|       |
 5321|  1.19M|        SCN_CLANG_POP
 5322|  1.19M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|  2.96M|    {
 4809|  2.96M|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|  2.96M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|  2.96M|{
 4741|  2.96M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.96M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.96M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 18.6k, False: 2.94M]
  ------------------
 4745|  18.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  18.6k|                                     "Invalid encoding in scanned string");
 4747|  18.6k|    }
 4748|  2.94M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  2.94M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.94M]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  2.94M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  2.94M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  9.76k|    {
 5037|  9.76k|        auto it = read_source_impl(range, {specs});
 5038|  9.76k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  9.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 264]
  |  |  ------------------
  ------------------
 5039|  9.50k|            return unexpected(it.error());
 5040|  9.50k|        }
 5041|       |
 5042|    264|        return read_string_impl(range, *it, value);
 5043|  9.76k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|    264|{
 4741|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    264|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    264|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 264]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    264|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    264|    static_cast<    \
  |  |  929|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    264|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    264|    return SCN_MOVE(result);
  ------------------
  |  |  928|    264|    static_cast<    \
  |  |  929|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    264|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  1.19M|    {
 5266|  1.19M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.19M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.19M|        return read_impl(range, specs, value);
 5268|  1.19M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  1.19M|    {
 5284|  1.19M|        SCN_CLANG_PUSH
 5285|  1.19M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.19M|        switch (m_type) {
 5288|  1.18M|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 1.18M, False: 9.76k]
  ------------------
 5289|  1.18M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 1.19M]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 1.19M]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  9.76k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 9.76k, False: 1.18M]
  ------------------
 5299|  9.76k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  9.76k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 1.19M]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 1.19M]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.19M]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.19M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.19M|        }
 5320|       |
 5321|  1.19M|        SCN_CLANG_POP
 5322|  1.19M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|  2.96M|    {
 4809|  2.96M|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|  2.96M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|  2.96M|{
 4741|  2.96M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  2.96M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  2.96M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 18.6k, False: 2.94M]
  ------------------
 4745|  18.6k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  18.6k|                                     "Invalid encoding in scanned string");
 4747|  18.6k|    }
 4748|  2.94M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  2.94M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.94M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.94M]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  2.94M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  2.94M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  2.94M|{
 3001|  2.94M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|  2.94M|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|  2.94M|    return {};
 3009|  2.94M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  9.76k|    {
 5037|  9.76k|        auto it = read_source_impl(range, {specs});
 5038|  9.76k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  9.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 264]
  |  |  ------------------
  ------------------
 5039|  9.50k|            return unexpected(it.error());
 5040|  9.50k|        }
 5041|       |
 5042|    264|        return read_string_impl(range, *it, value);
 5043|  9.76k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    264|{
 4741|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    264|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    264|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 264]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    264|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    264|    static_cast<    \
  |  |  929|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    264|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    264|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 264]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    264|    return SCN_MOVE(result);
  ------------------
  |  |  928|    264|    static_cast<    \
  |  |  929|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    264|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|  2.99M|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  2.99M|                       std::is_same_v<T, std::wstring_view>) {
 5812|  2.99M|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  2.99M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  1.19M|    {
 5266|  1.19M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.19M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  1.19M|        return read_impl(range, specs, value);
 5268|  1.19M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  1.19M|    {
 5284|  1.19M|        SCN_CLANG_PUSH
 5285|  1.19M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  1.19M|        switch (m_type) {
 5288|  1.18M|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 1.18M, False: 9.76k]
  ------------------
 5289|  1.18M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 1.19M]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 1.19M]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  9.76k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 9.76k, False: 1.18M]
  ------------------
 5299|  9.76k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  9.76k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 1.19M]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 1.19M]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 1.19M]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  1.19M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  1.19M|        }
 5320|       |
 5321|  1.19M|        SCN_CLANG_POP
 5322|  1.19M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|  2.96M|    {
 4816|  2.96M|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|  2.96M|                                     value);
 4818|  2.96M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|  2.96M|{
 4762|  2.96M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  2.96M|    auto src = [&]() {
 4765|  2.96M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  2.96M|            return make_contiguous_buffer(
 4767|  2.96M|                ranges::subrange{range.begin().base(), result.base()});
 4768|  2.96M|        }
 4769|  2.96M|        else {
 4770|  2.96M|            return make_contiguous_buffer(
 4771|  2.96M|                ranges::subrange{range.begin(), result});
 4772|  2.96M|        }
 4773|  2.96M|    }();
 4774|  2.96M|    using src_type = decltype(src);
 4775|       |
 4776|  2.96M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  2.96M|    else {
 4789|  2.96M|        const auto view = src.view();
 4790|  2.96M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  2.96M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 18.6k, False: 2.94M]
  ------------------
 4793|  18.6k|            return unexpected_scan_error(
 4794|  18.6k|                scan_error::invalid_scanned_value,
 4795|  18.6k|                "Invalid encoding in scanned string_view");
 4796|  18.6k|        }
 4797|       |
 4798|  2.94M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  2.94M|    static_cast<    \
  |  |  929|  2.94M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  2.96M|    }
 4800|  2.96M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|  2.96M|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  2.96M|        else {
 4770|  2.96M|            return make_contiguous_buffer(
 4771|  2.96M|                ranges::subrange{range.begin(), result});
 4772|  2.96M|        }
 4773|  2.96M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  9.76k|    {
 5051|  9.76k|        auto it = read_source_impl(range, {specs});
 5052|  9.76k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  9.76k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 264]
  |  |  ------------------
  ------------------
 5053|  9.50k|            return unexpected(it.error());
 5054|  9.50k|        }
 5055|       |
 5056|    264|        return read_string_view_impl(range, *it, value);
 5057|  9.76k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    264|{
 4762|    264|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    264|    auto src = [&]() {
 4765|    264|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    264|            return make_contiguous_buffer(
 4767|    264|                ranges::subrange{range.begin().base(), result.base()});
 4768|    264|        }
 4769|    264|        else {
 4770|    264|            return make_contiguous_buffer(
 4771|    264|                ranges::subrange{range.begin(), result});
 4772|    264|        }
 4773|    264|    }();
 4774|    264|    using src_type = decltype(src);
 4775|       |
 4776|    264|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    264|    else {
 4789|    264|        const auto view = src.view();
 4790|    264|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    264|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 264]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|    264|        return SCN_MOVE(result);
  ------------------
  |  |  928|    264|    static_cast<    \
  |  |  929|    264|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    264|    }
 4800|    264|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    264|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    264|        else {
 4770|    264|            return make_contiguous_buffer(
 4771|    264|                ranges::subrange{range.begin(), result});
 4772|    264|        }
 4773|    264|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  2.96M|{
 2940|  2.96M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 2.96M, False: 0]
  ------------------
 2941|  2.96M|        auto it = read_while_classic_space(range);
 2942|  2.96M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  2.96M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.45k, False: 2.96M]
  |  |  ------------------
  ------------------
 2944|  2.45k|            return unexpected(e);
 2945|  2.45k|        }
 2946|       |
 2947|  2.96M|        return it;
 2948|  2.96M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  2.96M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  2.96M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  2.96M|    else {
 2114|  2.96M|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  2.96M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  2.96M|            return detail::is_cp_space(cp);
 2127|  2.96M|        });
 2128|  2.96M|    }
 2129|  2.96M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  2.96M|        : m_fptr([](storage fn,
  743|  2.96M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.96M|              cvref<T> obj = *get<T>(fn);
  745|  2.96M|              if constexpr (std::is_void_v<R>) {
  746|  2.96M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.96M|              }
  748|  2.96M|              else {
  749|  2.96M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.96M|              }
  751|  2.96M|          }),
  752|  2.96M|          m_storage(std::addressof(f))
  753|  2.96M|    {
  754|  2.96M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  6.75M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.75M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.75M|              else {
  749|  6.75M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.75M|              }
  751|  6.75M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  6.75M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.75M|        else if constexpr (std::is_object_v<T>) {
  688|  6.75M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.75M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  6.75M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  6.75M|            return detail::is_cp_space(cp);
 2127|  6.75M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  2.96M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.96M|        {
  662|  2.96M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   332k|{
 5784|   332k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   332k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.83k, False: 329k]
  |  |  ------------------
  ------------------
 5785|  2.83k|        return unexpected(e);
 5786|  2.83k|    }
 5787|       |
 5788|   329k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 329k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   329k|    return skip_classic_whitespace(range);
 5793|   329k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|   166k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   166k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   166k|            auto rd = make_reader<T, char_type>();
 5865|   166k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   166k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|   166k|    {
 5852|   166k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.01k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.01k|    }                                                  \
  |  |  |  | 3667|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   164k|                        .transform_error(make_eof_scan_error));
 5854|   164k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   166k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|   164k|    {
 5255|   164k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   164k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   164k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   164k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|   166k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   166k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   166k|            auto rd = make_reader<T, char_type>();
 5865|   166k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   166k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|   166k|    {
 5852|   166k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   166k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   166k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   166k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.01k, False: 164k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.01k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.01k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.01k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.01k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.01k|    }                                                  \
  |  |  |  | 3667|   166k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   164k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   164k|                        .transform_error(make_eof_scan_error));
 5854|   164k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   166k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|   164k|    {
 5255|   164k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   164k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   164k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   164k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   200k|{
 5784|   200k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.67k, False: 199k]
  |  |  ------------------
  ------------------
 5785|  1.67k|        return unexpected(e);
 5786|  1.67k|    }
 5787|       |
 5788|   199k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 199k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   199k|    return skip_classic_whitespace(range);
 5793|   199k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|   200k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   200k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   200k|            auto rd = make_reader<T, char_type>();
 5869|   200k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 200k, False: 0]
  ------------------
 5870|   200k|                return impl(rd, range, value);
 5871|   200k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   200k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|   200k|    {
 5852|   200k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.52k, False: 198k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.52k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.52k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.52k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.52k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.52k|    }                                                  \
  |  |  |  | 3667|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   198k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   198k|                        .transform_error(make_eof_scan_error));
 5854|   198k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   200k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|   198k|    {
 5255|   198k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   198k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   198k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   198k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   263k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   263k|    static_cast<    \
  |  |  929|   263k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   263k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   263k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   263k|          m_current(m_range.begin())
 2867|   263k|    {
 2868|   263k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   725k|    {
 2872|   725k|        return m_current;
 2873|   725k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   461k|    {
 2877|   461k|        return m_range.end();
 2878|   461k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|   216k|    {
 2892|   216k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   216k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   216k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   216k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   216k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 216k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   216k|        }
 2898|   216k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   216k|    static_cast<    \
  |  |  929|   216k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   216k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   244k|    {
 2882|   244k|        return ranges::subrange{begin(), end()};
 2883|   244k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   235k|    {
 6026|   235k|        const bool need_skipped_width =
 6027|   235k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 235k]
  |  Branch (6027:33): [True: 0, False: 235k]
  ------------------
 6028|   235k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   235k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 235k]
  ------------------
 6032|   235k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 235k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   235k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 235k, False: 0]
  |  Branch (6036:56): [True: 221k, False: 13.7k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   221k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 221k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   440k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   221k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   221k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   221k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   221k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.68k, False: 219k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.68k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.68k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.68k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.68k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.68k|    }                                                  \
  |  |  |  | 3667|   221k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   219k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   440k|                            make_eof_scan_error));
 6047|       |
 6048|   440k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 219k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   219k|            return result_type{it, 0};
 6056|   440k|        }
 6057|       |
 6058|  13.7k|        return result_type{rng.begin(), 0};
 6059|   235k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   214k|    {
 6068|   214k|        const bool need_skipped_width =
 6069|   214k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 214k]
  |  Branch (6069:33): [True: 0, False: 214k]
  ------------------
 6070|   214k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   214k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 214k]
  ------------------
 6073|   214k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 214k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   214k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 214k, False: 0]
  ------------------
 6082|   214k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 4.09k, False: 210k]
  ------------------
 6083|   214k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 4.09k]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|  4.09k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 4.09k]
  ------------------
 6085|  4.09k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   214k|        return result_type{rng.begin(), 0};
 6107|   214k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|   122k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   122k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   122k|            auto rd = make_reader<T, char_type>();
 6187|   122k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 117k]
  |  |  ------------------
  ------------------
 6188|  4.75k|                return unexpected(e);
 6189|  4.75k|            }
 6190|       |
 6191|   117k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   122k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|   117k|    {
 6113|   117k|        const bool need_skipped_width =
 6114|   117k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 117k]
  |  Branch (6114:33): [True: 0, False: 117k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   117k|        auto it = rng.begin();
 6118|   117k|        std::ptrdiff_t prefix_width = 0;
 6119|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 117k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   117k|        else {
 6127|   117k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.34k|    }                                                  \
  |  |  |  | 3667|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   116k|            std::tie(it, prefix_width) = prefix_result;
 6129|   116k|        }
 6130|   116k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   116k|        std::ptrdiff_t value_width = 0;
 6134|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 116k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   116k|        else {
 6150|   116k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.16k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  8.16k|    }                                                  \
  |  | 3667|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   108k|                                             specs, value, loc));
 6152|       |
 6153|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 108k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   108k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   108k|        std::ptrdiff_t postfix_width = 0;
 6162|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 107k, False: 996]
  ------------------
 6163|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   107k|                                 value_width));
 6167|   107k|            std::tie(it, postfix_width) = postfix_result;
 6168|   107k|        }
 6169|       |
 6170|   108k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   108k|                                                 value_width, postfix_width);
 6172|   108k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 108k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   108k|        return it;
 6177|   108k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|   122k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   122k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   122k|            auto rd = make_reader<T, char_type>();
 6187|   122k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.75k, False: 117k]
  |  |  ------------------
  ------------------
 6188|  4.75k|                return unexpected(e);
 6189|  4.75k|            }
 6190|       |
 6191|   117k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   122k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|   117k|    {
 6113|   117k|        const bool need_skipped_width =
 6114|   117k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 117k]
  |  Branch (6114:33): [True: 0, False: 117k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   117k|        auto it = rng.begin();
 6118|   117k|        std::ptrdiff_t prefix_width = 0;
 6119|   117k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 117k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   117k|        else {
 6127|   117k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   117k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   117k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   117k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   117k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.34k, False: 116k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.34k|    }                                                  \
  |  |  |  | 3667|   117k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   116k|            std::tie(it, prefix_width) = prefix_result;
 6129|   116k|        }
 6130|   116k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   116k|        std::ptrdiff_t value_width = 0;
 6134|   116k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 116k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   116k|        else {
 6150|   116k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 8.16k, False: 108k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  8.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  8.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  8.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  8.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  8.16k|    }                                                  \
  |  | 3667|   116k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   108k|                                             specs, value, loc));
 6152|       |
 6153|   108k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 108k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   108k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   108k|        std::ptrdiff_t postfix_width = 0;
 6162|   108k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 107k, False: 996]
  ------------------
 6163|   107k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   107k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   107k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   107k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   107k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   107k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   107k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   107k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   107k|                                 value_width));
 6167|   107k|            std::tie(it, postfix_width) = postfix_result;
 6168|   107k|        }
 6169|       |
 6170|   108k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   108k|                                                 value_width, postfix_width);
 6172|   108k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 108k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   108k|        return it;
 6177|   108k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  3.56M|{
 5784|  3.56M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.56M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.40k, False: 3.56M]
  |  |  ------------------
  ------------------
 5785|  5.40k|        return unexpected(e);
 5786|  5.40k|    }
 5787|       |
 5788|  3.56M|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 3.56M]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  3.56M|    return skip_classic_whitespace(range);
 5793|  3.56M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|  1.78M|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  1.78M|                          basic_contiguous_scan_context<char_type>>) {
 5864|  1.78M|            auto rd = make_reader<T, char_type>();
 5865|  1.78M|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  1.78M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|  1.78M|    {
 5852|  1.78M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  1.78M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.78M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.78M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.09k, False: 1.78M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.09k|    }                                                  \
  |  |  |  | 3667|  1.78M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  1.78M|                        .transform_error(make_eof_scan_error));
 5854|  1.78M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  1.78M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|  1.78M|    {
 5255|  1.78M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.78M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  1.78M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  1.78M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|  1.78M|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  1.78M|                          basic_contiguous_scan_context<char_type>>) {
 5864|  1.78M|            auto rd = make_reader<T, char_type>();
 5865|  1.78M|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  1.78M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|  1.78M|    {
 5852|  1.78M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  1.78M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.78M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.78M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.09k, False: 1.78M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.09k|    }                                                  \
  |  |  |  | 3667|  1.78M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  1.78M|                        .transform_error(make_eof_scan_error));
 5854|  1.78M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  1.78M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|  1.78M|    {
 5255|  1.78M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.78M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  1.78M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  1.78M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|  2.45M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  2.45M|    static_cast<    \
  |  |  929|  2.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|  2.45M|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|  2.45M|          m_current(m_range.begin())
 2867|  2.45M|    {
 2868|  2.45M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  7.23M|    {
 2872|  7.23M|        return m_current;
 2873|  7.23M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|  4.77M|    {
 2877|  4.77M|        return m_range.end();
 2878|  4.77M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|  2.35M|    {
 2892|  2.35M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  2.35M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.35M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  2.35M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  2.35M|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 2.35M]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  2.35M|        }
 2898|  2.35M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  2.35M|    static_cast<    \
  |  |  929|  2.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  2.35M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|  2.41M|    {
 2882|  2.41M|        return ranges::subrange{begin(), end()};
 2883|  2.41M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  2.39M|    {
 6026|  2.39M|        const bool need_skipped_width =
 6027|  2.39M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 2.39M]
  |  Branch (6027:33): [True: 0, False: 2.39M]
  ------------------
 6028|  2.39M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  2.39M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 2.39M]
  ------------------
 6032|  2.39M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 2.39M]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  2.39M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 2.39M, False: 0]
  |  Branch (6036:56): [True: 2.37M, False: 19.5k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  2.37M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 2.37M]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  4.75M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  2.37M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  2.37M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  2.37M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  2.37M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.12k, False: 2.37M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  4.12k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  4.12k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  4.12k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  4.12k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  4.12k|    }                                                  \
  |  |  |  | 3667|  2.37M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  2.37M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  4.75M|                            make_eof_scan_error));
 6047|       |
 6048|  4.75M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 2.37M]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  2.37M|            return result_type{it, 0};
 6056|  4.75M|        }
 6057|       |
 6058|  19.5k|        return result_type{rng.begin(), 0};
 6059|  2.39M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  2.35M|    {
 6068|  2.35M|        const bool need_skipped_width =
 6069|  2.35M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 2.35M]
  |  Branch (6069:33): [True: 0, False: 2.35M]
  ------------------
 6070|  2.35M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  2.35M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 2.35M]
  ------------------
 6073|  2.35M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 2.35M]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  2.35M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 2.35M, False: 0]
  ------------------
 6082|  2.35M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 432, False: 2.35M]
  ------------------
 6083|  2.35M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 432]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    432|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 432]
  ------------------
 6085|    432|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  2.35M|        return result_type{rng.begin(), 0};
 6107|  2.35M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  1.20M|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  1.20M|                          basic_contiguous_scan_context<char_type>>) {
 6186|  1.20M|            auto rd = make_reader<T, char_type>();
 6187|  1.20M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 1.19M]
  |  |  ------------------
  ------------------
 6188|  9.50k|                return unexpected(e);
 6189|  9.50k|            }
 6190|       |
 6191|  1.19M|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  1.20M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  1.19M|    {
 6113|  1.19M|        const bool need_skipped_width =
 6114|  1.19M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 1.19M]
  |  Branch (6114:33): [True: 0, False: 1.19M]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  1.19M|        auto it = rng.begin();
 6118|  1.19M|        std::ptrdiff_t prefix_width = 0;
 6119|  1.19M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.19M]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  1.19M|        else {
 6127|  1.19M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.19M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 1.19M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.06k|    }                                                  \
  |  |  |  | 3667|  1.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  1.19M|            std::tie(it, prefix_width) = prefix_result;
 6129|  1.19M|        }
 6130|  1.19M|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  1.19M|        std::ptrdiff_t value_width = 0;
 6134|  1.19M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 1.19M]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  1.19M|        else {
 6150|  1.19M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 1.17M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  1.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.17M|                                             specs, value, loc));
 6152|       |
 6153|  1.17M|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 1.17M]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  1.17M|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.17M|        std::ptrdiff_t postfix_width = 0;
 6162|  1.17M|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.17M, False: 1.85k]
  ------------------
 6163|  1.17M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.17M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.17M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.17M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.17M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.17M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.17M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.17M|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.17M|                                 value_width));
 6167|  1.17M|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.17M|        }
 6169|       |
 6170|  1.17M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.17M|                                                 value_width, postfix_width);
 6172|  1.17M|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 1.17M]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  1.17M|        return it;
 6177|  1.17M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|  1.20M|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  1.20M|                          basic_contiguous_scan_context<char_type>>) {
 6186|  1.20M|            auto rd = make_reader<T, char_type>();
 6187|  1.20M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.50k, False: 1.19M]
  |  |  ------------------
  ------------------
 6188|  9.50k|                return unexpected(e);
 6189|  9.50k|            }
 6190|       |
 6191|  1.19M|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  1.20M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  1.19M|    {
 6113|  1.19M|        const bool need_skipped_width =
 6114|  1.19M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 1.19M]
  |  Branch (6114:33): [True: 0, False: 1.19M]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  1.19M|        auto it = rng.begin();
 6118|  1.19M|        std::ptrdiff_t prefix_width = 0;
 6119|  1.19M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 1.19M]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  1.19M|        else {
 6127|  1.19M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  1.19M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.06k, False: 1.19M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.06k|    }                                                  \
  |  |  |  | 3667|  1.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  1.19M|            std::tie(it, prefix_width) = prefix_result;
 6129|  1.19M|        }
 6130|  1.19M|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  1.19M|        std::ptrdiff_t value_width = 0;
 6134|  1.19M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 1.19M]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  1.19M|        else {
 6150|  1.19M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  1.19M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  1.19M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  1.19M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 16.9k, False: 1.17M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  16.9k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  16.9k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  16.9k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  16.9k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  16.9k|    }                                                  \
  |  | 3667|  1.19M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  1.19M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  1.17M|                                             specs, value, loc));
 6152|       |
 6153|  1.17M|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 1.17M]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  1.17M|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  1.17M|        std::ptrdiff_t postfix_width = 0;
 6162|  1.17M|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 1.17M, False: 1.85k]
  ------------------
 6163|  1.17M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  1.17M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.17M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.17M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 1.17M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  1.17M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.17M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.17M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  1.17M|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  1.17M|                                 value_width));
 6167|  1.17M|            std::tie(it, postfix_width) = postfix_result;
 6168|  1.17M|        }
 6169|       |
 6170|  1.17M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  1.17M|                                                 value_width, postfix_width);
 6172|  1.17M|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 1.17M]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  1.17M|        return it;
 6177|  1.17M|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  1.78M|{
 5784|  1.78M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.70k, False: 1.78M]
  |  |  ------------------
  ------------------
 5785|  2.70k|        return unexpected(e);
 5786|  2.70k|    }
 5787|       |
 5788|  1.78M|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 1.78M]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  1.78M|    return skip_classic_whitespace(range);
 5793|  1.78M|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|  1.78M|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  1.78M|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  1.78M|            auto rd = make_reader<T, char_type>();
 5869|  1.78M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 1.78M, False: 0]
  ------------------
 5870|  1.78M|                return impl(rd, range, value);
 5871|  1.78M|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  1.78M|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|  1.78M|    {
 5852|  1.78M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  1.78M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.78M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.78M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.78M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.09k, False: 1.78M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.09k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.09k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.09k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.09k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.09k|    }                                                  \
  |  |  |  | 3667|  1.78M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  1.78M|                        .transform_error(make_eof_scan_error));
 5854|  1.78M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  1.78M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|  1.78M|    {
 5255|  1.78M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  1.78M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  1.78M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  1.78M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  2.37k|{
   52|  2.37k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  2.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  2.37k|    string_buffer.resize(size);
   56|  2.37k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  2.37k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  2.37k|    const auto wsv_reinterpret_size =
   61|  2.37k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 389, False: 1.98k]
  ------------------
   62|  2.37k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  2.37k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  2.37k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  2.37k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  2.37k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  2.37k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  2.37k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.37k|{
  122|  2.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.37k|    buf.resize(sizeof...(Args));
  125|  2.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.37k|    return buf;
  127|  2.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  2.37k|{
  108|  2.37k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  2.37k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  2.37k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.37k|{
  185|  2.37k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.37k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.37k|                                   format_strings);
  188|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.37k|{
  133|       |    // Regular scan
  134|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.2k, False: 2.37k]
  ------------------
  135|  14.2k|        auto it = scn::ranges::begin(source);
  136|   121k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   121k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   121k|            auto result = scn::scan<T>(
  139|   121k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   121k|                scn::runtime_format(f));
  141|   121k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.2k, False: 107k]
  ------------------
  142|  14.2k|                break;
  143|  14.2k|            }
  144|   107k|            it = result->begin();
  145|   107k|        }
  146|  14.2k|    }
  147|       |
  148|       |    // scan localized
  149|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.2k, False: 2.37k]
  ------------------
  150|  14.2k|        auto it = scn::ranges::begin(source);
  151|   121k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   121k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   121k|            auto result = scn::scan<T>(
  154|   121k|                global_locale,
  155|   121k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   121k|                scn::runtime_format(f));
  157|   121k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.2k, False: 107k]
  ------------------
  158|  14.2k|                break;
  159|  14.2k|            }
  160|   107k|            it = result->begin();
  161|   107k|        }
  162|  14.2k|    }
  163|       |
  164|       |    // scan_value
  165|  2.37k|    {
  166|  2.37k|        auto it = scn::ranges::begin(source);
  167|  55.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  55.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  55.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  55.4k|            auto result = scn::scan_value<T>(
  170|  55.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  55.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.37k, False: 53.0k]
  ------------------
  172|  2.37k|                break;
  173|  2.37k|            }
  174|  53.0k|            it = result->begin();
  175|  53.0k|        }
  176|  2.37k|    }
  177|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.37k|{
  133|       |    // Regular scan
  134|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.2k, False: 2.37k]
  ------------------
  135|  14.2k|        auto it = scn::ranges::begin(source);
  136|   121k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   121k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   121k|            auto result = scn::scan<T>(
  139|   121k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   121k|                scn::runtime_format(f));
  141|   121k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.2k, False: 107k]
  ------------------
  142|  14.2k|                break;
  143|  14.2k|            }
  144|   107k|            it = result->begin();
  145|   107k|        }
  146|  14.2k|    }
  147|       |
  148|       |    // scan localized
  149|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.2k, False: 2.37k]
  ------------------
  150|  14.2k|        auto it = scn::ranges::begin(source);
  151|   121k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   121k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   121k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   121k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   121k|            auto result = scn::scan<T>(
  154|   121k|                global_locale,
  155|   121k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   121k|                scn::runtime_format(f));
  157|   121k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.2k, False: 107k]
  ------------------
  158|  14.2k|                break;
  159|  14.2k|            }
  160|   107k|            it = result->begin();
  161|   107k|        }
  162|  14.2k|    }
  163|       |
  164|       |    // scan_value
  165|  2.37k|    {
  166|  2.37k|        auto it = scn::ranges::begin(source);
  167|  55.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  55.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  55.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  55.4k|            auto result = scn::scan_value<T>(
  170|  55.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  55.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.37k, False: 53.0k]
  ------------------
  172|  2.37k|                break;
  173|  2.37k|            }
  174|  53.0k|            it = result->begin();
  175|  53.0k|        }
  176|  2.37k|    }
  177|  2.37k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.37k|{
  133|       |    // Regular scan
  134|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 14.2k, False: 2.37k]
  ------------------
  135|  14.2k|        auto it = scn::ranges::begin(source);
  136|   145k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   145k|            auto result = scn::scan<T>(
  139|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   145k|                scn::runtime_format(f));
  141|   145k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 14.2k, False: 130k]
  ------------------
  142|  14.2k|                break;
  143|  14.2k|            }
  144|   130k|            it = result->begin();
  145|   130k|        }
  146|  14.2k|    }
  147|       |
  148|       |    // scan localized
  149|  14.2k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 14.2k, False: 2.37k]
  ------------------
  150|  14.2k|        auto it = scn::ranges::begin(source);
  151|   145k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   145k|            auto result = scn::scan<T>(
  154|   145k|                global_locale,
  155|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   145k|                scn::runtime_format(f));
  157|   145k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 14.2k, False: 130k]
  ------------------
  158|  14.2k|                break;
  159|  14.2k|            }
  160|   130k|            it = result->begin();
  161|   130k|        }
  162|  14.2k|    }
  163|       |
  164|       |    // scan_value
  165|  2.37k|    {
  166|  2.37k|        auto it = scn::ranges::begin(source);
  167|  66.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  66.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  66.9k|            auto result = scn::scan_value<T>(
  170|  66.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  66.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.37k, False: 64.5k]
  ------------------
  172|  2.37k|                break;
  173|  2.37k|            }
  174|  64.5k|            it = result->begin();
  175|  64.5k|        }
  176|  2.37k|    }
  177|  2.37k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  2.37k|{
   90|  2.37k|    using char_type = ranges::range_value_t<Source>;
   91|  2.37k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.37k|    deque.clear();
   93|  2.37k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.37k|              std::back_inserter(deque));
   95|  2.37k|    return deque;
   96|  2.37k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  2.37k|{
   79|  2.37k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  2.37k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  2.37k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  2.37k|{
  122|  2.37k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  2.37k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  2.37k|    buf.resize(sizeof...(Args));
  125|  2.37k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  2.37k|    return buf;
  127|  2.37k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  2.37k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  2.37k|    else {
  112|  2.37k|        return wformat_string_view_buffer;
  113|  2.37k|    }
  114|  2.37k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  4.75k|{
  185|  4.75k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  4.75k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  4.75k|                                   format_strings);
  188|  4.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  4.75k|{
  133|       |    // Regular scan
  134|  28.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 28.5k, False: 4.75k]
  ------------------
  135|  28.5k|        auto it = scn::ranges::begin(source);
  136|  1.20M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.20M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.20M|            auto result = scn::scan<T>(
  139|  1.20M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.20M|                scn::runtime_format(f));
  141|  1.20M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 28.5k, False: 1.17M]
  ------------------
  142|  28.5k|                break;
  143|  28.5k|            }
  144|  1.17M|            it = result->begin();
  145|  1.17M|        }
  146|  28.5k|    }
  147|       |
  148|       |    // scan localized
  149|  28.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 28.5k, False: 4.75k]
  ------------------
  150|  28.5k|        auto it = scn::ranges::begin(source);
  151|  1.20M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.20M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.20M|            auto result = scn::scan<T>(
  154|  1.20M|                global_locale,
  155|  1.20M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.20M|                scn::runtime_format(f));
  157|  1.20M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 28.5k, False: 1.17M]
  ------------------
  158|  28.5k|                break;
  159|  28.5k|            }
  160|  1.17M|            it = result->begin();
  161|  1.17M|        }
  162|  28.5k|    }
  163|       |
  164|       |    // scan_value
  165|  4.75k|    {
  166|  4.75k|        auto it = scn::ranges::begin(source);
  167|   594k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   594k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   594k|            auto result = scn::scan_value<T>(
  170|   594k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   594k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.75k, False: 589k]
  ------------------
  172|  4.75k|                break;
  173|  4.75k|            }
  174|   589k|            it = result->begin();
  175|   589k|        }
  176|  4.75k|    }
  177|  4.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  4.75k|{
  133|       |    // Regular scan
  134|  28.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 28.5k, False: 4.75k]
  ------------------
  135|  28.5k|        auto it = scn::ranges::begin(source);
  136|  1.20M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.20M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.20M|            auto result = scn::scan<T>(
  139|  1.20M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.20M|                scn::runtime_format(f));
  141|  1.20M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 28.5k, False: 1.17M]
  ------------------
  142|  28.5k|                break;
  143|  28.5k|            }
  144|  1.17M|            it = result->begin();
  145|  1.17M|        }
  146|  28.5k|    }
  147|       |
  148|       |    // scan localized
  149|  28.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 28.5k, False: 4.75k]
  ------------------
  150|  28.5k|        auto it = scn::ranges::begin(source);
  151|  1.20M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.20M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.20M|            auto result = scn::scan<T>(
  154|  1.20M|                global_locale,
  155|  1.20M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.20M|                scn::runtime_format(f));
  157|  1.20M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 28.5k, False: 1.17M]
  ------------------
  158|  28.5k|                break;
  159|  28.5k|            }
  160|  1.17M|            it = result->begin();
  161|  1.17M|        }
  162|  28.5k|    }
  163|       |
  164|       |    // scan_value
  165|  4.75k|    {
  166|  4.75k|        auto it = scn::ranges::begin(source);
  167|   594k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   594k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   594k|            auto result = scn::scan_value<T>(
  170|   594k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   594k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.75k, False: 589k]
  ------------------
  172|  4.75k|                break;
  173|  4.75k|            }
  174|   589k|            it = result->begin();
  175|   589k|        }
  176|  4.75k|    }
  177|  4.75k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  4.75k|{
  133|       |    // Regular scan
  134|  28.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 28.5k, False: 4.75k]
  ------------------
  135|  28.5k|        auto it = scn::ranges::begin(source);
  136|  1.20M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  1.20M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  1.20M|            auto result = scn::scan<T>(
  139|  1.20M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  1.20M|                scn::runtime_format(f));
  141|  1.20M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 28.5k, False: 1.17M]
  ------------------
  142|  28.5k|                break;
  143|  28.5k|            }
  144|  1.17M|            it = result->begin();
  145|  1.17M|        }
  146|  28.5k|    }
  147|       |
  148|       |    // scan localized
  149|  28.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 28.5k, False: 4.75k]
  ------------------
  150|  28.5k|        auto it = scn::ranges::begin(source);
  151|  1.20M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  1.20M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  1.20M|            auto result = scn::scan<T>(
  154|  1.20M|                global_locale,
  155|  1.20M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  1.20M|                scn::runtime_format(f));
  157|  1.20M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 28.5k, False: 1.17M]
  ------------------
  158|  28.5k|                break;
  159|  28.5k|            }
  160|  1.17M|            it = result->begin();
  161|  1.17M|        }
  162|  28.5k|    }
  163|       |
  164|       |    // scan_value
  165|  4.75k|    {
  166|  4.75k|        auto it = scn::ranges::begin(source);
  167|   594k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   594k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   594k|            auto result = scn::scan_value<T>(
  170|   594k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   594k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 4.75k, False: 589k]
  ------------------
  172|  4.75k|                break;
  173|  4.75k|            }
  174|   589k|            it = result->begin();
  175|   589k|        }
  176|  4.75k|    }
  177|  4.75k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  4.75k|{
   90|  4.75k|    using char_type = ranges::range_value_t<Source>;
   91|  4.75k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  4.75k|    deque.clear();
   93|  4.75k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  4.75k|              std::back_inserter(deque));
   95|  4.75k|    return deque;
   96|  4.75k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  4.75k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  4.75k|    else {
   83|  4.75k|        return wnoncontiguous_buffer;
   84|  4.75k|    }
   85|  4.75k|}

LLVMFuzzerTestOneInput:
   57|  2.37k|{
   58|  2.37k|    scn::fuzz::run(data, size);
   59|  2.37k|    return 0;
   60|  2.37k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  2.37k|{
   36|  2.37k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 2.37k]
  |  Branch (36:35): [True: 0, False: 2.37k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  2.37k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  2.37k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  2.37k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  2.37k|    do_basic_run(sv, f);
   45|       |
   46|  2.37k|    const auto& wf = get_format_strings<wchar_t>(
   47|  2.37k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  2.37k|    do_basic_run(wsv_reinterpret, wf);
   49|  2.37k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 2.37k, False: 0]
  ------------------
   50|  2.37k|        do_basic_run(wsv_transcode, wf);
   51|  2.37k|    }
   52|  2.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.37k|{
   25|  2.37k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.37k|                                                           format_strings);
   27|  2.37k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  2.37k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.37k|            source, format_strings);
   30|  2.37k|    }
   31|  2.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.37k|{
   25|  2.37k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.37k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  2.37k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  4.75k|{
   25|  4.75k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  4.75k|                                                           format_strings);
   27|  4.75k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  4.75k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  4.75k|            source, format_strings);
   30|  4.75k|    }
   31|  4.75k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  4.75k|{
   25|  4.75k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  4.75k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  4.75k|}

