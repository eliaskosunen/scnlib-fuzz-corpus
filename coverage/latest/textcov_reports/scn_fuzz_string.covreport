_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  8.15M|{
 3807|  8.15M|    if constexpr (sizeof(U) == 1) {
 3808|  8.15M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|       |    else {
 3814|       |        // utf-32
 3815|       |        static_assert(sizeof(U) == 4);
 3816|       |        SCN_UNUSED(ch);
 3817|       |        return 1;
 3818|       |    }
 3819|  8.15M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  8.15M|{
 3771|  8.15M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  8.15M|    SCN_GCC_COMPAT_PUSH
 3774|  8.15M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  8.15M|    constexpr char lengths[] =
 3776|  8.15M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  8.15M|        "\1\1\1\1\1\1\1\1"
 3778|  8.15M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  8.15M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  8.15M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  8.15M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  8.15M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  8.15M|    SCN_GCC_COMPAT_POP
 3785|  8.15M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  7.82M|{
 4013|  7.82M|    if constexpr (sizeof(CharT) == 1) {
 4014|  7.82M|        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|       |    else {
 4020|       |        SCN_EXPECT(input.size() == 1);
 4021|       |        auto cp = static_cast<char32_t>(input.front());
 4022|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|       |            return invalid_code_point;
 4024|       |        }
 4025|       |        return cp;
 4026|       |    }
 4027|  7.82M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  7.82M|{
 3826|  7.82M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  7.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  7.82M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  7.82M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  7.82M|    };
 3831|       |
 3832|  7.82M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 7.12M, False: 696k]
  ------------------
 3833|  7.12M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 375, False: 7.12M]
  ------------------
 3834|    375|            SCN_UNLIKELY_ATTR
 3835|    375|            return invalid_code_point;
 3836|    375|        }
 3837|  7.12M|        return static_cast<char32_t>(input[0]);
 3838|  7.12M|    }
 3839|       |
 3840|   696k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 161k, False: 534k]
  ------------------
 3841|   161k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 234, False: 161k]
  ------------------
 3842|    234|            SCN_UNLIKELY_ATTR
 3843|    234|            return invalid_code_point;
 3844|    234|        }
 3845|   161k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 28.3k, False: 133k]
  ------------------
 3846|  28.3k|            SCN_UNLIKELY_ATTR
 3847|  28.3k|            return invalid_code_point;
 3848|  28.3k|        }
 3849|       |
 3850|   133k|        char32_t cp{};
 3851|   133k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   133k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   133k|        return cp;
 3854|   161k|    }
 3855|       |
 3856|   534k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 506k, False: 28.8k]
  ------------------
 3857|   506k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 45, False: 506k]
  ------------------
 3858|     45|            SCN_UNLIKELY_ATTR
 3859|     45|            return invalid_code_point;
 3860|     45|        }
 3861|   506k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 6.05k, False: 500k]
  ------------------
 3862|   506k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.71k, False: 498k]
  ------------------
 3863|  7.77k|            SCN_UNLIKELY_ATTR
 3864|  7.77k|            return invalid_code_point;
 3865|  7.77k|        }
 3866|       |
 3867|   498k|        char32_t cp{};
 3868|   498k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|   498k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|   498k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|   498k|        return cp;
 3872|   506k|    }
 3873|       |
 3874|  28.8k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 28.8k, False: 0]
  ------------------
 3875|  28.8k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 28.8k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  28.8k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 18.4k, False: 10.3k]
  ------------------
 3880|  18.4k|            SCN_UNLIKELY_ATTR
 3881|  18.4k|            return invalid_code_point;
 3882|  18.4k|        }
 3883|  10.3k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 2.60k, False: 7.75k]
  ------------------
 3884|  10.3k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 125, False: 7.63k]
  ------------------
 3885|  10.3k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 198, False: 7.43k]
  ------------------
 3886|  2.92k|            SCN_UNLIKELY_ATTR
 3887|  2.92k|            return invalid_code_point;
 3888|  2.92k|        }
 3889|       |
 3890|  7.43k|        char32_t cp{};
 3891|  7.43k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  7.43k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  7.43k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  7.43k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  7.43k|        return cp;
 3896|  10.3k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|  1.19M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  1.19M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  1.19M|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  6.89M|{
 3699|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3700|       |                                          decltype(first), decltype(last)> &&
 3701|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3702|       |        return {first, last};
 3703|       |    }
 3704|  6.89M|    else {
 3705|  6.89M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  6.89M|                                       to_address(first), to_address(last)))};
 3707|  6.89M|    }
 3708|  6.89M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  21.2M|{
  326|  21.2M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  21.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  21.2M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  21.7M|{
  304|  21.7M|    return p;
  305|  21.7M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  3.22M|{
 3730|       |    if constexpr (std::is_constructible_v<
 3731|       |                      typename std::basic_string_view<CharT>::iterator,
 3732|       |                      decltype(it)> &&
 3733|  3.22M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3734|  3.22M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  3.22M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  3.22M|        return it;
 3736|       |    }
 3737|       |    else {
 3738|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|       |    }
 3740|  3.22M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  37.3k|    {
 2724|  37.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  37.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  37.3k|    {
 2705|  37.3k|        return decay_copy(t.begin());
 2706|  37.3k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  3.33M|{
 1949|  3.33M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.33M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.33M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   777k|    {
 2781|   777k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   777k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   777k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   777k|    {
 2763|   777k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   777k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   777k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8866|  78.8k|{
 8867|  78.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  78.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  78.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  78.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|   345k|{
 5396|   345k|    detail::check_scan_arg_types<Args...>();
 5397|   345k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   345k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|   425k|{
 5135|   425k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   425k|                  "Scan argument types must be default constructible");
 5137|   425k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   425k|                  "Scan argument types must be Destructible");
 5139|   425k|    static_assert(
 5140|   425k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   425k|        "Scan argument types must not be references");
 5142|   425k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5347|   345k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   345k|    {
 5349|   345k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   345k|    {
 5360|   345k|        return {detail::make_arg<
 5361|   345k|            kind, Context,
 5362|   345k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   345k|                                 typename Context::char_type>::value>(args)...};
 5364|   345k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|   345k|{
 5170|   345k|    return make_value<Context>(value).ref_value;
 5171|   345k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|   425k|{
 5120|   425k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   425k|                                  needs_context_tag>) {
 5124|   425k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   425k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   425k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|   425k|    {                                                                        \
 4959|   425k|        return val;                                                          \
 4960|   425k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|   425k|{
 5089|   425k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   425k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   425k|    constexpr bool scannable_char =
 5093|   425k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   425k|    static_assert(scannable_char,
 5095|   425k|                  "Cannot scan an argument of an unsupported character "
 5096|   425k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   425k|    constexpr bool scannable_const =
 5099|   425k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   425k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   425k|    constexpr bool scannable_disabled =
 5103|   425k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   425k|    static_assert(scannable_disabled,
 5105|   425k|                  "Cannot scan an argument that has been disabled by "
 5106|   425k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   425k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   425k|    static_assert(
 5110|   425k|        scannable,
 5111|   425k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   425k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   425k|    return arg_value{arg};
 5115|   425k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4900|   425k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|   425k|    {
 4902|   425k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   157k|{
 8654|   157k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   157k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   157k|{
 8591|   157k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   157k|    auto result = vscan_impl(buffer, format, args);
 8594|   157k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 141k]
  |  |  ------------------
  ------------------
 8595|  16.6k|        return unexpected(result.error());
 8596|  16.6k|    }
 8597|   141k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   157k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|   388k|{
 4720|   388k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   388k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   388k|                  "\n"
 4724|   388k|                  "Unsupported range type given as input to a scanning "
 4725|   388k|                  "function.\n"
 4726|   388k|                  "A range needs to have a character type (value type) "
 4727|   388k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   388k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   388k|                  "to be included.\n"
 4730|   388k|                  "See the scnlib documentation for more details.");
 4731|   388k|    static_assert(
 4732|   388k|        !std::is_same_v<T, custom_char_traits>,
 4733|   388k|        "\n"
 4734|   388k|        "Unsupported range type given as input to a scanning "
 4735|   388k|        "function.\n"
 4736|   388k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   388k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   388k|        "not supported.");
 4739|   388k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   388k|                  "\n"
 4741|   388k|                  "Unsupported range type given as input to a scanning "
 4742|   388k|                  "function.\n"
 4743|   388k|                  "file_marker_found cannot be used as an "
 4744|   388k|                  "source range type to scn::scan.\n"
 4745|   388k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   388k|                  "and do not provide an explicit source range, "
 4747|   388k|                  "or use scn::scan with a FILE* directly.");
 4748|   388k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   388k|                  "\n"
 4750|   388k|                  "Unsupported range type given as input to a scanning "
 4751|   388k|                  "function.\n"
 4752|   388k|                  "In order to be scannable, a range needs to satisfy "
 4753|   388k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   388k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   388k|                  "\n"
 4756|   388k|                  "Unsupported range type given as input to a scanning "
 4757|   388k|                  "function.\n"
 4758|   388k|                  "A range needs to model forward_range and have a valid "
 4759|   388k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   388k|                  "Examples of scannable ranges are std::string, "
 4761|   388k|                  "std::string_view, "
 4762|   388k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   388k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   388k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   388k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|   388k|{
 4659|   388k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|   388k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|   388k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   388k|    {
 2855|   388k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   388k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   388k|    {
 2836|   388k|        return t.data();
 2837|   388k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|   388k|    {
 3231|   388k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 2.95k, False: 385k]
  ------------------
 3232|   388k|                   ? nullptr
 3233|   388k|                   : std::addressof(*ranges::begin(derived()));
 3234|   388k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   388k|    {
 3005|   388k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   388k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   388k|    {
 2978|   388k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   388k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  1.47M|    {
 3339|  1.47M|        return m_iterator == m_sentinel;
 3340|  1.47M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   773k|    {
 3185|   773k|        return static_cast<const D&>(*this);
 3186|   773k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   737k|    {
 2724|   737k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   737k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   737k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   737k|    {
 2705|   737k|        return decay_copy(t.begin());
 2706|   737k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  4.32M|    {
 3330|  4.32M|        return m_iterator;
 3331|  4.32M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   388k|    {
 2930|   388k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   388k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   388k|    {
 2896|   388k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   388k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   388k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  2.90M|{
 1949|  2.90M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.90M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.90M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  1.47M|    {
 3346|  1.47M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.47M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  5.89M|    {
 1598|  5.89M|        return has_value();
 1599|  5.89M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  11.7M|    {
  485|  11.7M|        return m_has_value;
  486|  11.7M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   161k|    {
 1604|   161k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   161k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   161k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   161k|        return this->get_unexpected().error();
 1606|   161k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   161k|    {
  468|   161k|        return m_unexpected;
  469|   161k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|  1.19M|    {
  361|  1.19M|        return m_unexpected;
  362|  1.19M|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|   601k|        : m_unexpected(std::forward<Err>(e))
  346|   601k|    {
  347|   601k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   601k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   601k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  35.9k|        : base(unexpect, std::move(e.error())),
 1474|  35.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.9k|    {
 1476|  35.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  35.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.9k|          m_has_value(false)
  446|  35.9k|    {
  447|  35.9k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|   688k|        : m_unexpected(std::forward<Args>(args)...)
  355|   688k|    {
  356|   688k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   688k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   688k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   388k|    {
 1177|   388k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   352k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   352k|                      ranges::iterator_t<SourceRange>>) {
 5925|   352k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   352k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.43M|    {
 2724|  1.43M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.43M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.43M|    {
 2705|  1.43M|        return decay_copy(t.begin());
 2706|  1.43M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   352k|{
 5910|   352k|    return ranges::end(source);
 5911|   352k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   352k|    {
 2781|   352k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   352k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   352k|    {
 2763|   352k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   352k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  2.25M|    {
 3334|  2.25M|        return m_sentinel;
 3335|  2.25M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  5.67M|    {
 1653|  5.67M|        return value();
 1654|  5.67M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  5.67M|    {
 1627|  5.67M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.67M|        return this->get_value();
 1629|  5.67M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  5.67M|    {
  451|  5.67M|        return m_value;
  452|  5.67M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   352k|        : base(std::in_place, std::forward<U>(val)),
 1428|   352k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   352k|    {
 1430|   352k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   352k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   352k|    {
  437|   352k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7974|   157k|    {
 7975|   157k|        return m_str;
 7976|   157k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   345k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   345k|    {
 5426|   345k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|   345k|    {
 5379|   345k|        return m_argptrs;
 5380|   345k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5476|   503k|        : m_desc(desc), m_builtin_values(data)
 5477|   503k|    {
 5478|   503k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|   157k|{
 8820|   157k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 141k]
  |  |  ------------------
  ------------------
 8821|  16.6k|        return unexpected(result.error());
 8822|  16.6k|    }
 8823|   141k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   157k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   388k|    {
 1598|   388k|        return has_value();
 1599|   388k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   776k|    {
  485|   776k|        return m_has_value;
  486|   776k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  35.9k|    {
 1604|  35.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  35.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  35.9k|        return this->get_unexpected().error();
 1606|  35.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  35.9k|    {
  468|  35.9k|        return m_unexpected;
  469|  35.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  17.9k|        : base(unexpect, std::move(e.error())),
 1474|  17.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  17.9k|    {
 1476|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  17.9k|        : m_has_value(false)
  625|  17.9k|    {
  626|  17.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  17.9k|    {
  689|  17.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  17.9k|                                  std::forward<Args>(args)...);
  691|  17.9k|        m_has_value = false;
  692|  17.9k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|   107k|{
  392|   107k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   107k|        T(std::forward<Args>(args)...);
  394|   107k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  35.9k|    {
  718|  35.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  35.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  35.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  35.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   194k|    {
 1177|   194k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   282k|    {
 1653|   282k|        return value();
 1654|   282k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   352k|    {
 1627|   352k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   352k|        return this->get_value();
 1629|   352k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   352k|    {
  451|   352k|        return m_value;
  452|   352k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5828|   176k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   176k|    {
 5830|   176k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5679|   352k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   352k|    static_cast<    \
  |  |  929|   352k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   352k|    {
 5681|   352k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5614|   389k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   389k|    static_cast<    \
  |  |  929|   389k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|   389k|    {
 5616|   389k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   176k|        : base(std::in_place, std::forward<U>(val)),
 1428|   176k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   176k|    {
 1430|   176k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   176k|        : m_has_value(true)
  615|   176k|    {
  616|   176k|        construct(std::forward<Args>(args)...);
  617|   176k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   176k|    {
  682|   176k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   176k|        m_has_value = true;
  684|   176k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   176k|{
  392|   176k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   176k|        T(std::forward<Args>(args)...);
  394|   176k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|   176k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   528k|    {
  706|   528k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   528k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   528k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|   352k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|   345k|    {
 5374|   345k|        return m_args;
 5375|   345k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|   345k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  2.51M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.51M|    static_cast<    \
  |  |  929|  2.51M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.51M|    static_cast<    \
  |  |  929|  2.51M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  2.51M|    {
 3316|  2.51M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   503k|{
 7691|   503k|    return s;
 7692|   503k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   503k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   157k|        : m_str(r.str)
 7970|   157k|    {
 7971|   157k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   194k|    {
 1598|   194k|        return has_value();
 1599|   194k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   564k|    {
  675|   564k|        return m_has_value;
  676|   564k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   176k|    {
 1673|   176k|        return &value();
 1674|   176k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   176k|    {
 1627|   176k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   176k|        return this->get_value();
 1629|   176k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   176k|    {
  641|   176k|        return *value_ptr();
  642|   176k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   352k|    {
 5698|   352k|        return ranges::begin(m_range);
 5699|   352k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   194k|    {
  631|   194k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 176k, False: 17.9k]
  ------------------
  632|   176k|            destroy_value();
  633|   176k|        }
  634|  17.9k|        else {
  635|  17.9k|            destroy_unexpected();
  636|  17.9k|        }
  637|   194k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   176k|    {
  696|   176k|        scn::detail::destroy_at(value_ptr());
  697|   176k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   176k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   176k|    else {
  404|   176k|        p->~T();
  405|   176k|    }
  406|   176k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  17.9k|    {
  700|  17.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  17.9k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|   107k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   107k|    else {
  404|   107k|        p->~T();
  405|   107k|    }
  406|   107k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8933|  78.8k|{
 8934|  78.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  78.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  78.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  78.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   157k|{
 8672|   157k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   157k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   157k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   157k|{
 8607|   157k|#if !SCN_DISABLE_LOCALE
 8608|   157k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   157k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   157k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   157k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   157k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 141k]
  |  |  ------------------
  ------------------
 8615|  16.6k|        return unexpected(result.error());
 8616|  16.6k|    }
 8617|   141k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   157k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8972|  36.3k|{
 8973|  36.3k|    T value;
 8974|  36.3k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  36.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  36.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.38k, False: 34.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.38k|    }                                                  \
  |  |  |  | 3671|  36.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  34.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  36.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  80.0k|{
 5155|  80.0k|    check_scan_arg_types<T>();
 5156|       |
 5157|  80.0k|    basic_scan_arg<Context> arg;
 5158|  80.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  80.0k|    arg.m_value = make_value<Context>(value);
 5160|  80.0k|    return arg;
 5161|  80.0k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   619k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  4.39M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  72.6k|{
 8685|  72.6k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  72.6k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  72.6k|{
 8631|  72.6k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  72.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  72.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 69.9k]
  |  |  ------------------
  ------------------
 8635|  2.76k|        return unexpected(result.error());
 8636|  2.76k|    }
 8637|  69.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  69.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  72.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  69.9k|    {
 1663|  69.9k|        return std::move(value());
 1664|  69.9k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8866|  78.8k|{
 8867|  78.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  78.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  78.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  78.8k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|   157k|{
 5396|   157k|    detail::check_scan_arg_types<Args...>();
 5397|   157k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   157k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|   194k|{
 5135|   194k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   194k|                  "Scan argument types must be default constructible");
 5137|   194k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   194k|                  "Scan argument types must be Destructible");
 5139|   194k|    static_assert(
 5140|   194k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   194k|        "Scan argument types must not be references");
 5142|   194k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5347|   157k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|   157k|    {
 5349|   157k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   157k|    {
 5360|   157k|        return {detail::make_arg<
 5361|   157k|            kind, Context,
 5362|   157k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   157k|                                 typename Context::char_type>::value>(args)...};
 5364|   157k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|   157k|{
 5170|   157k|    return make_value<Context>(value).ref_value;
 5171|   157k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|   194k|{
 5120|   194k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|   194k|                                  needs_context_tag>) {
 5124|   194k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   194k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|   194k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|   194k|    {                                                                        \
 4959|   194k|        return val;                                                          \
 4960|   194k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|   194k|{
 5089|   194k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   194k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   194k|    constexpr bool scannable_char =
 5093|   194k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   194k|    static_assert(scannable_char,
 5095|   194k|                  "Cannot scan an argument of an unsupported character "
 5096|   194k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   194k|    constexpr bool scannable_const =
 5099|   194k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   194k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   194k|    constexpr bool scannable_disabled =
 5103|   194k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   194k|    static_assert(scannable_disabled,
 5105|   194k|                  "Cannot scan an argument that has been disabled by "
 5106|   194k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   194k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   194k|    static_assert(
 5110|   194k|        scannable,
 5111|   194k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   194k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   194k|    return arg_value{arg};
 5115|   194k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4900|   194k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|   194k|    {
 4902|   194k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7974|   157k|    {
 7975|   157k|        return m_str;
 7976|   157k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|   157k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|   157k|    {
 5426|   157k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|   157k|    {
 5379|   157k|        return m_argptrs;
 5380|   157k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|   157k|{
 8820|   157k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   157k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 141k]
  |  |  ------------------
  ------------------
 8821|  16.6k|        return unexpected(result.error());
 8822|  16.6k|    }
 8823|   141k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   141k|    static_cast<    \
  |  |  929|   141k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   157k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  17.9k|        : base(unexpect, std::move(e.error())),
 1474|  17.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  17.9k|    {
 1476|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  17.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  17.9k|          m_has_value(false)
  446|  17.9k|    {
  447|  17.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   194k|    {
 1177|   194k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5828|   176k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   176k|    {
 5830|   176k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5614|   176k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   176k|    static_cast<    \
  |  |  929|   176k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|   176k|    {
 5616|   176k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   176k|        : base(std::in_place, std::forward<U>(val)),
 1428|   176k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   176k|    {
 1430|   176k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   176k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   176k|    {
  437|   176k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|   157k|    {
 5374|   157k|        return m_args;
 5375|   157k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   157k|        : m_str(r.str)
 7970|   157k|    {
 7971|   157k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   194k|    {
 1598|   194k|        return has_value();
 1599|   194k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   370k|    {
  485|   370k|        return m_has_value;
  486|   370k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   176k|    {
 1673|   176k|        return &value();
 1674|   176k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   176k|    {
 1627|   176k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   176k|        return this->get_value();
 1629|   176k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   176k|    {
  451|   176k|        return m_value;
  452|   176k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8933|  78.8k|{
 8934|  78.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  78.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  78.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  78.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  78.8k|    static_cast<    \
  |  |  929|  78.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  78.8k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8972|  36.3k|{
 8973|  36.3k|    T value;
 8974|  36.3k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  36.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  36.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  36.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  36.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.38k, False: 34.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.38k|    }                                                  \
  |  |  |  | 3671|  36.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  34.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  34.9k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  34.9k|    static_cast<    \
  |  |  929|  34.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  36.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  36.3k|{
 5155|  36.3k|    check_scan_arg_types<T>();
 5156|       |
 5157|  36.3k|    basic_scan_arg<Context> arg;
 5158|  36.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  36.3k|    arg.m_value = make_value<Context>(value);
 5160|  36.3k|    return arg;
 5161|  36.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  17.9k|    {
 2724|  17.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  17.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  17.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  17.9k|    {
 2705|  17.9k|        return decay_copy(t.begin());
 2706|  17.9k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  10.0M|{
 1949|  10.0M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.0M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.0M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   462k|    {
 2781|   462k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   462k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   462k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   462k|    {
 2763|   462k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   462k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   462k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8866|  93.8k|{
 8867|  93.8k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  93.8k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  93.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  93.8k|    static_cast<    \
  |  |  929|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  93.8k|    static_cast<    \
  |  |  929|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  93.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  93.8k|{
 8654|  93.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  93.8k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  93.8k|{
 8591|  93.8k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  93.8k|    auto result = vscan_impl(buffer, format, args);
 8594|  93.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.30k, False: 85.5k]
  |  |  ------------------
  ------------------
 8595|  8.30k|        return unexpected(result.error());
 8596|  8.30k|    }
 8597|  85.5k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  93.8k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|   231k|{
 4720|   231k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   231k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   231k|                  "\n"
 4724|   231k|                  "Unsupported range type given as input to a scanning "
 4725|   231k|                  "function.\n"
 4726|   231k|                  "A range needs to have a character type (value type) "
 4727|   231k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   231k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   231k|                  "to be included.\n"
 4730|   231k|                  "See the scnlib documentation for more details.");
 4731|   231k|    static_assert(
 4732|   231k|        !std::is_same_v<T, custom_char_traits>,
 4733|   231k|        "\n"
 4734|   231k|        "Unsupported range type given as input to a scanning "
 4735|   231k|        "function.\n"
 4736|   231k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   231k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   231k|        "not supported.");
 4739|   231k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   231k|                  "\n"
 4741|   231k|                  "Unsupported range type given as input to a scanning "
 4742|   231k|                  "function.\n"
 4743|   231k|                  "file_marker_found cannot be used as an "
 4744|   231k|                  "source range type to scn::scan.\n"
 4745|   231k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   231k|                  "and do not provide an explicit source range, "
 4747|   231k|                  "or use scn::scan with a FILE* directly.");
 4748|   231k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   231k|                  "\n"
 4750|   231k|                  "Unsupported range type given as input to a scanning "
 4751|   231k|                  "function.\n"
 4752|   231k|                  "In order to be scannable, a range needs to satisfy "
 4753|   231k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   231k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   231k|                  "\n"
 4756|   231k|                  "Unsupported range type given as input to a scanning "
 4757|   231k|                  "function.\n"
 4758|   231k|                  "A range needs to model forward_range and have a valid "
 4759|   231k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   231k|                  "Examples of scannable ranges are std::string, "
 4761|   231k|                  "std::string_view, "
 4762|   231k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   231k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   231k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   231k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   231k|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|   231k|    else {
 4705|   231k|        return make_forward_scan_buffer(r);
 4706|   231k|    }
 4707|   231k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|   231k|{
 4524|   231k|    return basic_scan_forward_buffer_impl(range);
 4525|   231k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|   231k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|   231k|          m_cursor(ranges::begin(*m_range))
 4410|   231k|    {
 4411|   231k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4380|   231k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|   231k|    {
 4382|   231k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4149|   231k|        : m_current_view(sv), m_is_contiguous(false)
 4150|   231k|    {
 4151|   231k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|   231k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   444k|    {
 2724|   444k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   444k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   444k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   444k|    {
 2705|   444k|        return decay_copy(t.begin());
 2706|   444k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|   658k|    {
 3330|   658k|        return m_iterator;
 3331|   658k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  2.91M|    {
 4415|  2.91M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 22.5k, False: 2.89M]
  ------------------
 4416|  22.5k|            return false;
 4417|  22.5k|        }
 4418|  2.89M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  2.89M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  2.89M|        }
 4421|  2.89M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 2.67M, False: 221k]
  ------------------
 4422|  2.67M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  2.67M|                                          this->m_current_view.begin(),
 4424|  2.67M|                                          this->m_current_view.end());
 4425|  2.67M|        }
 4426|  2.89M|        m_latest = *m_cursor;
 4427|  2.89M|        ++m_cursor;
 4428|  2.89M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  2.89M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  2.89M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  2.89M|        }
 4432|  2.89M|        return true;
 4433|  2.91M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  8.71M|    {
 2781|  8.71M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  8.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  8.71M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  8.71M|    {
 2763|  8.71M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  8.71M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  8.71M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  8.92M|    {
 3334|  8.92M|        return m_sentinel;
 3335|  8.92M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|   231k|    {
 4071|   231k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   231k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   231k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  17.9k|        : base(unexpect, std::move(e.error())),
 1474|  17.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  17.9k|    {
 1476|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  17.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  17.9k|          m_has_value(false)
  446|  17.9k|    {
  447|  17.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   231k|    {
 1177|   231k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   213k|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|   213k|                      ranges::iterator_t<SourceRange>>) {
 5925|   213k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|   213k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   213k|    {
 2724|   213k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   213k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   213k|    {
 2705|   213k|        return decay_copy(t.begin());
 2706|   213k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|   213k|{
 5910|   213k|    return ranges::end(source);
 5911|   213k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   213k|    {
 2781|   213k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   213k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   213k|    {
 2763|   213k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   213k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   213k|        : base(std::in_place, std::forward<U>(val)),
 1428|   213k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   213k|    {
 1430|   213k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   213k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   213k|    {
  437|   213k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7974|   187k|    {
 7975|   187k|        return m_str;
 7976|   187k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|   187k|{
 8820|   187k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 171k]
  |  |  ------------------
  ------------------
 8821|  16.6k|        return unexpected(result.error());
 8822|  16.6k|    }
 8823|   171k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   171k|    static_cast<    \
  |  |  929|   171k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   187k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   231k|    {
 1598|   231k|        return has_value();
 1599|   231k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   462k|    {
  485|   462k|        return m_has_value;
  486|   462k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  17.9k|    {
 1604|  17.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  17.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  17.9k|        return this->get_unexpected().error();
 1606|  17.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  17.9k|    {
  468|  17.9k|        return m_unexpected;
  469|  17.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  17.9k|        : base(unexpect, std::move(e.error())),
 1474|  17.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  17.9k|    {
 1476|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  17.9k|        : m_has_value(false)
  625|  17.9k|    {
  626|  17.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  17.9k|    {
  689|  17.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  17.9k|                                  std::forward<Args>(args)...);
  691|  17.9k|        m_has_value = false;
  692|  17.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  35.9k|    {
  718|  35.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  35.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  35.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  35.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   231k|    {
 1177|   231k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   171k|    {
 1653|   171k|        return value();
 1654|   171k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   213k|    {
 1627|   213k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   213k|        return this->get_value();
 1629|   213k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   213k|    {
  451|   213k|        return m_value;
  452|   213k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5828|   213k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   213k|    static_cast<    \
  |  |  929|   213k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   213k|    static_cast<    \
  |  |  929|   213k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|   213k|    {
 5830|   213k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5679|   213k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   213k|    static_cast<    \
  |  |  929|   213k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|   213k|    {
 5681|   213k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   213k|        : base(std::in_place, std::forward<U>(val)),
 1428|   213k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   213k|    {
 1430|   213k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   213k|        : m_has_value(true)
  615|   213k|    {
  616|   213k|        construct(std::forward<Args>(args)...);
  617|   213k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   213k|    {
  682|   213k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   213k|        m_has_value = true;
  684|   213k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   213k|{
  392|   213k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   213k|        T(std::forward<Args>(args)...);
  394|   213k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5821|   213k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   640k|    {
  706|   640k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   640k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   640k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5825|   426k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|   444k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   444k|    static_cast<    \
  |  |  929|   444k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   444k|    static_cast<    \
  |  |  929|   444k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|   444k|    {
 3316|   444k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7969|   187k|        : m_str(r.str)
 7970|   187k|    {
 7971|   187k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   231k|    {
 1598|   231k|        return has_value();
 1599|   231k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   676k|    {
  675|   676k|        return m_has_value;
  676|   676k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   213k|    {
 1673|   213k|        return &value();
 1674|   213k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   213k|    {
 1627|   213k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   213k|        return this->get_value();
 1629|   213k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   213k|    {
  641|   213k|        return *value_ptr();
  642|   213k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|   213k|    {
 5698|   213k|        return ranges::begin(m_range);
 5699|   213k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   231k|    {
  631|   231k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 213k, False: 17.9k]
  ------------------
  632|   213k|            destroy_value();
  633|   213k|        }
  634|  17.9k|        else {
  635|  17.9k|            destroy_unexpected();
  636|  17.9k|        }
  637|   231k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   213k|    {
  696|   213k|        scn::detail::destroy_at(value_ptr());
  697|   213k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   213k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   213k|    else {
  404|   213k|        p->~T();
  405|   213k|    }
  406|   213k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  17.9k|    {
  700|  17.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  17.9k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8933|  93.8k|{
 8934|  93.8k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  93.8k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  93.8k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  93.8k|    static_cast<    \
  |  |  929|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  93.8k|    static_cast<    \
  |  |  929|  93.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  93.8k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  93.8k|{
 8672|  93.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  93.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  93.8k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  93.8k|{
 8607|  93.8k|#if !SCN_DISABLE_LOCALE
 8608|  93.8k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  93.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  93.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  93.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  93.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  93.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.30k, False: 85.5k]
  |  |  ------------------
  ------------------
 8615|  8.30k|        return unexpected(result.error());
 8616|  8.30k|    }
 8617|  85.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  85.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  93.8k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8972|  43.7k|{
 8973|  43.7k|    T value;
 8974|  43.7k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  43.7k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  43.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  43.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  43.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.38k, False: 42.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.38k|    }                                                  \
  |  |  |  | 3671|  43.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  42.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  42.3k|    static_cast<    \
  |  |  929|  42.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  42.3k|    static_cast<    \
  |  |  929|  42.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  43.7k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  43.7k|{
 8685|  43.7k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  43.7k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  43.7k|{
 8631|  43.7k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  43.7k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  43.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.38k, False: 42.3k]
  |  |  ------------------
  ------------------
 8635|  1.38k|        return unexpected(result.error());
 8636|  1.38k|    }
 8637|  42.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  42.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  43.7k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  42.3k|    {
 1663|  42.3k|        return std::move(value());
 1664|  42.3k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  74.7k|    {
 2724|  74.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  74.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  74.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  74.7k|    {
 2705|  74.7k|        return decay_copy(t.begin());
 2706|  74.7k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  17.4M|{
 1949|  17.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  17.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  17.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.04M|    {
 2781|  5.04M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.04M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.04M|    {
 2763|  5.04M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.04M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  2.02M|{
 5396|  2.02M|    detail::check_scan_arg_types<Args...>();
 5397|  2.02M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  2.02M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  2.51M|{
 5135|  2.51M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  2.51M|                  "Scan argument types must be default constructible");
 5137|  2.51M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  2.51M|                  "Scan argument types must be Destructible");
 5139|  2.51M|    static_assert(
 5140|  2.51M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  2.51M|        "Scan argument types must not be references");
 5142|  2.51M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5347|  2.02M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  2.02M|    {
 5349|  2.02M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  2.02M|    {
 5360|  2.02M|        return {detail::make_arg<
 5361|  2.02M|            kind, Context,
 5362|  2.02M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  2.02M|                                 typename Context::char_type>::value>(args)...};
 5364|  2.02M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  2.02M|{
 5170|  2.02M|    return make_value<Context>(value).ref_value;
 5171|  2.02M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  2.51M|{
 5120|  2.51M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  2.51M|                                  needs_context_tag>) {
 5124|  2.51M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  2.51M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  2.51M|    {                                                                        \
 4959|  2.51M|        return val;                                                          \
 4960|  2.51M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  2.51M|{
 5089|  2.51M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  2.51M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  2.51M|    constexpr bool scannable_char =
 5093|  2.51M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  2.51M|    static_assert(scannable_char,
 5095|  2.51M|                  "Cannot scan an argument of an unsupported character "
 5096|  2.51M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  2.51M|    constexpr bool scannable_const =
 5099|  2.51M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  2.51M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  2.51M|    constexpr bool scannable_disabled =
 5103|  2.51M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  2.51M|    static_assert(scannable_disabled,
 5105|  2.51M|                  "Cannot scan an argument that has been disabled by "
 5106|  2.51M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  2.51M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  2.51M|    static_assert(
 5110|  2.51M|        scannable,
 5111|  2.51M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  2.51M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  2.51M|    return arg_value{arg};
 5115|  2.51M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4900|  2.51M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  2.51M|    {
 4902|  2.51M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  1.01M|{
 8591|  1.01M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  1.01M|    auto result = vscan_impl(buffer, format, args);
 8594|  1.01M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.2k, False: 979k]
  |  |  ------------------
  ------------------
 8595|  33.2k|        return unexpected(result.error());
 8596|  33.2k|    }
 8597|   979k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   979k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  1.01M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|  2.51M|{
 4720|  2.51M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  2.51M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  2.51M|                  "\n"
 4724|  2.51M|                  "Unsupported range type given as input to a scanning "
 4725|  2.51M|                  "function.\n"
 4726|  2.51M|                  "A range needs to have a character type (value type) "
 4727|  2.51M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  2.51M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  2.51M|                  "to be included.\n"
 4730|  2.51M|                  "See the scnlib documentation for more details.");
 4731|  2.51M|    static_assert(
 4732|  2.51M|        !std::is_same_v<T, custom_char_traits>,
 4733|  2.51M|        "\n"
 4734|  2.51M|        "Unsupported range type given as input to a scanning "
 4735|  2.51M|        "function.\n"
 4736|  2.51M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  2.51M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  2.51M|        "not supported.");
 4739|  2.51M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  2.51M|                  "\n"
 4741|  2.51M|                  "Unsupported range type given as input to a scanning "
 4742|  2.51M|                  "function.\n"
 4743|  2.51M|                  "file_marker_found cannot be used as an "
 4744|  2.51M|                  "source range type to scn::scan.\n"
 4745|  2.51M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  2.51M|                  "and do not provide an explicit source range, "
 4747|  2.51M|                  "or use scn::scan with a FILE* directly.");
 4748|  2.51M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  2.51M|                  "\n"
 4750|  2.51M|                  "Unsupported range type given as input to a scanning "
 4751|  2.51M|                  "function.\n"
 4752|  2.51M|                  "In order to be scannable, a range needs to satisfy "
 4753|  2.51M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  2.51M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  2.51M|                  "\n"
 4756|  2.51M|                  "Unsupported range type given as input to a scanning "
 4757|  2.51M|                  "function.\n"
 4758|  2.51M|                  "A range needs to model forward_range and have a valid "
 4759|  2.51M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  2.51M|                  "Examples of scannable ranges are std::string, "
 4761|  2.51M|                  "std::string_view, "
 4762|  2.51M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  2.51M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  2.51M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  2.51M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4658|  2.51M|{
 4659|  2.51M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4660|  2.51M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|       |    }
 4662|       |    else {
 4663|       |        return invalid_char_type{};
 4664|       |    }
 4665|  2.51M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.51M|    {
 2855|  2.51M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.51M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.51M|    {
 2836|  2.51M|        return t.data();
 2837|  2.51M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|  2.51M|    {
 3231|  2.51M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 4.99k, False: 2.51M]
  ------------------
 3232|  2.51M|                   ? nullptr
 3233|  2.51M|                   : std::addressof(*ranges::begin(derived()));
 3234|  2.51M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  2.51M|    {
 3005|  2.51M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  2.51M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  2.51M|    {
 2978|  2.51M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  2.51M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  4.98M|    {
 3339|  4.98M|        return m_iterator == m_sentinel;
 3340|  4.98M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  5.03M|    {
 3185|  5.03M|        return static_cast<const D&>(*this);
 3186|  5.03M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  4.96M|    {
 2724|  4.96M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  4.96M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  4.96M|    {
 2705|  4.96M|        return decay_copy(t.begin());
 2706|  4.96M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|   253M|    {
 3330|   253M|        return m_iterator;
 3331|   253M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  2.51M|    {
 2930|  2.51M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  2.51M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  2.51M|    {
 2896|  2.51M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  2.51M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3345|  4.98M|    {
 3346|  4.98M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  4.98M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  71.9k|        : base(unexpect, std::move(e.error())),
 1474|  71.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  71.9k|    {
 1476|  71.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  71.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  71.9k|          m_has_value(false)
  446|  71.9k|    {
  447|  71.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.51M|    {
 1177|  2.51M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  2.44M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  2.44M|                      ranges::iterator_t<SourceRange>>) {
 5925|  2.44M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  2.44M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  4.91M|    {
 2724|  4.91M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  4.91M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  4.91M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  4.91M|    {
 2705|  4.91M|        return decay_copy(t.begin());
 2706|  4.91M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|  2.44M|{
 5910|  2.44M|    return ranges::end(source);
 5911|  2.44M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.44M|    {
 2781|  2.44M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.44M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.44M|    {
 2763|  2.44M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.44M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|   242M|    {
 3334|   242M|        return m_sentinel;
 3335|   242M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  2.44M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.44M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.44M|    {
 1430|  2.44M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  2.44M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.44M|    {
  437|  2.44M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7974|  1.01M|    {
 7975|  1.01M|        return m_str;
 7976|  1.01M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  2.02M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  2.02M|    {
 5426|  2.02M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  2.02M|    {
 5379|  2.02M|        return m_argptrs;
 5380|  2.02M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5476|  3.03M|        : m_desc(desc), m_builtin_values(data)
 5477|  3.03M|    {
 5478|  3.03M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  1.01M|{
 8820|  1.01M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.2k, False: 979k]
  |  |  ------------------
  ------------------
 8821|  33.2k|        return unexpected(result.error());
 8822|  33.2k|    }
 8823|   979k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   979k|    static_cast<    \
  |  |  929|   979k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   979k|    static_cast<    \
  |  |  929|   979k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  1.01M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  2.51M|    {
 1598|  2.51M|        return has_value();
 1599|  2.51M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.03M|    {
  485|  5.03M|        return m_has_value;
  486|  5.03M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  71.9k|    {
 1604|  71.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  71.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  71.9k|        return this->get_unexpected().error();
 1606|  71.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  71.9k|    {
  468|  71.9k|        return m_unexpected;
  469|  71.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  35.9k|        : base(unexpect, std::move(e.error())),
 1474|  35.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.9k|    {
 1476|  35.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  35.9k|        : m_has_value(false)
  625|  35.9k|    {
  626|  35.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  35.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  35.9k|    {
  689|  35.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  35.9k|                                  std::forward<Args>(args)...);
  691|  35.9k|        m_has_value = false;
  692|  35.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  71.9k|    {
  718|  71.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  71.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  71.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  71.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.25M|    {
 1177|  1.25M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.95M|    {
 1653|  1.95M|        return value();
 1654|  1.95M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  2.44M|    {
 1627|  2.44M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.44M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.44M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.44M|        return this->get_value();
 1629|  2.44M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.44M|    {
  451|  2.44M|        return m_value;
  452|  2.44M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5828|  1.22M|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|  1.22M|    {
 5830|  1.22M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5679|  2.44M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  2.44M|    static_cast<    \
  |  |  929|  2.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  2.44M|    {
 5681|  2.44M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5614|  2.44M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  2.44M|    static_cast<    \
  |  |  929|  2.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  2.44M|    {
 5616|  2.44M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  1.22M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.22M|    {
 1430|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  1.22M|        : m_has_value(true)
  615|  1.22M|    {
  616|  1.22M|        construct(std::forward<Args>(args)...);
  617|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  1.22M|    {
  682|  1.22M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.22M|        m_has_value = true;
  684|  1.22M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  1.22M|{
  392|  1.22M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.22M|        T(std::forward<Args>(args)...);
  394|  1.22M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  1.22M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  3.67M|    {
  706|  3.67M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  3.67M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  3.67M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  2.44M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  2.02M|    {
 5374|  2.02M|        return m_args;
 5375|  2.02M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  2.02M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3314|  94.1M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  94.1M|    static_cast<    \
  |  |  929|  94.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  94.1M|    static_cast<    \
  |  |  929|  94.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  94.1M|    {
 3316|  94.1M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  3.03M|{
 7696|  3.03M|    return s;
 7697|  3.03M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  3.03M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  1.01M|        : m_str(r.str)
 7970|  1.01M|    {
 7971|  1.01M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  1.25M|    {
 1598|  1.25M|        return has_value();
 1599|  1.25M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  3.74M|    {
  675|  3.74M|        return m_has_value;
  676|  3.74M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  1.22M|    {
 1673|  1.22M|        return &value();
 1674|  1.22M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|  1.22M|    {
 1627|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22M|        return this->get_value();
 1629|  1.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  1.22M|    {
  641|  1.22M|        return *value_ptr();
  642|  1.22M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|  2.44M|    {
 5698|  2.44M|        return ranges::begin(m_range);
 5699|  2.44M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  1.25M|    {
  631|  1.25M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.22M, False: 35.9k]
  ------------------
  632|  1.22M|            destroy_value();
  633|  1.22M|        }
  634|  35.9k|        else {
  635|  35.9k|            destroy_unexpected();
  636|  35.9k|        }
  637|  1.25M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.22M|    {
  696|  1.22M|        scn::detail::destroy_at(value_ptr());
  697|  1.22M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  1.22M|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.22M|    else {
  404|  1.22M|        p->~T();
  405|  1.22M|    }
  406|  1.22M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  35.9k|    {
  700|  35.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  35.9k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  1.01M|{
 8607|  1.01M|#if !SCN_DISABLE_LOCALE
 8608|  1.01M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  1.01M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  1.01M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  1.01M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  1.01M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.2k, False: 979k]
  |  |  ------------------
  ------------------
 8615|  33.2k|        return unexpected(result.error());
 8616|  33.2k|    }
 8617|   979k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   979k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  1.01M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|   495k|{
 5155|   495k|    check_scan_arg_types<T>();
 5156|       |
 5157|   495k|    basic_scan_arg<Context> arg;
 5158|   495k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   495k|    arg.m_value = make_value<Context>(value);
 5160|   495k|    return arg;
 5161|   495k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  3.77M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   495k|{
 8631|   495k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   495k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   495k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   495k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 489k]
  |  |  ------------------
  ------------------
 8635|  5.53k|        return unexpected(result.error());
 8636|  5.53k|    }
 8637|   489k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   495k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   489k|    {
 1663|   489k|        return std::move(value());
 1664|   489k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  1.01M|{
 5396|  1.01M|    detail::check_scan_arg_types<Args...>();
 5397|  1.01M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  1.01M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  1.25M|{
 5135|  1.25M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  1.25M|                  "Scan argument types must be default constructible");
 5137|  1.25M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  1.25M|                  "Scan argument types must be Destructible");
 5139|  1.25M|    static_assert(
 5140|  1.25M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  1.25M|        "Scan argument types must not be references");
 5142|  1.25M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5347|  1.01M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5348|  1.01M|    {
 5349|  1.01M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  1.01M|    {
 5360|  1.01M|        return {detail::make_arg<
 5361|  1.01M|            kind, Context,
 5362|  1.01M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  1.01M|                                 typename Context::char_type>::value>(args)...};
 5364|  1.01M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  1.01M|{
 5170|  1.01M|    return make_value<Context>(value).ref_value;
 5171|  1.01M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  1.25M|{
 5120|  1.25M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5123|  1.25M|                                  needs_context_tag>) {
 5124|  1.25M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|       |    }
 5126|       |    else {
 5127|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|       |            value, context_tag<Context>{}));
 5129|       |    }
 5130|  1.25M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  1.25M|    {                                                                        \
 4959|  1.25M|        return val;                                                          \
 4960|  1.25M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  1.25M|{
 5089|  1.25M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  1.25M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  1.25M|    constexpr bool scannable_char =
 5093|  1.25M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  1.25M|    static_assert(scannable_char,
 5095|  1.25M|                  "Cannot scan an argument of an unsupported character "
 5096|  1.25M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  1.25M|    constexpr bool scannable_const =
 5099|  1.25M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  1.25M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  1.25M|    constexpr bool scannable_disabled =
 5103|  1.25M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  1.25M|    static_assert(scannable_disabled,
 5105|  1.25M|                  "Cannot scan an argument that has been disabled by "
 5106|  1.25M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  1.25M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  1.25M|    static_assert(
 5110|  1.25M|        scannable,
 5111|  1.25M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  1.25M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  1.25M|    return arg_value{arg};
 5115|  1.25M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4900|  1.25M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4901|  1.25M|    {
 4902|  1.25M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7974|  1.01M|    {
 7975|  1.01M|        return m_str;
 7976|  1.01M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5424|  1.01M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5425|  1.01M|    {
 5426|  1.01M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  1.01M|    {
 5379|  1.01M|        return m_argptrs;
 5380|  1.01M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  1.01M|{
 8820|  1.01M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.2k, False: 979k]
  |  |  ------------------
  ------------------
 8821|  33.2k|        return unexpected(result.error());
 8822|  33.2k|    }
 8823|   979k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   979k|    static_cast<    \
  |  |  929|   979k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   979k|    static_cast<    \
  |  |  929|   979k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  1.01M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  35.9k|        : base(unexpect, std::move(e.error())),
 1474|  35.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.9k|    {
 1476|  35.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  35.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.9k|          m_has_value(false)
  446|  35.9k|    {
  447|  35.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.25M|    {
 1177|  1.25M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5828|  1.22M|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|  1.22M|    {
 5830|  1.22M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5614|  1.22M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5615|  1.22M|    {
 5616|  1.22M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  1.22M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.22M|    {
 1430|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|  1.22M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.22M|    {
  437|  1.22M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  1.01M|    {
 5374|  1.01M|        return m_args;
 5375|  1.01M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  1.01M|        : m_str(r.str)
 7970|  1.01M|    {
 7971|  1.01M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  1.25M|    {
 1598|  1.25M|        return has_value();
 1599|  1.25M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.48M|    {
  485|  2.48M|        return m_has_value;
  486|  2.48M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  1.22M|    {
 1673|  1.22M|        return &value();
 1674|  1.22M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|  1.22M|    {
 1627|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22M|        return this->get_value();
 1629|  1.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.22M|    {
  451|  1.22M|        return m_value;
  452|  1.22M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|   247k|{
 5155|   247k|    check_scan_arg_types<T>();
 5156|       |
 5157|   247k|    basic_scan_arg<Context> arg;
 5158|   247k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|   247k|    arg.m_value = make_value<Context>(value);
 5160|   247k|    return arg;
 5161|   247k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  35.9k|    {
 2724|  35.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  35.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  35.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  35.9k|    {
 2705|  35.9k|        return decay_copy(t.begin());
 2706|  35.9k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|   119M|{
 1949|   119M|    return SCN_FWD(t);
  ------------------
  |  |  930|   119M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   119M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  2.51M|    {
 2781|  2.51M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  2.51M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  2.51M|    {
 2763|  2.51M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  2.51M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  2.51M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|   506k|{
 8591|   506k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   506k|    auto result = vscan_impl(buffer, format, args);
 8594|   506k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 489k]
  |  |  ------------------
  ------------------
 8595|  16.6k|        return unexpected(result.error());
 8596|  16.6k|    }
 8597|   489k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   506k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|  1.25M|{
 4720|  1.25M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  1.25M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  1.25M|                  "\n"
 4724|  1.25M|                  "Unsupported range type given as input to a scanning "
 4725|  1.25M|                  "function.\n"
 4726|  1.25M|                  "A range needs to have a character type (value type) "
 4727|  1.25M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  1.25M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  1.25M|                  "to be included.\n"
 4730|  1.25M|                  "See the scnlib documentation for more details.");
 4731|  1.25M|    static_assert(
 4732|  1.25M|        !std::is_same_v<T, custom_char_traits>,
 4733|  1.25M|        "\n"
 4734|  1.25M|        "Unsupported range type given as input to a scanning "
 4735|  1.25M|        "function.\n"
 4736|  1.25M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  1.25M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  1.25M|        "not supported.");
 4739|  1.25M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  1.25M|                  "\n"
 4741|  1.25M|                  "Unsupported range type given as input to a scanning "
 4742|  1.25M|                  "function.\n"
 4743|  1.25M|                  "file_marker_found cannot be used as an "
 4744|  1.25M|                  "source range type to scn::scan.\n"
 4745|  1.25M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  1.25M|                  "and do not provide an explicit source range, "
 4747|  1.25M|                  "or use scn::scan with a FILE* directly.");
 4748|  1.25M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  1.25M|                  "\n"
 4750|  1.25M|                  "Unsupported range type given as input to a scanning "
 4751|  1.25M|                  "function.\n"
 4752|  1.25M|                  "In order to be scannable, a range needs to satisfy "
 4753|  1.25M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  1.25M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  1.25M|                  "\n"
 4756|  1.25M|                  "Unsupported range type given as input to a scanning "
 4757|  1.25M|                  "function.\n"
 4758|  1.25M|                  "A range needs to model forward_range and have a valid "
 4759|  1.25M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  1.25M|                  "Examples of scannable ranges are std::string, "
 4761|  1.25M|                  "std::string_view, "
 4762|  1.25M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  1.25M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  1.25M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  1.25M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  1.25M|{
 4690|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4691|       |        return file_marker_found{};
 4692|       |    }
 4693|       |    else if constexpr (!ranges::forward_range<Range>) {
 4694|       |        if constexpr (ranges::range<Range>) {
 4695|       |            return insufficient_range{};
 4696|       |        }
 4697|       |        else {
 4698|       |            return invalid_input_range{};
 4699|       |        }
 4700|       |    }
 4701|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4702|       |        return invalid_char_type{};
 4703|       |    }
 4704|  1.25M|    else {
 4705|  1.25M|        return make_forward_scan_buffer(r);
 4706|  1.25M|    }
 4707|  1.25M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|  1.25M|{
 4524|  1.25M|    return basic_scan_forward_buffer_impl(range);
 4525|  1.25M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4408|  1.25M|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4409|  1.25M|          m_cursor(ranges::begin(*m_range))
 4410|  1.25M|    {
 4411|  1.25M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4380|  1.25M|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4381|  1.25M|    {
 4382|  1.25M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4149|  1.25M|        : m_current_view(sv), m_is_contiguous(false)
 4150|  1.25M|    {
 4151|  1.25M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|  1.25M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.48M|    {
 2724|  2.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.48M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.48M|    {
 2705|  2.48M|        return decay_copy(t.begin());
 2706|  2.48M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  3.70M|    {
 3330|  3.70M|        return m_iterator;
 3331|  3.70M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|  37.4M|    {
 4415|  37.4M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 29.7k, False: 37.3M]
  ------------------
 4416|  29.7k|            return false;
 4417|  29.7k|        }
 4418|  37.3M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4419|  37.3M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  37.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  37.3M|        }
 4421|  37.3M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 36.1M, False: 1.24M]
  ------------------
 4422|  36.1M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  36.1M|                                          this->m_current_view.begin(),
 4424|  36.1M|                                          this->m_current_view.end());
 4425|  36.1M|        }
 4426|  37.3M|        m_latest = *m_cursor;
 4427|  37.3M|        ++m_cursor;
 4428|  37.3M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  37.3M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4430|  37.3M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  37.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  37.3M|        }
 4432|  37.3M|        return true;
 4433|  37.4M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   112M|    {
 2781|   112M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   112M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   112M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   112M|    {
 2763|   112M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   112M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   112M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|   113M|    {
 3334|   113M|        return m_sentinel;
 3335|   113M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|  1.25M|    {
 4071|  1.25M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  1.25M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  1.25M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  35.9k|        : base(unexpect, std::move(e.error())),
 1474|  35.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.9k|    {
 1476|  35.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  35.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  35.9k|          m_has_value(false)
  446|  35.9k|    {
  447|  35.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.25M|    {
 1177|  1.25M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  1.22M|{
 5923|       |    if constexpr (ranges::random_access_iterator<
 5924|  1.22M|                      ranges::iterator_t<SourceRange>>) {
 5925|  1.22M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|       |    }
 5927|       |    else {
 5928|       |        auto it = ranges::begin(source);
 5929|       |        while (n > 0) {
 5930|       |            --n;
 5931|       |            ++it;
 5932|       |        }
 5933|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|       |    }
 5935|  1.22M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.22M|    {
 2724|  1.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.22M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.22M|    {
 2705|  1.22M|        return decay_copy(t.begin());
 2706|  1.22M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|  1.22M|{
 5910|  1.22M|    return ranges::end(source);
 5911|  1.22M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.22M|    {
 2781|  1.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.22M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.22M|    {
 2763|  1.22M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.22M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  1.22M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.22M|    {
 1430|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  1.22M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.22M|    {
  437|  1.22M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7974|  1.01M|    {
 7975|  1.01M|        return m_str;
 7976|  1.01M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|  1.01M|{
 8820|  1.01M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.2k, False: 979k]
  |  |  ------------------
  ------------------
 8821|  33.2k|        return unexpected(result.error());
 8822|  33.2k|    }
 8823|   979k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   979k|    static_cast<    \
  |  |  929|   979k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   979k|    static_cast<    \
  |  |  929|   979k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  1.01M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  1.25M|    {
 1598|  1.25M|        return has_value();
 1599|  1.25M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.51M|    {
  485|  2.51M|        return m_has_value;
  486|  2.51M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  35.9k|    {
 1604|  35.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  35.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  35.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  35.9k|        return this->get_unexpected().error();
 1606|  35.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  35.9k|    {
  468|  35.9k|        return m_unexpected;
  469|  35.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  35.9k|        : base(unexpect, std::move(e.error())),
 1474|  35.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  35.9k|    {
 1476|  35.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  35.9k|        : m_has_value(false)
  625|  35.9k|    {
  626|  35.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  35.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  35.9k|    {
  689|  35.9k|        scn::detail::construct_at(unexpected_ptr(),
  690|  35.9k|                                  std::forward<Args>(args)...);
  691|  35.9k|        m_has_value = false;
  692|  35.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  71.9k|    {
  718|  71.9k|        return reinterpret_cast<unexpected<E>*>(
  719|  71.9k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  71.9k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  71.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.25M|    {
 1177|  1.25M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   979k|    {
 1653|   979k|        return value();
 1654|   979k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  1.22M|    {
 1627|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22M|        return this->get_value();
 1629|  1.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.22M|    {
  451|  1.22M|        return m_value;
  452|  1.22M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5828|  1.22M|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5829|  1.22M|    {
 5830|  1.22M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5679|  1.22M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5680|  1.22M|    {
 5681|  1.22M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|  1.22M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.22M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.22M|    {
 1430|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|  1.22M|        : m_has_value(true)
  615|  1.22M|    {
  616|  1.22M|        construct(std::forward<Args>(args)...);
  617|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  1.22M|    {
  682|  1.22M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  1.22M|        m_has_value = true;
  684|  1.22M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  1.22M|{
  392|  1.22M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  1.22M|        T(std::forward<Args>(args)...);
  394|  1.22M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5821|  1.22M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  3.67M|    {
  706|  3.67M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  3.67M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  3.67M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5825|  2.44M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3314|  2.48M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.48M|    static_cast<    \
  |  |  929|  2.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  2.48M|    {
 3316|  2.48M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7969|  1.01M|        : m_str(r.str)
 7970|  1.01M|    {
 7971|  1.01M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  1.25M|    {
 1598|  1.25M|        return has_value();
 1599|  1.25M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  3.74M|    {
  675|  3.74M|        return m_has_value;
  676|  3.74M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  1.22M|    {
 1673|  1.22M|        return &value();
 1674|  1.22M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|  1.22M|    {
 1627|  1.22M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.22M|        return this->get_value();
 1629|  1.22M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  1.22M|    {
  641|  1.22M|        return *value_ptr();
  642|  1.22M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|  1.22M|    {
 5698|  1.22M|        return ranges::begin(m_range);
 5699|  1.22M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  1.25M|    {
  631|  1.25M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 1.22M, False: 35.9k]
  ------------------
  632|  1.22M|            destroy_value();
  633|  1.22M|        }
  634|  35.9k|        else {
  635|  35.9k|            destroy_unexpected();
  636|  35.9k|        }
  637|  1.25M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  1.22M|    {
  696|  1.22M|        scn::detail::destroy_at(value_ptr());
  697|  1.22M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|  1.22M|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  1.22M|    else {
  404|  1.22M|        p->~T();
  405|  1.22M|    }
  406|  1.22M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  35.9k|    {
  700|  35.9k|        scn::detail::destroy_at(unexpected_ptr());
  701|  35.9k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|   506k|{
 8607|   506k|#if !SCN_DISABLE_LOCALE
 8608|   506k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   506k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   506k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   506k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   506k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 489k]
  |  |  ------------------
  ------------------
 8615|  16.6k|        return unexpected(result.error());
 8616|  16.6k|    }
 8617|   489k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   489k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   506k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|   247k|{
 8631|   247k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|   247k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|   247k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 244k]
  |  |  ------------------
  ------------------
 8635|  2.76k|        return unexpected(result.error());
 8636|  2.76k|    }
 8637|   244k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|   247k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   244k|    {
 1663|   244k|        return std::move(value());
 1664|   244k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3566|   211k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3567|   211k|    {
 3568|   211k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   211k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   211k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|  13.6M|    {
 3574|  13.6M|        return m_code == good;
 3575|  13.6M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|  74.7k|    {
 3585|  74.7k|        return m_code;
 3586|  74.7k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  9.55M|    {
 3330|  9.55M|        return m_iterator;
 3331|  9.55M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|   123M|    {
 3330|   123M|        return m_iterator;
 3331|   123M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  1.82M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  49.8k|    {
 6282|  49.8k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 49.8k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  49.8k|        m_specs.width = width;
 6289|  49.8k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  1.77M|    {
 6303|  1.77M|        m_specs.type = type;
 6304|  1.77M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  58.1k|    {
 6320|  58.1k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  58.1k|        const auto end_value = static_cast<unsigned>(end);
 6322|  58.1k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  58.1k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  58.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 58.1k, False: 0]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  58.1k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  58.1k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|  1.57M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 1.51M, False: 58.1k]
  ------------------
 6329|  1.51M|                m_specs.charset_literals[v / 8] |=
 6330|  1.51M|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|  1.51M|            }
 6332|  58.1k|        }
 6333|      0|        else {
 6334|      0|            m_specs.charset_has_nonascii = true;
 6335|      0|        }
 6336|  58.1k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  49.8k|    {
 6365|  49.8k|        SCN_UNLIKELY_ATTR
 6366|  49.8k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  49.8k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  1.90M|    {
 6376|  1.90M|        return static_cast<bool>(m_error);
 6377|  1.90M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|  74.7k|{
 3609|  74.7k|    return a.code() == b;
 3610|  74.7k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|  74.7k|{
 3613|  74.7k|    return !(a == b);
 3614|  74.7k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  24.9k|{
 7063|  24.9k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 24.9k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 24.9k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 24.9k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 24.9k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 24.9k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 24.9k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 24.9k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 24.9k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 24.9k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 24.9k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 24.9k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 24.9k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 24.9k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 24.9k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 24.9k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 24.9k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 24.9k]
  ------------------
 7091|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 24.9k]
  ------------------
 7092|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 24.9k]
  ------------------
 7093|      0|            return arg_type_category::floating;
 7094|       |
 7095|  2.76k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 2.76k, False: 22.1k]
  ------------------
 7096|  8.30k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 5.53k, False: 19.3k]
  ------------------
 7097|  13.8k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 5.53k, False: 19.3k]
  ------------------
 7098|  24.9k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 11.0k, False: 13.8k]
  ------------------
 7099|  24.9k|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 24.9k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 24.9k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  24.9k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  24.9k|            SCN_CLANG_POP
 7110|  24.9k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  24.9k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  24.9k|{
 3654|  24.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  24.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  24.9k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  30.5k|{
 3654|  30.5k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  30.5k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  15.6k|{
 3654|  15.6k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  15.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  15.6k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  1.77M|{
 7205|  1.77M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 0, False: 1.77M]
  ------------------
 7206|  1.77M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 1.71M, False: 53.9k]
  ------------------
 7207|  1.77M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 29.0k, False: 24.9k]
  ------------------
 7208|  1.77M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 0, False: 24.9k]
  ------------------
 7209|  1.77M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 0, False: 24.9k]
  ------------------
 7210|  1.74M|        return;
 7211|  1.74M|    }
 7212|  24.9k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 24.9k, False: 0]
  ------------------
 7213|  24.9k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 24.9k, False: 0]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|  24.9k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|  24.9k|        }
 7218|      0|        return;
 7219|  24.9k|    }
 7220|      0|    SCN_UNLIKELY_ATTR
 7221|      0|    handler.on_error("Invalid type specifier for string");
 7222|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|  52.6M|    {
 4195|  52.6M|        return m_end == nullptr;
 4196|  52.6M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   212k|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|   212k|    else {
 3720|   212k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   212k|    }
 3722|   212k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|  1.09M|    {
 4211|  1.09M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 1.09M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  1.09M|        return parent()->get_segment_starting_at(position());
 4217|  1.09M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|  30.6M|    {
 4205|  30.6M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  30.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  30.6M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  30.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|  1.09M|    {
 4101|  1.09M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 627k, False: 465k]
  |  |  ------------------
  ------------------
 4102|  1.09M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   627k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   627k|        }
 4105|   465k|        const auto start = pos - m_putback_buffer.size();
 4106|   465k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   465k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   465k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   465k|        return m_current_view.substr(start);
 4108|   465k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|  1.22M|    {
 4190|  1.22M|        return m_position;
 4191|  1.22M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|   694k|    {
 4123|   694k|        return m_is_contiguous;
 4124|   694k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|   678M|    {
 4195|   678M|        return m_end == nullptr;
 4196|   678M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  1.22M|{
 3715|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3716|       |                                          const CharT*, const CharT*>) {
 3717|       |        return {first, last};
 3718|       |    }
 3719|  1.22M|    else {
 3720|  1.22M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  1.22M|    }
 3722|  1.22M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  3.71M|    {
 4211|  3.71M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 3.71M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  3.71M|        return parent()->get_segment_starting_at(position());
 4217|  3.71M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|   395M|    {
 4205|   395M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   395M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   395M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|   395M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|   395M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  3.71M|    {
 4101|  3.71M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.71M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.45M, False: 1.25M]
  |  |  ------------------
  ------------------
 4102|  3.71M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  2.45M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  2.45M|        }
 4105|  1.25M|        const auto start = pos - m_putback_buffer.size();
 4106|  1.25M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  1.25M|        return m_current_view.substr(start);
 4108|  1.25M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  4.45M|    {
 4190|  4.45M|        return m_position;
 4191|  4.45M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  3.77M|    {
 4123|  3.77M|        return m_is_contiguous;
 4124|  3.77M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  2.16M|    {
 3180|  2.16M|        return static_cast<D&>(*this);
 3181|  2.16M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  1.08M|    {
 2978|  1.08M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  1.08M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  1.08M|    {
 3005|  1.08M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  1.08M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|  1.08M|    {
 3221|  1.08M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 1.15k, False: 1.08M]
  ------------------
 3222|  1.08M|                   ? nullptr
 3223|  1.08M|                   : std::addressof(*ranges::begin(derived()));
 3224|  1.08M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  4.93M|    {
 3180|  4.93M|        return static_cast<D&>(*this);
 3181|  4.93M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  2.46M|    {
 2978|  2.46M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  2.46M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  2.46M|    {
 3005|  2.46M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  2.46M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  2.46M|    {
 3221|  2.46M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 2.46M]
  ------------------
 3222|  2.46M|                   ? nullptr
 3223|  2.46M|                   : std::addressof(*ranges::begin(derived()));
 3224|  2.46M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  94.7k|    {
 8169|  94.7k|        return ranges::subrange{begin(), end()};
 8170|  94.7k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|   281k|    {
 8153|   281k|        return m_current;
 8154|   281k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  94.7k|    {
 8161|  94.7k|        return ranges::default_sentinel;
 8162|  94.7k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  3.49M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.49M|    static_cast<    \
  |  |  929|  3.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  3.49M|    static_cast<    \
  |  |  929|  3.49M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  3.49M|    {
 3316|  3.49M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  4.37M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   219k|    {
 1837|   219k|        return detail::transform_error_impl(std::move(*this),
 1838|   219k|                                            std::forward<F>(f));
 1839|   219k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   219k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   219k|    else {
 1333|   219k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   219k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   219k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 216k, False: 2.78k]
  |  |  ------------------
  ------------------
 1335|   219k|                   ? result(*std::forward<Exp>(exp))
 1336|   219k|                   : result(unexpect,
 1337|  2.78k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.78k|                                           std::forward<Exp>(exp).error()));
 1339|   219k|    }
 1340|   219k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   438k|    {
  485|   438k|        return m_has_value;
  486|   438k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   216k|    {
 1663|   216k|        return std::move(value());
 1664|   216k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   216k|    {
 1627|   216k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   216k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   216k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   216k|        return this->get_value();
 1629|   216k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   216k|    {
  451|   216k|        return m_value;
  452|   216k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   516k|        : base(std::in_place, std::forward<U>(val)),
 1428|   516k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   516k|    {
 1430|   516k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   516k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   516k|    {
  437|   516k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   539k|    {
 1177|   539k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  16.0k|{
 1211|  16.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  16.0k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.78k|    {
 1614|  2.78k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.78k|        return std::move(this->get_unexpected().error());
 1616|  2.78k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.78k|    {
  468|  2.78k|        return m_unexpected;
  469|  2.78k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  32.1k|    {
  361|  32.1k|        return m_unexpected;
  362|  32.1k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.78k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.78k|    {
 1486|  2.78k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  22.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  22.3k|          m_has_value(false)
  446|  22.3k|    {
  447|  22.3k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|   506k|    {
 8169|   506k|        return ranges::subrange{begin(), end()};
 8170|   506k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  1.51M|    {
 8153|  1.51M|        return m_current;
 8154|  1.51M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|   506k|    {
 8161|   506k|        return ranges::default_sentinel;
 8162|   506k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3314|  43.3M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  43.3M|    static_cast<    \
  |  |  929|  43.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  43.3M|    static_cast<    \
  |  |  929|  43.3M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  43.3M|    {
 3316|  43.3M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  1.23M|    {
 1837|  1.23M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.23M|                                            std::forward<F>(f));
 1839|  1.23M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  1.23M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.23M|    else {
 1333|  1.23M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.23M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.23M, False: 2.99k]
  |  |  ------------------
  ------------------
 1335|  1.23M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.23M|                   : result(unexpect,
 1337|  2.99k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.99k|                                           std::forward<Exp>(exp).error()));
 1339|  1.23M|    }
 1340|  1.23M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  2.47M|    {
  485|  2.47M|        return m_has_value;
  486|  2.47M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  1.23M|    {
 1663|  1.23M|        return std::move(value());
 1664|  1.23M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  1.23M|    {
 1627|  1.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.23M|        return this->get_value();
 1629|  1.23M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.23M|    {
  451|  1.23M|        return m_value;
  452|  1.23M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  2.94M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.94M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.94M|    {
 1430|  2.94M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.94M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.94M|    {
  437|  2.94M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.99M|    {
 1177|  2.99M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.99k|    {
 1614|  2.99k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.99k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.99k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.99k|        return std::move(this->get_unexpected().error());
 1616|  2.99k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.99k|    {
  468|  2.99k|        return m_unexpected;
  469|  2.99k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.99k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.99k|    {
 1486|  2.99k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  43.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  43.3k|          m_has_value(false)
  446|  43.3k|    {
  447|  43.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  71.1k|        : m_unexpected(std::forward<Err>(e))
  346|  71.1k|    {
  347|  71.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  71.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  71.1k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  39.7k|        : base(unexpect, std::move(e.error())),
 1474|  39.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  39.7k|    {
 1476|  39.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  44.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  44.1k|          m_has_value(false)
  446|  44.1k|    {
  447|  44.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   900k|    {
 1177|   900k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   853k|        : base(std::in_place, std::forward<U>(val)),
 1428|   853k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   853k|    {
 1430|   853k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   853k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   853k|    {
  437|   853k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   900k|    {
 1598|   900k|        return has_value();
 1599|   900k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.80M|    {
  485|  1.80M|        return m_has_value;
  486|  1.80M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  44.1k|    {
 1604|  44.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  44.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  44.1k|        return this->get_unexpected().error();
 1606|  44.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  44.1k|    {
  468|  44.1k|        return m_unexpected;
  469|  44.1k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   711k|    {
 1663|   711k|        return std::move(value());
 1664|   711k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   855k|    {
 1627|   855k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   855k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   855k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   855k|        return this->get_value();
 1629|   855k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   855k|    {
  451|   855k|        return m_value;
  452|   855k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  80.6k|        : base(unexpect, std::move(e.error())),
 1474|  80.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  80.6k|    {
 1476|  80.6k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  86.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  86.6k|          m_has_value(false)
  446|  86.6k|    {
  447|  86.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  5.98M|    {
 1177|  5.98M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  5.89M|        : base(std::in_place, std::forward<U>(val)),
 1428|  5.89M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  5.89M|    {
 1430|  5.89M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  5.89M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  5.89M|    {
  437|  5.89M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  5.98M|    {
 1598|  5.98M|        return has_value();
 1599|  5.98M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  11.9M|    {
  485|  11.9M|        return m_has_value;
  486|  11.9M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  86.6k|    {
 1604|  86.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  86.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  86.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  86.6k|        return this->get_unexpected().error();
 1606|  86.6k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  86.6k|    {
  468|  86.6k|        return m_unexpected;
  469|  86.6k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  4.91M|    {
 1663|  4.91M|        return std::move(value());
 1664|  4.91M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  5.89M|    {
 1627|  5.89M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  5.89M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.89M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  5.89M|        return this->get_value();
 1629|  5.89M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  5.89M|    {
  451|  5.89M|        return m_value;
  452|  5.89M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   363k|    {
 1837|   363k|        return detail::transform_error_impl(std::move(*this),
 1838|   363k|                                            std::forward<F>(f));
 1839|   363k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   363k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   363k|    else {
 1333|   363k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   363k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   363k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 359k, False: 4.33k]
  |  |  ------------------
  ------------------
 1335|   363k|                   ? result(*std::forward<Exp>(exp))
 1336|   363k|                   : result(unexpect,
 1337|  4.33k|                            trivial_invoke(std::forward<F>(f),
 1338|  4.33k|                                           std::forward<Exp>(exp).error()));
 1339|   363k|    }
 1340|   363k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   726k|    {
  485|   726k|        return m_has_value;
  486|   726k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   359k|    {
 1663|   359k|        return std::move(value());
 1664|   359k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   359k|    {
 1627|   359k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   359k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   359k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   359k|        return this->get_value();
 1629|   359k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   359k|    {
  451|   359k|        return m_value;
  452|   359k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  4.33k|    {
 1614|  4.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  4.33k|        return std::move(this->get_unexpected().error());
 1616|  4.33k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  4.33k|    {
  468|  4.33k|        return m_unexpected;
  469|  4.33k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  4.33k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  4.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  4.33k|    {
 1486|  4.33k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|  9.98M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  19.5k|        : base(unexpect, std::move(e.error())),
 1474|  19.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  19.5k|    {
 1476|  19.5k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  2.74M|    {
 4280|  2.74M|        return x.is_at_end();
 4281|  2.74M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  5.65M|    {
 4324|  5.65M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 5.65M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  5.65M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 5.65M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  5.65M|        return !read_at_position();
 4331|  5.65M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|  15.6M|    {
 4304|  15.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  15.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  15.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 15.6M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  15.6M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  15.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 12.7M, False: 2.91M]
  |  |  ------------------
  ------------------
 4311|  12.7M|            return true;
 4312|  12.7M|        }
 4313|       |
 4314|  5.81M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 2.91M, False: 2.89M]
  ------------------
 4315|  2.91M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 22.5k, False: 2.89M]
  ------------------
 4316|  22.5k|                return false;
 4317|  22.5k|            }
 4318|  2.91M|        }
 4319|  2.89M|        return true;
 4320|  2.91M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|  21.4M|    {
 4081|  21.4M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  21.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  5.20M|    {
 4239|  5.20M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  5.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  5.20M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 5.20M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  5.20M|        auto res = read_at_position();
 4248|  5.20M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  5.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  5.20M|        return parent()->get_character_at(m_position);
 4250|  5.20M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  5.20M|    {
 4112|  5.20M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  5.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.84M, False: 2.36M]
  |  |  ------------------
  ------------------
 4113|  5.20M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  2.84M|            return m_putback_buffer[pos];
 4115|  2.84M|        }
 4116|  2.36M|        const auto start = pos - m_putback_buffer.size();
 4117|  2.36M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  2.36M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.36M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  2.36M|        return m_current_view[start];
 4119|  2.36M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   216k|        : base(std::in_place, std::forward<U>(val)),
 1428|   216k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   216k|    {
 1430|   216k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   216k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   216k|    {
  437|   216k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   219k|    {
 1177|   219k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  2.78k|        : base(unexpect, std::move(e.error())),
 1474|  2.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.78k|    {
 1476|  2.78k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  2.78k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.78k|          m_has_value(false)
  446|  2.78k|    {
  447|  2.78k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  16.0k|        : m_unexpected(std::forward<Args>(args)...)
  355|  16.0k|    {
  356|  16.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  16.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  16.0k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  2.07M|    {
 4274|  2.07M|        return !(lhs == rhs);
 4275|  2.07M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  2.07M|    {
 4269|  2.07M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 2.07M, False: 0]
  |  Branch (4269:46): [True: 339k, False: 1.73M]
  ------------------
 4270|  2.07M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  4.76M|    {
 4225|  4.76M|        ++m_position;
 4226|  4.76M|        (void)read_at_position();
 4227|  4.76M|        return *this;
 4228|  4.76M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  16.0k|        : m_unexpected(std::forward<Err>(e))
  346|  16.0k|    {
  347|  16.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  16.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  16.0k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.19k|        : base(unexpect, std::move(e.error())),
 1474|  1.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.19k|    {
 1476|  1.19k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.19k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.19k|          m_has_value(false)
  446|  1.19k|    {
  447|  1.19k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   177k|    {
 1177|   177k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   176k|        : base(std::in_place, std::forward<U>(val)),
 1428|   176k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   176k|    {
 1430|   176k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   176k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   176k|    {
  437|   176k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   177k|    {
 1598|   177k|        return has_value();
 1599|   177k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   355k|    {
  485|   355k|        return m_has_value;
  486|   355k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.19k|    {
 1604|  1.19k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.19k|        return this->get_unexpected().error();
 1606|  1.19k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.19k|    {
  468|  1.19k|        return m_unexpected;
  469|  1.19k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   176k|    {
 1663|   176k|        return std::move(value());
 1664|   176k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   176k|    {
 1627|   176k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   176k|        return this->get_value();
 1629|   176k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   176k|    {
  451|   176k|        return m_value;
  452|   176k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  8.60M|    {
 3334|  8.60M|        return m_sentinel;
 3335|  8.60M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|   226k|    {
 3330|   226k|        return m_iterator;
 3331|   226k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|   226k|    {
 3334|   226k|        return m_sentinel;
 3335|   226k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   539k|    {
 1598|   539k|        return has_value();
 1599|   539k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.07M|    {
  485|  1.07M|        return m_has_value;
  486|  1.07M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  22.3k|    {
 1604|  22.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  22.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  22.3k|        return this->get_unexpected().error();
 1606|  22.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  22.3k|    {
  468|  22.3k|        return m_unexpected;
  469|  22.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   429k|    {
 1663|   429k|        return std::move(value());
 1664|   429k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   517k|    {
 1627|   517k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   517k|        return this->get_value();
 1629|   517k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   517k|    {
  451|   517k|        return m_value;
  452|   517k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   435k|{
  326|   435k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   435k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   435k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|   217k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   217k|    static_cast<    \
  |  |  929|   217k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|   217k|    {
 3316|   217k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  2.91M|    {
 4291|  2.91M|        return !x.is_at_end();
 4292|  2.91M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  4.33k|        : base(unexpect, std::move(e.error())),
 1474|  4.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  4.33k|    {
 1476|  4.33k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  4.33k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  4.33k|          m_has_value(false)
  446|  4.33k|    {
  447|  4.33k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   363k|    {
 1177|   363k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   359k|        : base(std::in_place, std::forward<U>(val)),
 1428|   359k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   359k|    {
 1430|   359k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   359k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   359k|    {
  437|   359k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.73k|        : base(unexpect, std::move(e.error())),
 1474|  1.73k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.73k|    {
 1476|  1.73k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.73k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.73k|          m_has_value(false)
  446|  1.73k|    {
  447|  1.73k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   294k|    {
 1177|   294k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   292k|        : base(std::in_place, std::forward<U>(val)),
 1428|   292k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   292k|    {
 1430|   292k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   292k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   292k|    {
  437|   292k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   294k|    {
 1598|   294k|        return has_value();
 1599|   294k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   588k|    {
  485|   588k|        return m_has_value;
  486|   588k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  1.73k|    {
 1604|  1.73k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.73k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.73k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.73k|        return this->get_unexpected().error();
 1606|  1.73k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.73k|    {
  468|  1.73k|        return m_unexpected;
  469|  1.73k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   292k|    {
 1663|   292k|        return std::move(value());
 1664|   292k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   292k|    {
 1627|   292k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   292k|        return this->get_value();
 1629|   292k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   292k|    {
  451|   292k|        return m_value;
  452|   292k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.08M|    {
 2855|  1.08M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.08M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.08M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.08M|    {
 2836|  1.08M|        return t.data();
 2837|  1.08M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   161k|        : base(unexpect, std::move(e.error())),
 1474|   161k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   161k|    {
 1476|   161k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   161k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   161k|          m_has_value(false)
  446|   161k|    {
  447|   161k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.39M|    {
 1177|  4.39M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  4.23M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.23M|    {
 1430|  4.23M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  4.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.23M|    {
  437|  4.23M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  87.6k|    {
 1653|  87.6k|        return value();
 1654|  87.6k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   144k|    {
 1653|   144k|        return value();
 1654|   144k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|  1.25k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.25k|    {
 1430|  1.25k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.25k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.25k|    {
  437|  1.25k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  2.50k|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.50k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.50k|    {
 1430|  2.50k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.50k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.50k|    {
  437|  2.50k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  40.3k|        : base(unexpect, std::move(e.error())),
 1474|  40.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  40.3k|    {
 1476|  40.3k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  39.3M|    {
 4280|  39.3M|        return x.is_at_end();
 4281|  39.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|  77.2M|    {
 4324|  77.2M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 77.2M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  77.2M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 77.2M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  77.2M|        return !read_at_position();
 4331|  77.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|   204M|    {
 4304|   204M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   204M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   204M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|   204M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 204M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|   204M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   204M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 166M, False: 37.4M]
  |  |  ------------------
  ------------------
 4311|   166M|            return true;
 4312|   166M|        }
 4313|       |
 4314|  74.7M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 37.4M, False: 37.3M]
  ------------------
 4315|  37.4M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 29.7k, False: 37.3M]
  ------------------
 4316|  29.7k|                return false;
 4317|  29.7k|            }
 4318|  37.4M|        }
 4319|  37.3M|        return true;
 4320|  37.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|   278M|    {
 4081|   278M|        return m_putback_buffer.size() + m_current_view.size();
 4082|   278M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|  75.2M|    {
 4239|  75.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  75.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  75.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 75.2M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  75.2M|        auto res = read_at_position();
 4248|  75.2M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  75.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  75.2M|        return parent()->get_character_at(m_position);
 4250|  75.2M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|  75.2M|    {
 4112|  75.2M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  75.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 39.1M, False: 36.1M]
  |  |  ------------------
  ------------------
 4113|  75.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  39.1M|            return m_putback_buffer[pos];
 4115|  39.1M|        }
 4116|  36.1M|        const auto start = pos - m_putback_buffer.size();
 4117|  36.1M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  36.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  36.1M|        return m_current_view[start];
 4119|  36.1M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|   210M|{
 3807|       |    if constexpr (sizeof(U) == 1) {
 3808|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|       |    }
 3810|       |    else if constexpr (sizeof(U) == 2) {
 3811|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|       |    }
 3813|   210M|    else {
 3814|       |        // utf-32
 3815|   210M|        static_assert(sizeof(U) == 4);
 3816|   210M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   210M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|   210M|        return 1;
 3818|   210M|    }
 3819|   210M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  1.23M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.23M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.23M|    {
 1430|  1.23M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.23M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.23M|    {
  437|  1.23M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.23M|    {
 1177|  1.23M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  2.99k|        : base(unexpect, std::move(e.error())),
 1474|  2.99k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.99k|    {
 1476|  2.99k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  2.99k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.99k|          m_has_value(false)
  446|  2.99k|    {
  447|  2.99k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|  14.6M|    {
 4274|  14.6M|        return !(lhs == rhs);
 4275|  14.6M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|  14.7M|    {
 4269|  14.7M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 14.7M, False: 0]
  |  Branch (4269:46): [True: 500k, False: 14.1M]
  ------------------
 4270|  14.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|  51.5M|    {
 4225|  51.5M|        ++m_position;
 4226|  51.5M|        (void)read_at_position();
 4227|  51.5M|        return *this;
 4228|  51.5M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|   210M|{
 4013|       |    if constexpr (sizeof(CharT) == 1) {
 4014|       |        return decode_utf8_code_point_exhaustive(input);
 4015|       |    }
 4016|       |    else if constexpr (sizeof(CharT) == 2) {
 4017|       |        return decode_utf16_code_point_exhaustive(input);
 4018|       |    }
 4019|   210M|    else {
 4020|   210M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   210M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   210M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|   210M|        auto cp = static_cast<char32_t>(input.front());
 4022|   210M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   210M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.70M, False: 208M]
  |  |  ------------------
  ------------------
 4023|  1.70M|            return invalid_code_point;
 4024|  1.70M|        }
 4025|   208M|        return cp;
 4026|   210M|    }
 4027|   210M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.19k|        : base(unexpect, std::move(e.error())),
 1474|  1.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.19k|    {
 1476|  1.19k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.19k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.19k|          m_has_value(false)
  446|  1.19k|    {
  447|  1.19k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   989k|    {
 1177|   989k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   988k|        : base(std::in_place, std::forward<U>(val)),
 1428|   988k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   988k|    {
 1430|   988k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   988k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   988k|    {
  437|   988k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   989k|    {
 1598|   989k|        return has_value();
 1599|   989k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.97M|    {
  485|  1.97M|        return m_has_value;
  486|  1.97M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.19k|    {
 1604|  1.19k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.19k|        return this->get_unexpected().error();
 1606|  1.19k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.19k|    {
  468|  1.19k|        return m_unexpected;
  469|  1.19k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   988k|    {
 1663|   988k|        return std::move(value());
 1664|   988k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   988k|    {
 1627|   988k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   988k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   988k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   988k|        return this->get_value();
 1629|   988k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   988k|    {
  451|   988k|        return m_value;
  452|   988k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|   118M|    {
 3334|   118M|        return m_sentinel;
 3335|   118M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|  1.24M|    {
 3330|  1.24M|        return m_iterator;
 3331|  1.24M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|  1.24M|    {
 3334|  1.24M|        return m_sentinel;
 3335|  1.24M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.99M|    {
 1598|  2.99M|        return has_value();
 1599|  2.99M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  5.98M|    {
  485|  5.98M|        return m_has_value;
  486|  5.98M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  43.3k|    {
 1604|  43.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  43.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  43.3k|        return this->get_unexpected().error();
 1606|  43.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  43.3k|    {
  468|  43.3k|        return m_unexpected;
  469|  43.3k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  2.45M|    {
 1663|  2.45M|        return std::move(value());
 1664|  2.45M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.94M|    {
 1627|  2.94M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.94M|        return this->get_value();
 1629|  2.94M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.94M|    {
  451|  2.94M|        return m_value;
  452|  2.94M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  97.9M|{
 3699|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3700|       |                                          decltype(first), decltype(last)> &&
 3701|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3702|       |        return {first, last};
 3703|       |    }
 3704|  97.9M|    else {
 3705|  97.9M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  97.9M|                                       to_address(first), to_address(last)))};
 3707|  97.9M|    }
 3708|  97.9M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   293M|{
  326|   293M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   293M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   293M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   296M|{
  304|   296M|    return p;
  305|   296M|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  2.46M|{
  326|  2.46M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  2.46M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3314|  1.23M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.23M|    static_cast<    \
  |  |  929|  1.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.23M|    static_cast<    \
  |  |  929|  1.23M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3315|  1.23M|    {
 3316|  1.23M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  37.8M|    {
 4291|  37.8M|        return !x.is_at_end();
 4292|  37.8M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  5.98k|        : base(unexpect, std::move(e.error())),
 1474|  5.98k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.98k|    {
 1476|  5.98k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  5.98k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.98k|          m_has_value(false)
  446|  5.98k|    {
  447|  5.98k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.47M|    {
 1177|  2.47M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  2.46M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.46M|    {
 1430|  2.46M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  2.46M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.46M|    {
  437|  2.46M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  4.95M|    {
  485|  4.95M|        return m_has_value;
  486|  4.95M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  2.46M|    {
 1627|  2.46M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.46M|        return this->get_value();
 1629|  2.46M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  2.46M|    {
  451|  2.46M|        return m_value;
  452|  2.46M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.39k|        : base(unexpect, std::move(e.error())),
 1474|  2.39k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.39k|    {
 1476|  2.39k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.39k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.39k|          m_has_value(false)
  446|  2.39k|    {
  447|  2.39k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.97M|    {
 1177|  1.97M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.97M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.97M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.97M|    {
 1430|  1.97M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.97M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.97M|    {
  437|  1.97M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  2.47M|    {
 1837|  2.47M|        return detail::transform_error_impl(std::move(*this),
 1838|  2.47M|                                            std::forward<F>(f));
 1839|  2.47M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  2.47M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  2.47M|    else {
 1333|  2.47M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  2.47M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  2.47M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.46M, False: 5.98k]
  |  |  ------------------
  ------------------
 1335|  2.47M|                   ? result(*std::forward<Exp>(exp))
 1336|  2.47M|                   : result(unexpect,
 1337|  5.98k|                            trivial_invoke(std::forward<F>(f),
 1338|  5.98k|                                           std::forward<Exp>(exp).error()));
 1339|  2.47M|    }
 1340|  2.47M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  2.46M|    {
 1663|  2.46M|        return std::move(value());
 1664|  2.46M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  5.98k|    {
 1614|  5.98k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  5.98k|        return std::move(this->get_unexpected().error());
 1616|  5.98k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  5.98k|    {
  468|  5.98k|        return m_unexpected;
  469|  5.98k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  5.98k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  5.98k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  5.98k|    {
 1486|  5.98k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.97M|    {
 1598|  1.97M|        return has_value();
 1599|  1.97M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.95M|    {
  485|  3.95M|        return m_has_value;
  486|  3.95M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.39k|    {
 1604|  2.39k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.39k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.39k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.39k|        return this->get_unexpected().error();
 1606|  2.39k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.39k|    {
  468|  2.39k|        return m_unexpected;
  469|  2.39k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.97M|    {
 1663|  1.97M|        return std::move(value());
 1664|  1.97M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.97M|    {
 1627|  1.97M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.97M|        return this->get_value();
 1629|  1.97M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.97M|    {
  451|  1.97M|        return m_value;
  452|  1.97M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  2.46M|    {
 2855|  2.46M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  2.46M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  2.46M|    {
 2836|  2.46M|        return t.data();
 2837|  2.46M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   489k|    {
 1653|   489k|        return value();
 1654|   489k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   979k|    {
 1653|   979k|        return value();
 1654|   979k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|    138|        : base(std::in_place, std::forward<U>(val)),
 1428|    138|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    138|    {
 1430|    138|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|    138|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    138|    {
  437|    138|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    276|        : base(std::in_place, std::forward<U>(val)),
 1428|    276|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    276|    {
 1430|    276|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    276|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    276|    {
  437|    276|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   503k|    {
 5466|   503k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 503k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   503k|        return static_cast<std::size_t>(m_desc &
 5471|   503k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   503k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|  1.00M|    {
 5491|  1.00M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  1.00M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   503k|    {
 5434|   503k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 503k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   503k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 503k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   503k|        const auto t = type(id);
 5446|   503k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   503k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 503k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   503k|        basic_scan_arg<Context> arg;
 5451|   503k|        arg.m_type = t;
 5452|   503k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 503k, False: 0]
  ------------------
 5453|   503k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   503k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   503k|        return arg;
 5459|   503k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   503k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   503k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   503k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   503k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   503k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   503k|    {
 5495|   503k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   503k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   873k|    {
 5247|   873k|        return m_type != detail::arg_type::none_type;
 5248|   873k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   218k|{
 8417|   218k|#define SCN_VISIT(Type)                                         \
 8418|   218k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   218k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   218k|    }                                                           \
 8421|   218k|    else {                                                      \
 8422|   218k|        return vis(monostate_val);                              \
 8423|   218k|    }
 8424|       |
 8425|   218k|    monostate monostate_val{};
 8426|       |
 8427|   218k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 218k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 218k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 218k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 218k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 218k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 218k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 218k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 218k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 218k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 218k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 218k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 218k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 218k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 218k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 218k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 218k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 218k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 218k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|   109k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 109k, False: 109k]
  ------------------
 8465|   109k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   109k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   109k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   109k|    }                                                           \
  |  | 8421|   109k|    else {                                                      \
  |  | 8422|   109k|        return vis(monostate_val);                              \
  |  | 8423|   109k|    }
  ------------------
 8466|   218k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 109k, False: 109k]
  ------------------
 8467|   218k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   218k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   218k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   218k|    }                                                           \
  |  | 8421|   218k|    else {                                                      \
  |  | 8422|   218k|        return vis(monostate_val);                              \
  |  | 8423|   218k|    }
  ------------------
 8468|   218k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 218k]
  ------------------
 8469|   218k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   218k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   218k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   218k|    }                                                           \
  |  | 8421|   218k|    else {                                                      \
  |  | 8422|   218k|        return vis(monostate_val);                              \
  |  | 8423|   218k|    }
  ------------------
 8470|   218k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 218k]
  ------------------
 8471|   218k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   218k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   218k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   218k|    }                                                           \
  |  | 8421|   218k|    else {                                                      \
  |  | 8422|   218k|        return vis(monostate_val);                              \
  |  | 8423|   218k|    }
  ------------------
 8472|   218k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 218k]
  ------------------
 8473|   218k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   218k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   218k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   218k|    }                                                           \
  |  | 8421|   218k|    else {                                                      \
  |  | 8422|   218k|        return vis(monostate_val);                              \
  |  | 8423|   218k|    }
  ------------------
 8474|   218k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 218k]
  ------------------
 8475|   218k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   218k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   218k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   218k|    }                                                           \
  |  | 8421|   218k|    else {                                                      \
  |  | 8422|   218k|        return vis(monostate_val);                              \
  |  | 8423|   218k|    }
  ------------------
 8476|       |
 8477|   218k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 218k]
  ------------------
 8478|   218k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   218k|            return vis(
 8480|   218k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 218k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 218k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   218k|            SCN_CLANG_POP
 8495|   218k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5543|   270k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|   270k|    {
 5545|   270k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|   100k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|   100k|    {
 8138|   100k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8054|   270k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   270k|    static_cast<    \
  |  |  929|   270k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   270k|    static_cast<    \
  |  |  929|   270k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|   270k|    {
 8056|   270k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|   231k|{
 4344|   231k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 231k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   231k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   231k|                            ranges::default_sentinel};
 4350|   231k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4175|   231k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|   231k|    {
 4177|   231k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   231k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   231k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   231k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   231k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   131k|{
 8417|   131k|#define SCN_VISIT(Type)                                         \
 8418|   131k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   131k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   131k|    }                                                           \
 8421|   131k|    else {                                                      \
 8422|   131k|        return vis(monostate_val);                              \
 8423|   131k|    }
 8424|       |
 8425|   131k|    monostate monostate_val{};
 8426|       |
 8427|   131k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 131k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 131k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 131k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 131k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 131k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 131k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 131k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 131k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 131k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 131k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 131k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 131k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 131k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 131k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 131k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 131k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 131k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 131k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 131k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|   131k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 131k, False: 0]
  ------------------
 8467|   131k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   131k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   131k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   131k|    }                                                           \
  |  | 8421|   131k|    else {                                                      \
  |  | 8422|   131k|        return vis(monostate_val);                              \
  |  | 8423|   131k|    }
  ------------------
 8468|   131k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 131k]
  ------------------
 8469|   131k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   131k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   131k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   131k|    }                                                           \
  |  | 8421|   131k|    else {                                                      \
  |  | 8422|   131k|        return vis(monostate_val);                              \
  |  | 8423|   131k|    }
  ------------------
 8470|   131k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 131k]
  ------------------
 8471|   131k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   131k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   131k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   131k|    }                                                           \
  |  | 8421|   131k|    else {                                                      \
  |  | 8422|   131k|        return vis(monostate_val);                              \
  |  | 8423|   131k|    }
  ------------------
 8472|   131k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 131k]
  ------------------
 8473|   131k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   131k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   131k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   131k|    }                                                           \
  |  | 8421|   131k|    else {                                                      \
  |  | 8422|   131k|        return vis(monostate_val);                              \
  |  | 8423|   131k|    }
  ------------------
 8474|   131k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 131k]
  ------------------
 8475|   131k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   131k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   131k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   131k|    }                                                           \
  |  | 8421|   131k|    else {                                                      \
  |  | 8422|   131k|        return vis(monostate_val);                              \
  |  | 8423|   131k|    }
  ------------------
 8476|       |
 8477|   131k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 131k]
  ------------------
 8478|   131k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   131k|            return vis(
 8480|   131k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 131k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 131k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   131k|            SCN_CLANG_POP
 8495|   131k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   170k|{
 7044|   170k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   170k|    handler.check_args_exhausted();
 7046|   170k|    return handler.get_error();
 7047|   170k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   170k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   170k|    auto begin = format.data();
 7013|   170k|    auto it = begin;
 7014|   170k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   312k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 170k, False: 142k]
  ------------------
 7017|   170k|        const auto ch = *it++;
 7018|   170k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 170k, False: 0]
  ------------------
 7019|   170k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   170k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   170k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 27.6k, False: 142k]
  ------------------
 7023|  27.6k|                return;
 7024|  27.6k|            }
 7025|   170k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   170k|    }
 7036|       |
 7037|   142k|    handler.on_literal_text(begin, end);
 7038|   142k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   170k|{
 6942|   170k|    struct id_adapter {
 6943|   170k|        constexpr void operator()()
 6944|   170k|        {
 6945|   170k|            arg_id = handler.on_arg_id();
 6946|   170k|        }
 6947|   170k|        constexpr void operator()(std::size_t id)
 6948|   170k|        {
 6949|   170k|            arg_id = handler.on_arg_id(id);
 6950|   170k|        }
 6951|       |
 6952|   170k|        constexpr void on_error(const char* msg)
 6953|   170k|        {
 6954|   170k|            SCN_UNLIKELY_ATTR
 6955|   170k|            handler.on_error(msg);
 6956|   170k|        }
 6957|       |
 6958|   170k|        Handler& handler;
 6959|   170k|        std::size_t arg_id;
 6960|   170k|    };
 6961|       |
 6962|   170k|    ++begin;
 6963|   170k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 170k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   170k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 170k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   170k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 170k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   170k|    else {
 6975|   170k|        auto adapter = id_adapter{handler, 0};
 6976|   170k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   170k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 170k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   170k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 170k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   170k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 170k, False: 0]
  ------------------
 6987|   170k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 170k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   170k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   170k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   340k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 158k]
  |  |  |  Branch (859:45): [True: 0, False: 170k]
  |  |  |  Branch (859:45): [True: 11.0k, False: 158k]
  |  |  ------------------
  ------------------
 6993|  11.0k|                handler.on_error("Unknown format specifier");
 6994|  11.0k|                return begin;
 6995|  11.0k|            }
 6996|   170k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   170k|    }
 7003|   158k|    return begin + 1;
 7004|   170k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   270k|    {
 8039|   270k|        return m_args.get(id);
 8040|   270k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   253k|    {
 8049|   253k|        return m_locale;
 8050|   253k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   270k|    {
 5566|   270k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   270k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 270k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   270k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   270k|        do_check_arg_id(id);
 5574|   270k|        return id;
 5575|   270k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   270k|{
 6054|   270k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   270k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   270k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   170k|{
 6443|   170k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   170k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   170k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 170k, False: 0]
  |  Branch (6444:26): [True: 0, False: 170k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   170k|    handler();
 6449|   170k|    return begin;
 6450|   170k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  16.6k|{
 6392|  16.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  16.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  16.6k|    unsigned long long value = 0;
 6396|  33.2k|    do {
 6397|  33.2k|        value *= 10;
 6398|  33.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  33.2k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 33.2k]
  ------------------
 6400|  33.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  33.2k|        ++begin;
 6404|  33.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 33.2k, False: 0]
  |  Branch (6404:30): [True: 33.2k, False: 0]
  |  Branch (6404:47): [True: 16.6k, False: 16.6k]
  ------------------
 6405|  16.6k|    return static_cast<int>(value);
 6406|  16.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   170k|        {
 6945|   170k|            arg_id = handler.on_arg_id();
 6946|   170k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   540k|    {
 5252|   540k|        return m_type;
 5253|   540k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   253k|    {
 5561|   253k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   253k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   523k|    {
 5550|   523k|        return m_format.data();
 5551|   523k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|   170k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   170k|    {
 7122|   170k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   170k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   170k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   170k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   170k|{
 6858|   170k|    auto do_presentation = [&]() -> const CharT* {
 6859|   170k|        if (*begin == CharT{'['}) {
 6860|   170k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   170k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   170k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   170k|                return begin;
 6866|   170k|            }
 6867|   170k|            handler.on_character_set_string(set);
 6868|   170k|            return begin;
 6869|   170k|        }
 6870|   170k|        if (*begin == CharT{'/'}) {
 6871|   170k|            return parse_presentation_regex(begin, end, handler);
 6872|   170k|        }
 6873|   170k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   170k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   170k|            handler.on_error("Invalid type specifier in format string");
 6876|   170k|            return begin;
 6877|   170k|        }
 6878|   170k|        handler.on_type(type);
 6879|   170k|        return begin;
 6880|   170k|    };
 6881|       |
 6882|   170k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 170k, False: 0]
  |  Branch (6882:28): [True: 150k, False: 19.1k]
  ------------------
 6883|   170k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 150k, False: 0]
  |  Branch (6883:36): [True: 145k, False: 5.53k]
  ------------------
 6884|   145k|        return do_presentation();
 6885|   145k|    }
 6886|       |
 6887|  24.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.6k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  24.6k|    begin = parse_align(begin, end, handler);
 6893|  24.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.6k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  24.6k|    begin = parse_width(begin, end, handler);
 6899|  24.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.6k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  24.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 24.6k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  24.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 5.53k, False: 19.1k]
  ------------------
 6918|  5.53k|        handler.on_localized();
 6919|  5.53k|        ++begin;
 6920|  5.53k|    }
 6921|  24.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.6k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  24.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 24.6k, False: 0]
  |  Branch (6926:25): [True: 19.1k, False: 5.53k]
  ------------------
 6927|  19.1k|        do_presentation();
 6928|  19.1k|    }
 6929|  24.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.6k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  24.6k|    return begin;
 6935|  24.6k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|   241k|{
 6507|   241k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 233k, False: 8.30k]
  |  Branch (6507:33): [True: 233k, False: 0]
  ------------------
 6508|   241k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 8.30k, False: 0]
  |  Branch (6508:33): [True: 8.30k, False: 0]
  ------------------
 6509|   241k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   164k|    auto do_presentation = [&]() -> const CharT* {
 6859|   164k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 8.03k, False: 156k]
  ------------------
 6860|  8.03k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  8.03k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.03k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  8.03k|            handler.on_character_set_string(set);
 6868|  8.03k|            return begin;
 6869|  8.03k|        }
 6870|   156k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 156k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   156k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   156k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   156k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 150k]
  |  |  ------------------
  ------------------
 6875|  5.53k|            handler.on_error("Invalid type specifier in format string");
 6876|  5.53k|            return begin;
 6877|  5.53k|        }
 6878|   150k|        handler.on_type(type);
 6879|   150k|        return begin;
 6880|   156k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  8.03k|{
 6697|  8.03k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  8.03k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  8.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  8.03k|    auto start = begin;
 6701|  8.03k|    ++begin;
 6702|       |
 6703|  8.03k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.03k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  8.03k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 8.03k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  8.03k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 8.03k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  24.1k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 24.1k, False: 0]
  ------------------
 6728|  24.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  24.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.1k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  24.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 8.03k, False: 16.0k]
  ------------------
 6733|  8.03k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  8.03k|        }
 6735|       |
 6736|  16.0k|        parse_presentation_set_literal(begin, end, handler);
 6737|  16.0k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  8.03k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  16.0k|{
 6661|  16.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  16.0k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  16.0k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.0k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  16.0k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 16.0k, False: 0]
  |  Branch (6668:25): [True: 16.0k, False: 0]
  |  Branch (6668:49): [True: 16.0k, False: 0]
  ------------------
 6669|  16.0k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 16.0k, False: 0]
  ------------------
 6670|  16.0k|        ++begin;
 6671|       |
 6672|  16.0k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  16.0k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.0k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  16.0k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.0k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  16.0k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  16.0k|        return;
 6686|  16.0k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  32.1k|{
 6637|  32.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  32.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  32.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  32.1k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  32.1k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  64.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.1k]
  |  |  |  Branch (859:45): [True: 0, False: 32.1k]
  |  |  |  Branch (859:45): [True: 0, False: 32.1k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  32.1k|    const auto cp =
 6646|  32.1k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  32.1k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 32.1k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  32.1k|    begin += len;
 6653|  32.1k|    return cp;
 6654|  32.1k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  12.0k|    {
 6346|  12.0k|        m_specs.charset_string_data = fmt.data();
 6347|  12.0k|        m_specs.charset_string_size = fmt.size();
 6348|  12.0k|        on_type(presentation_type::string_set);
 6349|  12.0k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|   249k|{
 6455|   249k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 249k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 249k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 249k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 249k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 249k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 249k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 249k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 249k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 249k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 249k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 249k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 249k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 249k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 249k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 249k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 249k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 249k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 249k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|   233k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 233k, False: 16.6k]
  ------------------
 6486|   233k|            return presentation_type::string;
 6487|  8.30k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 8.30k, False: 241k]
  ------------------
 6488|  8.30k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 249k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 249k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 249k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 249k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  8.30k|        default:
  ------------------
  |  Branch (6499:9): [True: 8.30k, False: 241k]
  ------------------
 6500|  8.30k|            return presentation_type::none;
 6501|   249k|    }
 6502|   249k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  24.6k|{
 6532|  24.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  24.6k|    auto check_align = [](wchar_t ch) {
 6535|  24.6k|        switch (ch) {
 6536|  24.6k|            case L'<':
 6537|  24.6k|                return align_type::left;
 6538|  24.6k|            case L'>':
 6539|  24.6k|                return align_type::right;
 6540|  24.6k|            case L'^':
 6541|  24.6k|                return align_type::center;
 6542|  24.6k|            default:
 6543|  24.6k|                return align_type::none;
 6544|  24.6k|        }
 6545|  24.6k|    };
 6546|       |
 6547|  24.6k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  24.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  49.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.6k]
  |  |  |  Branch (859:45): [True: 0, False: 24.6k]
  |  |  |  Branch (859:45): [True: 0, False: 24.6k]
  |  |  ------------------
  ------------------
 6549|  24.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  24.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  24.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  24.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  24.6k|    const auto begin_before_fill = begin;
 6559|  24.6k|    begin += potential_fill_len;
 6560|       |
 6561|  24.6k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 24.6k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  24.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  24.6k|    const auto begin_after_fill = begin;
 6567|  24.6k|    ++begin;
 6568|       |
 6569|  24.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 24.6k, False: 0]
  ------------------
 6570|  24.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.6k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  24.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 8.03k, False: 16.6k]
  ------------------
 6575|  8.03k|            return begin_before_fill;
 6576|  8.03k|        }
 6577|  24.6k|    }
 6578|       |
 6579|  16.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 16.6k, False: 0]
  ------------------
 6580|  16.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 16.6k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  16.6k|        return begin_before_fill;
 6585|  16.6k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  16.6k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  36.9k|{
 6514|  36.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  36.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|       |    if constexpr (sizeof(CharT) != 1) {
 6516|       |        return 1;
 6517|       |    }
 6518|  36.9k|    else {
 6519|  36.9k|        const auto lengths =
 6520|  36.9k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  36.9k|            "\3\4";
 6522|  36.9k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  36.9k|        return len;
 6524|  36.9k|    }
 6525|  36.9k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  49.2k|    auto check_align = [](wchar_t ch) {
 6535|  49.2k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 49.2k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 49.2k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 49.2k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  49.2k|            default:
  ------------------
  |  Branch (6542:13): [True: 49.2k, False: 0]
  ------------------
 6543|  49.2k|                return align_type::none;
 6544|  49.2k|        }
 6545|  49.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  24.6k|{
 6597|  24.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  24.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  24.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 24.6k, False: 0]
  |  Branch (6599:33): [True: 11.0k, False: 13.5k]
  ------------------
 6600|  11.0k|        int width = parse_simple_int(begin, end);
 6601|  11.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.0k, False: 0]
  |  |  ------------------
  ------------------
 6602|  11.0k|            handler.on_width(width);
 6603|  11.0k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  11.0k|    }
 6609|  24.6k|    return begin;
 6610|  24.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|  5.53k|    {
 7127|  5.53k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  5.53k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 5.53k, False: 0]
  ------------------
 7129|  5.53k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 5.53k, False: 0]
  ------------------
 7130|  5.53k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 5.53k, False: 0]
  ------------------
 7131|  5.53k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 5.53k, False: 0]
  ------------------
 7132|  5.53k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  5.53k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  5.53k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   158k|{
 8417|   158k|#define SCN_VISIT(Type)                                         \
 8418|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   158k|    }                                                           \
 8421|   158k|    else {                                                      \
 8422|   158k|        return vis(monostate_val);                              \
 8423|   158k|    }
 8424|       |
 8425|   158k|    monostate monostate_val{};
 8426|       |
 8427|   158k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 158k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 158k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 158k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 158k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 158k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 158k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 158k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 158k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 158k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 158k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 158k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 158k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 158k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 158k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 158k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 158k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 158k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 158k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  79.4k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 79.4k, False: 79.4k]
  ------------------
 8465|  79.4k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  79.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  79.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  79.4k|    }                                                           \
  |  | 8421|  79.4k|    else {                                                      \
  |  | 8422|  79.4k|        return vis(monostate_val);                              \
  |  | 8423|  79.4k|    }
  ------------------
 8466|   158k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 79.4k, False: 79.4k]
  ------------------
 8467|   158k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   158k|    }                                                           \
  |  | 8421|   158k|    else {                                                      \
  |  | 8422|   158k|        return vis(monostate_val);                              \
  |  | 8423|   158k|    }
  ------------------
 8468|   158k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 158k]
  ------------------
 8469|   158k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   158k|    }                                                           \
  |  | 8421|   158k|    else {                                                      \
  |  | 8422|   158k|        return vis(monostate_val);                              \
  |  | 8423|   158k|    }
  ------------------
 8470|   158k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 158k]
  ------------------
 8471|   158k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   158k|    }                                                           \
  |  | 8421|   158k|    else {                                                      \
  |  | 8422|   158k|        return vis(monostate_val);                              \
  |  | 8423|   158k|    }
  ------------------
 8472|   158k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 158k]
  ------------------
 8473|   158k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   158k|    }                                                           \
  |  | 8421|   158k|    else {                                                      \
  |  | 8422|   158k|        return vis(monostate_val);                              \
  |  | 8423|   158k|    }
  ------------------
 8474|   158k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 158k]
  ------------------
 8475|   158k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   158k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   158k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   158k|    }                                                           \
  |  | 8421|   158k|    else {                                                      \
  |  | 8422|   158k|        return vis(monostate_val);                              \
  |  | 8423|   158k|    }
  ------------------
 8476|       |
 8477|   158k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 158k]
  ------------------
 8478|   158k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   158k|            return vis(
 8480|   158k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 158k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 158k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   158k|            SCN_CLANG_POP
 8495|   158k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   100k|{
 7044|   100k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   100k|    handler.check_args_exhausted();
 7046|   100k|    return handler.get_error();
 7047|   100k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   100k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   100k|    auto begin = format.data();
 7013|   100k|    auto it = begin;
 7014|   100k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   186k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 100k, False: 86.4k]
  ------------------
 7017|   100k|        const auto ch = *it++;
 7018|   100k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 100k, False: 0]
  ------------------
 7019|   100k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   100k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   100k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 13.8k, False: 86.4k]
  ------------------
 7023|  13.8k|                return;
 7024|  13.8k|            }
 7025|   100k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   100k|    }
 7036|       |
 7037|  86.4k|    handler.on_literal_text(begin, end);
 7038|  86.4k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  86.4k|    {
 8175|  86.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  86.4k|    static_cast<    \
  |  |  929|  86.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  86.4k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|   100k|{
 6942|   100k|    struct id_adapter {
 6943|   100k|        constexpr void operator()()
 6944|   100k|        {
 6945|   100k|            arg_id = handler.on_arg_id();
 6946|   100k|        }
 6947|   100k|        constexpr void operator()(std::size_t id)
 6948|   100k|        {
 6949|   100k|            arg_id = handler.on_arg_id(id);
 6950|   100k|        }
 6951|       |
 6952|   100k|        constexpr void on_error(const char* msg)
 6953|   100k|        {
 6954|   100k|            SCN_UNLIKELY_ATTR
 6955|   100k|            handler.on_error(msg);
 6956|   100k|        }
 6957|       |
 6958|   100k|        Handler& handler;
 6959|   100k|        std::size_t arg_id;
 6960|   100k|    };
 6961|       |
 6962|   100k|    ++begin;
 6963|   100k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   100k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 100k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   100k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 100k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   100k|    else {
 6975|   100k|        auto adapter = id_adapter{handler, 0};
 6976|   100k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   100k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   100k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 100k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   100k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 100k, False: 0]
  ------------------
 6987|   100k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   100k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   100k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 94.7k]
  |  |  |  Branch (859:45): [True: 0, False: 100k]
  |  |  |  Branch (859:45): [True: 5.53k, False: 94.7k]
  |  |  ------------------
  ------------------
 6993|  5.53k|                handler.on_error("Unknown format specifier");
 6994|  5.53k|                return begin;
 6995|  5.53k|            }
 6996|   100k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   100k|    }
 7003|  94.7k|    return begin + 1;
 7004|   100k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   100k|{
 6443|   100k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   100k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 100k, False: 0]
  |  Branch (6444:26): [True: 0, False: 100k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   100k|    handler();
 6449|   100k|    return begin;
 6450|   100k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   100k|        {
 6945|   100k|            arg_id = handler.on_arg_id();
 6946|   100k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|   100k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   100k|    {
 7122|   100k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   100k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|   100k|{
 6858|   100k|    auto do_presentation = [&]() -> const CharT* {
 6859|   100k|        if (*begin == CharT{'['}) {
 6860|   100k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   100k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   100k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   100k|                return begin;
 6866|   100k|            }
 6867|   100k|            handler.on_character_set_string(set);
 6868|   100k|            return begin;
 6869|   100k|        }
 6870|   100k|        if (*begin == CharT{'/'}) {
 6871|   100k|            return parse_presentation_regex(begin, end, handler);
 6872|   100k|        }
 6873|   100k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   100k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   100k|            handler.on_error("Invalid type specifier in format string");
 6876|   100k|            return begin;
 6877|   100k|        }
 6878|   100k|        handler.on_type(type);
 6879|   100k|        return begin;
 6880|   100k|    };
 6881|       |
 6882|   100k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 100k, False: 0]
  |  Branch (6882:28): [True: 90.7k, False: 9.55k]
  ------------------
 6883|   100k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 90.7k, False: 0]
  |  Branch (6883:36): [True: 87.9k, False: 2.76k]
  ------------------
 6884|  87.9k|        return do_presentation();
 6885|  87.9k|    }
 6886|       |
 6887|  12.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  12.3k|    begin = parse_align(begin, end, handler);
 6893|  12.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  12.3k|    begin = parse_width(begin, end, handler);
 6899|  12.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  12.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 12.3k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  12.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 2.76k, False: 9.55k]
  ------------------
 6918|  2.76k|        handler.on_localized();
 6919|  2.76k|        ++begin;
 6920|  2.76k|    }
 6921|  12.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  12.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 12.3k, False: 0]
  |  Branch (6926:25): [True: 9.55k, False: 2.76k]
  ------------------
 6927|  9.55k|        do_presentation();
 6928|  9.55k|    }
 6929|  12.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  12.3k|    return begin;
 6935|  12.3k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  97.5k|    auto do_presentation = [&]() -> const CharT* {
 6859|  97.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 4.01k, False: 93.5k]
  ------------------
 6860|  4.01k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  4.01k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.01k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  4.01k|            handler.on_character_set_string(set);
 6868|  4.01k|            return begin;
 6869|  4.01k|        }
 6870|  93.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 93.5k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  93.5k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  93.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 90.7k]
  |  |  ------------------
  ------------------
 6875|  2.76k|            handler.on_error("Invalid type specifier in format string");
 6876|  2.76k|            return begin;
 6877|  2.76k|        }
 6878|  90.7k|        handler.on_type(type);
 6879|  90.7k|        return begin;
 6880|  93.5k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  4.01k|{
 6697|  4.01k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  4.01k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.01k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.01k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  4.01k|    auto start = begin;
 6701|  4.01k|    ++begin;
 6702|       |
 6703|  4.01k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.01k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  4.01k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 4.01k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  4.01k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 4.01k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  12.0k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 12.0k, False: 0]
  ------------------
 6728|  12.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.0k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  12.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 4.01k, False: 8.03k]
  ------------------
 6733|  4.01k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  4.01k|        }
 6735|       |
 6736|  8.03k|        parse_presentation_set_literal(begin, end, handler);
 6737|  8.03k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  4.01k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6660|  8.03k|{
 6661|  8.03k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.03k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.03k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  8.03k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  8.03k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.03k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  8.03k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 8.03k, False: 0]
  |  Branch (6668:25): [True: 8.03k, False: 0]
  |  Branch (6668:49): [True: 8.03k, False: 0]
  ------------------
 6669|  8.03k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 8.03k, False: 0]
  ------------------
 6670|  8.03k|        ++begin;
 6671|       |
 6672|  8.03k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  8.03k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.03k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  8.03k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.03k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  8.03k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  8.03k|        return;
 6686|  8.03k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6636|  16.0k|{
 6637|  16.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  16.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  16.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  32.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.0k]
  |  |  |  Branch (859:45): [True: 0, False: 16.0k]
  |  |  |  Branch (859:45): [True: 0, False: 16.0k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  16.0k|    const auto cp =
 6646|  16.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  16.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  16.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.0k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  16.0k|    begin += len;
 6653|  16.0k|    return cp;
 6654|  16.0k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|  12.3k|{
 6532|  12.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  12.3k|    auto check_align = [](wchar_t ch) {
 6535|  12.3k|        switch (ch) {
 6536|  12.3k|            case L'<':
 6537|  12.3k|                return align_type::left;
 6538|  12.3k|            case L'>':
 6539|  12.3k|                return align_type::right;
 6540|  12.3k|            case L'^':
 6541|  12.3k|                return align_type::center;
 6542|  12.3k|            default:
 6543|  12.3k|                return align_type::none;
 6544|  12.3k|        }
 6545|  12.3k|    };
 6546|       |
 6547|  12.3k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  12.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  24.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  |  Branch (859:45): [True: 0, False: 12.3k]
  |  |  |  Branch (859:45): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
 6549|  12.3k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  12.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  12.3k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  12.3k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  12.3k|    const auto begin_before_fill = begin;
 6559|  12.3k|    begin += potential_fill_len;
 6560|       |
 6561|  12.3k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 12.3k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  12.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  12.3k|    const auto begin_after_fill = begin;
 6567|  12.3k|    ++begin;
 6568|       |
 6569|  12.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 12.3k, False: 0]
  ------------------
 6570|  12.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  12.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.3k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  12.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 4.01k, False: 8.30k]
  ------------------
 6575|  4.01k|            return begin_before_fill;
 6576|  4.01k|        }
 6577|  12.3k|    }
 6578|       |
 6579|  8.30k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 8.30k, False: 0]
  ------------------
 6580|  8.30k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 8.30k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  8.30k|        return begin_before_fill;
 6585|  8.30k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  8.30k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  24.6k|    auto check_align = [](wchar_t ch) {
 6535|  24.6k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 24.6k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 24.6k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 24.6k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  24.6k|            default:
  ------------------
  |  Branch (6542:13): [True: 24.6k, False: 0]
  ------------------
 6543|  24.6k|                return align_type::none;
 6544|  24.6k|        }
 6545|  24.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|  12.3k|{
 6597|  12.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  12.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 12.3k, False: 0]
  |  Branch (6599:33): [True: 5.53k, False: 6.78k]
  ------------------
 6600|  5.53k|        int width = parse_simple_int(begin, end);
 6601|  5.53k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  5.53k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 5.53k, False: 0]
  |  |  ------------------
  ------------------
 6602|  5.53k|            handler.on_width(width);
 6603|  5.53k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  5.53k|    }
 6609|  12.3k|    return begin;
 6610|  12.3k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|  2.76k|    {
 7127|  2.76k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  2.76k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 2.76k, False: 0]
  ------------------
 7129|  2.76k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 2.76k, False: 0]
  ------------------
 7130|  2.76k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 2.76k, False: 0]
  ------------------
 7131|  2.76k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 2.76k, False: 0]
  ------------------
 7132|  2.76k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  2.76k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  2.76k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  94.7k|{
 8417|  94.7k|#define SCN_VISIT(Type)                                         \
 8418|  94.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  94.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  94.7k|    }                                                           \
 8421|  94.7k|    else {                                                      \
 8422|  94.7k|        return vis(monostate_val);                              \
 8423|  94.7k|    }
 8424|       |
 8425|  94.7k|    monostate monostate_val{};
 8426|       |
 8427|  94.7k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 94.7k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 94.7k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 94.7k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 94.7k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 94.7k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 94.7k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 94.7k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 94.7k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 94.7k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 94.7k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 94.7k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 94.7k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 94.7k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 94.7k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 94.7k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 94.7k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 94.7k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 94.7k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 94.7k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  94.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 94.7k, False: 0]
  ------------------
 8467|  94.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  94.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  94.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  94.7k|    }                                                           \
  |  | 8421|  94.7k|    else {                                                      \
  |  | 8422|  94.7k|        return vis(monostate_val);                              \
  |  | 8423|  94.7k|    }
  ------------------
 8468|  94.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 94.7k]
  ------------------
 8469|  94.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  94.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  94.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  94.7k|    }                                                           \
  |  | 8421|  94.7k|    else {                                                      \
  |  | 8422|  94.7k|        return vis(monostate_val);                              \
  |  | 8423|  94.7k|    }
  ------------------
 8470|  94.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 94.7k]
  ------------------
 8471|  94.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  94.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  94.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  94.7k|    }                                                           \
  |  | 8421|  94.7k|    else {                                                      \
  |  | 8422|  94.7k|        return vis(monostate_val);                              \
  |  | 8423|  94.7k|    }
  ------------------
 8472|  94.7k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 94.7k]
  ------------------
 8473|  94.7k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  94.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  94.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  94.7k|    }                                                           \
  |  | 8421|  94.7k|    else {                                                      \
  |  | 8422|  94.7k|        return vis(monostate_val);                              \
  |  | 8423|  94.7k|    }
  ------------------
 8474|  94.7k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 94.7k]
  ------------------
 8475|  94.7k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  94.7k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  94.7k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  94.7k|    }                                                           \
  |  | 8421|  94.7k|    else {                                                      \
  |  | 8422|  94.7k|        return vis(monostate_val);                              \
  |  | 8423|  94.7k|    }
  ------------------
 8476|       |
 8477|  94.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 94.7k]
  ------------------
 8478|  94.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  94.7k|            return vis(
 8480|  94.7k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 94.7k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 94.7k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  94.7k|            SCN_CLANG_POP
 8495|  94.7k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  17.9k|    {
 4076|  17.9k|        sync(0);
 4077|  17.9k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  3.03M|    {
 5466|  3.03M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.03M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  3.03M|        return static_cast<std::size_t>(m_desc &
 5471|  3.03M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  3.03M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|  6.07M|    {
 5491|  6.07M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|  6.07M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  3.03M|    {
 5434|  3.03M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  3.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.03M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  3.03M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  3.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.03M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  3.03M|        const auto t = type(id);
 5446|  3.03M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  3.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.03M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  3.03M|        basic_scan_arg<Context> arg;
 5451|  3.03M|        arg.m_type = t;
 5452|  3.03M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 3.03M, False: 0]
  ------------------
 5453|  3.03M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  3.03M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  3.03M|        return arg;
 5459|  3.03M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  3.03M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  3.03M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  3.03M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  3.03M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  3.03M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  3.03M|    {
 5495|  3.03M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  3.03M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|  5.29M|    {
 5247|  5.29M|        return m_type != detail::arg_type::none_type;
 5248|  5.29M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.48M|{
 8417|  1.48M|#define SCN_VISIT(Type)                                         \
 8418|  1.48M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.48M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.48M|    }                                                           \
 8421|  1.48M|    else {                                                      \
 8422|  1.48M|        return vis(monostate_val);                              \
 8423|  1.48M|    }
 8424|       |
 8425|  1.48M|    monostate monostate_val{};
 8426|       |
 8427|  1.48M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.48M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.48M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.48M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.48M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.48M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.48M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.48M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.48M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.48M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.48M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.48M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.48M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.48M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.48M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.48M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.48M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.48M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.48M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.48M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.48M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|   742k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 742k, False: 742k]
  ------------------
 8469|   742k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   742k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   742k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   742k|    }                                                           \
  |  | 8421|   742k|    else {                                                      \
  |  | 8422|   742k|        return vis(monostate_val);                              \
  |  | 8423|   742k|    }
  ------------------
 8470|  1.48M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 742k, False: 742k]
  ------------------
 8471|  1.48M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.48M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.48M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.48M|    }                                                           \
  |  | 8421|  1.48M|    else {                                                      \
  |  | 8422|  1.48M|        return vis(monostate_val);                              \
  |  | 8423|  1.48M|    }
  ------------------
 8472|  1.48M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.48M]
  ------------------
 8473|  1.48M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.48M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.48M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.48M|    }                                                           \
  |  | 8421|  1.48M|    else {                                                      \
  |  | 8422|  1.48M|        return vis(monostate_val);                              \
  |  | 8423|  1.48M|    }
  ------------------
 8474|  1.48M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.48M]
  ------------------
 8475|  1.48M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.48M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.48M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.48M|    }                                                           \
  |  | 8421|  1.48M|    else {                                                      \
  |  | 8422|  1.48M|        return vis(monostate_val);                              \
  |  | 8423|  1.48M|    }
  ------------------
 8476|       |
 8477|  1.48M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.48M]
  ------------------
 8478|  1.48M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.48M|            return vis(
 8480|  1.48M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.48M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.48M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.48M|            SCN_CLANG_POP
 8495|  1.48M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5543|  1.55M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5544|  1.55M|    {
 5545|  1.55M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8136|   517k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   517k|    static_cast<    \
  |  |  929|   517k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8137|   517k|    {
 8138|   517k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8054|  1.55M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.55M|    static_cast<    \
  |  |  929|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.55M|    static_cast<    \
  |  |  929|  1.55M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8055|  1.55M|    {
 8056|  1.55M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  1.03M|{
 7044|  1.03M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  1.03M|    handler.check_args_exhausted();
 7046|  1.03M|    return handler.get_error();
 7047|  1.03M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  1.03M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  1.03M|    auto begin = format.data();
 7013|  1.03M|    auto it = begin;
 7014|  1.03M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  2.01M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 1.03M, False: 979k]
  ------------------
 7017|  1.03M|        const auto ch = *it++;
 7018|  1.03M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 1.03M, False: 0]
  ------------------
 7019|  1.03M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  1.03M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  1.03M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 55.3k, False: 979k]
  ------------------
 7023|  55.3k|                return;
 7024|  55.3k|            }
 7025|  1.03M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  1.03M|    }
 7036|       |
 7037|   979k|    handler.on_literal_text(begin, end);
 7038|   979k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  1.03M|{
 6942|  1.03M|    struct id_adapter {
 6943|  1.03M|        constexpr void operator()()
 6944|  1.03M|        {
 6945|  1.03M|            arg_id = handler.on_arg_id();
 6946|  1.03M|        }
 6947|  1.03M|        constexpr void operator()(std::size_t id)
 6948|  1.03M|        {
 6949|  1.03M|            arg_id = handler.on_arg_id(id);
 6950|  1.03M|        }
 6951|       |
 6952|  1.03M|        constexpr void on_error(const char* msg)
 6953|  1.03M|        {
 6954|  1.03M|            SCN_UNLIKELY_ATTR
 6955|  1.03M|            handler.on_error(msg);
 6956|  1.03M|        }
 6957|       |
 6958|  1.03M|        Handler& handler;
 6959|  1.03M|        std::size_t arg_id;
 6960|  1.03M|    };
 6961|       |
 6962|  1.03M|    ++begin;
 6963|  1.03M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  1.03M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 1.03M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  1.03M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 1.03M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  1.03M|    else {
 6975|  1.03M|        auto adapter = id_adapter{handler, 0};
 6976|  1.03M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  1.03M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  1.03M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 1.03M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  1.03M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 1.03M, False: 0]
  ------------------
 6987|  1.03M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  1.03M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  1.03M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  2.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.1k, False: 1.01M]
  |  |  |  Branch (859:45): [True: 0, False: 1.03M]
  |  |  |  Branch (859:45): [True: 22.1k, False: 1.01M]
  |  |  ------------------
  ------------------
 6993|  22.1k|                handler.on_error("Unknown format specifier");
 6994|  22.1k|                return begin;
 6995|  22.1k|            }
 6996|  1.03M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  1.03M|    }
 7003|  1.01M|    return begin + 1;
 7004|  1.03M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  1.55M|    {
 8039|  1.55M|        return m_args.get(id);
 8040|  1.55M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  1.51M|    {
 8049|  1.51M|        return m_locale;
 8050|  1.51M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  1.55M|    {
 5566|  1.55M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.55M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.55M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  1.55M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  1.55M|        do_check_arg_id(id);
 5574|  1.55M|        return id;
 5575|  1.55M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  1.55M|{
 6054|  1.55M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  1.55M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  1.55M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  1.03M|{
 6443|  1.03M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  1.03M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 1.03M, False: 0]
  |  Branch (6444:26): [True: 0, False: 1.03M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  1.03M|    handler();
 6449|  1.03M|    return begin;
 6450|  1.03M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  33.2k|{
 6392|  33.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  33.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  33.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  33.2k|    unsigned long long value = 0;
 6396|  66.4k|    do {
 6397|  66.4k|        value *= 10;
 6398|  66.4k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  66.4k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 66.4k]
  ------------------
 6400|  66.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  66.4k|        ++begin;
 6404|  66.4k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 66.4k, False: 0]
  |  Branch (6404:30): [True: 66.4k, False: 0]
  |  Branch (6404:47): [True: 33.2k, False: 33.2k]
  ------------------
 6405|  33.2k|    return static_cast<int>(value);
 6406|  33.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  1.03M|        {
 6945|  1.03M|            arg_id = handler.on_arg_id();
 6946|  1.03M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  3.10M|    {
 5252|  3.10M|        return m_type;
 5253|  3.10M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  1.51M|    {
 5561|  1.51M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  1.51M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|  1.25M|{
 4344|  1.25M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 1.25M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  1.25M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  1.25M|                            ranges::default_sentinel};
 4350|  1.25M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4175|  1.25M|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4176|  1.25M|    {
 4177|  1.25M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  1.25M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  1.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  1.25M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  3.07M|    {
 5550|  3.07M|        return m_format.data();
 5551|  3.07M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7120|  1.03M|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|  1.03M|    {
 7122|  1.03M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  1.03M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.03M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  1.03M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  1.03M|{
 6858|  1.03M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.03M|        if (*begin == CharT{'['}) {
 6860|  1.03M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  1.03M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  1.03M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  1.03M|                return begin;
 6866|  1.03M|            }
 6867|  1.03M|            handler.on_character_set_string(set);
 6868|  1.03M|            return begin;
 6869|  1.03M|        }
 6870|  1.03M|        if (*begin == CharT{'/'}) {
 6871|  1.03M|            return parse_presentation_regex(begin, end, handler);
 6872|  1.03M|        }
 6873|  1.03M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.03M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  1.03M|            handler.on_error("Invalid type specifier in format string");
 6876|  1.03M|            return begin;
 6877|  1.03M|        }
 6878|  1.03M|        handler.on_type(type);
 6879|  1.03M|        return begin;
 6880|  1.03M|    };
 6881|       |
 6882|  1.03M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 1.03M, False: 0]
  |  Branch (6882:28): [True: 1.00M, False: 33.4k]
  ------------------
 6883|  1.03M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 1.00M, False: 0]
  |  Branch (6883:36): [True: 990k, False: 11.0k]
  ------------------
 6884|   990k|        return do_presentation();
 6885|   990k|    }
 6886|       |
 6887|  44.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.5k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  44.5k|    begin = parse_align(begin, end, handler);
 6893|  44.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.5k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  44.5k|    begin = parse_width(begin, end, handler);
 6899|  44.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.5k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  44.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 44.5k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  44.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 11.0k, False: 33.4k]
  ------------------
 6918|  11.0k|        handler.on_localized();
 6919|  11.0k|        ++begin;
 6920|  11.0k|    }
 6921|  44.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.5k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  44.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 44.5k, False: 0]
  |  Branch (6926:25): [True: 33.4k, False: 11.0k]
  ------------------
 6927|  33.4k|        do_presentation();
 6928|  33.4k|    }
 6929|  44.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.5k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  44.5k|    return begin;
 6935|  44.5k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  1.50M|{
 6507|  1.50M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 1.48M, False: 16.6k]
  |  Branch (6507:33): [True: 1.48M, False: 0]
  ------------------
 6508|  1.50M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 16.6k, False: 0]
  |  Branch (6508:33): [True: 16.6k, False: 0]
  ------------------
 6509|  1.50M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  1.02M|    auto do_presentation = [&]() -> const CharT* {
 6859|  1.02M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 11.3k, False: 1.01M]
  ------------------
 6860|  11.3k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  11.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  11.3k|            handler.on_character_set_string(set);
 6868|  11.3k|            return begin;
 6869|  11.3k|        }
 6870|  1.01M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 1.01M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  1.01M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  1.01M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 1.00M]
  |  |  ------------------
  ------------------
 6875|  11.0k|            handler.on_error("Invalid type specifier in format string");
 6876|  11.0k|            return begin;
 6877|  11.0k|        }
 6878|  1.00M|        handler.on_type(type);
 6879|  1.00M|        return begin;
 6880|  1.01M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  11.3k|{
 6697|  11.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  11.3k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  11.3k|    auto start = begin;
 6701|  11.3k|    ++begin;
 6702|       |
 6703|  11.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  11.3k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 11.3k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  11.3k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 11.3k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  34.0k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 34.0k, False: 0]
  ------------------
 6728|  34.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  34.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34.0k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  34.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 11.3k, False: 22.6k]
  ------------------
 6733|  11.3k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  11.3k|        }
 6735|       |
 6736|  22.6k|        parse_presentation_set_literal(begin, end, handler);
 6737|  22.6k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  11.3k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  22.6k|{
 6661|  22.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  22.6k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  22.6k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  22.6k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 22.6k, False: 0]
  |  Branch (6668:25): [True: 22.6k, False: 0]
  |  Branch (6668:49): [True: 22.6k, False: 0]
  ------------------
 6669|  22.6k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 22.6k, False: 0]
  ------------------
 6670|  22.6k|        ++begin;
 6671|       |
 6672|  22.6k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  22.6k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  22.6k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  22.6k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  22.6k|        return;
 6686|  22.6k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  45.3k|{
 6637|  45.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  45.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  45.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  45.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  45.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.3k]
  |  |  |  Branch (859:45): [True: 0, False: 45.3k]
  |  |  |  Branch (859:45): [True: 0, False: 45.3k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  45.3k|    const auto cp =
 6646|  45.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  45.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 45.3k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  45.3k|    begin += len;
 6653|  45.3k|    return cp;
 6654|  45.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  17.0k|    {
 6346|  17.0k|        m_specs.charset_string_data = fmt.data();
 6347|  17.0k|        m_specs.charset_string_size = fmt.size();
 6348|  17.0k|        on_type(presentation_type::string_set);
 6349|  17.0k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  1.51M|{
 6455|  1.51M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 1.51M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 1.51M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 1.51M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 1.51M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 1.51M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 1.51M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.51M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.51M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.51M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 1.51M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 1.51M]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.51M]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 1.51M]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 1.51M]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 1.51M]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 1.51M]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 1.51M]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 1.51M]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|  1.48M|        case 's':
  ------------------
  |  Branch (6485:9): [True: 1.48M, False: 33.2k]
  ------------------
 6486|  1.48M|            return presentation_type::string;
 6487|  16.6k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 16.6k, False: 1.50M]
  ------------------
 6488|  16.6k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 1.51M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.51M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.51M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.51M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  16.6k|        default:
  ------------------
  |  Branch (6499:9): [True: 16.6k, False: 1.50M]
  ------------------
 6500|  16.6k|            return presentation_type::none;
 6501|  1.51M|    }
 6502|  1.51M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  44.5k|{
 6532|  44.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  44.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  44.5k|    auto check_align = [](wchar_t ch) {
 6535|  44.5k|        switch (ch) {
 6536|  44.5k|            case L'<':
 6537|  44.5k|                return align_type::left;
 6538|  44.5k|            case L'>':
 6539|  44.5k|                return align_type::right;
 6540|  44.5k|            case L'^':
 6541|  44.5k|                return align_type::center;
 6542|  44.5k|            default:
 6543|  44.5k|                return align_type::none;
 6544|  44.5k|        }
 6545|  44.5k|    };
 6546|       |
 6547|  44.5k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  44.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  89.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.5k]
  |  |  |  Branch (859:45): [True: 0, False: 44.5k]
  |  |  |  Branch (859:45): [True: 0, False: 44.5k]
  |  |  ------------------
  ------------------
 6549|  44.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  44.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  44.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  44.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  44.5k|    const auto begin_before_fill = begin;
 6559|  44.5k|    begin += potential_fill_len;
 6560|       |
 6561|  44.5k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 44.5k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  44.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  44.5k|    const auto begin_after_fill = begin;
 6567|  44.5k|    ++begin;
 6568|       |
 6569|  44.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 44.5k, False: 0]
  ------------------
 6570|  44.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.5k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  44.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 11.3k, False: 33.2k]
  ------------------
 6575|  11.3k|            return begin_before_fill;
 6576|  11.3k|        }
 6577|  44.5k|    }
 6578|       |
 6579|  33.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 33.2k, False: 0]
  ------------------
 6580|  33.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 33.2k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  33.2k|        return begin_before_fill;
 6585|  33.2k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  33.2k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  66.8k|{
 6514|  66.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  66.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  66.8k|    if constexpr (sizeof(CharT) != 1) {
 6516|  66.8k|        return 1;
 6517|       |    }
 6518|       |    else {
 6519|       |        const auto lengths =
 6520|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|       |            "\3\4";
 6522|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|       |        return len;
 6524|       |    }
 6525|  66.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  89.1k|    auto check_align = [](wchar_t ch) {
 6535|  89.1k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 89.1k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 89.1k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 89.1k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  89.1k|            default:
  ------------------
  |  Branch (6542:13): [True: 89.1k, False: 0]
  ------------------
 6543|  89.1k|                return align_type::none;
 6544|  89.1k|        }
 6545|  89.1k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  44.5k|{
 6597|  44.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  44.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  44.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 44.5k, False: 0]
  |  Branch (6599:33): [True: 22.1k, False: 22.4k]
  ------------------
 6600|  22.1k|        int width = parse_simple_int(begin, end);
 6601|  22.1k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  22.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 22.1k, False: 0]
  |  |  ------------------
  ------------------
 6602|  22.1k|            handler.on_width(width);
 6603|  22.1k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  22.1k|    }
 6609|  44.5k|    return begin;
 6610|  44.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  11.0k|    {
 7127|  11.0k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  11.0k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 11.0k, False: 0]
  ------------------
 7129|  11.0k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 11.0k, False: 0]
  ------------------
 7130|  11.0k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 11.0k, False: 0]
  ------------------
 7131|  11.0k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 11.0k, False: 0]
  ------------------
 7132|  11.0k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  11.0k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  11.0k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  1.01M|{
 8417|  1.01M|#define SCN_VISIT(Type)                                         \
 8418|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  1.01M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  1.01M|    }                                                           \
 8421|  1.01M|    else {                                                      \
 8422|  1.01M|        return vis(monostate_val);                              \
 8423|  1.01M|    }
 8424|       |
 8425|  1.01M|    monostate monostate_val{};
 8426|       |
 8427|  1.01M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 1.01M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 1.01M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 1.01M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 1.01M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 1.01M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 1.01M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 1.01M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 1.01M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 1.01M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 1.01M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 1.01M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 1.01M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 1.01M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 1.01M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 1.01M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 1.01M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 1.01M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 1.01M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 1.01M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 1.01M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|   506k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 506k, False: 506k]
  ------------------
 8469|   506k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|   506k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   506k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   506k|    }                                                           \
  |  | 8421|   506k|    else {                                                      \
  |  | 8422|   506k|        return vis(monostate_val);                              \
  |  | 8423|   506k|    }
  ------------------
 8470|  1.01M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 506k, False: 506k]
  ------------------
 8471|  1.01M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.01M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.01M|    }                                                           \
  |  | 8421|  1.01M|    else {                                                      \
  |  | 8422|  1.01M|        return vis(monostate_val);                              \
  |  | 8423|  1.01M|    }
  ------------------
 8472|  1.01M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 1.01M]
  ------------------
 8473|  1.01M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.01M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.01M|    }                                                           \
  |  | 8421|  1.01M|    else {                                                      \
  |  | 8422|  1.01M|        return vis(monostate_val);                              \
  |  | 8423|  1.01M|    }
  ------------------
 8474|  1.01M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 1.01M]
  ------------------
 8475|  1.01M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|  1.01M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|  1.01M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  1.01M|    }                                                           \
  |  | 8421|  1.01M|    else {                                                      \
  |  | 8422|  1.01M|        return vis(monostate_val);                              \
  |  | 8423|  1.01M|    }
  ------------------
 8476|       |
 8477|  1.01M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.01M]
  ------------------
 8478|  1.01M|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|  1.01M|            return vis(
 8480|  1.01M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 1.01M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 1.01M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  1.01M|            SCN_CLANG_POP
 8495|  1.01M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   742k|{
 8417|   742k|#define SCN_VISIT(Type)                                         \
 8418|   742k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   742k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   742k|    }                                                           \
 8421|   742k|    else {                                                      \
 8422|   742k|        return vis(monostate_val);                              \
 8423|   742k|    }
 8424|       |
 8425|   742k|    monostate monostate_val{};
 8426|       |
 8427|   742k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 742k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 742k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 742k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 742k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 742k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 742k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 742k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 742k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 742k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 742k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 742k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 742k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 742k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 742k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 742k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 742k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 742k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 742k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 742k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 742k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 742k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|   742k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 742k, False: 0]
  ------------------
 8471|   742k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   742k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   742k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   742k|    }                                                           \
  |  | 8421|   742k|    else {                                                      \
  |  | 8422|   742k|        return vis(monostate_val);                              \
  |  | 8423|   742k|    }
  ------------------
 8472|   742k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 742k]
  ------------------
 8473|   742k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   742k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   742k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   742k|    }                                                           \
  |  | 8421|   742k|    else {                                                      \
  |  | 8422|   742k|        return vis(monostate_val);                              \
  |  | 8423|   742k|    }
  ------------------
 8474|   742k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 742k]
  ------------------
 8475|   742k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   742k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   742k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   742k|    }                                                           \
  |  | 8421|   742k|    else {                                                      \
  |  | 8422|   742k|        return vis(monostate_val);                              \
  |  | 8423|   742k|    }
  ------------------
 8476|       |
 8477|   742k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 742k]
  ------------------
 8478|   742k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   742k|            return vis(
 8480|   742k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 742k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 742k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   742k|            SCN_CLANG_POP
 8495|   742k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   517k|{
 7044|   517k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   517k|    handler.check_args_exhausted();
 7046|   517k|    return handler.get_error();
 7047|   517k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   517k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   517k|    auto begin = format.data();
 7013|   517k|    auto it = begin;
 7014|   517k|    const auto end = format.data() + format.size();
 7015|       |
 7016|  1.00M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 517k, False: 489k]
  ------------------
 7017|   517k|        const auto ch = *it++;
 7018|   517k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 517k, False: 0]
  ------------------
 7019|   517k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   517k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   517k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 27.6k, False: 489k]
  ------------------
 7023|  27.6k|                return;
 7024|  27.6k|            }
 7025|   517k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   517k|    }
 7036|       |
 7037|   489k|    handler.on_literal_text(begin, end);
 7038|   489k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|   489k|    {
 8175|   489k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   489k|    static_cast<    \
  |  |  929|   489k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|   489k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|   517k|{
 6942|   517k|    struct id_adapter {
 6943|   517k|        constexpr void operator()()
 6944|   517k|        {
 6945|   517k|            arg_id = handler.on_arg_id();
 6946|   517k|        }
 6947|   517k|        constexpr void operator()(std::size_t id)
 6948|   517k|        {
 6949|   517k|            arg_id = handler.on_arg_id(id);
 6950|   517k|        }
 6951|       |
 6952|   517k|        constexpr void on_error(const char* msg)
 6953|   517k|        {
 6954|   517k|            SCN_UNLIKELY_ATTR
 6955|   517k|            handler.on_error(msg);
 6956|   517k|        }
 6957|       |
 6958|   517k|        Handler& handler;
 6959|   517k|        std::size_t arg_id;
 6960|   517k|    };
 6961|       |
 6962|   517k|    ++begin;
 6963|   517k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 517k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   517k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 517k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   517k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 517k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   517k|    else {
 6975|   517k|        auto adapter = id_adapter{handler, 0};
 6976|   517k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   517k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 517k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   517k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 517k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   517k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 517k, False: 0]
  ------------------
 6987|   517k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 517k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   517k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   517k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 506k]
  |  |  |  Branch (859:45): [True: 0, False: 517k]
  |  |  |  Branch (859:45): [True: 11.0k, False: 506k]
  |  |  ------------------
  ------------------
 6993|  11.0k|                handler.on_error("Unknown format specifier");
 6994|  11.0k|                return begin;
 6995|  11.0k|            }
 6996|   517k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   517k|    }
 7003|   506k|    return begin + 1;
 7004|   517k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   517k|{
 6443|   517k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   517k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 517k, False: 0]
  |  Branch (6444:26): [True: 0, False: 517k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   517k|    handler();
 6449|   517k|    return begin;
 6450|   517k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   517k|        {
 6945|   517k|            arg_id = handler.on_arg_id();
 6946|   517k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7120|   517k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   517k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7121|   517k|    {
 7122|   517k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   517k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   517k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   517k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|   517k|{
 6858|   517k|    auto do_presentation = [&]() -> const CharT* {
 6859|   517k|        if (*begin == CharT{'['}) {
 6860|   517k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   517k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   517k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   517k|                return begin;
 6866|   517k|            }
 6867|   517k|            handler.on_character_set_string(set);
 6868|   517k|            return begin;
 6869|   517k|        }
 6870|   517k|        if (*begin == CharT{'/'}) {
 6871|   517k|            return parse_presentation_regex(begin, end, handler);
 6872|   517k|        }
 6873|   517k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   517k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   517k|            handler.on_error("Invalid type specifier in format string");
 6876|   517k|            return begin;
 6877|   517k|        }
 6878|   517k|        handler.on_type(type);
 6879|   517k|        return begin;
 6880|   517k|    };
 6881|       |
 6882|   517k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 517k, False: 0]
  |  Branch (6882:28): [True: 500k, False: 16.7k]
  ------------------
 6883|   517k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 500k, False: 0]
  |  Branch (6883:36): [True: 495k, False: 5.53k]
  ------------------
 6884|   495k|        return do_presentation();
 6885|   495k|    }
 6886|       |
 6887|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  22.2k|    begin = parse_align(begin, end, handler);
 6893|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  22.2k|    begin = parse_width(begin, end, handler);
 6899|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  22.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 22.2k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  22.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 5.53k, False: 16.7k]
  ------------------
 6918|  5.53k|        handler.on_localized();
 6919|  5.53k|        ++begin;
 6920|  5.53k|    }
 6921|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  22.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 22.2k, False: 0]
  |  Branch (6926:25): [True: 16.7k, False: 5.53k]
  ------------------
 6927|  16.7k|        do_presentation();
 6928|  16.7k|    }
 6929|  22.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  22.2k|    return begin;
 6935|  22.2k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|   511k|    auto do_presentation = [&]() -> const CharT* {
 6859|   511k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 5.67k, False: 506k]
  ------------------
 6860|  5.67k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  5.67k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  5.67k|            handler.on_character_set_string(set);
 6868|  5.67k|            return begin;
 6869|  5.67k|        }
 6870|   506k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 506k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   506k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   506k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 500k]
  |  |  ------------------
  ------------------
 6875|  5.53k|            handler.on_error("Invalid type specifier in format string");
 6876|  5.53k|            return begin;
 6877|  5.53k|        }
 6878|   500k|        handler.on_type(type);
 6879|   500k|        return begin;
 6880|   506k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  5.67k|{
 6697|  5.67k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  5.67k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  5.67k|    auto start = begin;
 6701|  5.67k|    ++begin;
 6702|       |
 6703|  5.67k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  5.67k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 5.67k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  5.67k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 5.67k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  17.0k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 17.0k, False: 0]
  ------------------
 6728|  17.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  17.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.0k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  17.0k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 5.67k, False: 11.3k]
  ------------------
 6733|  5.67k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  5.67k|        }
 6735|       |
 6736|  11.3k|        parse_presentation_set_literal(begin, end, handler);
 6737|  11.3k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  5.67k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6660|  11.3k|{
 6661|  11.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  11.3k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  11.3k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  11.3k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 11.3k, False: 0]
  |  Branch (6668:25): [True: 11.3k, False: 0]
  |  Branch (6668:49): [True: 11.3k, False: 0]
  ------------------
 6669|  11.3k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 11.3k, False: 0]
  ------------------
 6670|  11.3k|        ++begin;
 6671|       |
 6672|  11.3k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  11.3k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  11.3k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  11.3k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  11.3k|        return;
 6686|  11.3k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6636|  22.6k|{
 6637|  22.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  22.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  22.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  45.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6k]
  |  |  |  Branch (859:45): [True: 0, False: 22.6k]
  |  |  |  Branch (859:45): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  22.6k|    const auto cp =
 6646|  22.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  22.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  22.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.6k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  22.6k|    begin += len;
 6653|  22.6k|    return cp;
 6654|  22.6k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  22.2k|{
 6532|  22.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  22.2k|    auto check_align = [](wchar_t ch) {
 6535|  22.2k|        switch (ch) {
 6536|  22.2k|            case L'<':
 6537|  22.2k|                return align_type::left;
 6538|  22.2k|            case L'>':
 6539|  22.2k|                return align_type::right;
 6540|  22.2k|            case L'^':
 6541|  22.2k|                return align_type::center;
 6542|  22.2k|            default:
 6543|  22.2k|                return align_type::none;
 6544|  22.2k|        }
 6545|  22.2k|    };
 6546|       |
 6547|  22.2k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  22.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  44.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  |  Branch (859:45): [True: 0, False: 22.2k]
  |  |  |  Branch (859:45): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6549|  22.2k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  22.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  22.2k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  22.2k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  22.2k|    const auto begin_before_fill = begin;
 6559|  22.2k|    begin += potential_fill_len;
 6560|       |
 6561|  22.2k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 22.2k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  22.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  22.2k|    const auto begin_after_fill = begin;
 6567|  22.2k|    ++begin;
 6568|       |
 6569|  22.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 22.2k, False: 0]
  ------------------
 6570|  22.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  22.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 5.67k, False: 16.6k]
  ------------------
 6575|  5.67k|            return begin_before_fill;
 6576|  5.67k|        }
 6577|  22.2k|    }
 6578|       |
 6579|  16.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 16.6k, False: 0]
  ------------------
 6580|  16.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 16.6k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  16.6k|        return begin_before_fill;
 6585|  16.6k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  16.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  44.5k|    auto check_align = [](wchar_t ch) {
 6535|  44.5k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 44.5k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 44.5k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 44.5k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  44.5k|            default:
  ------------------
  |  Branch (6542:13): [True: 44.5k, False: 0]
  ------------------
 6543|  44.5k|                return align_type::none;
 6544|  44.5k|        }
 6545|  44.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  22.2k|{
 6597|  22.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  22.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  22.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 22.2k, False: 0]
  |  Branch (6599:33): [True: 11.0k, False: 11.2k]
  ------------------
 6600|  11.0k|        int width = parse_simple_int(begin, end);
 6601|  11.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  11.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 11.0k, False: 0]
  |  |  ------------------
  ------------------
 6602|  11.0k|            handler.on_width(width);
 6603|  11.0k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  11.0k|    }
 6609|  22.2k|    return begin;
 6610|  22.2k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  5.53k|    {
 7127|  5.53k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  5.53k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 5.53k, False: 0]
  ------------------
 7129|  5.53k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 5.53k, False: 0]
  ------------------
 7130|  5.53k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 5.53k, False: 0]
  ------------------
 7131|  5.53k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 5.53k, False: 0]
  ------------------
 7132|  5.53k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  5.53k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  5.53k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   506k|{
 8417|   506k|#define SCN_VISIT(Type)                                         \
 8418|   506k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   506k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   506k|    }                                                           \
 8421|   506k|    else {                                                      \
 8422|   506k|        return vis(monostate_val);                              \
 8423|   506k|    }
 8424|       |
 8425|   506k|    monostate monostate_val{};
 8426|       |
 8427|   506k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 506k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 506k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 506k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 506k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 506k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 506k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 506k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 506k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 506k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 506k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 506k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 506k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 506k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 506k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 506k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 506k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 506k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 506k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 506k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 506k]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 506k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|   506k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 506k, False: 0]
  ------------------
 8471|   506k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|   506k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   506k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   506k|    }                                                           \
  |  | 8421|   506k|    else {                                                      \
  |  | 8422|   506k|        return vis(monostate_val);                              \
  |  | 8423|   506k|    }
  ------------------
 8472|   506k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 506k]
  ------------------
 8473|   506k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|   506k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   506k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   506k|    }                                                           \
  |  | 8421|   506k|    else {                                                      \
  |  | 8422|   506k|        return vis(monostate_val);                              \
  |  | 8423|   506k|    }
  ------------------
 8474|   506k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 506k]
  ------------------
 8475|   506k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|   506k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8419|   506k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   506k|    }                                                           \
  |  | 8421|   506k|    else {                                                      \
  |  | 8422|   506k|        return vis(monostate_val);                              \
  |  | 8423|   506k|    }
  ------------------
 8476|       |
 8477|   506k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 506k]
  ------------------
 8478|   506k|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|   506k|            return vis(
 8480|   506k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 506k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 506k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   506k|            SCN_CLANG_POP
 8495|   506k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|  35.9k|    {
 4076|  35.9k|        sync(0);
 4077|  35.9k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   116k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|   742k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   506k|{
   89|   506k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   506k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   506k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   506k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  1.01M|{
   44|  1.01M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  1.01M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|   506k|{
  127|   506k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   506k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   506k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   506k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  1.01M|{
   60|  1.01M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  1.01M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  162|   247k|{
  163|   247k|    T value;
  164|   247k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   247k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.76k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.76k|    }                                                  \
  |  |  |  | 3671|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   244k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   244k|    static_cast<    \
  |  |  929|   244k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   244k|    static_cast<    \
  |  |  929|   244k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   247k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   495k|{
   72|   495k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   495k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   495k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   506k|{
   89|   506k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   506k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   506k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   506k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  126|   506k|{
  127|   506k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   506k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   506k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   506k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  162|   247k|{
  163|   247k|    T value;
  164|   247k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   247k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.76k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.76k|    }                                                  \
  |  |  |  | 3671|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   244k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   244k|    static_cast<    \
  |  |  929|   244k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   244k|    static_cast<    \
  |  |  929|   244k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   247k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   506k|{
   89|   506k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   506k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   506k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   506k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   506k|{
   44|   506k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   506k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  126|   506k|{
  127|   506k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   506k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   506k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   506k|    static_cast<    \
  |  |  929|   506k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   506k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   506k|{
   60|   506k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   506k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  162|   247k|{
  163|   247k|    T value;
  164|   247k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   247k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.76k, False: 244k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.76k|    }                                                  \
  |  |  |  | 3671|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   244k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   244k|    static_cast<    \
  |  |  929|   244k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   244k|    static_cast<    \
  |  |  929|   244k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   247k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   247k|{
   72|   247k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   247k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  1.77M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  1.77M|{
  653|  1.77M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.77M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   157k|{
 2184|   157k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   157k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  93.8k|{
 2192|  93.8k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  93.8k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  93.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 85.5k, False: 8.30k]
  |  |  ------------------
  ------------------
 2194|  85.5k|        source.sync(*n);
 2195|  85.5k|    }
 2196|  8.30k|    else {
 2197|  8.30k|        source.sync_all();
 2198|  8.30k|    }
 2199|  93.8k|    return n;
 2200|  93.8k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  1.01M|{
 2208|  1.01M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  1.01M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   506k|{
 2216|   506k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   506k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   506k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 489k, False: 16.6k]
  |  |  ------------------
  ------------------
 2218|   489k|        source.sync(*n);
 2219|   489k|    }
 2220|  16.6k|    else {
 2221|  16.6k|        source.sync_all();
 2222|  16.6k|    }
 2223|   506k|    return n;
 2224|   506k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   575k|{
  194|   575k|    return find_classic_impl(
  195|   575k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   575k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   575k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   579k|{
  202|   579k|    return find_classic_impl(
  203|   579k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   579k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   579k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   157k|{
 2141|   157k|    return vscan_internal(source, format, args);
 2142|   157k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  93.8k|{
 2147|  93.8k|    auto n = vscan_internal(source, format, args);
 2148|  93.8k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  93.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 85.5k, False: 8.30k]
  |  |  ------------------
  ------------------
 2149|  85.5k|        source.sync(*n);
 2150|  85.5k|    }
 2151|  8.30k|    else {
 2152|  8.30k|        source.sync_all();
 2153|  8.30k|    }
 2154|  93.8k|    return n;
 2155|  93.8k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  1.01M|{
 2161|  1.01M|    return vscan_internal(source, format, args);
 2162|  1.01M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   506k|{
 2167|   506k|    auto n = vscan_internal(source, format, args);
 2168|   506k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   506k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 489k, False: 16.6k]
  |  |  ------------------
  ------------------
 2169|   489k|        source.sync(*n);
 2170|   489k|    }
 2171|  16.6k|    else {
 2172|  16.6k|        source.sync_all();
 2173|  16.6k|    }
 2174|   506k|    return n;
 2175|   506k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  72.6k|{
 2251|  72.6k|    return vscan_value_internal(source, arg);
 2252|  72.6k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  43.7k|{
 2256|  43.7k|    auto n = vscan_value_internal(source, arg);
 2257|  43.7k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  43.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 42.3k, False: 1.38k]
  |  |  ------------------
  ------------------
 2258|  42.3k|        source.sync(*n);
 2259|  42.3k|    }
 2260|  1.38k|    else {
 2261|  1.38k|        source.sync_all();
 2262|  1.38k|    }
 2263|  43.7k|    return n;
 2264|  43.7k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|   495k|{
 2270|   495k|    return vscan_value_internal(source, arg);
 2271|   495k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|   247k|{
 2276|   247k|    auto n = vscan_value_internal(source, arg);
 2277|   247k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   247k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 244k, False: 2.76k]
  |  |  ------------------
  ------------------
 2278|   244k|        source.sync(*n);
 2279|   244k|    }
 2280|  2.76k|    else {
 2281|  2.76k|        source.sync_all();
 2282|  2.76k|    }
 2283|   247k|    return n;
 2284|   247k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   575k|{
  118|   575k|    auto it = source.begin();
  119|       |
  120|  1.09M|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 875k, False: 223k]
  ------------------
  121|   875k|        auto sv =
  122|   875k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   875k|                .substr(0, 8);
  124|       |
  125|   875k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 635k, False: 239k]
  ------------------
  126|   635k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   635k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   635k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 260k, False: 374k]
  ------------------
  129|   260k|                break;
  130|   260k|            }
  131|   374k|            continue;
  132|   635k|        }
  133|       |
  134|   727k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 579k, False: 148k]
  ------------------
  135|   579k|            auto tmp =
  136|   579k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   579k|            auto res = get_next_code_point(tmp);
  138|   579k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 91.5k, False: 488k]
  ------------------
  139|  91.5k|                return it;
  140|  91.5k|            }
  141|   488k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   488k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   488k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   488k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   488k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   488k|        }
  145|   239k|    }
  146|       |
  147|   483k|    return detail::make_string_view_iterator(source, it);
  148|   575k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  1.42M|{
  105|  1.42M|    static_assert(sizeof(*source.data()) == 1);
  106|  1.42M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  1.42M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  1.42M|    uint64_t word{};
  108|  1.42M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  1.42M|    return has_byte_greater(word, 127) != 0;
  111|  1.42M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  2.74M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   579k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   579k|{
  118|   579k|    auto it = source.begin();
  119|       |
  120|   750k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 546k, False: 203k]
  ------------------
  121|   546k|        auto sv =
  122|   546k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   546k|                .substr(0, 8);
  124|       |
  125|   546k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 435k, False: 111k]
  ------------------
  126|   435k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   435k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   435k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 267k, False: 167k]
  ------------------
  129|   267k|                break;
  130|   267k|            }
  131|   167k|            continue;
  132|   435k|        }
  133|       |
  134|   216k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 213k, False: 3.28k]
  ------------------
  135|   213k|            auto tmp =
  136|   213k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   213k|            auto res = get_next_code_point(tmp);
  138|   213k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 108k, False: 105k]
  ------------------
  139|   108k|                return it;
  140|   108k|            }
  141|   105k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   105k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   105k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   105k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   105k|        }
  145|   111k|    }
  146|       |
  147|   471k|    return detail::make_string_view_iterator(source, it);
  148|   579k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.16M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   213k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   187k|{
 2073|   187k|    const auto argcount = args.size();
 2074|   187k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 87.4k, False: 100k]
  |  Branch (2074:60): [True: 87.4k, False: 0]
  ------------------
 2075|  87.4k|        auto arg = args.get(0);
 2076|  87.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  87.4k|    static_cast<    \
  |  |  929|  87.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  87.4k|    }
 2078|       |
 2079|   100k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 100k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   100k|    SCN_UNLIKELY_ATTR
 2087|   100k|    {
 2088|   100k|        auto handler = format_handler<false, CharT>{
 2089|   100k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   100k|        return vscan_parse_format_string(format, handler);
 2091|   100k|    }
 2092|   100k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   503k|{
 1625|   503k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 270k, False: 232k]
  ------------------
 1626|   270k|        return false;
 1627|   270k|    }
 1628|   232k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 232k, False: 0]
  |  Branch (1628:39): [True: 232k, False: 0]
  ------------------
 1629|   503k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   131k|{
 1658|   131k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   131k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   131k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 131k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   131k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   131k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   131k|    static_cast<    \
  |  |  929|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   131k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 4.15k, False: 127k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  4.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  4.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  4.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  4.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  4.15k|    }                                                  \
  |  |  |  | 3671|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   127k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   127k|    return it.position();
 1675|   131k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   170k|        : format_handler_base{argcount},
 1900|   170k|          parse_ctx{format},
 1901|   170k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   170k|    {
 1903|   170k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  1.82M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  1.82M|    {
 1722|  1.82M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  1.82M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   170k|        : contiguous_ctx(source, args, loc)
 1852|   170k|    {
 1853|   170k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   170k|{
 2038|   170k|    const auto beg = handler.get_ctx().begin();
 2039|   170k|    detail::parse_format_string<false>(format, handler);
 2040|   170k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.6k, False: 142k]
  |  |  ------------------
  ------------------
 2041|  27.6k|        return unexpected(handler.error);
 2042|  27.6k|    }
 2043|   142k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   170k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|  1.11M|    {
 2022|  1.11M|        return ctx.get();
 2023|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|  1.11M|    {
 1857|  1.11M|        return contiguous_ctx;
 1858|  1.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   312k|    {
 1907|   312k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 312k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   312k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   170k|{
 1681|   170k|    auto arg = ctx.arg(id);
 1682|   170k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 170k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   170k|    return arg;
 1686|   170k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  1.82M|    {
 1797|  1.82M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  1.82M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  1.82M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.82M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.82M, False: 0]
  |  |  ------------------
  ------------------
 1807|  1.82M|            visited_args_lower64 |= (1ull << id);
 1808|  1.82M|            return;
 1809|  1.82M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  1.82M|    {
 1782|  1.82M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.82M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  1.82M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.82M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.82M, False: 0]
  |  |  ------------------
  ------------------
 1788|  1.82M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  1.82M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  1.82M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  74.7k|    {
 1766|  74.7k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  74.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 74.7k, False: 0]
  |  |  ------------------
  ------------------
 1767|  74.7k|            error = err;
 1768|  74.7k|        }
 1769|  74.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   170k|    {
 1944|   170k|        return parse_ctx.next_arg_id();
 1945|   170k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   170k|    {
 1985|   170k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   170k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   170k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 170k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   170k|        auto specs = detail::format_specs{};
 1998|   170k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   170k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   170k|            arg.type()};
 2001|       |
 2002|   170k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   170k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 170k]
  |  Branch (2003:29): [True: 0, False: 170k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   170k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 158k]
  |  |  ------------------
  ------------------
 2009|  11.0k|            return parse_ctx.begin();
 2010|  11.0k|        }
 2011|   158k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   158k|        on_visit_scan_arg(
 2014|   158k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   158k|                                           get_ctx().locale()},
 2016|   158k|            arg);
 2017|   158k|        return parse_ctx.begin();
 2018|   170k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   170k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   170k|    {
 1701|   170k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   158k|    {
 1956|   158k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 158k]
  |  Branch (1956:23): [True: 0, False: 158k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   158k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   158k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   158k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   158k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 142k]
  |  |  ------------------
  ------------------
 1963|  16.6k|            on_error(r.error());
 1964|  16.6k|        }
 1965|   142k|        else {
 1966|   142k|            get_ctx().advance_to(*r);
 1967|   142k|        }
 1968|   158k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  49.8k|    {
 1761|  49.8k|        SCN_UNLIKELY_ATTR
 1762|  49.8k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  49.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  1.82M|    {
 1729|  1.82M|        {
 1730|  1.82M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 1.82M]
  ------------------
 1731|  1.82M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 1.82M]
  ------------------
 1732|  1.82M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  1.82M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  1.82M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 1.82M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  1.82M|        }
 1739|       |
 1740|  1.82M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 1.82M, False: 0]
  ------------------
 1741|  1.82M|            return;
 1742|  1.82M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  1.82M|    {
 1777|  1.82M|        return error;
 1778|  1.82M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  5.41M|    {
 1773|  5.41M|        return static_cast<bool>(error);
 1774|  5.41M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|   100k|        : format_handler_base{argcount},
 1900|   100k|          parse_ctx{format},
 1901|   100k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   100k|    {
 1903|   100k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|   100k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   100k|    static_cast<    \
  |  |  929|   100k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   100k|    {
 1830|   100k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   100k|{
 2038|   100k|    const auto beg = handler.get_ctx().begin();
 2039|   100k|    detail::parse_format_string<false>(format, handler);
 2040|   100k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.8k, False: 86.4k]
  |  |  ------------------
  ------------------
 2041|  13.8k|        return unexpected(handler.error);
 2042|  13.8k|    }
 2043|  86.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   100k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   663k|    {
 2022|   663k|        return ctx.get();
 2023|   663k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   663k|    {
 1834|   663k|        return ctx;
 1835|   663k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   186k|    {
 1907|   186k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 186k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   186k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   100k|{
 1681|   100k|    auto arg = ctx.arg(id);
 1682|   100k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 100k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   100k|    return arg;
 1686|   100k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|   100k|    {
 1944|   100k|        return parse_ctx.next_arg_id();
 1945|   100k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|   100k|    {
 1985|   100k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   100k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   100k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 100k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   100k|        auto specs = detail::format_specs{};
 1998|   100k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   100k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   100k|            arg.type()};
 2001|       |
 2002|   100k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   100k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 100k]
  |  Branch (2003:29): [True: 0, False: 100k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   100k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 94.7k]
  |  |  ------------------
  ------------------
 2009|  5.53k|            return parse_ctx.begin();
 2010|  5.53k|        }
 2011|  94.7k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  94.7k|        on_visit_scan_arg(
 2014|  94.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  94.7k|                                           get_ctx().locale()},
 2016|  94.7k|            arg);
 2017|  94.7k|        return parse_ctx.begin();
 2018|   100k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|   100k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   100k|    {
 1701|   100k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  94.7k|    {
 1956|  94.7k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 94.7k]
  |  Branch (1956:23): [True: 0, False: 94.7k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  94.7k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  94.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  94.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  94.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.30k, False: 86.4k]
  |  |  ------------------
  ------------------
 1963|  8.30k|            on_error(r.error());
 1964|  8.30k|        }
 1965|  86.4k|        else {
 1966|  86.4k|            get_ctx().advance_to(*r);
 1967|  86.4k|        }
 1968|  94.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   315k|{
 2053|   315k|    const auto argcount = args.size();
 2054|   315k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 145k, False: 170k]
  |  Branch (2054:60): [True: 145k, False: 0]
  ------------------
 2055|   145k|        auto arg = args.get(0);
 2056|   145k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   145k|    }
 2058|       |
 2059|   170k|    auto handler = format_handler<true, CharT>{
 2060|   170k|        ranges::subrange<const CharT*>{source.data(),
 2061|   170k|                                       source.data() + source.size()},
 2062|   170k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   170k|    return vscan_parse_format_string(format, handler);
 2064|   315k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   218k|{
 1638|   218k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   218k|    auto reader =
 1644|   218k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   218k|            ranges::subrange<const CharT*>{source.data(),
 1646|   218k|                                           source.data() + source.size()},
 1647|   218k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   218k|    static_cast<    \
  |  |  929|   218k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   218k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   218k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   218k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   218k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.30k, False: 209k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.30k|    }                                                  \
  |  |  |  | 3671|   218k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   209k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   209k|    return ranges::distance(source.data(), it);
 1650|   218k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  2.02M|{
 2053|  2.02M|    const auto argcount = args.size();
 2054|  2.02M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 990k, False: 1.03M]
  |  Branch (2054:60): [True: 990k, False: 0]
  ------------------
 2055|   990k|        auto arg = args.get(0);
 2056|   990k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   990k|    static_cast<    \
  |  |  929|   990k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   990k|    }
 2058|       |
 2059|  1.03M|    auto handler = format_handler<true, CharT>{
 2060|  1.03M|        ranges::subrange<const CharT*>{source.data(),
 2061|  1.03M|                                       source.data() + source.size()},
 2062|  1.03M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  1.03M|    return vscan_parse_format_string(format, handler);
 2064|  2.02M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  3.03M|{
 1625|  3.03M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.55M, False: 1.48M]
  ------------------
 1626|  1.55M|        return false;
 1627|  1.55M|    }
 1628|  1.48M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 1.48M, False: 0]
  |  Branch (1628:39): [True: 1.48M, False: 0]
  ------------------
 1629|  3.03M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  1.48M|{
 1638|  1.48M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.48M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  1.48M|    auto reader =
 1644|  1.48M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  1.48M|            ranges::subrange<const CharT*>{source.data(),
 1646|  1.48M|                                           source.data() + source.size()},
 1647|  1.48M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  1.48M|    static_cast<    \
  |  |  929|  1.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  1.48M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  1.48M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  1.48M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  1.48M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 16.6k, False: 1.46M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  16.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  16.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  16.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  16.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  16.6k|    }                                                  \
  |  |  |  | 3671|  1.48M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  1.46M|    return ranges::distance(source.data(), it);
 1650|  1.48M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|  1.03M|        : format_handler_base{argcount},
 1900|  1.03M|          parse_ctx{format},
 1901|  1.03M|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  1.03M|    {
 1903|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|  1.03M|        : contiguous_ctx(source, args, loc)
 1852|  1.03M|    {
 1853|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  1.03M|{
 2038|  1.03M|    const auto beg = handler.get_ctx().begin();
 2039|  1.03M|    detail::parse_format_string<false>(format, handler);
 2040|  1.03M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 55.3k, False: 979k]
  |  |  ------------------
  ------------------
 2041|  55.3k|        return unexpected(handler.error);
 2042|  55.3k|    }
 2043|   979k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  1.03M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  7.08M|    {
 2022|  7.08M|        return ctx.get();
 2023|  7.08M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  7.08M|    {
 1857|  7.08M|        return contiguous_ctx;
 1858|  7.08M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  2.01M|    {
 1907|  2.01M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 2.01M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  2.01M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  1.03M|{
 1681|  1.03M|    auto arg = ctx.arg(id);
 1682|  1.03M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.03M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  1.03M|    return arg;
 1686|  1.03M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  1.03M|    {
 1944|  1.03M|        return parse_ctx.next_arg_id();
 1945|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  1.03M|    {
 1985|  1.03M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  1.03M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  1.03M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 1.03M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  1.03M|        auto specs = detail::format_specs{};
 1998|  1.03M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  1.03M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  1.03M|            arg.type()};
 2001|       |
 2002|  1.03M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  1.03M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 1.03M]
  |  Branch (2003:29): [True: 0, False: 1.03M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  1.03M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  1.03M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.1k, False: 1.01M]
  |  |  ------------------
  ------------------
 2009|  22.1k|            return parse_ctx.begin();
 2010|  22.1k|        }
 2011|  1.01M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  1.01M|        on_visit_scan_arg(
 2014|  1.01M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  1.01M|                                           get_ctx().locale()},
 2016|  1.01M|            arg);
 2017|  1.01M|        return parse_ctx.begin();
 2018|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|  1.03M|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  1.03M|    {
 1701|  1.03M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  1.01M|    {
 1956|  1.01M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 1.01M]
  |  Branch (1956:23): [True: 0, False: 1.01M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  1.01M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  1.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  1.01M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  1.01M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 33.2k, False: 979k]
  |  |  ------------------
  ------------------
 1963|  33.2k|            on_error(r.error());
 1964|  33.2k|        }
 1965|   979k|        else {
 1966|   979k|            get_ctx().advance_to(*r);
 1967|   979k|        }
 1968|  1.01M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  1.01M|{
 2073|  1.01M|    const auto argcount = args.size();
 2074|  1.01M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 495k, False: 517k]
  |  Branch (2074:60): [True: 495k, False: 0]
  ------------------
 2075|   495k|        auto arg = args.get(0);
 2076|   495k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   495k|    static_cast<    \
  |  |  929|   495k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   495k|    }
 2078|       |
 2079|   517k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 517k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   517k|    SCN_UNLIKELY_ATTR
 2087|   517k|    {
 2088|   517k|        auto handler = format_handler<false, CharT>{
 2089|   517k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   517k|    static_cast<    \
  |  |  929|   517k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   517k|    static_cast<    \
  |  |  929|   517k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   517k|        return vscan_parse_format_string(format, handler);
 2091|   517k|    }
 2092|   517k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   742k|{
 1658|   742k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 742k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   742k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   742k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 742k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   742k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   742k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   742k|    static_cast<    \
  |  |  929|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   742k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   742k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   742k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   742k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 8.30k, False: 734k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  8.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  8.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  8.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  8.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  8.30k|    }                                                  \
  |  |  |  | 3671|   742k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   734k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   734k|    return it.position();
 1675|   742k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   517k|        : format_handler_base{argcount},
 1900|   517k|          parse_ctx{format},
 1901|   517k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   517k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   517k|    static_cast<    \
  |  |  929|   517k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   517k|    static_cast<    \
  |  |  929|   517k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   517k|    {
 1903|   517k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   517k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   517k|    static_cast<    \
  |  |  929|   517k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   517k|    {
 1830|   517k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   517k|{
 2038|   517k|    const auto beg = handler.get_ctx().begin();
 2039|   517k|    detail::parse_format_string<false>(format, handler);
 2040|   517k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.6k, False: 489k]
  |  |  ------------------
  ------------------
 2041|  27.6k|        return unexpected(handler.error);
 2042|  27.6k|    }
 2043|   489k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   517k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  3.54M|    {
 2022|  3.54M|        return ctx.get();
 2023|  3.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  3.54M|    {
 1834|  3.54M|        return ctx;
 1835|  3.54M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  1.00M|    {
 1907|  1.00M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.00M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.00M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   517k|{
 1681|   517k|    auto arg = ctx.arg(id);
 1682|   517k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 517k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   517k|    return arg;
 1686|   517k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   517k|    {
 1944|   517k|        return parse_ctx.next_arg_id();
 1945|   517k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   517k|    {
 1985|   517k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   517k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   517k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 517k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   517k|        auto specs = detail::format_specs{};
 1998|   517k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   517k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   517k|            arg.type()};
 2001|       |
 2002|   517k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   517k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 517k]
  |  Branch (2003:29): [True: 0, False: 517k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   517k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   517k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 11.0k, False: 506k]
  |  |  ------------------
  ------------------
 2009|  11.0k|            return parse_ctx.begin();
 2010|  11.0k|        }
 2011|   506k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   506k|        on_visit_scan_arg(
 2014|   506k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   506k|                                           get_ctx().locale()},
 2016|   506k|            arg);
 2017|   506k|        return parse_ctx.begin();
 2018|   517k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   517k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   517k|    {
 1701|   517k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   506k|    {
 1956|   506k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 506k]
  |  Branch (1956:23): [True: 0, False: 506k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   506k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   506k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   506k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 489k]
  |  |  ------------------
  ------------------
 1963|  16.6k|            on_error(r.error());
 1964|  16.6k|        }
 1965|   489k|        else {
 1966|   489k|            get_ctx().advance_to(*r);
 1967|   489k|        }
 1968|   506k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  72.6k|{
 2099|  72.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  72.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  43.7k|{
 2099|  43.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  43.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  43.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   495k|{
 2099|   495k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   495k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   495k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   247k|{
 2099|   247k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   247k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   247k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|  1.38k|{
 1363|  1.38k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|  1.38k|    if constexpr (sizeof(SourceCharT) == 1) {
 1366|       |        if constexpr (sizeof(DestCharT) == 2) {
 1367|       |            std::u32string tmp;
 1368|       |            transcode_to_string_impl_to32(src, tmp);
 1369|       |            return transcode_to_string_impl_32to16<false>(
 1370|       |                std::u32string_view{tmp}, dest);
 1371|       |        }
 1372|  1.38k|        else if constexpr (sizeof(DestCharT) == 4) {
 1373|  1.38k|            return transcode_to_string_impl_to32(src, dest);
 1374|  1.38k|        }
 1375|       |    }
 1376|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|       |        if constexpr (sizeof(DestCharT) == 1) {
 1378|       |            std::u32string tmp;
 1379|       |            transcode_to_string_impl_to32(src, tmp);
 1380|       |            return transcode_to_string_impl_32to8<false>(
 1381|       |                std::u32string_view{tmp}, dest);
 1382|       |        }
 1383|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1384|       |            return trasncode_to_string_impl_to32(src, dest);
 1385|       |        }
 1386|       |    }
 1387|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|       |        if constexpr (sizeof(DestCharT) == 1) {
 1389|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|       |        }
 1391|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1392|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|       |        }
 1394|       |    }
 1395|       |
 1396|  1.38k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  1.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|  1.38k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|  1.38k|{
 1256|  1.38k|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|  1.38k|    auto it = src.begin();
 1259|   607k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 605k, False: 1.38k]
  ------------------
 1260|   605k|        auto res = get_next_code_point(
 1261|   605k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   605k|                                                                 src.end()));
 1263|   605k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   605k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.17k, False: 597k]
  |  |  ------------------
  ------------------
 1264|  8.17k|            dest.push_back(DestCharT{0xfffd});
 1265|  8.17k|        }
 1266|   597k|        else {
 1267|   597k|            dest.push_back(res.value);
 1268|   597k|        }
 1269|   605k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   605k|    }
 1271|  1.38k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|  1.39M|{
 1169|  1.39M|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|  1.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|  1.39M|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|  1.39M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 35.1k, False: 1.36M]
  |  |  ------------------
  ------------------
 1173|  35.1k|        return {get_start_for_next_code_point(input),
 1174|  35.1k|                detail::invalid_code_point};
 1175|  35.1k|    }
 1176|  1.36M|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|  1.36M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.9k, False: 1.33M]
  |  |  ------------------
  ------------------
 1177|  28.9k|        return {input.end(), detail::invalid_code_point};
 1178|  28.9k|    }
 1179|       |
 1180|  1.33M|    return {input.begin() + len,
 1181|  1.33M|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|  1.36M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  35.1k|{
 1155|  35.1k|    auto it = input.begin();
 1156|   157k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 154k, False: 2.53k]
  ------------------
 1157|   154k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 32.6k, False: 122k]
  ------------------
 1158|  32.6k|            break;
 1159|  32.6k|        }
 1160|   154k|    }
 1161|  35.1k|    return it;
 1162|  35.1k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  24.9k|    {
 2931|  24.9k|        SCN_UNLIKELY_ATTR
 2932|  24.9k|        m_msg = msg;
 2933|  24.9k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  1.77M|    {
 2936|  1.77M|        return m_msg == nullptr;
 2937|  1.77M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  3.90M|{
  458|  3.90M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  3.90M|        static_cast<unsigned char>(ch))];
  460|  3.90M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  70.6k|{
  469|  70.6k|    return static_cast<unsigned char>(ch) <= 127;
  470|  70.6k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  18.2k|{
  474|  18.2k|#if WCHAR_MIN < 0
  475|  18.2k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 16.8k, False: 1.41k]
  |  Branch (475:23): [True: 10.5k, False: 6.23k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  18.2k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  1.42M|{
  539|  1.42M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  1.42M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  6.86M|{
  784|  6.86M|    return e != eof_error::good;
  785|  6.86M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  16.0k|{
  798|  16.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  16.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  16.0k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  16.0k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   115M|{
 1200|       |    // Pattern_White_Space property
 1201|   115M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 25.5M, False: 89.7M]
  |  Branch (1201:27): [True: 3.72M, False: 21.8M]
  ------------------
 1202|   115M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 4.11M, False: 107M]
  ------------------
 1203|   115M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 721k, False: 106M]
  ------------------
 1204|   115M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 284k, False: 106M]
  ------------------
 1205|   115M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 352k, False: 106M]
  ------------------
 1206|   115M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 207k, False: 105M]
  ------------------
 1207|   115M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 180, False: 105M]
  ------------------
 1208|   115M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  1.69M|{
 6008|  1.69M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 1.69M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  1.69M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 1.69M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  1.69M|    return {};
 6023|  1.69M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   720k|    {
  304|   720k|        ranges::advance(x, n);
  305|   720k|        return x;
  306|   720k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   720k|    {
  268|   720k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   720k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   720k|    {
  151|   720k|        i += n;
  152|   720k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.68M|    {
  108|  1.68M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.68M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.68M|    {
   87|  1.68M|        return s - i;
   88|  1.68M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  2.44M|    {
  108|  2.44M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  2.44M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  2.44M|    {
   87|  2.44M|        return s - i;
   88|  2.44M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   223k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   223k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   223k|        auto beg = r.begin();
  990|   223k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 223k, False: 0]
  ------------------
  991|   223k|            return false;
  992|   223k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   223k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  62.2k|    {
  763|  62.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  62.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  62.2k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  12.0k|        : m_fptr([](storage fn,
  743|  12.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.0k|              cvref<T> obj = *get<T>(fn);
  745|  12.0k|              if constexpr (std::is_void_v<R>) {
  746|  12.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.0k|              }
  748|  12.0k|              else {
  749|  12.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.0k|              }
  751|  12.0k|          }),
  752|  12.0k|          m_storage(std::addressof(f))
  753|  12.0k|    {
  754|  12.0k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  31.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  31.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  31.1k|              else {
  749|  31.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  31.1k|              }
  751|  31.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  31.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  31.1k|        else if constexpr (std::is_object_v<T>) {
  688|  31.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  31.1k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  12.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  12.0k|        {
  662|  12.0k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|   123M|    {
  763|   123M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|   123M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|   123M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  3.90M|        : m_fptr([](storage fn,
  743|  3.90M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.90M|              cvref<T> obj = *get<T>(fn);
  745|  3.90M|              if constexpr (std::is_void_v<R>) {
  746|  3.90M|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.90M|              }
  748|  3.90M|              else {
  749|  3.90M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.90M|              }
  751|  3.90M|          }),
  752|  3.90M|          m_storage(std::addressof(f))
  753|  3.90M|    {
  754|  3.90M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  9.22M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.22M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.22M|              else {
  749|  9.22M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.22M|              }
  751|  9.22M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  9.22M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  9.22M|        else if constexpr (std::is_object_v<T>) {
  688|  9.22M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.22M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  3.90M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  3.90M|        {
  662|  3.90M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  91.9k|    {
 6037|  91.9k|        const bool need_skipped_width =
 6038|  91.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 91.9k]
  |  Branch (6038:33): [True: 0, False: 91.9k]
  ------------------
 6039|  91.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  91.9k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 91.9k]
  ------------------
 6043|  91.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 91.9k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  91.9k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 91.9k, False: 0]
  |  Branch (6047:56): [True: 87.9k, False: 4.01k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  87.9k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 87.9k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   174k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  87.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  87.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  87.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  87.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.19k, False: 86.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.19k|    }                                                  \
  |  |  |  | 3671|  87.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  86.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   174k|                            make_eof_scan_error));
 6058|       |
 6059|   174k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 86.7k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  86.7k|            return result_type{it, 0};
 6067|   174k|        }
 6068|       |
 6069|  4.01k|        return result_type{rng.begin(), 0};
 6070|  91.9k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  4.01k|{
 1976|  4.01k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  4.01k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  4.01k|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  4.01k|    else {
 1961|  4.01k|        auto first = range.begin();
 1962|  10.4k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 10.3k, False: 68]
  ------------------
 1963|  10.3k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 3.95k, False: 6.43k]
  ------------------
 1964|  3.95k|                return first;
 1965|  3.95k|            }
 1966|  10.3k|        }
 1967|     68|        return first;
 1968|  4.01k|    }
 1969|  4.01k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  86.4k|    {
  108|  86.4k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  86.4k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  86.4k|    {
   94|  86.4k|        iter_difference_t<I> counter{0};
   95|   989k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 903k, False: 86.4k]
  ------------------
   96|   903k|            ++i;
   97|   903k|            ++counter;
   98|   903k|        }
   99|  86.4k|        return counter;
  100|  86.4k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   349k|{
  950|   349k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   349k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.78k, False: 346k]
  |  |  ------------------
  ------------------
  951|  2.78k|        return eof_error::eof;
  952|  2.78k|    }
  953|   346k|    return eof_error::good;
  954|   349k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  2.74M|{
  944|  2.74M|    return is_range_eof(r.begin(), r.end());
  945|  2.74M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  2.74M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.74M|    {
  937|  2.74M|        return begin == end;
  938|  2.74M|    }
  939|  2.74M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|   217k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|       |                  ranges::sized_range<Range>) {
 1686|       |        return string_view_wrapper{SCN_FWD(range)};
 1687|       |    }
 1688|   217k|    else {
 1689|   217k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   217k|    }
 1691|   217k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1536|   217k|    {
 1537|   217k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   217k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   217k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|   217k|    {
 1621|   217k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|   217k|                           ranges::common_range<Range>) {
 1638|   217k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   217k|            auto end_seg = range.end().contiguous_segment();
 1640|   217k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   217k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.67k, False: 212k]
  |  |  ------------------
  ------------------
 1641|   217k|                             detail::to_address(end_seg.end()))) {
 1642|  4.67k|                auto& str = m_storage.emplace();
 1643|  4.67k|                str.reserve(range.end().position() - range.begin().position());
 1644|  4.67k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  4.67k|                m_view = string_view_type{str};
 1646|  4.67k|                return;
 1647|  4.67k|            }
 1648|       |
 1649|   212k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   212k|                                                            end_seg.data());
 1651|   212k|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|   217k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   428k|    {
 1582|   428k|        return m_view;
 1583|   428k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|   217k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  85.7k|    {
 6079|  85.7k|        const bool need_skipped_width =
 6080|  85.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 85.7k]
  |  Branch (6080:33): [True: 0, False: 85.7k]
  ------------------
 6081|  85.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  85.7k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 85.7k]
  ------------------
 6084|  85.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 85.7k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  85.7k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 85.7k, False: 0]
  ------------------
 6093|  85.7k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.21k, False: 84.5k]
  ------------------
 6094|  85.7k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 1.21k]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|  1.21k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 1.21k]
  ------------------
 6096|  1.21k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  85.7k|        return result_type{rng.begin(), 0};
 6118|  85.7k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   579k|{
  950|   579k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   579k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.33k, False: 575k]
  |  |  ------------------
  ------------------
  951|  4.33k|        return eof_error::eof;
  952|  4.33k|    }
  953|   575k|    return eof_error::good;
  954|   579k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   579k|{
  944|   579k|    return is_range_eof(r.begin(), r.end());
  945|   579k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   579k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   579k|    {
  937|   579k|        return begin == end;
  938|   579k|    }
  939|   579k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   361k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|   361k|                  ranges::sized_range<Range>) {
 1686|   361k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|   361k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1488|   361k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|   361k|    {
 1490|   361k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  1.97M|    {
 1503|  1.97M|        return sv;
 1504|  1.97M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  8.03k|{
 1976|  8.03k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  8.03k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  8.03k|{
 1957|  8.03k|    if constexpr (ranges::common_range<Range>) {
 1958|  8.03k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|  8.03k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   361k|{
 2951|   361k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 361k, False: 0]
  ------------------
 2952|   361k|        auto it = read_while_classic_space(range);
 2953|   361k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   361k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.59k, False: 359k]
  |  |  ------------------
  ------------------
 2955|  2.59k|            return unexpected(e);
 2956|  2.59k|        }
 2957|       |
 2958|   359k|        return it;
 2959|   361k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   361k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   361k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|   361k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|   361k|        auto buf = make_contiguous_buffer(range);
 2121|   361k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   361k|        return ranges::next(range.begin(),
 2123|   361k|                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|       |    else {
 2126|       |        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|       |        return read_while_code_point(
 2138|       |            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|       |    }
 2140|   361k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   720k|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|   720k|                  ranges::sized_range<Range>) {
 1686|   720k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   720k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|   720k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1488|   720k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|   720k|    {
 1490|   720k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  16.7k|    {
  304|  16.7k|        ranges::advance(x, n);
  305|  16.7k|        return x;
  306|  16.7k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   434k|    {
  268|   434k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   434k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   434k|    {
  181|   799k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 365k, False: 434k]
  ------------------
  182|   365k|            ++i;
  183|   365k|        }
  184|   434k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|   216k|    {
 1587|   216k|        return m_storage.has_value();
 1588|   216k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  2.89k|    {
 1592|  2.89k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  2.89k|        return *m_storage;
 1594|  2.89k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|  94.7k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|  94.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  94.7k|            auto rd = make_reader<T, char_type>();
 6206|  94.7k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  94.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 91.9k]
  |  |  ------------------
  ------------------
 6207|  2.76k|                return unexpected(e);
 6208|  2.76k|            }
 6209|       |
 6210|  91.9k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 91.9k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  91.9k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  91.9k|                return impl(rd, range, value);
 6213|  91.9k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  94.7k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|   414k|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|       |                       std::is_same_v<T, std::wstring_view>) {
 5823|       |        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|   414k|                       std::is_same_v<T, std::wstring>) {
 5827|   414k|        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|   414k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|   602k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   253k|    {
 3040|   253k|        reader_error_handler eh{};
 3041|   253k|        get_derived().check_specs_impl(specs, eh);
 3042|   253k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   253k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.30k, False: 245k]
  |  |  ------------------
  ------------------
 3043|  8.30k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  8.30k|        }
 3045|   245k|        return {};
 3046|   253k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   253k|    {
 3051|   253k|        return static_cast<Derived&>(*this);
 3052|   253k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   253k|    {
 5210|   253k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   253k|        SCN_GCC_PUSH
 5213|   253k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   253k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   253k|        SCN_CLANG_PUSH
 5217|   253k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   253k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   253k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 253k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 253k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   233k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 233k, False: 20.3k]
  ------------------
 5226|   233k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 233k]
  ------------------
 5227|   233k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 233k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   233k|                else {
 5231|   233k|                    m_type = reader_type::word;
 5232|   233k|                }
 5233|   233k|                break;
 5234|      0|            }
 5235|       |
 5236|  8.30k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 8.30k, False: 245k]
  ------------------
 5237|  8.30k|                m_type = reader_type::character;
 5238|  8.30k|                break;
 5239|       |
 5240|  12.0k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 12.0k, False: 241k]
  ------------------
 5241|  12.0k|                m_type = reader_type::character_set;
 5242|  12.0k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 253k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 253k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   253k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   253k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  91.9k|    {
 6124|  91.9k|        const bool need_skipped_width =
 6125|  91.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 91.9k]
  |  Branch (6125:33): [True: 0, False: 91.9k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  91.9k|        auto it = rng.begin();
 6129|  91.9k|        std::ptrdiff_t prefix_width = 0;
 6130|  91.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 91.9k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  91.9k|        else {
 6138|  91.9k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.19k, False: 90.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.19k|    }                                                  \
  |  |  |  | 3671|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  90.7k|            std::tie(it, prefix_width) = prefix_result;
 6140|  90.7k|        }
 6141|  90.7k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  90.7k|        std::ptrdiff_t value_width = 0;
 6145|  90.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 90.7k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  90.7k|        else {
 6161|  90.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  90.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  90.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  90.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.34k, False: 86.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.34k|    }                                                  \
  |  | 3671|  90.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  90.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  86.4k|                                             specs, value, loc));
 6163|       |
 6164|  86.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 86.4k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  86.4k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  86.4k|        std::ptrdiff_t postfix_width = 0;
 6173|  86.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 85.7k, False: 720]
  ------------------
 6174|  85.7k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  85.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  85.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  85.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  85.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 85.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  85.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  85.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  85.7k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  85.7k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  85.7k|                                 value_width));
 6178|  85.7k|            std::tie(it, postfix_width) = postfix_result;
 6179|  85.7k|        }
 6180|       |
 6181|  86.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  86.4k|                                                 value_width, postfix_width);
 6183|  86.4k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 86.4k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  86.4k|        return it;
 6188|  86.4k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|   821k|    {
 5259|   821k|        return m_type == reader_type::word;
 5260|   821k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   579k|{
 1132|   579k|    auto it = src.begin();
 1133|  4.64M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 4.08M, False: 565k]
  ------------------
 1134|  4.08M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  4.08M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 7.69k, False: 4.07M]
  ------------------
 1136|  7.69k|            return false;
 1137|  7.69k|        }
 1138|  4.07M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 935, False: 4.07M]
  ------------------
 1139|    935|            return false;
 1140|    935|        }
 1141|  4.07M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  4.07M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  4.07M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 5.01k, False: 4.06M]
  ------------------
 1144|  5.01k|            return false;
 1145|  5.01k|        }
 1146|  4.06M|        it += len;
 1147|  4.06M|    }
 1148|   565k|    return true;
 1149|   579k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   213k|{
 2993|   213k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2994|   213k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 2.89k, False: 210k]
  ------------------
 2995|  2.89k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.89k|    static_cast<    \
  |  |  929|  2.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  2.89k|        }
 2997|   210k|        else {
 2998|   210k|            dest.assign(source.view());
 2999|   210k|        }
 3000|       |    }
 3001|       |    else {
 3002|       |        return transcode_impl(source.view(), dest);
 3003|       |    }
 3004|       |
 3005|   213k|    return {};
 3006|   213k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  12.0k|        {
 5103|  12.0k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 12.0k, False: 0]
  ------------------
 5104|  12.0k|                return {};
 5105|  12.0k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  28.9k|        {
 5076|  28.9k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  28.9k|            const auto val =
 5078|  28.9k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  28.9k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  28.9k|                    (val % 8)) &
 5081|  28.9k|                   1u;
 5082|  28.9k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  31.1k|        {
 5129|  31.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 2.22k, False: 28.9k]
  ------------------
 5130|  2.22k|                return false;
 5131|  2.22k|            }
 5132|       |
 5133|  28.9k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  31.1k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  12.0k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  90.7k|    {
 5277|  90.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  90.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  90.7k|        return read_impl(range, specs, value);
 5279|  90.7k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  90.7k|    {
 5295|  90.7k|        SCN_CLANG_PUSH
 5296|  90.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  90.7k|        switch (m_type) {
 5299|  86.7k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 86.7k, False: 4.01k]
  ------------------
 5300|  86.7k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 90.7k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 90.7k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  4.01k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 4.01k, False: 86.7k]
  ------------------
 5310|  4.01k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  4.01k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 90.7k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 90.7k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 90.7k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  90.7k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  90.7k|        }
 5331|       |
 5332|  90.7k|        SCN_CLANG_POP
 5333|  90.7k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|   216k|    {
 4820|   216k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   216k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|   216k|{
 4752|   216k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   216k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   216k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 4.13k, False: 212k]
  ------------------
 4756|  4.13k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  4.13k|                                     "Invalid encoding in scanned string");
 4758|  4.13k|    }
 4759|   212k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   212k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   212k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 212k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   212k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   212k|    static_cast<    \
  |  |  929|   212k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   212k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   216k|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|   216k|    else {
 2097|   216k|        auto it = range.begin();
 2098|       |
 2099|   216k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   216k|            auto seg = get_contiguous_beginning(range);
 2101|   216k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   216k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 216k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|   216k|            ranges::advance(it, seg.size());
 2106|   216k|        }
 2107|       |
 2108|      0|        return read_until_code_point(
 2109|   216k|            ranges::subrange{it, range.end()},
 2110|   216k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   216k|    }
 2112|   216k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   434k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   434k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   434k|        else {
 1054|   434k|            return r.begin().contiguous_segment();
 1055|   434k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   434k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   417k|{
 2061|   417k|    auto it = range.begin();
 2062|  2.40M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 2.39M, False: 5.24k]
  ------------------
 2063|  2.39M|        const auto val =
 2064|  2.39M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  2.39M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  2.39M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 2.36M, False: 27.4k]
  |  |  ------------------
  ------------------
 2066|  2.36M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  2.36M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  2.36M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 412k, False: 1.95M]
  ------------------
 2069|   412k|                return it;
 2070|   412k|            }
 2071|  2.36M|        }
 2072|  1.98M|        it = val.iterator;
 2073|  1.98M|    }
 2074|       |
 2075|  5.24k|    return it;
 2076|   417k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  2.39M|{
 1899|  2.39M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  2.39M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.39M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  2.39M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  2.39M|    auto it = range.begin();
 1903|  2.39M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  2.39M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  2.39M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 27.4k, False: 2.36M]
  |  |  ------------------
  ------------------
 1906|  27.4k|        ++it;
 1907|  27.4k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  27.4k|        return {it, {}};
 1909|  27.4k|    }
 1910|       |
 1911|  2.36M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 2.24M, False: 123k]
  ------------------
 1912|  2.24M|        ++it;
 1913|  2.24M|        return {it, string_type(1, *range.begin())};
 1914|  2.24M|    }
 1915|       |
 1916|   123k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|   123k|    return {it, string_type{range.begin(), it}};
 1918|  2.36M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  27.4k|{
 1155|  27.4k|    auto it = input.begin();
 1156|  69.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 68.5k, False: 707]
  ------------------
 1157|  68.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 26.7k, False: 41.8k]
  ------------------
 1158|  26.7k|            break;
 1159|  26.7k|        }
 1160|  68.5k|    }
 1161|  27.4k|    return it;
 1162|  27.4k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|   123k|    {
  283|   123k|        return n - fn::impl_i_n_s(i, n, bound);
  284|   123k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|   123k|    {
  252|   123k|        constexpr iter_difference_t<I> zero{0};
  253|   123k|        iter_difference_t<I> counter{0};
  254|       |
  255|   465k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 343k, False: 122k]
  |  Branch (255:30): [True: 342k, False: 654]
  ------------------
  256|   342k|            ++i;
  257|   342k|            ++counter;
  258|   342k|        }
  259|       |
  260|   123k|        return counter;
  261|   123k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  2.39M|    {
 1890|  2.39M|        return !codepoint.empty();
 1891|  2.39M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   216k|        : m_fptr([](storage fn,
  743|   216k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   216k|              cvref<T> obj = *get<T>(fn);
  745|   216k|              if constexpr (std::is_void_v<R>) {
  746|   216k|                  obj(static_cast<decltype(args)>(args)...);
  747|   216k|              }
  748|   216k|              else {
  749|   216k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   216k|              }
  751|   216k|          }),
  752|   216k|          m_storage(std::addressof(f))
  753|   216k|    {
  754|   216k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.55M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.55M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.55M|              else {
  749|  1.55M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.55M|              }
  751|  1.55M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.55M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.55M|        else if constexpr (std::is_object_v<T>) {
  688|  1.55M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.55M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  1.55M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   216k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   216k|        {
  662|   216k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  4.01k|    {
 5048|  4.01k|        auto it = read_source_impl(range, {specs});
 5049|  4.01k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 1.25k]
  |  |  ------------------
  ------------------
 5050|  2.76k|            return unexpected(it.error());
 5051|  2.76k|        }
 5052|       |
 5053|  1.25k|        return read_string_impl(range, *it, value);
 5054|  4.01k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  4.01k|    {
 5153|  4.01k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  4.01k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  4.01k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.01k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  4.01k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  4.01k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 4.01k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  4.01k|        const auto cb = [&](SourceCharT ch) {
 5176|  4.01k|            return cb_wrapper.on_ascii_only(ch);
 5177|  4.01k|        };
 5178|       |
 5179|  4.01k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 4.01k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  4.01k|        auto it = read_while_code_unit(range, cb);
 5184|  4.01k|        return check_nonempty(it, range);
 5185|  4.01k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  4.01k|    {
 5191|  4.01k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 2.76k, False: 1.25k]
  ------------------
 5192|  2.76k|            return unexpected_scan_error(
 5193|  2.76k|                scan_error::invalid_scanned_value,
 5194|  2.76k|                "No characters matched in [character set]");
 5195|  2.76k|        }
 5196|       |
 5197|  1.25k|        return it;
 5198|  4.01k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   201k|{
 2082|   201k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   201k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  4.01k|        : m_fptr([](storage fn,
  743|  4.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.01k|              cvref<T> obj = *get<T>(fn);
  745|  4.01k|              if constexpr (std::is_void_v<R>) {
  746|  4.01k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.01k|              }
  748|  4.01k|              else {
  749|  4.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.01k|              }
  751|  4.01k|          }),
  752|  4.01k|          m_storage(std::addressof(f))
  753|  4.01k|    {
  754|  4.01k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  10.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.3k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.3k|              else {
  749|  10.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.3k|              }
  751|  10.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  10.3k|    {
  684|  10.3k|        if constexpr (std::is_const_v<T>) {
  685|  10.3k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.3k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5175|  10.3k|        const auto cb = [&](SourceCharT ch) {
 5176|  10.3k|            return cb_wrapper.on_ascii_only(ch);
 5177|  10.3k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  4.01k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.01k|        {
  667|  4.01k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|  1.25k|{
 4752|  1.25k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.25k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.25k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 1.25k]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|  1.25k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.25k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.25k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.25k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.25k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  75.8k|    {
 5277|  75.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  75.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  75.8k|        return read_impl(range, specs, value);
 5279|  75.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  75.8k|    {
 5295|  75.8k|        SCN_CLANG_PUSH
 5296|  75.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  75.8k|        switch (m_type) {
 5299|  71.8k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 71.8k, False: 4.01k]
  ------------------
 5300|  71.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 75.8k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 75.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  4.01k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 4.01k, False: 71.8k]
  ------------------
 5310|  4.01k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  4.01k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 75.8k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 75.8k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 75.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  75.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  75.8k|        }
 5331|       |
 5332|  75.8k|        SCN_CLANG_POP
 5333|  75.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|   179k|    {
 4820|   179k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   179k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|   179k|{
 4752|   179k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   179k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   179k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 4.75k, False: 174k]
  ------------------
 4756|  4.75k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  4.75k|                                     "Invalid encoding in scanned string");
 4758|  4.75k|    }
 4759|   174k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   174k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   174k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 174k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   174k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   174k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   176k|{
 3012|   176k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3013|   176k|        dest.assign(source.view());
 3014|       |    }
 3015|       |    else {
 3016|       |        return transcode_impl(source.view(), dest);
 3017|       |    }
 3018|       |
 3019|   176k|    return {};
 3020|   176k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   359k|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|   359k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|   359k|        auto buf = make_contiguous_buffer(range);
 2092|   359k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   359k|        return ranges::next(range.begin(),
 2094|   359k|                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|       |    else {
 2097|       |        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|       |        return read_until_code_point(
 2109|       |            ranges::subrange{it, range.end()},
 2110|       |            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|       |    }
 2112|   359k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  4.01k|    {
 5048|  4.01k|        auto it = read_source_impl(range, {specs});
 5049|  4.01k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 1.25k]
  |  |  ------------------
  ------------------
 5050|  2.76k|            return unexpected(it.error());
 5051|  2.76k|        }
 5052|       |
 5053|  1.25k|        return read_string_impl(range, *it, value);
 5054|  4.01k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  8.03k|    {
 5153|  8.03k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  8.03k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  8.03k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.03k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.03k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  8.03k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  8.03k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 8.03k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  8.03k|        const auto cb = [&](SourceCharT ch) {
 5176|  8.03k|            return cb_wrapper.on_ascii_only(ch);
 5177|  8.03k|        };
 5178|       |
 5179|  8.03k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 8.03k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  8.03k|        auto it = read_while_code_unit(range, cb);
 5184|  8.03k|        return check_nonempty(it, range);
 5185|  8.03k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  8.03k|    {
 5191|  8.03k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 5.53k, False: 2.50k]
  ------------------
 5192|  5.53k|            return unexpected_scan_error(
 5193|  5.53k|                scan_error::invalid_scanned_value,
 5194|  5.53k|                "No characters matched in [character set]");
 5195|  5.53k|        }
 5196|       |
 5197|  2.50k|        return it;
 5198|  8.03k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  8.03k|        : m_fptr([](storage fn,
  743|  8.03k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.03k|              cvref<T> obj = *get<T>(fn);
  745|  8.03k|              if constexpr (std::is_void_v<R>) {
  746|  8.03k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.03k|              }
  748|  8.03k|              else {
  749|  8.03k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.03k|              }
  751|  8.03k|          }),
  752|  8.03k|          m_storage(std::addressof(f))
  753|  8.03k|    {
  754|  8.03k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  20.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  20.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  20.7k|              else {
  749|  20.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  20.7k|              }
  751|  20.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  20.7k|    {
  684|  20.7k|        if constexpr (std::is_const_v<T>) {
  685|  20.7k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  20.7k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  20.7k|        const auto cb = [&](SourceCharT ch) {
 5176|  20.7k|            return cb_wrapper.on_ascii_only(ch);
 5177|  20.7k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  8.03k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  8.03k|        {
  667|  8.03k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|  1.25k|{
 4752|  1.25k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.25k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.25k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 1.25k]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|  1.25k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.25k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.25k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.25k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.25k|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|   188k|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|   188k|                       std::is_same_v<T, std::wstring_view>) {
 5823|   188k|        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|       |                       std::is_same_v<T, std::wstring>) {
 5827|       |        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|   188k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  75.8k|    {
 5277|  75.8k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  75.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  75.8k|        return read_impl(range, specs, value);
 5279|  75.8k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  75.8k|    {
 5295|  75.8k|        SCN_CLANG_PUSH
 5296|  75.8k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  75.8k|        switch (m_type) {
 5299|  71.8k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 71.8k, False: 4.01k]
  ------------------
 5300|  71.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 75.8k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 75.8k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  4.01k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 4.01k, False: 71.8k]
  ------------------
 5310|  4.01k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  4.01k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 75.8k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 75.8k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 75.8k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  75.8k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  75.8k|        }
 5331|       |
 5332|  75.8k|        SCN_CLANG_POP
 5333|  75.8k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|   179k|    {
 4827|   179k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|   179k|                                     value);
 4829|   179k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|   179k|{
 4773|   179k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|   179k|    auto src = [&]() {
 4776|   179k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|   179k|            return make_contiguous_buffer(
 4778|   179k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   179k|        }
 4780|   179k|        else {
 4781|   179k|            return make_contiguous_buffer(
 4782|   179k|                ranges::subrange{range.begin(), result});
 4783|   179k|        }
 4784|   179k|    }();
 4785|   179k|    using src_type = decltype(src);
 4786|       |
 4787|   179k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|   179k|    else {
 4800|   179k|        const auto view = src.view();
 4801|   179k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|   179k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 4.75k, False: 174k]
  ------------------
 4804|  4.75k|            return unexpected_scan_error(
 4805|  4.75k|                scan_error::invalid_scanned_value,
 4806|  4.75k|                "Invalid encoding in scanned string_view");
 4807|  4.75k|        }
 4808|       |
 4809|   174k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|   179k|    }
 4811|   179k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|   179k|    auto src = [&]() {
 4776|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|       |            return make_contiguous_buffer(
 4778|       |                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|   179k|        else {
 4781|   179k|            return make_contiguous_buffer(
 4782|   179k|                ranges::subrange{range.begin(), result});
 4783|   179k|        }
 4784|   179k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  4.01k|    {
 5062|  4.01k|        auto it = read_source_impl(range, {specs});
 5063|  4.01k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.01k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 1.25k]
  |  |  ------------------
  ------------------
 5064|  2.76k|            return unexpected(it.error());
 5065|  2.76k|        }
 5066|       |
 5067|  1.25k|        return read_string_view_impl(range, *it, value);
 5068|  4.01k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|  1.25k|{
 4773|  1.25k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.25k|    auto src = [&]() {
 4776|  1.25k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.25k|            return make_contiguous_buffer(
 4778|  1.25k|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.25k|        }
 4780|  1.25k|        else {
 4781|  1.25k|            return make_contiguous_buffer(
 4782|  1.25k|                ranges::subrange{range.begin(), result});
 4783|  1.25k|        }
 4784|  1.25k|    }();
 4785|  1.25k|    using src_type = decltype(src);
 4786|       |
 4787|  1.25k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|  1.25k|    else {
 4800|  1.25k|        const auto view = src.view();
 4801|  1.25k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.25k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 1.25k]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|  1.25k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.25k|    static_cast<    \
  |  |  929|  1.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.25k|    }
 4811|  1.25k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|  1.25k|    auto src = [&]() {
 4776|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|       |            return make_contiguous_buffer(
 4778|       |                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|  1.25k|        else {
 4781|  1.25k|            return make_contiguous_buffer(
 4782|  1.25k|                ranges::subrange{range.begin(), result});
 4783|  1.25k|        }
 4784|  1.25k|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   218k|{
 2951|   218k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 218k, False: 0]
  ------------------
 2952|   218k|        auto it = read_while_classic_space(range);
 2953|   218k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   218k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.74k, False: 216k]
  |  |  ------------------
  ------------------
 2955|  1.74k|            return unexpected(e);
 2956|  1.74k|        }
 2957|       |
 2958|   216k|        return it;
 2959|   218k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   218k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   218k|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|   218k|    else {
 2126|   218k|        auto it = range.begin();
 2127|       |
 2128|   218k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   218k|            auto seg = get_contiguous_beginning(range);
 2130|   218k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   218k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 16.7k, False: 201k]
  ------------------
 2132|  16.7k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  16.7k|            }
 2134|   201k|            ranges::advance(it, seg.size());
 2135|   201k|        }
 2136|       |
 2137|      0|        return read_while_code_point(
 2138|   218k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   218k|    }
 2140|   218k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   201k|        : m_fptr([](storage fn,
  743|   201k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   201k|              cvref<T> obj = *get<T>(fn);
  745|   201k|              if constexpr (std::is_void_v<R>) {
  746|   201k|                  obj(static_cast<decltype(args)>(args)...);
  747|   201k|              }
  748|   201k|              else {
  749|   201k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   201k|              }
  751|   201k|          }),
  752|   201k|          m_storage(std::addressof(f))
  753|   201k|    {
  754|   201k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   810k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   810k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   810k|              else {
  749|   810k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   810k|              }
  751|   810k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   810k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   810k|        else if constexpr (std::is_object_v<T>) {
  688|   810k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   810k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   810k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   201k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   201k|        {
  662|   201k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  1.24M|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  1.24M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  1.24M|        auto beg = r.begin();
  990|  1.24M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 1.24M, False: 0]
  ------------------
  991|  1.24M|            return false;
  992|  1.24M|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  1.24M|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  36.4k|    {
  763|  36.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  36.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  36.4k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  17.0k|        : m_fptr([](storage fn,
  743|  17.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.0k|              cvref<T> obj = *get<T>(fn);
  745|  17.0k|              if constexpr (std::is_void_v<R>) {
  746|  17.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  17.0k|              }
  748|  17.0k|              else {
  749|  17.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.0k|              }
  751|  17.0k|          }),
  752|  17.0k|          m_storage(std::addressof(f))
  753|  17.0k|    {
  754|  17.0k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  18.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  18.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  18.2k|              else {
  749|  18.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  18.2k|              }
  751|  18.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  18.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  18.2k|        else if constexpr (std::is_object_v<T>) {
  688|  18.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  18.2k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  17.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  17.0k|        {
  662|  17.0k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|   500k|    {
 6037|   500k|        const bool need_skipped_width =
 6038|   500k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 500k]
  |  Branch (6038:33): [True: 0, False: 500k]
  ------------------
 6039|   500k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   500k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 500k]
  ------------------
 6043|   500k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 500k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   500k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 500k, False: 0]
  |  Branch (6047:56): [True: 495k, False: 5.67k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   495k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 495k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   988k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   495k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   495k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   495k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   495k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.19k, False: 493k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.19k|    }                                                  \
  |  |  |  | 3671|   495k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   493k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   988k|                            make_eof_scan_error));
 6058|       |
 6059|   988k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 493k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   493k|            return result_type{it, 0};
 6067|   988k|        }
 6068|       |
 6069|  5.67k|        return result_type{rng.begin(), 0};
 6070|   500k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  5.67k|{
 1976|  5.67k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  5.67k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  5.67k|{
 1957|       |    if constexpr (ranges::common_range<Range>) {
 1958|       |        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|  5.67k|    else {
 1961|  5.67k|        auto first = range.begin();
 1962|  6.13k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 6.07k, False: 56]
  ------------------
 1963|  6.07k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 5.61k, False: 456]
  ------------------
 1964|  5.61k|                return first;
 1965|  5.61k|            }
 1966|  6.07k|        }
 1967|     56|        return first;
 1968|  5.67k|    }
 1969|  5.67k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   489k|    {
  108|   489k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   489k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   489k|    {
   94|   489k|        iter_difference_t<I> counter{0};
   95|  14.1M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 13.6M, False: 489k]
  ------------------
   96|  13.6M|            ++i;
   97|  13.6M|            ++counter;
   98|  13.6M|        }
   99|   489k|        return counter;
  100|   489k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.97M|{
  950|  1.97M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.99k, False: 1.97M]
  |  |  ------------------
  ------------------
  951|  2.99k|        return eof_error::eof;
  952|  2.99k|    }
  953|  1.97M|    return eof_error::good;
  954|  1.97M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  39.3M|{
  944|  39.3M|    return is_range_eof(r.begin(), r.end());
  945|  39.3M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  39.3M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  39.3M|    {
  937|  39.3M|        return begin == end;
  938|  39.3M|    }
  939|  39.3M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  1.23M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|       |                  ranges::sized_range<Range>) {
 1686|       |        return string_view_wrapper{SCN_FWD(range)};
 1687|       |    }
 1688|  1.23M|    else {
 1689|  1.23M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  1.23M|    }
 1691|  1.23M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1536|  1.23M|    {
 1537|  1.23M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  1.23M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  1.23M|    {
 1621|  1.23M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|       |        if constexpr (ranges::borrowed_range<Range> &&
 1624|       |                      ranges::contiguous_range<Range> &&
 1625|       |                      ranges::sized_range<Range>) {
 1626|       |            m_storage.reset();
 1627|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1628|       |        }
 1629|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1630|       |                                          std::basic_string<CharT>>) {
 1631|       |            m_storage.emplace(SCN_FWD(range));
 1632|       |            m_view = string_view_type{*m_storage};
 1633|       |        }
 1634|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1635|       |                                          typename detail::basic_scan_buffer<
 1636|       |                                              value_t>::forward_iterator> &&
 1637|  1.23M|                           ranges::common_range<Range>) {
 1638|  1.23M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  1.23M|            auto end_seg = range.end().contiguous_segment();
 1640|  1.23M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.59k, False: 1.22M]
  |  |  ------------------
  ------------------
 1641|  1.23M|                             detail::to_address(end_seg.end()))) {
 1642|  5.59k|                auto& str = m_storage.emplace();
 1643|  5.59k|                str.reserve(range.end().position() - range.begin().position());
 1644|  5.59k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  5.59k|                m_view = string_view_type{str};
 1646|  5.59k|                return;
 1647|  5.59k|            }
 1648|       |
 1649|  1.22M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  1.22M|                                                            end_seg.data());
 1651|  1.22M|            m_storage.reset();
 1652|       |        }
 1653|       |        else {
 1654|       |            auto& str = m_storage.emplace();
 1655|       |            if constexpr (ranges::sized_range<Range>) {
 1656|       |                str.reserve(range.size());
 1657|       |            }
 1658|       |            if constexpr (ranges::common_range<Range>) {
 1659|       |                std::copy(ranges::begin(range), ranges::end(range),
 1660|       |                          std::back_inserter(str));
 1661|       |            }
 1662|       |            else {
 1663|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|       |                     ++it) {
 1665|       |                    str.push_back(*it);
 1666|       |                }
 1667|       |            }
 1668|       |            m_view = string_view_type{str};
 1669|       |        }
 1670|  1.23M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  2.45M|    {
 1582|  2.45M|        return m_view;
 1583|  2.45M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  1.23M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|   488k|    {
 6079|   488k|        const bool need_skipped_width =
 6080|   488k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 488k]
  |  Branch (6080:33): [True: 0, False: 488k]
  ------------------
 6081|   488k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   488k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 488k]
  ------------------
 6084|   488k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 488k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   488k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 488k, False: 0]
  ------------------
 6093|   488k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 110, False: 488k]
  ------------------
 6094|   488k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 110]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|    110|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 110]
  ------------------
 6096|    110|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   488k|        return result_type{rng.begin(), 0};
 6118|   488k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|  74.7M|{
 1899|  74.7M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  74.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  74.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  74.7M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  74.7M|    auto it = range.begin();
 1903|  74.7M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  74.7M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  74.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 74.7M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  74.7M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 74.7M, False: 0]
  ------------------
 1912|  74.7M|        ++it;
 1913|  74.7M|        return {it, string_type(1, *range.begin())};
 1914|  74.7M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  74.7M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  78.7M|{
  944|  78.7M|    return is_range_eof(r.begin(), r.end());
  945|  78.7M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  78.7M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  78.7M|    {
  937|  78.7M|        return begin == end;
  938|  78.7M|    }
  939|  78.7M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|  74.7M|    {
 1890|  74.7M|        return !codepoint.empty();
 1891|  74.7M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  3.95M|{
  950|  3.95M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  3.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.98k, False: 3.95M]
  |  |  ------------------
  ------------------
  951|  5.98k|        return eof_error::eof;
  952|  5.98k|    }
  953|  3.95M|    return eof_error::good;
  954|  3.95M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  2.46M|{
 1683|       |    if constexpr (ranges::borrowed_range<Range> &&
 1684|       |                  ranges::contiguous_range<Range> &&
 1685|  2.46M|                  ranges::sized_range<Range>) {
 1686|  2.46M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|       |    }
 1688|       |    else {
 1689|       |        return contiguous_range_factory{SCN_FWD(range)};
 1690|       |    }
 1691|  2.46M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1488|  2.46M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1489|  2.46M|    {
 1490|  2.46M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  3.69M|    {
 1503|  3.69M|        return sv;
 1504|  3.69M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  11.3k|{
 1976|  11.3k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  11.3k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  11.3k|{
 1957|  11.3k|    if constexpr (ranges::common_range<Range>) {
 1958|  11.3k|        return std::find_if(range.begin(), range.end(), pred);
 1959|       |    }
 1960|       |    else {
 1961|       |        auto first = range.begin();
 1962|       |        for (; first != range.end(); ++first) {
 1963|       |            if (pred(*first)) {
 1964|       |                return first;
 1965|       |            }
 1966|       |        }
 1967|       |        return first;
 1968|       |    }
 1969|  11.3k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  2.47M|{
 2951|  2.47M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 2.47M, False: 0]
  ------------------
 2952|  2.47M|        auto it = read_while_classic_space(range);
 2953|  2.47M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  2.47M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.01k, False: 2.46M]
  |  |  ------------------
  ------------------
 2955|  3.01k|            return unexpected(e);
 2956|  3.01k|        }
 2957|       |
 2958|  2.46M|        return it;
 2959|  2.47M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  2.47M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  2.47M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  2.47M|    else {
 2126|  2.47M|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|  2.47M|        return read_while_code_point(
 2138|  2.47M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  2.47M|    }
 2140|  2.47M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  2.47M|{
 2082|  2.47M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  2.47M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  4.94M|{
 2061|  4.94M|    auto it = range.begin();
 2062|  74.7M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 74.7M, False: 17.8k]
  ------------------
 2063|  74.7M|        const auto val =
 2064|  74.7M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  74.7M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  74.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 74.7M, False: 0]
  |  |  ------------------
  ------------------
 2066|  74.7M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  74.7M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  74.7M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 4.92M, False: 69.8M]
  ------------------
 2069|  4.92M|                return it;
 2070|  4.92M|            }
 2071|  74.7M|        }
 2072|  69.8M|        it = val.iterator;
 2073|  69.8M|    }
 2074|       |
 2075|  17.8k|    return it;
 2076|  4.94M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.47M|        : m_fptr([](storage fn,
  743|  2.47M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.47M|              cvref<T> obj = *get<T>(fn);
  745|  2.47M|              if constexpr (std::is_void_v<R>) {
  746|  2.47M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.47M|              }
  748|  2.47M|              else {
  749|  2.47M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.47M|              }
  751|  2.47M|          }),
  752|  2.47M|          m_storage(std::addressof(f))
  753|  2.47M|    {
  754|  2.47M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  5.60M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.60M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.60M|              else {
  749|  5.60M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.60M|              }
  751|  5.60M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  5.60M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.60M|        else if constexpr (std::is_object_v<T>) {
  688|  5.60M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.60M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|  5.60M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.47M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.47M|        {
  662|  2.47M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  1.22M|    {
 1587|  1.22M|        return m_storage.has_value();
 1588|  1.22M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  1.61k|    {
 1592|  1.61k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  1.61k|        return *m_storage;
 1594|  1.61k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  3.74M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  1.51M|    {
 3040|  1.51M|        reader_error_handler eh{};
 3041|  1.51M|        get_derived().check_specs_impl(specs, eh);
 3042|  1.51M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.51M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.6k, False: 1.50M]
  |  |  ------------------
  ------------------
 3043|  16.6k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  16.6k|        }
 3045|  1.50M|        return {};
 3046|  1.51M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  1.51M|    {
 3051|  1.51M|        return static_cast<Derived&>(*this);
 3052|  1.51M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  1.51M|    {
 5210|  1.51M|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  1.51M|        SCN_GCC_PUSH
 5213|  1.51M|        SCN_GCC_IGNORE("-Wswitch")
 5214|  1.51M|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  1.51M|        SCN_CLANG_PUSH
 5217|  1.51M|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  1.51M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  1.51M|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 1.51M]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 1.51M]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|  1.48M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 1.48M, False: 33.6k]
  ------------------
 5226|  1.48M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 1.48M]
  ------------------
 5227|  1.48M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 1.48M]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|  1.48M|                else {
 5231|  1.48M|                    m_type = reader_type::word;
 5232|  1.48M|                }
 5233|  1.48M|                break;
 5234|      0|            }
 5235|       |
 5236|  16.6k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 16.6k, False: 1.50M]
  ------------------
 5237|  16.6k|                m_type = reader_type::character;
 5238|  16.6k|                break;
 5239|       |
 5240|  17.0k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 17.0k, False: 1.50M]
  ------------------
 5241|  17.0k|                m_type = reader_type::character_set;
 5242|  17.0k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 1.51M]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 1.51M]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|  1.51M|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  1.51M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|  5.19M|    {
 5259|  5.19M|        return m_type == reader_type::word;
 5260|  5.19M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  3.70M|{
 1132|  3.70M|    auto it = src.begin();
 1133|   101M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 97.9M, False: 3.67M]
  ------------------
 1134|  97.9M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  97.9M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 97.9M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  97.9M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 97.9M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  97.9M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  97.9M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  97.9M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 32.5k, False: 97.8M]
  ------------------
 1144|  32.5k|            return false;
 1145|  32.5k|        }
 1146|  97.8M|        it += len;
 1147|  97.8M|    }
 1148|  3.67M|    return true;
 1149|  3.70M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  17.0k|        {
 5103|  17.0k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 17.0k, False: 0]
  ------------------
 5104|  17.0k|                return {};
 5105|  17.0k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  10.5k|        {
 5076|  10.5k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  10.5k|            const auto val =
 5078|  10.5k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  10.5k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  10.5k|                    (val % 8)) &
 5081|  10.5k|                   1u;
 5082|  10.5k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  18.2k|        {
 5129|  18.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 7.64k, False: 10.5k]
  ------------------
 5130|  7.64k|                return false;
 5131|  7.64k|            }
 5132|       |
 5133|  10.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  18.2k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  17.0k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  1.23M|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|  1.23M|    else {
 2097|  1.23M|        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|  1.23M|        return read_until_code_point(
 2109|  1.23M|            ranges::subrange{it, range.end()},
 2110|  1.23M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  1.23M|    }
 2112|  1.23M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  2.47M|{
 2061|  2.47M|    auto it = range.begin();
 2062|  37.3M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 37.3M, False: 8.92k]
  ------------------
 2063|  37.3M|        const auto val =
 2064|  37.3M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  37.3M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  37.3M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 37.3M, False: 0]
  |  |  ------------------
  ------------------
 2066|  37.3M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  37.3M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  37.3M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 2.46M, False: 34.9M]
  ------------------
 2069|  2.46M|                return it;
 2070|  2.46M|            }
 2071|  37.3M|        }
 2072|  34.9M|        it = val.iterator;
 2073|  34.9M|    }
 2074|       |
 2075|  8.92k|    return it;
 2076|  2.47M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  37.3M|{
 1899|  37.3M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  37.3M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  37.3M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  37.3M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  37.3M|    auto it = range.begin();
 1903|  37.3M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  37.3M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  37.3M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 37.3M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|  37.3M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 37.3M, False: 0]
  ------------------
 1912|  37.3M|        ++it;
 1913|  37.3M|        return {it, string_type(1, *range.begin())};
 1914|  37.3M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|  37.3M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|  37.3M|    {
 1890|  37.3M|        return !codepoint.empty();
 1891|  37.3M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.23M|        : m_fptr([](storage fn,
  743|  1.23M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.23M|              cvref<T> obj = *get<T>(fn);
  745|  1.23M|              if constexpr (std::is_void_v<R>) {
  746|  1.23M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.23M|              }
  748|  1.23M|              else {
  749|  1.23M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.23M|              }
  751|  1.23M|          }),
  752|  1.23M|          m_storage(std::addressof(f))
  753|  1.23M|    {
  754|  1.23M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  34.5M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  34.5M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  34.5M|              else {
  749|  34.5M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  34.5M|              }
  751|  34.5M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  34.5M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  34.5M|        else if constexpr (std::is_object_v<T>) {
  688|  34.5M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  34.5M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  34.5M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.23M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.23M|        {
  662|  1.23M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  5.67k|    {
 5153|  5.67k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  5.67k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  5.67k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.67k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  5.67k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  5.67k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 5.67k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  5.67k|        const auto cb = [&](SourceCharT ch) {
 5176|  5.67k|            return cb_wrapper.on_ascii_only(ch);
 5177|  5.67k|        };
 5178|       |
 5179|  5.67k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 5.67k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  5.67k|        auto it = read_while_code_unit(range, cb);
 5184|  5.67k|        return check_nonempty(it, range);
 5185|  5.67k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  5.67k|    {
 5191|  5.67k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 5.53k, False: 138]
  ------------------
 5192|  5.53k|            return unexpected_scan_error(
 5193|  5.53k|                scan_error::invalid_scanned_value,
 5194|  5.53k|                "No characters matched in [character set]");
 5195|  5.53k|        }
 5196|       |
 5197|    138|        return it;
 5198|  5.67k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  1.23M|{
 2082|  1.23M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  1.23M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  5.67k|        : m_fptr([](storage fn,
  743|  5.67k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.67k|              cvref<T> obj = *get<T>(fn);
  745|  5.67k|              if constexpr (std::is_void_v<R>) {
  746|  5.67k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.67k|              }
  748|  5.67k|              else {
  749|  5.67k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.67k|              }
  751|  5.67k|          }),
  752|  5.67k|          m_storage(std::addressof(f))
  753|  5.67k|    {
  754|  5.67k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  6.07k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.07k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.07k|              else {
  749|  6.07k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.07k|              }
  751|  6.07k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  6.07k|    {
  684|  6.07k|        if constexpr (std::is_const_v<T>) {
  685|  6.07k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.07k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5175|  6.07k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.07k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.07k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  5.67k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  5.67k|        {
  667|  5.67k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  2.46M|{
 2088|       |    if constexpr (ranges::contiguous_range<Range> &&
 2089|       |                  ranges::sized_range<Range> &&
 2090|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2091|       |        auto buf = make_contiguous_buffer(range);
 2092|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2093|       |        return ranges::next(range.begin(),
 2094|       |                            ranges::distance(buf.view().begin(), it));
 2095|       |    }
 2096|  2.46M|    else {
 2097|  2.46M|        auto it = range.begin();
 2098|       |
 2099|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|       |            auto seg = get_contiguous_beginning(range);
 2101|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|       |                seg_it != seg.end()) {
 2103|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|       |            }
 2105|       |            ranges::advance(it, seg.size());
 2106|       |        }
 2107|       |
 2108|  2.46M|        return read_until_code_point(
 2109|  2.46M|            ranges::subrange{it, range.end()},
 2110|  2.46M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  2.46M|    }
 2112|  2.46M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  2.46M|        : m_fptr([](storage fn,
  743|  2.46M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.46M|              cvref<T> obj = *get<T>(fn);
  745|  2.46M|              if constexpr (std::is_void_v<R>) {
  746|  2.46M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.46M|              }
  748|  2.46M|              else {
  749|  2.46M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.46M|              }
  751|  2.46M|          }),
  752|  2.46M|          m_storage(std::addressof(f))
  753|  2.46M|    {
  754|  2.46M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  69.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  69.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  69.1M|              else {
  749|  69.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  69.1M|              }
  751|  69.1M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  69.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  69.1M|        else if constexpr (std::is_object_v<T>) {
  688|  69.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  69.1M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|  69.1M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  2.46M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.46M|        {
  662|  2.46M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  11.3k|    {
 5153|  11.3k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  11.3k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  11.3k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  11.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.3k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  11.3k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  11.3k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 11.3k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  11.3k|        const auto cb = [&](SourceCharT ch) {
 5176|  11.3k|            return cb_wrapper.on_ascii_only(ch);
 5177|  11.3k|        };
 5178|       |
 5179|  11.3k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 11.3k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  11.3k|        auto it = read_while_code_unit(range, cb);
 5184|  11.3k|        return check_nonempty(it, range);
 5185|  11.3k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  11.3k|    {
 5191|  11.3k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 11.0k, False: 276]
  ------------------
 5192|  11.0k|            return unexpected_scan_error(
 5193|  11.0k|                scan_error::invalid_scanned_value,
 5194|  11.0k|                "No characters matched in [character set]");
 5195|  11.0k|        }
 5196|       |
 5197|    276|        return it;
 5198|  11.3k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  11.3k|        : m_fptr([](storage fn,
  743|  11.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.3k|              cvref<T> obj = *get<T>(fn);
  745|  11.3k|              if constexpr (std::is_void_v<R>) {
  746|  11.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.3k|              }
  748|  11.3k|              else {
  749|  11.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.3k|              }
  751|  11.3k|          }),
  752|  11.3k|          m_storage(std::addressof(f))
  753|  11.3k|    {
  754|  11.3k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  12.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  12.1k|              else {
  749|  12.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.1k|              }
  751|  12.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  12.1k|    {
  684|  12.1k|        if constexpr (std::is_const_v<T>) {
  685|  12.1k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  12.1k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  12.1k|        const auto cb = [&](SourceCharT ch) {
 5176|  12.1k|            return cb_wrapper.on_ascii_only(ch);
 5177|  12.1k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  11.3k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  11.3k|        {
  667|  11.3k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|   506k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|       |                          basic_contiguous_scan_context<char_type>>) {
 6197|       |            auto rd = make_reader<T, char_type>();
 6198|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|       |                return unexpected(e);
 6200|       |            }
 6201|       |
 6202|       |            return impl(rd, range, value);
 6203|       |        }
 6204|   506k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|   506k|            auto rd = make_reader<T, char_type>();
 6206|   506k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 500k]
  |  |  ------------------
  ------------------
 6207|  5.53k|                return unexpected(e);
 6208|  5.53k|            }
 6209|       |
 6210|   500k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 500k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|   500k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|   500k|                return impl(rd, range, value);
 6213|   500k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   506k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  2.49M|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|       |                       std::is_same_v<T, std::wstring_view>) {
 5823|       |        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  2.49M|                       std::is_same_v<T, std::wstring>) {
 5827|  2.49M|        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|  2.49M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|   500k|    {
 6124|   500k|        const bool need_skipped_width =
 6125|   500k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 500k]
  |  Branch (6125:33): [True: 0, False: 500k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   500k|        auto it = rng.begin();
 6129|   500k|        std::ptrdiff_t prefix_width = 0;
 6130|   500k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 500k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   500k|        else {
 6138|   500k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   500k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   500k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   500k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.19k, False: 499k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.19k|    }                                                  \
  |  |  |  | 3671|   500k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   499k|            std::tie(it, prefix_width) = prefix_result;
 6140|   499k|        }
 6141|   499k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   499k|        std::ptrdiff_t value_width = 0;
 6145|   499k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 499k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   499k|        else {
 6161|   499k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   499k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   499k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 9.87k, False: 489k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  9.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  9.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  9.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  9.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  9.87k|    }                                                  \
  |  | 3671|   499k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   489k|                                             specs, value, loc));
 6163|       |
 6164|   489k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 489k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   489k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   489k|        std::ptrdiff_t postfix_width = 0;
 6173|   489k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 488k, False: 1.01k]
  ------------------
 6174|   488k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   488k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   488k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   488k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 488k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   488k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   488k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   488k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   488k|                                 value_width));
 6178|   488k|            std::tie(it, postfix_width) = postfix_result;
 6179|   488k|        }
 6180|       |
 6181|   489k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   489k|                                                 value_width, postfix_width);
 6183|   489k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 489k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   489k|        return it;
 6188|   489k|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  1.22M|{
 2993|  1.22M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2994|  1.22M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 1.61k, False: 1.22M]
  ------------------
 2995|  1.61k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  1.61k|    static_cast<    \
  |  |  929|  1.61k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  1.61k|        }
 2997|  1.22M|        else {
 2998|  1.22M|            dest.assign(source.view());
 2999|  1.22M|        }
 3000|       |    }
 3001|       |    else {
 3002|       |        return transcode_impl(source.view(), dest);
 3003|       |    }
 3004|       |
 3005|  1.22M|    return {};
 3006|  1.22M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|   499k|    {
 5277|   499k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   499k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   499k|        return read_impl(range, specs, value);
 5279|   499k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|   499k|    {
 5295|   499k|        SCN_CLANG_PUSH
 5296|   499k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   499k|        switch (m_type) {
 5299|   493k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 493k, False: 5.67k]
  ------------------
 5300|   493k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 499k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 499k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  5.67k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 5.67k, False: 493k]
  ------------------
 5310|  5.67k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  5.67k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 499k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 499k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 499k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   499k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   499k|        }
 5331|       |
 5332|   499k|        SCN_CLANG_POP
 5333|   499k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|  1.23M|    {
 4820|  1.23M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.23M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|  1.23M|{
 4752|  1.23M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.23M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.23M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 10.8k, False: 1.22M]
  ------------------
 4756|  10.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  10.8k|                                     "Invalid encoding in scanned string");
 4758|  10.8k|    }
 4759|  1.22M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.22M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.22M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.22M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  5.67k|    {
 5048|  5.67k|        auto it = read_source_impl(range, {specs});
 5049|  5.67k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 138]
  |  |  ------------------
  ------------------
 5050|  5.53k|            return unexpected(it.error());
 5051|  5.53k|        }
 5052|       |
 5053|    138|        return read_string_impl(range, *it, value);
 5054|  5.67k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|    138|{
 4752|    138|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    138|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    138|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 138]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    138|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    138|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    138|    return SCN_MOVE(result);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    138|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|   499k|    {
 5277|   499k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   499k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   499k|        return read_impl(range, specs, value);
 5279|   499k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|   499k|    {
 5295|   499k|        SCN_CLANG_PUSH
 5296|   499k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   499k|        switch (m_type) {
 5299|   493k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 493k, False: 5.67k]
  ------------------
 5300|   493k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 499k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 499k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  5.67k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 5.67k, False: 493k]
  ------------------
 5310|  5.67k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  5.67k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 499k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 499k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 499k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   499k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   499k|        }
 5331|       |
 5332|   499k|        SCN_CLANG_POP
 5333|   499k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  1.23M|    {
 4820|  1.23M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  1.23M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  1.23M|{
 4752|  1.23M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  1.23M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  1.23M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 10.8k, False: 1.22M]
  ------------------
 4756|  10.8k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  10.8k|                                     "Invalid encoding in scanned string");
 4758|  10.8k|    }
 4759|  1.22M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  1.22M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.22M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  1.22M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  1.22M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  1.22M|{
 3012|  1.22M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3013|  1.22M|        dest.assign(source.view());
 3014|       |    }
 3015|       |    else {
 3016|       |        return transcode_impl(source.view(), dest);
 3017|       |    }
 3018|       |
 3019|  1.22M|    return {};
 3020|  1.22M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  5.67k|    {
 5048|  5.67k|        auto it = read_source_impl(range, {specs});
 5049|  5.67k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 138]
  |  |  ------------------
  ------------------
 5050|  5.53k|            return unexpected(it.error());
 5051|  5.53k|        }
 5052|       |
 5053|    138|        return read_string_impl(range, *it, value);
 5054|  5.67k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    138|{
 4752|    138|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    138|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    138|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 138]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    138|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    138|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    138|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 138]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    138|    return SCN_MOVE(result);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    138|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  1.24M|{
 5809|       |    if constexpr (std::is_same_v<T, bool>) {
 5810|       |        return reader_impl_for_bool<CharT>{};
 5811|       |    }
 5812|       |    else if constexpr (std::is_same_v<T, char>) {
 5813|       |        return reader_impl_for_char<CharT>{};
 5814|       |    }
 5815|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5816|       |        return reader_impl_for_wchar<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5819|       |        return reader_impl_for_code_point<CharT>{};
 5820|       |    }
 5821|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5822|  1.24M|                       std::is_same_v<T, std::wstring_view>) {
 5823|  1.24M|        return reader_impl_for_string<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5826|       |                       std::is_same_v<T, std::wstring>) {
 5827|       |        return reader_impl_for_string<CharT>{};
 5828|       |    }
 5829|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|       |                       std::is_same_v<T, wregex_matches>) {
 5831|       |        return reader_impl_for_regex_matches<CharT>{};
 5832|       |    }
 5833|       |    else if constexpr (std::is_same_v<T, void*>) {
 5834|       |        return reader_impl_for_voidptr<CharT>{};
 5835|       |    }
 5836|       |    else if constexpr (std::is_floating_point_v<T>) {
 5837|       |        return reader_impl_for_float<CharT>{};
 5838|       |    }
 5839|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|       |                       !std::is_same_v<T, wchar_t> &&
 5841|       |                       !std::is_same_v<T, char32_t> &&
 5842|       |                       !std::is_same_v<T, bool>) {
 5843|       |        return reader_impl_for_int<CharT>{};
 5844|       |    }
 5845|       |    else {
 5846|       |        return reader_impl_for_monostate<CharT>{};
 5847|       |    }
 5848|  1.24M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|   499k|    {
 5277|   499k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   499k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|   499k|        return read_impl(range, specs, value);
 5279|   499k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|   499k|    {
 5295|   499k|        SCN_CLANG_PUSH
 5296|   499k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|   499k|        switch (m_type) {
 5299|   493k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 493k, False: 5.67k]
  ------------------
 5300|   493k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 499k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 499k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  5.67k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 5.67k, False: 493k]
  ------------------
 5310|  5.67k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  5.67k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 499k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 499k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 499k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|   499k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|   499k|        }
 5331|       |
 5332|   499k|        SCN_CLANG_POP
 5333|   499k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  1.23M|    {
 4827|  1.23M|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  1.23M|                                     value);
 4829|  1.23M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  1.23M|{
 4773|  1.23M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  1.23M|    auto src = [&]() {
 4776|  1.23M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  1.23M|            return make_contiguous_buffer(
 4778|  1.23M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  1.23M|        }
 4780|  1.23M|        else {
 4781|  1.23M|            return make_contiguous_buffer(
 4782|  1.23M|                ranges::subrange{range.begin(), result});
 4783|  1.23M|        }
 4784|  1.23M|    }();
 4785|  1.23M|    using src_type = decltype(src);
 4786|       |
 4787|  1.23M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|  1.23M|    else {
 4800|  1.23M|        const auto view = src.view();
 4801|  1.23M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  1.23M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 10.8k, False: 1.22M]
  ------------------
 4804|  10.8k|            return unexpected_scan_error(
 4805|  10.8k|                scan_error::invalid_scanned_value,
 4806|  10.8k|                "Invalid encoding in scanned string_view");
 4807|  10.8k|        }
 4808|       |
 4809|  1.22M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  1.22M|    static_cast<    \
  |  |  929|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  1.23M|    }
 4811|  1.23M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  1.23M|    auto src = [&]() {
 4776|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|       |            return make_contiguous_buffer(
 4778|       |                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|  1.23M|        else {
 4781|  1.23M|            return make_contiguous_buffer(
 4782|  1.23M|                ranges::subrange{range.begin(), result});
 4783|  1.23M|        }
 4784|  1.23M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  5.67k|    {
 5062|  5.67k|        auto it = read_source_impl(range, {specs});
 5063|  5.67k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  5.67k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 138]
  |  |  ------------------
  ------------------
 5064|  5.53k|            return unexpected(it.error());
 5065|  5.53k|        }
 5066|       |
 5067|    138|        return read_string_view_impl(range, *it, value);
 5068|  5.67k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    138|{
 4773|    138|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    138|    auto src = [&]() {
 4776|    138|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    138|            return make_contiguous_buffer(
 4778|    138|                ranges::subrange{range.begin().base(), result.base()});
 4779|    138|        }
 4780|    138|        else {
 4781|    138|            return make_contiguous_buffer(
 4782|    138|                ranges::subrange{range.begin(), result});
 4783|    138|        }
 4784|    138|    }();
 4785|    138|    using src_type = decltype(src);
 4786|       |
 4787|    138|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4794|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|       |                                     "Cannot read a string_view from "
 4796|       |                                     "this source range (would require "
 4797|       |                                     "transcoding)");
 4798|       |    }
 4799|    138|    else {
 4800|    138|        const auto view = src.view();
 4801|    138|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    138|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 138]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|    138|        return SCN_MOVE(result);
  ------------------
  |  |  928|    138|    static_cast<    \
  |  |  929|    138|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    138|    }
 4811|    138|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    138|    auto src = [&]() {
 4776|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|       |            return make_contiguous_buffer(
 4778|       |                ranges::subrange{range.begin().base(), result.base()});
 4779|       |        }
 4780|    138|        else {
 4781|    138|            return make_contiguous_buffer(
 4782|    138|                ranges::subrange{range.begin(), result});
 4783|    138|        }
 4784|    138|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  1.23M|{
 2951|  1.23M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 1.23M, False: 0]
  ------------------
 2952|  1.23M|        auto it = read_while_classic_space(range);
 2953|  1.23M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  1.23M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.50k, False: 1.23M]
  |  |  ------------------
  ------------------
 2955|  1.50k|            return unexpected(e);
 2956|  1.50k|        }
 2957|       |
 2958|  1.23M|        return it;
 2959|  1.23M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  1.23M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  1.23M|{
 2117|       |    if constexpr (ranges::contiguous_range<Range> &&
 2118|       |                  ranges::sized_range<Range> &&
 2119|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2120|       |        auto buf = make_contiguous_buffer(range);
 2121|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|       |        return ranges::next(range.begin(),
 2123|       |                            ranges::distance(buf.view().begin(), it));
 2124|       |    }
 2125|  1.23M|    else {
 2126|  1.23M|        auto it = range.begin();
 2127|       |
 2128|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|       |            auto seg = get_contiguous_beginning(range);
 2130|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|       |                seg_it != seg.end()) {
 2132|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|       |            }
 2134|       |            ranges::advance(it, seg.size());
 2135|       |        }
 2136|       |
 2137|  1.23M|        return read_while_code_point(
 2138|  1.23M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  1.23M|    }
 2140|  1.23M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  1.23M|        : m_fptr([](storage fn,
  743|  1.23M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.23M|              cvref<T> obj = *get<T>(fn);
  745|  1.23M|              if constexpr (std::is_void_v<R>) {
  746|  1.23M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.23M|              }
  748|  1.23M|              else {
  749|  1.23M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.23M|              }
  751|  1.23M|          }),
  752|  1.23M|          m_storage(std::addressof(f))
  753|  1.23M|    {
  754|  1.23M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.80M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.80M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.80M|              else {
  749|  2.80M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.80M|              }
  751|  2.80M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.80M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.80M|        else if constexpr (std::is_object_v<T>) {
  688|  2.80M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.80M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  2.80M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  1.23M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.23M|        {
  662|  1.23M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   218k|{
 5795|   218k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.73k, False: 216k]
  |  |  ------------------
  ------------------
 5796|  1.73k|        return unexpected(e);
 5797|  1.73k|    }
 5798|       |
 5799|   216k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 216k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   216k|    return skip_classic_whitespace(range);
 5804|   216k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|   109k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   109k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   109k|            auto rd = make_reader<T, char_type>();
 5876|   109k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   109k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|   109k|    {
 5863|   109k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.29k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.29k|    }                                                  \
  |  |  |  | 3671|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   107k|                        .transform_error(make_eof_scan_error));
 5865|   107k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   109k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|   107k|    {
 5266|   107k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   107k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   107k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   107k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|   109k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   109k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   109k|            auto rd = make_reader<T, char_type>();
 5876|   109k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   109k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|   109k|    {
 5863|   109k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   109k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   109k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   109k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.29k, False: 107k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.29k|    }                                                  \
  |  |  |  | 3671|   109k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   107k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   107k|                        .transform_error(make_eof_scan_error));
 5865|   107k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   109k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|   107k|    {
 5266|   107k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   107k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   107k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   107k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   131k|{
 5795|   131k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.04k, False: 130k]
  |  |  ------------------
  ------------------
 5796|  1.04k|        return unexpected(e);
 5797|  1.04k|    }
 5798|       |
 5799|   130k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 130k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   130k|    return skip_classic_whitespace(range);
 5804|   130k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   131k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   131k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   131k|            auto rd = make_reader<T, char_type>();
 5880|   131k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 131k, False: 0]
  ------------------
 5881|   131k|                return impl(rd, range, value);
 5882|   131k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   131k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|   131k|    {
 5863|   131k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   131k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   131k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   131k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   131k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.59k, False: 129k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.59k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.59k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.59k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.59k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.59k|    }                                                  \
  |  |  |  | 3671|   131k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   129k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   129k|                        .transform_error(make_eof_scan_error));
 5865|   129k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   131k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|   129k|    {
 5266|   129k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   129k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   129k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   129k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2875|   170k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   170k|    static_cast<    \
  |  |  929|   170k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|   170k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   170k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   170k|          m_current(m_range.begin())
 2878|   170k|    {
 2879|   170k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   471k|    {
 2883|   471k|        return m_current;
 2884|   471k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   301k|    {
 2888|   301k|        return m_range.end();
 2889|   301k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   142k|    {
 2903|   142k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   142k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   142k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 142k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   142k|        }
 2909|   142k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   142k|    static_cast<    \
  |  |  929|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   142k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   158k|    {
 2893|   158k|        return ranges::subrange{begin(), end()};
 2894|   158k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   153k|    {
 6037|   153k|        const bool need_skipped_width =
 6038|   153k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 153k]
  |  Branch (6038:33): [True: 0, False: 153k]
  ------------------
 6039|   153k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   153k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 153k]
  ------------------
 6043|   153k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 153k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   153k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 153k, False: 0]
  |  Branch (6047:56): [True: 145k, False: 8.03k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   145k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 145k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   288k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   145k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   145k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   145k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.73k, False: 143k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.73k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.73k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.73k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.73k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.73k|    }                                                  \
  |  |  |  | 3671|   145k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   288k|                            make_eof_scan_error));
 6058|       |
 6059|   288k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 143k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   143k|            return result_type{it, 0};
 6067|   288k|        }
 6068|       |
 6069|  8.03k|        return result_type{rng.begin(), 0};
 6070|   153k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   141k|    {
 6079|   141k|        const bool need_skipped_width =
 6080|   141k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 141k]
  |  Branch (6080:33): [True: 0, False: 141k]
  ------------------
 6081|   141k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   141k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 141k]
  ------------------
 6084|   141k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 141k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   141k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 141k, False: 0]
  ------------------
 6093|   141k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 2.43k, False: 138k]
  ------------------
 6094|   141k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 2.43k]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|  2.43k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 2.43k]
  ------------------
 6096|  2.43k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   141k|        return result_type{rng.begin(), 0};
 6118|   141k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  79.4k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  79.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  79.4k|            auto rd = make_reader<T, char_type>();
 6198|  79.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  79.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 76.6k]
  |  |  ------------------
  ------------------
 6199|  2.76k|                return unexpected(e);
 6200|  2.76k|            }
 6201|       |
 6202|  76.6k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  79.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  76.6k|    {
 6124|  76.6k|        const bool need_skipped_width =
 6125|  76.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 76.6k]
  |  Branch (6125:33): [True: 0, False: 76.6k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  76.6k|        auto it = rng.begin();
 6129|  76.6k|        std::ptrdiff_t prefix_width = 0;
 6130|  76.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 76.6k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  76.6k|        else {
 6138|  76.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  76.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  76.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  76.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 866, False: 75.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    866|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    866|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    866|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    866|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    866|    }                                                  \
  |  |  |  | 3671|  76.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  75.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  75.8k|        }
 6141|  75.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  75.8k|        std::ptrdiff_t value_width = 0;
 6145|  75.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 75.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  75.8k|        else {
 6161|  75.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  75.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  75.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.67k, False: 71.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.67k|    }                                                  \
  |  | 3671|  75.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  75.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  71.1k|                                             specs, value, loc));
 6163|       |
 6164|  71.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 71.1k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  71.1k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  71.1k|        std::ptrdiff_t postfix_width = 0;
 6173|  71.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 70.5k, False: 612]
  ------------------
 6174|  70.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  70.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  70.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  70.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 70.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  70.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  70.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  70.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  70.5k|                                 value_width));
 6178|  70.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  70.5k|        }
 6180|       |
 6181|  71.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  71.1k|                                                 value_width, postfix_width);
 6183|  71.1k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 71.1k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  71.1k|        return it;
 6188|  71.1k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  79.4k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|  79.4k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  79.4k|            auto rd = make_reader<T, char_type>();
 6198|  79.4k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  79.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.76k, False: 76.6k]
  |  |  ------------------
  ------------------
 6199|  2.76k|                return unexpected(e);
 6200|  2.76k|            }
 6201|       |
 6202|  76.6k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|  79.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  76.6k|    {
 6124|  76.6k|        const bool need_skipped_width =
 6125|  76.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 76.6k]
  |  Branch (6125:33): [True: 0, False: 76.6k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  76.6k|        auto it = rng.begin();
 6129|  76.6k|        std::ptrdiff_t prefix_width = 0;
 6130|  76.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 76.6k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  76.6k|        else {
 6138|  76.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  76.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  76.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  76.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  76.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 866, False: 75.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    866|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    866|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    866|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    866|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    866|    }                                                  \
  |  |  |  | 3671|  76.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  75.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  75.8k|            std::tie(it, prefix_width) = prefix_result;
 6140|  75.8k|        }
 6141|  75.8k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  75.8k|        std::ptrdiff_t value_width = 0;
 6145|  75.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 75.8k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  75.8k|        else {
 6161|  75.8k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  75.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  75.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  75.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.67k, False: 71.1k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.67k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.67k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.67k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.67k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.67k|    }                                                  \
  |  | 3671|  75.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  75.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  71.1k|                                             specs, value, loc));
 6163|       |
 6164|  71.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 71.1k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  71.1k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  71.1k|        std::ptrdiff_t postfix_width = 0;
 6173|  71.1k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 70.5k, False: 612]
  ------------------
 6174|  70.5k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  70.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  70.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  70.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 70.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  70.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  70.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  70.5k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  70.5k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  70.5k|                                 value_width));
 6178|  70.5k|            std::tie(it, postfix_width) = postfix_result;
 6179|  70.5k|        }
 6180|       |
 6181|  71.1k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  71.1k|                                                 value_width, postfix_width);
 6183|  71.1k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 71.1k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  71.1k|        return it;
 6188|  71.1k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  1.48M|{
 5795|  1.48M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.96k, False: 1.48M]
  |  |  ------------------
  ------------------
 5796|  2.96k|        return unexpected(e);
 5797|  2.96k|    }
 5798|       |
 5799|  1.48M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 1.48M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  1.48M|    return skip_classic_whitespace(range);
 5804|  1.48M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|   742k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   742k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   742k|            auto rd = make_reader<T, char_type>();
 5876|   742k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   742k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|   742k|    {
 5863|   742k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   742k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   742k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   742k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.79k, False: 740k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.79k|    }                                                  \
  |  |  |  | 3671|   742k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   740k|                        .transform_error(make_eof_scan_error));
 5865|   740k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   742k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|   740k|    {
 5266|   740k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   740k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   740k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   740k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|   742k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|   742k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   742k|            auto rd = make_reader<T, char_type>();
 5876|   742k|            return impl(rd, range, value);
 5877|       |        }
 5878|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5879|       |            auto rd = make_reader<T, char_type>();
 5880|       |            if (!is_segment_contiguous(range)) {
 5881|       |                return impl(rd, range, value);
 5882|       |            }
 5883|       |            auto crange = get_as_contiguous(range);
 5884|       |            SCN_TRY(it, impl(rd, crange, value));
 5885|       |            return ranges::next(range.begin(),
 5886|       |                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   742k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|   742k|    {
 5863|   742k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   742k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   742k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   742k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.79k, False: 740k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.79k|    }                                                  \
  |  |  |  | 3671|   742k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   740k|                        .transform_error(make_eof_scan_error));
 5865|   740k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   742k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|   740k|    {
 5266|   740k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   740k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   740k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   740k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2875|  1.03M|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  1.03M|    static_cast<    \
  |  |  929|  1.03M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2876|  1.03M|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  1.03M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  1.03M|          m_current(m_range.begin())
 2878|  1.03M|    {
 2879|  1.03M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  3.02M|    {
 2883|  3.02M|        return m_current;
 2884|  3.02M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  1.99M|    {
 2888|  1.99M|        return m_range.end();
 2889|  1.99M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|   979k|    {
 2903|   979k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   979k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   979k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   979k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2905|   979k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 979k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   979k|        }
 2909|   979k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   979k|    static_cast<    \
  |  |  929|   979k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   979k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  1.01M|    {
 2893|  1.01M|        return ranges::subrange{begin(), end()};
 2894|  1.01M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  1.00M|    {
 6037|  1.00M|        const bool need_skipped_width =
 6038|  1.00M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 1.00M]
  |  Branch (6038:33): [True: 0, False: 1.00M]
  ------------------
 6039|  1.00M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  1.00M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 1.00M]
  ------------------
 6043|  1.00M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 1.00M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  1.00M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 1.00M, False: 0]
  |  Branch (6047:56): [True: 990k, False: 11.3k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   990k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 990k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  1.97M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   990k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   990k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   990k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   990k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.39k, False: 987k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.39k|    }                                                  \
  |  |  |  | 3671|   990k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   987k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  1.97M|                            make_eof_scan_error));
 6058|       |
 6059|  1.97M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 987k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   987k|            return result_type{it, 0};
 6067|  1.97M|        }
 6068|       |
 6069|  11.3k|        return result_type{rng.begin(), 0};
 6070|  1.00M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   977k|    {
 6079|   977k|        const bool need_skipped_width =
 6080|   977k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 977k]
  |  Branch (6080:33): [True: 0, False: 977k]
  ------------------
 6081|   977k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   977k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 977k]
  ------------------
 6084|   977k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 977k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   977k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 977k, False: 0]
  ------------------
 6093|   977k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 220, False: 977k]
  ------------------
 6094|   977k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 220]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|    220|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 220]
  ------------------
 6096|    220|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   977k|        return result_type{rng.begin(), 0};
 6118|   977k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|   506k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   506k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   506k|            auto rd = make_reader<T, char_type>();
 6198|   506k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 500k]
  |  |  ------------------
  ------------------
 6199|  5.53k|                return unexpected(e);
 6200|  5.53k|            }
 6201|       |
 6202|   500k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   506k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|   500k|    {
 6124|   500k|        const bool need_skipped_width =
 6125|   500k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 500k]
  |  Branch (6125:33): [True: 0, False: 500k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   500k|        auto it = rng.begin();
 6129|   500k|        std::ptrdiff_t prefix_width = 0;
 6130|   500k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 500k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   500k|        else {
 6138|   500k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   500k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   500k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   500k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.19k, False: 499k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.19k|    }                                                  \
  |  |  |  | 3671|   500k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   499k|            std::tie(it, prefix_width) = prefix_result;
 6140|   499k|        }
 6141|   499k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   499k|        std::ptrdiff_t value_width = 0;
 6145|   499k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 499k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   499k|        else {
 6161|   499k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   499k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   499k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 9.87k, False: 489k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  9.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  9.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  9.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  9.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  9.87k|    }                                                  \
  |  | 3671|   499k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   489k|                                             specs, value, loc));
 6163|       |
 6164|   489k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 489k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   489k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   489k|        std::ptrdiff_t postfix_width = 0;
 6173|   489k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 488k, False: 1.01k]
  ------------------
 6174|   488k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   488k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   488k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   488k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 488k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   488k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   488k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   488k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   488k|                                 value_width));
 6178|   488k|            std::tie(it, postfix_width) = postfix_result;
 6179|   488k|        }
 6180|       |
 6181|   489k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   489k|                                                 value_width, postfix_width);
 6183|   489k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 489k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   489k|        return it;
 6188|   489k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|   506k|    {
 6193|       |        if constexpr (!detail::is_type_disabled<T> &&
 6194|       |                      std::is_same_v<
 6195|       |                          context_type,
 6196|   506k|                          basic_contiguous_scan_context<char_type>>) {
 6197|   506k|            auto rd = make_reader<T, char_type>();
 6198|   506k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   506k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.53k, False: 500k]
  |  |  ------------------
  ------------------
 6199|  5.53k|                return unexpected(e);
 6200|  5.53k|            }
 6201|       |
 6202|   500k|            return impl(rd, range, value);
 6203|       |        }
 6204|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6205|       |            auto rd = make_reader<T, char_type>();
 6206|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|       |                return unexpected(e);
 6208|       |            }
 6209|       |
 6210|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|       |                specs.width != 0) {
 6212|       |                return impl(rd, range, value);
 6213|       |            }
 6214|       |
 6215|       |            auto crange = get_as_contiguous(range);
 6216|       |            SCN_TRY(it, impl(rd, crange, value));
 6217|       |            return ranges::next(range.begin(),
 6218|       |                                ranges::distance(crange.begin(), it));
 6219|       |        }
 6220|       |        else {
 6221|       |            SCN_EXPECT(false);
 6222|       |            SCN_UNREACHABLE;
 6223|       |        }
 6224|   506k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|   500k|    {
 6124|   500k|        const bool need_skipped_width =
 6125|   500k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 500k]
  |  Branch (6125:33): [True: 0, False: 500k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|   500k|        auto it = rng.begin();
 6129|   500k|        std::ptrdiff_t prefix_width = 0;
 6130|   500k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 500k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|   500k|        else {
 6138|   500k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|   500k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   500k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   500k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.19k, False: 499k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.19k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.19k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.19k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.19k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.19k|    }                                                  \
  |  |  |  | 3671|   500k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|   499k|            std::tie(it, prefix_width) = prefix_result;
 6140|   499k|        }
 6141|   499k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|   499k|        std::ptrdiff_t value_width = 0;
 6145|   499k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 499k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|   499k|        else {
 6161|   499k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|   499k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|   499k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   499k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 9.87k, False: 489k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  9.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  9.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  9.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  9.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  9.87k|    }                                                  \
  |  | 3671|   499k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   499k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|   489k|                                             specs, value, loc));
 6163|       |
 6164|   489k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 489k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|   489k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|   489k|        std::ptrdiff_t postfix_width = 0;
 6173|   489k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 488k, False: 1.01k]
  ------------------
 6174|   488k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|   488k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   488k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   488k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 488k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|   488k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   488k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|   488k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|   488k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|   488k|                                 value_width));
 6178|   488k|            std::tie(it, postfix_width) = postfix_result;
 6179|   488k|        }
 6180|       |
 6181|   489k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|   489k|                                                 value_width, postfix_width);
 6183|   489k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 489k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|   489k|        return it;
 6188|   489k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   742k|{
 5795|   742k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.48k, False: 741k]
  |  |  ------------------
  ------------------
 5796|  1.48k|        return unexpected(e);
 5797|  1.48k|    }
 5798|       |
 5799|   741k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 741k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   741k|    return skip_classic_whitespace(range);
 5804|   741k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|   742k|    {
 5871|       |        if constexpr (!detail::is_type_disabled<T> &&
 5872|       |                      std::is_same_v<
 5873|       |                          context_type,
 5874|       |                          basic_contiguous_scan_context<char_type>>) {
 5875|       |            auto rd = make_reader<T, char_type>();
 5876|       |            return impl(rd, range, value);
 5877|       |        }
 5878|   742k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   742k|            auto rd = make_reader<T, char_type>();
 5880|   742k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 742k, False: 0]
  ------------------
 5881|   742k|                return impl(rd, range, value);
 5882|   742k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|       |        }
 5888|       |        else {
 5889|       |            SCN_EXPECT(false);
 5890|       |            SCN_UNREACHABLE;
 5891|       |        }
 5892|   742k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|   742k|    {
 5863|   742k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   742k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   742k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   742k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.79k, False: 740k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.79k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.79k|    }                                                  \
  |  |  |  | 3671|   742k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   740k|                        .transform_error(make_eof_scan_error));
 5865|   740k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   742k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|   740k|    {
 5266|   740k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   740k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   740k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   740k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  1.38k|{
   52|  1.38k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  1.38k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.38k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.38k|    string_buffer.resize(size);
   56|  1.38k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  1.38k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  1.38k|    const auto wsv_reinterpret_size =
   61|  1.38k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 220, False: 1.16k]
  ------------------
   62|  1.38k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  1.38k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  1.38k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  1.38k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  1.38k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  1.38k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  1.38k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.38k|{
  122|  1.38k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.38k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.38k|    buf.resize(sizeof...(Args));
  125|  1.38k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.38k|    return buf;
  127|  1.38k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  1.38k|{
  108|  1.38k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  1.38k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  1.38k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.38k|{
  185|  1.38k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.38k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.38k|                                   format_strings);
  188|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.38k|{
  133|       |    // Regular scan
  134|  8.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.30k, False: 1.38k]
  ------------------
  135|  8.30k|        auto it = scn::ranges::begin(source);
  136|  78.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  78.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  78.8k|            auto result = scn::scan<T>(
  139|  78.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  78.8k|                scn::runtime_format(f));
  141|  78.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 8.30k, False: 70.5k]
  ------------------
  142|  8.30k|                break;
  143|  8.30k|            }
  144|  70.5k|            it = result->begin();
  145|  70.5k|        }
  146|  8.30k|    }
  147|       |
  148|       |    // scan localized
  149|  8.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 8.30k, False: 1.38k]
  ------------------
  150|  8.30k|        auto it = scn::ranges::begin(source);
  151|  78.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  78.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  78.8k|            auto result = scn::scan<T>(
  154|  78.8k|                global_locale,
  155|  78.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  78.8k|                scn::runtime_format(f));
  157|  78.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 8.30k, False: 70.5k]
  ------------------
  158|  8.30k|                break;
  159|  8.30k|            }
  160|  70.5k|            it = result->begin();
  161|  70.5k|        }
  162|  8.30k|    }
  163|       |
  164|       |    // scan_value
  165|  1.38k|    {
  166|  1.38k|        auto it = scn::ranges::begin(source);
  167|  36.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.3k|            auto result = scn::scan_value<T>(
  170|  36.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.38k, False: 34.9k]
  ------------------
  172|  1.38k|                break;
  173|  1.38k|            }
  174|  34.9k|            it = result->begin();
  175|  34.9k|        }
  176|  1.38k|    }
  177|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.38k|{
  133|       |    // Regular scan
  134|  8.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.30k, False: 1.38k]
  ------------------
  135|  8.30k|        auto it = scn::ranges::begin(source);
  136|  78.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  78.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  78.8k|            auto result = scn::scan<T>(
  139|  78.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  78.8k|                scn::runtime_format(f));
  141|  78.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 8.30k, False: 70.5k]
  ------------------
  142|  8.30k|                break;
  143|  8.30k|            }
  144|  70.5k|            it = result->begin();
  145|  70.5k|        }
  146|  8.30k|    }
  147|       |
  148|       |    // scan localized
  149|  8.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 8.30k, False: 1.38k]
  ------------------
  150|  8.30k|        auto it = scn::ranges::begin(source);
  151|  78.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  78.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  78.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  78.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  78.8k|            auto result = scn::scan<T>(
  154|  78.8k|                global_locale,
  155|  78.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  78.8k|                scn::runtime_format(f));
  157|  78.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 8.30k, False: 70.5k]
  ------------------
  158|  8.30k|                break;
  159|  8.30k|            }
  160|  70.5k|            it = result->begin();
  161|  70.5k|        }
  162|  8.30k|    }
  163|       |
  164|       |    // scan_value
  165|  1.38k|    {
  166|  1.38k|        auto it = scn::ranges::begin(source);
  167|  36.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  36.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  36.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  36.3k|            auto result = scn::scan_value<T>(
  170|  36.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  36.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.38k, False: 34.9k]
  ------------------
  172|  1.38k|                break;
  173|  1.38k|            }
  174|  34.9k|            it = result->begin();
  175|  34.9k|        }
  176|  1.38k|    }
  177|  1.38k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.38k|{
  133|       |    // Regular scan
  134|  8.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 8.30k, False: 1.38k]
  ------------------
  135|  8.30k|        auto it = scn::ranges::begin(source);
  136|  93.8k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  93.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  93.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  93.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  93.8k|            auto result = scn::scan<T>(
  139|  93.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  93.8k|                scn::runtime_format(f));
  141|  93.8k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 8.30k, False: 85.5k]
  ------------------
  142|  8.30k|                break;
  143|  8.30k|            }
  144|  85.5k|            it = result->begin();
  145|  85.5k|        }
  146|  8.30k|    }
  147|       |
  148|       |    // scan localized
  149|  8.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 8.30k, False: 1.38k]
  ------------------
  150|  8.30k|        auto it = scn::ranges::begin(source);
  151|  93.8k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  93.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  93.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  93.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  93.8k|            auto result = scn::scan<T>(
  154|  93.8k|                global_locale,
  155|  93.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  93.8k|                scn::runtime_format(f));
  157|  93.8k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 8.30k, False: 85.5k]
  ------------------
  158|  8.30k|                break;
  159|  8.30k|            }
  160|  85.5k|            it = result->begin();
  161|  85.5k|        }
  162|  8.30k|    }
  163|       |
  164|       |    // scan_value
  165|  1.38k|    {
  166|  1.38k|        auto it = scn::ranges::begin(source);
  167|  43.7k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  43.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  43.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  43.7k|            auto result = scn::scan_value<T>(
  170|  43.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  43.7k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.38k, False: 42.3k]
  ------------------
  172|  1.38k|                break;
  173|  1.38k|            }
  174|  42.3k|            it = result->begin();
  175|  42.3k|        }
  176|  1.38k|    }
  177|  1.38k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  1.38k|{
   90|  1.38k|    using char_type = ranges::range_value_t<Source>;
   91|  1.38k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.38k|    deque.clear();
   93|  1.38k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.38k|              std::back_inserter(deque));
   95|  1.38k|    return deque;
   96|  1.38k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  1.38k|{
   79|  1.38k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  1.38k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  1.38k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.38k|{
  122|  1.38k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.38k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.38k|    buf.resize(sizeof...(Args));
  125|  1.38k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.38k|    return buf;
  127|  1.38k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  1.38k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  1.38k|    else {
  112|  1.38k|        return wformat_string_view_buffer;
  113|  1.38k|    }
  114|  1.38k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.76k|{
  185|  2.76k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.76k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.76k|                                   format_strings);
  188|  2.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.76k|{
  133|       |    // Regular scan
  134|  16.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.6k, False: 2.76k]
  ------------------
  135|  16.6k|        auto it = scn::ranges::begin(source);
  136|   506k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   506k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   506k|            auto result = scn::scan<T>(
  139|   506k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   506k|                scn::runtime_format(f));
  141|   506k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.6k, False: 489k]
  ------------------
  142|  16.6k|                break;
  143|  16.6k|            }
  144|   489k|            it = result->begin();
  145|   489k|        }
  146|  16.6k|    }
  147|       |
  148|       |    // scan localized
  149|  16.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.6k, False: 2.76k]
  ------------------
  150|  16.6k|        auto it = scn::ranges::begin(source);
  151|   506k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   506k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   506k|            auto result = scn::scan<T>(
  154|   506k|                global_locale,
  155|   506k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   506k|                scn::runtime_format(f));
  157|   506k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.6k, False: 489k]
  ------------------
  158|  16.6k|                break;
  159|  16.6k|            }
  160|   489k|            it = result->begin();
  161|   489k|        }
  162|  16.6k|    }
  163|       |
  164|       |    // scan_value
  165|  2.76k|    {
  166|  2.76k|        auto it = scn::ranges::begin(source);
  167|   247k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   247k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   247k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   247k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   247k|            auto result = scn::scan_value<T>(
  170|   247k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   247k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.76k, False: 244k]
  ------------------
  172|  2.76k|                break;
  173|  2.76k|            }
  174|   244k|            it = result->begin();
  175|   244k|        }
  176|  2.76k|    }
  177|  2.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.76k|{
  133|       |    // Regular scan
  134|  16.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.6k, False: 2.76k]
  ------------------
  135|  16.6k|        auto it = scn::ranges::begin(source);
  136|   506k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   506k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   506k|            auto result = scn::scan<T>(
  139|   506k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   506k|                scn::runtime_format(f));
  141|   506k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.6k, False: 489k]
  ------------------
  142|  16.6k|                break;
  143|  16.6k|            }
  144|   489k|            it = result->begin();
  145|   489k|        }
  146|  16.6k|    }
  147|       |
  148|       |    // scan localized
  149|  16.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.6k, False: 2.76k]
  ------------------
  150|  16.6k|        auto it = scn::ranges::begin(source);
  151|   506k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   506k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   506k|            auto result = scn::scan<T>(
  154|   506k|                global_locale,
  155|   506k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   506k|                scn::runtime_format(f));
  157|   506k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.6k, False: 489k]
  ------------------
  158|  16.6k|                break;
  159|  16.6k|            }
  160|   489k|            it = result->begin();
  161|   489k|        }
  162|  16.6k|    }
  163|       |
  164|       |    // scan_value
  165|  2.76k|    {
  166|  2.76k|        auto it = scn::ranges::begin(source);
  167|   247k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   247k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   247k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   247k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   247k|            auto result = scn::scan_value<T>(
  170|   247k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   247k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.76k, False: 244k]
  ------------------
  172|  2.76k|                break;
  173|  2.76k|            }
  174|   244k|            it = result->begin();
  175|   244k|        }
  176|  2.76k|    }
  177|  2.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.76k|{
  133|       |    // Regular scan
  134|  16.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 16.6k, False: 2.76k]
  ------------------
  135|  16.6k|        auto it = scn::ranges::begin(source);
  136|   506k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   506k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   506k|            auto result = scn::scan<T>(
  139|   506k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   506k|                scn::runtime_format(f));
  141|   506k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 16.6k, False: 489k]
  ------------------
  142|  16.6k|                break;
  143|  16.6k|            }
  144|   489k|            it = result->begin();
  145|   489k|        }
  146|  16.6k|    }
  147|       |
  148|       |    // scan localized
  149|  16.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 16.6k, False: 2.76k]
  ------------------
  150|  16.6k|        auto it = scn::ranges::begin(source);
  151|   506k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   506k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   506k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   506k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   506k|            auto result = scn::scan<T>(
  154|   506k|                global_locale,
  155|   506k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   506k|                scn::runtime_format(f));
  157|   506k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 16.6k, False: 489k]
  ------------------
  158|  16.6k|                break;
  159|  16.6k|            }
  160|   489k|            it = result->begin();
  161|   489k|        }
  162|  16.6k|    }
  163|       |
  164|       |    // scan_value
  165|  2.76k|    {
  166|  2.76k|        auto it = scn::ranges::begin(source);
  167|   247k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   247k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   247k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   247k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   247k|            auto result = scn::scan_value<T>(
  170|   247k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   247k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.76k, False: 244k]
  ------------------
  172|  2.76k|                break;
  173|  2.76k|            }
  174|   244k|            it = result->begin();
  175|   244k|        }
  176|  2.76k|    }
  177|  2.76k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  2.76k|{
   90|  2.76k|    using char_type = ranges::range_value_t<Source>;
   91|  2.76k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.76k|    deque.clear();
   93|  2.76k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.76k|              std::back_inserter(deque));
   95|  2.76k|    return deque;
   96|  2.76k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  2.76k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  2.76k|    else {
   83|  2.76k|        return wnoncontiguous_buffer;
   84|  2.76k|    }
   85|  2.76k|}

LLVMFuzzerTestOneInput:
   57|  1.38k|{
   58|  1.38k|    scn::fuzz::run(data, size);
   59|  1.38k|    return 0;
   60|  1.38k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  1.38k|{
   36|  1.38k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 1.38k]
  |  Branch (36:35): [True: 0, False: 1.38k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  1.38k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  1.38k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  1.38k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  1.38k|    do_basic_run(sv, f);
   45|       |
   46|  1.38k|    const auto& wf = get_format_strings<wchar_t>(
   47|  1.38k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  1.38k|    do_basic_run(wsv_reinterpret, wf);
   49|  1.38k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 1.38k, False: 0]
  ------------------
   50|  1.38k|        do_basic_run(wsv_transcode, wf);
   51|  1.38k|    }
   52|  1.38k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.38k|{
   25|  1.38k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.38k|                                                           format_strings);
   27|  1.38k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.38k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.38k|            source, format_strings);
   30|  1.38k|    }
   31|  1.38k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.38k|{
   25|  1.38k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.38k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.38k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.76k|{
   25|  2.76k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.76k|                                                           format_strings);
   27|  2.76k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  2.76k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.76k|            source, format_strings);
   30|  2.76k|    }
   31|  2.76k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.76k|{
   25|  2.76k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.76k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  2.76k|}

