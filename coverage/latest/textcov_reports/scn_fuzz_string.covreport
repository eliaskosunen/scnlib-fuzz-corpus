_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  3.00M|{
 3803|  3.00M|    if constexpr (sizeof(U) == 1) {
 3804|  3.00M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  3.00M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  3.00M|{
 3767|  3.00M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  3.00M|    SCN_GCC_COMPAT_PUSH
 3770|  3.00M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  3.00M|    constexpr char lengths[] =
 3772|  3.00M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  3.00M|        "\1\1\1\1\1\1\1\1"
 3774|  3.00M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  3.00M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  3.00M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  3.00M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  3.00M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  3.00M|    SCN_GCC_COMPAT_POP
 3781|  3.00M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  2.86M|{
 4009|  2.86M|    if constexpr (sizeof(CharT) == 1) {
 4010|  2.86M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  2.86M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  2.86M|{
 3822|  2.86M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  2.86M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.86M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  2.86M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  2.86M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  2.86M|    };
 3827|       |
 3828|  2.86M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 2.57M, False: 294k]
  ------------------
 3829|  2.57M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 329, False: 2.56M]
  ------------------
 3830|    329|            SCN_UNLIKELY_ATTR
 3831|    329|            return invalid_code_point;
 3832|    329|        }
 3833|  2.56M|        return static_cast<char32_t>(input[0]);
 3834|  2.57M|    }
 3835|       |
 3836|   294k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 79.9k, False: 214k]
  ------------------
 3837|  79.9k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 184, False: 79.7k]
  ------------------
 3838|    184|            SCN_UNLIKELY_ATTR
 3839|    184|            return invalid_code_point;
 3840|    184|        }
 3841|  79.7k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 9.92k, False: 69.8k]
  ------------------
 3842|  9.92k|            SCN_UNLIKELY_ATTR
 3843|  9.92k|            return invalid_code_point;
 3844|  9.92k|        }
 3845|       |
 3846|  69.8k|        char32_t cp{};
 3847|  69.8k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  69.8k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  69.8k|        return cp;
 3850|  79.7k|    }
 3851|       |
 3852|   214k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 202k, False: 11.7k]
  ------------------
 3853|   202k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 29, False: 202k]
  ------------------
 3854|     29|            SCN_UNLIKELY_ATTR
 3855|     29|            return invalid_code_point;
 3856|     29|        }
 3857|   202k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 2.21k, False: 200k]
  ------------------
 3858|   202k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 670, False: 199k]
  ------------------
 3859|  2.88k|            SCN_UNLIKELY_ATTR
 3860|  2.88k|            return invalid_code_point;
 3861|  2.88k|        }
 3862|       |
 3863|   199k|        char32_t cp{};
 3864|   199k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|   199k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|   199k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|   199k|        return cp;
 3868|   202k|    }
 3869|       |
 3870|  11.7k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 11.7k, False: 0]
  ------------------
 3871|  11.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 11.7k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  11.7k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 7.17k, False: 4.61k]
  ------------------
 3876|  7.17k|            SCN_UNLIKELY_ATTR
 3877|  7.17k|            return invalid_code_point;
 3878|  7.17k|        }
 3879|  4.61k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 1.52k, False: 3.09k]
  ------------------
 3880|  4.61k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 116, False: 2.97k]
  ------------------
 3881|  4.61k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 95, False: 2.88k]
  ------------------
 3882|  1.73k|            SCN_UNLIKELY_ATTR
 3883|  1.73k|            return invalid_code_point;
 3884|  1.73k|        }
 3885|       |
 3886|  2.88k|        char32_t cp{};
 3887|  2.88k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  2.88k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  2.88k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  2.88k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  2.88k|        return cp;
 3892|  4.61k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   493k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   493k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   493k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  2.54M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  2.54M|    else {
 3701|  2.54M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  2.54M|                                       to_address(first), to_address(last)))};
 3703|  2.54M|    }
 3704|  2.54M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  7.88M|{
  326|  7.88M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  7.88M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  7.88M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  8.67M|{
  304|  8.67M|    return p;
  305|  8.67M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  1.23M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  1.23M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  1.23M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  1.23M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  1.23M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  1.23M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  24.3k|    {
 2724|  24.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  24.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  24.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  24.3k|    {
 2705|  24.3k|        return decay_copy(t.begin());
 2706|  24.3k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  1.39M|{
 1949|  1.39M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.39M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.39M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   332k|    {
 2781|   332k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   332k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   332k|    {
 2763|   332k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   332k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   332k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8877|  33.9k|{
 8878|  33.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.9k|    static_cast<    \
  |  |  929|  33.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.9k|    static_cast<    \
  |  |  929|  33.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|   149k|{
 5406|   149k|    detail::check_scan_arg_types<Args...>();
 5407|   149k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   149k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|   182k|{
 5145|   182k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   182k|                  "Scan argument types must be default constructible");
 5147|   182k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   182k|                  "Scan argument types must be Destructible");
 5149|   182k|    static_assert(
 5150|   182k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   182k|        "Scan argument types must not be references");
 5152|   182k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|   149k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   149k|    {
 5359|   149k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   149k|    {
 5370|   149k|        return {detail::make_arg<
 5371|   149k|            kind, Context,
 5372|   149k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   149k|                                 typename Context::char_type>::value>(args)...};
 5374|   149k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|   149k|{
 5180|   149k|    return make_value<Context>(value).ref_value;
 5181|   149k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|   182k|{
 5130|   182k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   182k|                                  needs_context_tag>) {
 5134|   182k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   182k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   182k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|   182k|    {                                                                        \
 4969|   182k|        return val;                                                          \
 4970|   182k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|   182k|{
 5099|   182k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   182k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   182k|    constexpr bool scannable_char =
 5103|   182k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   182k|    static_assert(scannable_char,
 5105|   182k|                  "Cannot scan an argument of an unsupported character "
 5106|   182k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   182k|    constexpr bool scannable_const =
 5109|   182k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   182k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   182k|    constexpr bool scannable_disabled =
 5113|   182k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   182k|    static_assert(scannable_disabled,
 5115|   182k|                  "Cannot scan an argument that has been disabled by "
 5116|   182k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   182k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   182k|    static_assert(
 5120|   182k|        scannable,
 5121|   182k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   182k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   182k|    return arg_value{arg};
 5125|   182k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|   182k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   182k|    {
 4911|   182k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|  67.8k|{
 8665|  67.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|  67.8k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|  67.8k|{
 8602|  67.8k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  67.8k|    auto result = vscan_impl(buffer, format, args);
 8605|  67.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 57.0k]
  |  |  ------------------
  ------------------
 8606|  10.8k|        return unexpected(result.error());
 8607|  10.8k|    }
 8608|  57.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  57.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  67.8k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   165k|{
 4729|   165k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   165k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   165k|                  "\n"
 4733|   165k|                  "Unsupported range type given as input to a scanning "
 4734|   165k|                  "function.\n"
 4735|   165k|                  "A range needs to have a character type (value type) "
 4736|   165k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   165k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   165k|                  "to be included.\n"
 4739|   165k|                  "See the scnlib documentation for more details.");
 4740|   165k|    static_assert(
 4741|   165k|        !std::is_same_v<T, custom_char_traits>,
 4742|   165k|        "\n"
 4743|   165k|        "Unsupported range type given as input to a scanning "
 4744|   165k|        "function.\n"
 4745|   165k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   165k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   165k|        "not supported.");
 4748|   165k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   165k|                  "\n"
 4750|   165k|                  "Unsupported range type given as input to a scanning "
 4751|   165k|                  "function.\n"
 4752|   165k|                  "file_marker_found cannot be used as an "
 4753|   165k|                  "source range type to scn::scan.\n"
 4754|   165k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   165k|                  "and do not provide an explicit source range, "
 4756|   165k|                  "or use scn::scan with a FILE* directly.");
 4757|   165k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   165k|                  "\n"
 4759|   165k|                  "Unsupported range type given as input to a scanning "
 4760|   165k|                  "function.\n"
 4761|   165k|                  "In order to be scannable, a range needs to satisfy "
 4762|   165k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   165k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   165k|                  "\n"
 4765|   165k|                  "Unsupported range type given as input to a scanning "
 4766|   165k|                  "function.\n"
 4767|   165k|                  "A range needs to model forward_range and have a valid "
 4768|   165k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   165k|                  "Examples of scannable ranges are std::string, "
 4770|   165k|                  "std::string_view, "
 4771|   165k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   165k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   165k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   165k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   165k|{
 4668|   165k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   165k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   165k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   165k|    {
 2855|   165k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   165k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   165k|    {
 2836|   165k|        return t.data();
 2837|   165k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   165k|    {
 3229|   165k|        return detail::to_address(ranges::begin(derived()));
 3230|   165k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   788k|{
  326|   788k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   788k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   788k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   307k|    {
 2724|   307k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   307k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   307k|    {
 2705|   307k|        return decay_copy(t.begin());
 2706|   307k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  1.78M|    {
 3326|  1.78M|        return m_iterator;
 3327|  1.78M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   165k|    {
 3185|   165k|        return static_cast<const D&>(*this);
 3186|   165k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   165k|    {
 2930|   165k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   165k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   165k|    {
 2896|   165k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   165k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   165k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  1.66M|{
 1949|  1.66M|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.66M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.66M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|   608k|    {
 3342|   608k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   608k|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  3.37M|    {
 1598|  3.37M|        return has_value();
 1599|  3.37M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  6.70M|    {
  485|  6.70M|        return m_has_value;
  486|  6.70M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   105k|    {
 1604|   105k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   105k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   105k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   105k|        return this->get_unexpected().error();
 1606|   105k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   105k|    {
  468|   105k|        return m_unexpected;
  469|   105k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|   786k|    {
  361|   786k|        return m_unexpected;
  362|   786k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|   397k|        : m_unexpected(std::forward<Err>(e))
  346|   397k|    {
  347|   397k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   397k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   397k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  23.4k|        : base(unexpect, std::move(e.error())),
 1474|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  23.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.4k|          m_has_value(false)
  446|  23.4k|    {
  447|  23.4k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|   453k|        : m_unexpected(std::forward<Args>(args)...)
  355|   453k|    {
  356|   453k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   453k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   453k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   165k|    {
 1177|   165k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   142k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   142k|                      ranges::iterator_t<SourceRange>>) {
 5935|   142k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   142k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   584k|    {
 2724|   584k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   584k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   584k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   584k|    {
 2705|   584k|        return decay_copy(t.begin());
 2706|   584k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   142k|{
 5920|   142k|    return ranges::end(source);
 5921|   142k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   142k|    {
 2781|   142k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   142k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   142k|    {
 2763|   142k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   142k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|   925k|    {
 3330|   925k|        return m_sentinel;
 3331|   925k|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  3.23M|    {
 1653|  3.23M|        return value();
 1654|  3.23M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  3.23M|    {
 1627|  3.23M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.23M|        return this->get_value();
 1629|  3.23M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.23M|    {
  451|  3.23M|        return m_value;
  452|  3.23M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   142k|        : base(std::in_place, std::forward<U>(val)),
 1428|   142k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   142k|    {
 1430|   142k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   142k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   142k|    {
  437|   142k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7985|  67.8k|    {
 7986|  67.8k|        return m_str;
 7987|  67.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   149k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   149k|    {
 5436|   149k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|   149k|    {
 5389|   149k|        return m_argptrs;
 5390|   149k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   216k|        : m_desc(desc), m_builtin_values(data)
 5487|   216k|    {
 5488|   216k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|  67.8k|{
 8831|  67.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 57.0k]
  |  |  ------------------
  ------------------
 8832|  10.8k|        return unexpected(result.error());
 8833|  10.8k|    }
 8834|  57.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  57.0k|    static_cast<    \
  |  |  929|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  57.0k|    static_cast<    \
  |  |  929|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  67.8k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   165k|    {
 1598|   165k|        return has_value();
 1599|   165k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   331k|    {
  485|   331k|        return m_has_value;
  486|   331k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  23.4k|    {
 1604|  23.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  23.4k|        return this->get_unexpected().error();
 1606|  23.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  23.4k|    {
  468|  23.4k|        return m_unexpected;
  469|  23.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  11.7k|        : base(unexpect, std::move(e.error())),
 1474|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  11.7k|        : m_has_value(false)
  625|  11.7k|    {
  626|  11.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  11.7k|    {
  689|  11.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  11.7k|                                  std::forward<Args>(args)...);
  691|  11.7k|        m_has_value = false;
  692|  11.7k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  70.2k|{
  392|  70.2k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  70.2k|        T(std::forward<Args>(args)...);
  394|  70.2k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  23.4k|    {
  718|  23.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  23.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  23.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  82.8k|    {
 1177|  82.8k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   114k|    {
 1653|   114k|        return value();
 1654|   114k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   142k|    {
 1627|   142k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   142k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   142k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   142k|        return this->get_value();
 1629|   142k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   142k|    {
  451|   142k|        return m_value;
  452|   142k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|  71.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  71.0k|    {
 5840|  71.0k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   142k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   142k|    static_cast<    \
  |  |  929|   142k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   142k|    {
 5691|   142k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|   159k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   159k|    static_cast<    \
  |  |  929|   159k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   159k|    {
 5626|   159k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|  71.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  71.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  71.0k|    {
 1430|  71.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|  71.0k|        : m_has_value(true)
  615|  71.0k|    {
  616|  71.0k|        construct(std::forward<Args>(args)...);
  617|  71.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  71.0k|    {
  682|  71.0k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  71.0k|        m_has_value = true;
  684|  71.0k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  71.0k|{
  392|  71.0k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  71.0k|        T(std::forward<Args>(args)...);
  394|  71.0k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|  71.0k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   213k|    {
  706|   213k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   213k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   213k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|   142k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|   149k|    {
 5384|   149k|        return m_args;
 5385|   149k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|   149k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.04M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.04M|    static_cast<    \
  |  |  929|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.04M|    static_cast<    \
  |  |  929|  1.04M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.04M|    {
 3312|  1.04M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|   216k|{
 7702|   216k|    return s;
 7703|   216k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|   216k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  67.8k|        : m_str(r.str)
 7981|  67.8k|    {
 7982|  67.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  82.8k|    {
 1598|  82.8k|        return has_value();
 1599|  82.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   236k|    {
  675|   236k|        return m_has_value;
  676|   236k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|  71.0k|    {
 1673|  71.0k|        return &value();
 1674|  71.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|  71.0k|    {
 1627|  71.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  71.0k|        return this->get_value();
 1629|  71.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  71.0k|    {
  641|  71.0k|        return *value_ptr();
  642|  71.0k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   142k|    {
 5708|   142k|        return ranges::begin(m_range);
 5709|   142k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  82.8k|    {
  631|  82.8k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 71.0k, False: 11.7k]
  ------------------
  632|  71.0k|            destroy_value();
  633|  71.0k|        }
  634|  11.7k|        else {
  635|  11.7k|            destroy_unexpected();
  636|  11.7k|        }
  637|  82.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  71.0k|    {
  696|  71.0k|        scn::detail::destroy_at(value_ptr());
  697|  71.0k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|  71.0k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  71.0k|    else {
  404|  71.0k|        p->~T();
  405|  71.0k|    }
  406|  71.0k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  11.7k|    {
  700|  11.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  11.7k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  70.2k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  70.2k|    else {
  404|  70.2k|        p->~T();
  405|  70.2k|    }
  406|  70.2k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8944|  33.9k|{
 8945|  33.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.9k|    static_cast<    \
  |  |  929|  33.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.9k|    static_cast<    \
  |  |  929|  33.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.9k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|  67.8k|{
 8683|  67.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  67.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|  67.8k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|  67.8k|{
 8618|  67.8k|#if !SCN_DISABLE_LOCALE
 8619|  67.8k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  67.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  67.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  67.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  67.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 57.0k]
  |  |  ------------------
  ------------------
 8626|  10.8k|        return unexpected(result.error());
 8627|  10.8k|    }
 8628|  57.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  57.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  67.8k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8983|  14.9k|{
 8984|  14.9k|    T value;
 8985|  14.9k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  14.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  14.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 901, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    901|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    901|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    901|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    901|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    901|    }                                                  \
  |  |  |  | 3667|  14.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  14.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  14.9k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  33.3k|{
 5165|  33.3k|    check_scan_arg_types<T>();
 5166|       |
 5167|  33.3k|    basic_scan_arg<Context> arg;
 5168|  33.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  33.3k|    arg.m_value = make_value<Context>(value);
 5170|  33.3k|    return arg;
 5171|  33.3k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   265k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  2.52M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  29.9k|{
 8696|  29.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  29.9k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  29.9k|{
 8642|  29.9k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  29.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  29.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 28.1k]
  |  |  ------------------
  ------------------
 8646|  1.80k|        return unexpected(result.error());
 8647|  1.80k|    }
 8648|  28.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  28.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  29.9k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  28.1k|    {
 1663|  28.1k|        return std::move(value());
 1664|  28.1k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8877|  33.9k|{
 8878|  33.9k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  33.9k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  33.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.9k|    static_cast<    \
  |  |  929|  33.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.9k|    static_cast<    \
  |  |  929|  33.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  33.9k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|  67.8k|{
 5406|  67.8k|    detail::check_scan_arg_types<Args...>();
 5407|  67.8k|    return detail::scan_arg_store<Context, Args...>{};
 5408|  67.8k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|  82.8k|{
 5145|  82.8k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  82.8k|                  "Scan argument types must be default constructible");
 5147|  82.8k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  82.8k|                  "Scan argument types must be Destructible");
 5149|  82.8k|    static_assert(
 5150|  82.8k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  82.8k|        "Scan argument types must not be references");
 5152|  82.8k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|  67.8k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  67.8k|    {
 5359|  67.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  67.8k|    {
 5370|  67.8k|        return {detail::make_arg<
 5371|  67.8k|            kind, Context,
 5372|  67.8k|            mapped_type_constant<remove_cvref_t<A>,
 5373|  67.8k|                                 typename Context::char_type>::value>(args)...};
 5374|  67.8k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|  67.8k|{
 5180|  67.8k|    return make_value<Context>(value).ref_value;
 5181|  67.8k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|  82.8k|{
 5130|  82.8k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  82.8k|                                  needs_context_tag>) {
 5134|  82.8k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  82.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  82.8k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|  82.8k|    {                                                                        \
 4969|  82.8k|        return val;                                                          \
 4970|  82.8k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|  82.8k|{
 5099|  82.8k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  82.8k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  82.8k|    constexpr bool scannable_char =
 5103|  82.8k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  82.8k|    static_assert(scannable_char,
 5105|  82.8k|                  "Cannot scan an argument of an unsupported character "
 5106|  82.8k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  82.8k|    constexpr bool scannable_const =
 5109|  82.8k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  82.8k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  82.8k|    constexpr bool scannable_disabled =
 5113|  82.8k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  82.8k|    static_assert(scannable_disabled,
 5115|  82.8k|                  "Cannot scan an argument that has been disabled by "
 5116|  82.8k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  82.8k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  82.8k|    static_assert(
 5120|  82.8k|        scannable,
 5121|  82.8k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  82.8k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  82.8k|    return arg_value{arg};
 5125|  82.8k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|  82.8k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  82.8k|    {
 4911|  82.8k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7985|  67.8k|    {
 7986|  67.8k|        return m_str;
 7987|  67.8k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  67.8k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  67.8k|    {
 5436|  67.8k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|  67.8k|    {
 5389|  67.8k|        return m_argptrs;
 5390|  67.8k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|  67.8k|{
 8831|  67.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 57.0k]
  |  |  ------------------
  ------------------
 8832|  10.8k|        return unexpected(result.error());
 8833|  10.8k|    }
 8834|  57.0k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  57.0k|    static_cast<    \
  |  |  929|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  57.0k|    static_cast<    \
  |  |  929|  57.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  67.8k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  11.7k|        : base(unexpect, std::move(e.error())),
 1474|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  11.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.7k|          m_has_value(false)
  446|  11.7k|    {
  447|  11.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  82.8k|    {
 1177|  82.8k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|  71.0k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  71.0k|    {
 5840|  71.0k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|  71.0k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  71.0k|    {
 5626|  71.0k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|  71.0k|        : base(std::in_place, std::forward<U>(val)),
 1428|  71.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  71.0k|    {
 1430|  71.0k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|  71.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  71.0k|    {
  437|  71.0k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|  67.8k|    {
 5384|  67.8k|        return m_args;
 5385|  67.8k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  67.8k|        : m_str(r.str)
 7981|  67.8k|    {
 7982|  67.8k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  82.8k|    {
 1598|  82.8k|        return has_value();
 1599|  82.8k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   153k|    {
  485|   153k|        return m_has_value;
  486|   153k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|  71.0k|    {
 1673|  71.0k|        return &value();
 1674|  71.0k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|  71.0k|    {
 1627|  71.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  71.0k|        return this->get_value();
 1629|  71.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  71.0k|    {
  451|  71.0k|        return m_value;
  452|  71.0k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8944|  33.9k|{
 8945|  33.9k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  33.9k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  33.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  33.9k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.9k|    static_cast<    \
  |  |  929|  33.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  33.9k|    static_cast<    \
  |  |  929|  33.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  33.9k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8983|  14.9k|{
 8984|  14.9k|    T value;
 8985|  14.9k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  14.9k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  14.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  14.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  14.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 901, False: 14.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    901|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    901|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    901|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    901|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    901|    }                                                  \
  |  |  |  | 3667|  14.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  14.0k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  14.0k|    static_cast<    \
  |  |  929|  14.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  14.9k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  14.9k|{
 5165|  14.9k|    check_scan_arg_types<T>();
 5166|       |
 5167|  14.9k|    basic_scan_arg<Context> arg;
 5168|  14.9k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  14.9k|    arg.m_value = make_value<Context>(value);
 5170|  14.9k|    return arg;
 5171|  14.9k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  11.7k|    {
 2724|  11.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  11.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  11.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  11.7k|    {
 2705|  11.7k|        return decay_copy(t.begin());
 2706|  11.7k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  3.89M|{
 1949|  3.89M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.89M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.89M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   199k|    {
 2781|   199k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   199k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   199k|    {
 2763|   199k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   199k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   199k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8877|  40.6k|{
 8878|  40.6k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  40.6k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  40.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  40.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|  40.6k|{
 8665|  40.6k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|  40.6k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|  40.6k|{
 8602|  40.6k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  40.6k|    auto result = vscan_impl(buffer, format, args);
 8605|  40.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  40.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.40k, False: 35.2k]
  |  |  ------------------
  ------------------
 8606|  5.40k|        return unexpected(result.error());
 8607|  5.40k|    }
 8608|  35.2k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  35.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  40.6k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|  99.6k|{
 4729|  99.6k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  99.6k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  99.6k|                  "\n"
 4733|  99.6k|                  "Unsupported range type given as input to a scanning "
 4734|  99.6k|                  "function.\n"
 4735|  99.6k|                  "A range needs to have a character type (value type) "
 4736|  99.6k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  99.6k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  99.6k|                  "to be included.\n"
 4739|  99.6k|                  "See the scnlib documentation for more details.");
 4740|  99.6k|    static_assert(
 4741|  99.6k|        !std::is_same_v<T, custom_char_traits>,
 4742|  99.6k|        "\n"
 4743|  99.6k|        "Unsupported range type given as input to a scanning "
 4744|  99.6k|        "function.\n"
 4745|  99.6k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  99.6k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  99.6k|        "not supported.");
 4748|  99.6k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  99.6k|                  "\n"
 4750|  99.6k|                  "Unsupported range type given as input to a scanning "
 4751|  99.6k|                  "function.\n"
 4752|  99.6k|                  "file_marker_found cannot be used as an "
 4753|  99.6k|                  "source range type to scn::scan.\n"
 4754|  99.6k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  99.6k|                  "and do not provide an explicit source range, "
 4756|  99.6k|                  "or use scn::scan with a FILE* directly.");
 4757|  99.6k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  99.6k|                  "\n"
 4759|  99.6k|                  "Unsupported range type given as input to a scanning "
 4760|  99.6k|                  "function.\n"
 4761|  99.6k|                  "In order to be scannable, a range needs to satisfy "
 4762|  99.6k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  99.6k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  99.6k|                  "\n"
 4765|  99.6k|                  "Unsupported range type given as input to a scanning "
 4766|  99.6k|                  "function.\n"
 4767|  99.6k|                  "A range needs to model forward_range and have a valid "
 4768|  99.6k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  99.6k|                  "Examples of scannable ranges are std::string, "
 4770|  99.6k|                  "std::string_view, "
 4771|  99.6k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  99.6k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  99.6k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  99.6k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|  99.6k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|  99.6k|    else {
 4714|  99.6k|        return make_forward_scan_buffer(r);
 4715|  99.6k|    }
 4716|  99.6k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|  99.6k|{
 4533|  99.6k|    return basic_scan_forward_buffer_impl(range);
 4534|  99.6k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|  99.6k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|  99.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|  99.6k|          m_cursor(ranges::begin(*m_range))
 4419|  99.6k|    {
 4420|  99.6k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|  99.6k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|  99.6k|    {
 4391|  99.6k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|  99.6k|        : m_current_view(sv), m_is_contiguous(false)
 4158|  99.6k|    {
 4159|  99.6k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|  99.6k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   187k|    {
 2724|   187k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   187k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   187k|    {
 2705|   187k|        return decay_copy(t.begin());
 2706|   187k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|   275k|    {
 3326|   275k|        return m_iterator;
 3327|   275k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  1.11M|    {
 4424|  1.11M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 18.5k, False: 1.10M]
  ------------------
 4425|  18.5k|            return false;
 4426|  18.5k|        }
 4427|  1.10M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  1.10M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  1.10M|        }
 4430|  1.10M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 1.00M, False: 92.8k]
  ------------------
 4431|  1.00M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  1.00M|                                          this->m_current_view.begin(),
 4433|  1.00M|                                          this->m_current_view.end());
 4434|  1.00M|        }
 4435|  1.10M|        m_latest = *m_cursor;
 4436|  1.10M|        ++m_cursor;
 4437|  1.10M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  1.10M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  1.10M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  1.10M|        }
 4441|  1.10M|        return true;
 4442|  1.11M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.32M|    {
 2781|  3.32M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.32M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.32M|    {
 2763|  3.32M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.32M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  3.40M|    {
 3330|  3.40M|        return m_sentinel;
 3331|  3.40M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|  99.6k|    {
 4079|  99.6k|        SCN_UNUSED(position);
  ------------------
  |  |  909|  99.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|  99.6k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  11.7k|        : base(unexpect, std::move(e.error())),
 1474|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  11.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  11.7k|          m_has_value(false)
  446|  11.7k|    {
  447|  11.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  99.6k|    {
 1177|  99.6k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|  87.9k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  87.9k|                      ranges::iterator_t<SourceRange>>) {
 5935|  87.9k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  87.9k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  87.9k|    {
 2724|  87.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  87.9k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  87.9k|    {
 2705|  87.9k|        return decay_copy(t.begin());
 2706|  87.9k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|  87.9k|{
 5920|  87.9k|    return ranges::end(source);
 5921|  87.9k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  87.9k|    {
 2781|  87.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  87.9k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  87.9k|    {
 2763|  87.9k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  87.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  87.9k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|  87.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  87.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  87.9k|    {
 1430|  87.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|  87.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  87.9k|    {
  437|  87.9k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7985|  81.3k|    {
 7986|  81.3k|        return m_str;
 7987|  81.3k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8830|  81.3k|{
 8831|  81.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  81.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 70.5k]
  |  |  ------------------
  ------------------
 8832|  10.8k|        return unexpected(result.error());
 8833|  10.8k|    }
 8834|  70.5k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  70.5k|    static_cast<    \
  |  |  929|  70.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  70.5k|    static_cast<    \
  |  |  929|  70.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|  81.3k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  99.6k|    {
 1598|  99.6k|        return has_value();
 1599|  99.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   199k|    {
  485|   199k|        return m_has_value;
  486|   199k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  11.7k|    {
 1604|  11.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.7k|        return this->get_unexpected().error();
 1606|  11.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.7k|    {
  468|  11.7k|        return m_unexpected;
  469|  11.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  11.7k|        : base(unexpect, std::move(e.error())),
 1474|  11.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  11.7k|    {
 1476|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  11.7k|        : m_has_value(false)
  625|  11.7k|    {
  626|  11.7k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  11.7k|    {
  689|  11.7k|        scn::detail::construct_at(unexpected_ptr(),
  690|  11.7k|                                  std::forward<Args>(args)...);
  691|  11.7k|        m_has_value = false;
  692|  11.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  23.4k|    {
  718|  23.4k|        return reinterpret_cast<unexpected<E>*>(
  719|  23.4k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  23.4k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  99.6k|    {
 1177|  99.6k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|  70.5k|    {
 1653|  70.5k|        return value();
 1654|  70.5k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|  87.9k|    {
 1627|  87.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  87.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  87.9k|        return this->get_value();
 1629|  87.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  87.9k|    {
  451|  87.9k|        return m_value;
  452|  87.9k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|  87.9k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  87.9k|    static_cast<    \
  |  |  929|  87.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|  87.9k|    static_cast<    \
  |  |  929|  87.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|  87.9k|    {
 5840|  87.9k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|  87.9k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  87.9k|    static_cast<    \
  |  |  929|  87.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  87.9k|    {
 5691|  87.9k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|  87.9k|        : base(std::in_place, std::forward<U>(val)),
 1428|  87.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  87.9k|    {
 1430|  87.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|  87.9k|        : m_has_value(true)
  615|  87.9k|    {
  616|  87.9k|        construct(std::forward<Args>(args)...);
  617|  87.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  87.9k|    {
  682|  87.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  87.9k|        m_has_value = true;
  684|  87.9k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  87.9k|{
  392|  87.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  87.9k|        T(std::forward<Args>(args)...);
  394|  87.9k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5831|  87.9k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   263k|    {
  706|   263k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   263k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   263k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5835|   175k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   187k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   187k|    static_cast<    \
  |  |  929|   187k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   187k|    static_cast<    \
  |  |  929|   187k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   187k|    {
 3312|   187k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|  81.3k|        : m_str(r.str)
 7981|  81.3k|    {
 7982|  81.3k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  99.6k|    {
 1598|  99.6k|        return has_value();
 1599|  99.6k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   287k|    {
  675|   287k|        return m_has_value;
  676|   287k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|  87.9k|    {
 1673|  87.9k|        return &value();
 1674|  87.9k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|  87.9k|    {
 1627|  87.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  87.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  87.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  87.9k|        return this->get_value();
 1629|  87.9k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  87.9k|    {
  641|  87.9k|        return *value_ptr();
  642|  87.9k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|  87.9k|    {
 5708|  87.9k|        return ranges::begin(m_range);
 5709|  87.9k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  99.6k|    {
  631|  99.6k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 87.9k, False: 11.7k]
  ------------------
  632|  87.9k|            destroy_value();
  633|  87.9k|        }
  634|  11.7k|        else {
  635|  11.7k|            destroy_unexpected();
  636|  11.7k|        }
  637|  99.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  87.9k|    {
  696|  87.9k|        scn::detail::destroy_at(value_ptr());
  697|  87.9k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|  87.9k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  87.9k|    else {
  404|  87.9k|        p->~T();
  405|  87.9k|    }
  406|  87.9k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  11.7k|    {
  700|  11.7k|        scn::detail::destroy_at(unexpected_ptr());
  701|  11.7k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8944|  40.6k|{
 8945|  40.6k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  40.6k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  40.6k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  40.6k|    static_cast<    \
  |  |  929|  40.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  40.6k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|  40.6k|{
 8683|  40.6k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  40.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|  40.6k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|  40.6k|{
 8618|  40.6k|#if !SCN_DISABLE_LOCALE
 8619|  40.6k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  40.6k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  40.6k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  40.6k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  40.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  40.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.40k, False: 35.2k]
  |  |  ------------------
  ------------------
 8626|  5.40k|        return unexpected(result.error());
 8627|  5.40k|    }
 8628|  35.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  35.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  40.6k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8983|  18.3k|{
 8984|  18.3k|    T value;
 8985|  18.3k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  18.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  18.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  18.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  18.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 901, False: 17.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    901|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    901|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    901|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    901|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    901|    }                                                  \
  |  |  |  | 3667|  18.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  17.4k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  17.4k|    static_cast<    \
  |  |  929|  17.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  17.4k|    static_cast<    \
  |  |  929|  17.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  18.3k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  18.3k|{
 8696|  18.3k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  18.3k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  18.3k|{
 8642|  18.3k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  18.3k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  18.3k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  18.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 901, False: 17.4k]
  |  |  ------------------
  ------------------
 8646|    901|        return unexpected(result.error());
 8647|    901|    }
 8648|  17.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  17.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  18.3k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  17.4k|    {
 1663|  17.4k|        return std::move(value());
 1664|  17.4k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  48.6k|    {
 2724|  48.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  48.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  48.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  48.6k|    {
 2705|  48.6k|        return decay_copy(t.begin());
 2706|  48.6k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  10.3M|{
 1949|  10.3M|    return SCN_FWD(t);
  ------------------
  |  |  930|  10.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  10.3M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.00M|    {
 2781|  3.00M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.00M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.00M|    {
 2763|  3.00M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.00M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  1.20M|{
 5406|  1.20M|    detail::check_scan_arg_types<Args...>();
 5407|  1.20M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  1.20M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  1.50M|{
 5145|  1.50M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.50M|                  "Scan argument types must be default constructible");
 5147|  1.50M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.50M|                  "Scan argument types must be Destructible");
 5149|  1.50M|    static_assert(
 5150|  1.50M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.50M|        "Scan argument types must not be references");
 5152|  1.50M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  1.20M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  1.20M|    {
 5359|  1.20M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  1.20M|    {
 5370|  1.20M|        return {detail::make_arg<
 5371|  1.20M|            kind, Context,
 5372|  1.20M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  1.20M|                                 typename Context::char_type>::value>(args)...};
 5374|  1.20M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  1.20M|{
 5180|  1.20M|    return make_value<Context>(value).ref_value;
 5181|  1.20M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  1.50M|{
 5130|  1.50M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.50M|                                  needs_context_tag>) {
 5134|  1.50M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.50M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  1.50M|    {                                                                        \
 4969|  1.50M|        return val;                                                          \
 4970|  1.50M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  1.50M|{
 5099|  1.50M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.50M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.50M|    constexpr bool scannable_char =
 5103|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.50M|    static_assert(scannable_char,
 5105|  1.50M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.50M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.50M|    constexpr bool scannable_const =
 5109|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.50M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.50M|    constexpr bool scannable_disabled =
 5113|  1.50M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.50M|    static_assert(scannable_disabled,
 5115|  1.50M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.50M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.50M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.50M|    static_assert(
 5120|  1.50M|        scannable,
 5121|  1.50M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.50M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.50M|    return arg_value{arg};
 5125|  1.50M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  1.50M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.50M|    {
 4911|  1.50M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   604k|{
 8602|   604k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   604k|    auto result = vscan_impl(buffer, format, args);
 8605|   604k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.6k, False: 582k]
  |  |  ------------------
  ------------------
 8606|  21.6k|        return unexpected(result.error());
 8607|  21.6k|    }
 8608|   582k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   604k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|  1.50M|{
 4729|  1.50M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.50M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.50M|                  "\n"
 4733|  1.50M|                  "Unsupported range type given as input to a scanning "
 4734|  1.50M|                  "function.\n"
 4735|  1.50M|                  "A range needs to have a character type (value type) "
 4736|  1.50M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.50M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.50M|                  "to be included.\n"
 4739|  1.50M|                  "See the scnlib documentation for more details.");
 4740|  1.50M|    static_assert(
 4741|  1.50M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.50M|        "\n"
 4743|  1.50M|        "Unsupported range type given as input to a scanning "
 4744|  1.50M|        "function.\n"
 4745|  1.50M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.50M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.50M|        "not supported.");
 4748|  1.50M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.50M|                  "\n"
 4750|  1.50M|                  "Unsupported range type given as input to a scanning "
 4751|  1.50M|                  "function.\n"
 4752|  1.50M|                  "file_marker_found cannot be used as an "
 4753|  1.50M|                  "source range type to scn::scan.\n"
 4754|  1.50M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.50M|                  "and do not provide an explicit source range, "
 4756|  1.50M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.50M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.50M|                  "\n"
 4759|  1.50M|                  "Unsupported range type given as input to a scanning "
 4760|  1.50M|                  "function.\n"
 4761|  1.50M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.50M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.50M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.50M|                  "\n"
 4765|  1.50M|                  "Unsupported range type given as input to a scanning "
 4766|  1.50M|                  "function.\n"
 4767|  1.50M|                  "A range needs to model forward_range and have a valid "
 4768|  1.50M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.50M|                  "Examples of scannable ranges are std::string, "
 4770|  1.50M|                  "std::string_view, "
 4771|  1.50M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.50M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.50M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.50M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  1.50M|{
 4668|  1.50M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  1.50M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  1.50M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.50M|    {
 2855|  1.50M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.50M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.50M|    {
 2836|  1.50M|        return t.data();
 2837|  1.50M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|  1.50M|    {
 3229|  1.50M|        return detail::to_address(ranges::begin(derived()));
 3230|  1.50M|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  4.43M|{
  326|  4.43M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  4.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  4.43M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   194M|{
  304|   194M|    return p;
  305|   194M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.96M|    {
 2724|  2.96M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.96M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.96M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.96M|    {
 2705|  2.96M|        return decay_copy(t.begin());
 2706|  2.96M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   159M|    {
 3326|   159M|        return m_iterator;
 3327|   159M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.50M|    {
 3185|  1.50M|        return static_cast<const D&>(*this);
 3186|  1.50M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.50M|    {
 2930|  1.50M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.50M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.50M|    {
 2896|  1.50M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.50M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  2.97M|    {
 3342|  2.97M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  2.97M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  46.8k|        : base(unexpect, std::move(e.error())),
 1474|  46.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  46.8k|    {
 1476|  46.8k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  46.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  46.8k|          m_has_value(false)
  446|  46.8k|    {
  447|  46.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.50M|    {
 1177|  1.50M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  1.45M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.45M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.45M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.45M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  2.92M|    {
 2724|  2.92M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  2.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  2.92M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  2.92M|    {
 2705|  2.92M|        return decay_copy(t.begin());
 2706|  2.92M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  1.45M|{
 5920|  1.45M|    return ranges::end(source);
 5921|  1.45M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.45M|    {
 2781|  1.45M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.45M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.45M|    {
 2763|  1.45M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.45M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   152M|    {
 3330|   152M|        return m_sentinel;
 3331|   152M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.45M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.45M|    {
 1430|  1.45M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.45M|    {
  437|  1.45M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7985|   604k|    {
 7986|   604k|        return m_str;
 7987|   604k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  1.20M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  1.20M|    {
 5436|  1.20M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  1.20M|    {
 5389|  1.20M|        return m_argptrs;
 5390|  1.20M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  1.81M|        : m_desc(desc), m_builtin_values(data)
 5487|  1.81M|    {
 5488|  1.81M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|   604k|{
 8831|   604k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.6k, False: 582k]
  |  |  ------------------
  ------------------
 8832|  21.6k|        return unexpected(result.error());
 8833|  21.6k|    }
 8834|   582k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   582k|    static_cast<    \
  |  |  929|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   582k|    static_cast<    \
  |  |  929|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   604k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.50M|    {
 1598|  1.50M|        return has_value();
 1599|  1.50M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.00M|    {
  485|  3.00M|        return m_has_value;
  486|  3.00M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  46.8k|    {
 1604|  46.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  46.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  46.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  46.8k|        return this->get_unexpected().error();
 1606|  46.8k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  46.8k|    {
  468|  46.8k|        return m_unexpected;
  469|  46.8k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  23.4k|        : base(unexpect, std::move(e.error())),
 1474|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  23.4k|        : m_has_value(false)
  625|  23.4k|    {
  626|  23.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  23.4k|    {
  689|  23.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  23.4k|                                  std::forward<Args>(args)...);
  691|  23.4k|        m_has_value = false;
  692|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  46.8k|    {
  718|  46.8k|        return reinterpret_cast<unexpected<E>*>(
  719|  46.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  46.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  46.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   751k|    {
 1177|   751k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.16M|    {
 1653|  1.16M|        return value();
 1654|  1.16M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.45M|    {
 1627|  1.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.45M|        return this->get_value();
 1629|  1.45M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.45M|    {
  451|  1.45M|        return m_value;
  452|  1.45M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|   728k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   728k|    {
 5840|   728k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  1.45M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.45M|    static_cast<    \
  |  |  929|  1.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.45M|    {
 5691|  1.45M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.45M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.45M|    static_cast<    \
  |  |  929|  1.45M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.45M|    {
 5626|  1.45M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   728k|        : base(std::in_place, std::forward<U>(val)),
 1428|   728k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   728k|    {
 1430|   728k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   728k|        : m_has_value(true)
  615|   728k|    {
  616|   728k|        construct(std::forward<Args>(args)...);
  617|   728k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   728k|    {
  682|   728k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   728k|        m_has_value = true;
  684|   728k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   728k|{
  392|   728k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   728k|        T(std::forward<Args>(args)...);
  394|   728k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|   728k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.18M|    {
  706|  2.18M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.18M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.18M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  1.45M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  1.20M|    {
 5384|  1.20M|        return m_args;
 5385|  1.20M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  1.20M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  58.9M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  58.9M|    static_cast<    \
  |  |  929|  58.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  58.9M|    static_cast<    \
  |  |  929|  58.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  58.9M|    {
 3312|  58.9M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|  1.81M|{
 7707|  1.81M|    return s;
 7708|  1.81M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|  1.81M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   604k|        : m_str(r.str)
 7981|   604k|    {
 7982|   604k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   751k|    {
 1598|   751k|        return has_value();
 1599|   751k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.23M|    {
  675|  2.23M|        return m_has_value;
  676|  2.23M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   728k|    {
 1673|   728k|        return &value();
 1674|   728k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   728k|    {
 1627|   728k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   728k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   728k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   728k|        return this->get_value();
 1629|   728k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   728k|    {
  641|   728k|        return *value_ptr();
  642|   728k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  1.45M|    {
 5708|  1.45M|        return ranges::begin(m_range);
 5709|  1.45M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   751k|    {
  631|   751k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 728k, False: 23.4k]
  ------------------
  632|   728k|            destroy_value();
  633|   728k|        }
  634|  23.4k|        else {
  635|  23.4k|            destroy_unexpected();
  636|  23.4k|        }
  637|   751k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   728k|    {
  696|   728k|        scn::detail::destroy_at(value_ptr());
  697|   728k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|   728k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   728k|    else {
  404|   728k|        p->~T();
  405|   728k|    }
  406|   728k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  23.4k|    {
  700|  23.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  23.4k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   604k|{
 8618|   604k|#if !SCN_DISABLE_LOCALE
 8619|   604k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   604k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   604k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   604k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   604k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.6k, False: 582k]
  |  |  ------------------
  ------------------
 8626|  21.6k|        return unexpected(result.error());
 8627|  21.6k|    }
 8628|   582k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   604k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   294k|{
 5165|   294k|    check_scan_arg_types<T>();
 5166|       |
 5167|   294k|    basic_scan_arg<Context> arg;
 5168|   294k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   294k|    arg.m_value = make_value<Context>(value);
 5170|   294k|    return arg;
 5171|   294k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  2.25M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   294k|{
 8642|   294k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   294k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   294k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 291k]
  |  |  ------------------
  ------------------
 8646|  3.60k|        return unexpected(result.error());
 8647|  3.60k|    }
 8648|   291k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   294k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   291k|    {
 1663|   291k|        return std::move(value());
 1664|   291k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|   604k|{
 5406|   604k|    detail::check_scan_arg_types<Args...>();
 5407|   604k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   604k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|   751k|{
 5145|   751k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   751k|                  "Scan argument types must be default constructible");
 5147|   751k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   751k|                  "Scan argument types must be Destructible");
 5149|   751k|    static_assert(
 5150|   751k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   751k|        "Scan argument types must not be references");
 5152|   751k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|   604k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   604k|    {
 5359|   604k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   604k|    {
 5370|   604k|        return {detail::make_arg<
 5371|   604k|            kind, Context,
 5372|   604k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   604k|                                 typename Context::char_type>::value>(args)...};
 5374|   604k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|   604k|{
 5180|   604k|    return make_value<Context>(value).ref_value;
 5181|   604k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|   751k|{
 5130|   751k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   751k|                                  needs_context_tag>) {
 5134|   751k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   751k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   751k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|   751k|    {                                                                        \
 4969|   751k|        return val;                                                          \
 4970|   751k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|   751k|{
 5099|   751k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   751k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   751k|    constexpr bool scannable_char =
 5103|   751k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   751k|    static_assert(scannable_char,
 5105|   751k|                  "Cannot scan an argument of an unsupported character "
 5106|   751k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   751k|    constexpr bool scannable_const =
 5109|   751k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   751k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   751k|    constexpr bool scannable_disabled =
 5113|   751k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   751k|    static_assert(scannable_disabled,
 5115|   751k|                  "Cannot scan an argument that has been disabled by "
 5116|   751k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   751k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   751k|    static_assert(
 5120|   751k|        scannable,
 5121|   751k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   751k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   751k|    return arg_value{arg};
 5125|   751k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|   751k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   751k|    {
 4911|   751k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7985|   604k|    {
 7986|   604k|        return m_str;
 7987|   604k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   604k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   604k|    {
 5436|   604k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|   604k|    {
 5389|   604k|        return m_argptrs;
 5390|   604k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|   604k|{
 8831|   604k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.6k, False: 582k]
  |  |  ------------------
  ------------------
 8832|  21.6k|        return unexpected(result.error());
 8833|  21.6k|    }
 8834|   582k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   582k|    static_cast<    \
  |  |  929|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   582k|    static_cast<    \
  |  |  929|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   604k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  23.4k|        : base(unexpect, std::move(e.error())),
 1474|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  23.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.4k|          m_has_value(false)
  446|  23.4k|    {
  447|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   751k|    {
 1177|   751k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|   728k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   728k|    {
 5840|   728k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|   728k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   728k|    {
 5626|   728k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   728k|        : base(std::in_place, std::forward<U>(val)),
 1428|   728k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   728k|    {
 1430|   728k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   728k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   728k|    {
  437|   728k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|   604k|    {
 5384|   604k|        return m_args;
 5385|   604k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   604k|        : m_str(r.str)
 7981|   604k|    {
 7982|   604k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   751k|    {
 1598|   751k|        return has_value();
 1599|   751k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.48M|    {
  485|  1.48M|        return m_has_value;
  486|  1.48M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   728k|    {
 1673|   728k|        return &value();
 1674|   728k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   728k|    {
 1627|   728k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   728k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   728k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   728k|        return this->get_value();
 1629|   728k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   728k|    {
  451|   728k|        return m_value;
  452|   728k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   147k|{
 5165|   147k|    check_scan_arg_types<T>();
 5166|       |
 5167|   147k|    basic_scan_arg<Context> arg;
 5168|   147k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   147k|    arg.m_value = make_value<Context>(value);
 5170|   147k|    return arg;
 5171|   147k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  23.4k|    {
 2724|  23.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  23.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  23.4k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  23.4k|    {
 2705|  23.4k|        return decay_copy(t.begin());
 2706|  23.4k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  75.6M|{
 1949|  75.6M|    return SCN_FWD(t);
  ------------------
  |  |  930|  75.6M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  75.6M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.50M|    {
 2781|  1.50M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.50M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.50M|    {
 2763|  1.50M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.50M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   302k|{
 8602|   302k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   302k|    auto result = vscan_impl(buffer, format, args);
 8605|   302k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 291k]
  |  |  ------------------
  ------------------
 8606|  10.8k|        return unexpected(result.error());
 8607|  10.8k|    }
 8608|   291k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   302k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   751k|{
 4729|   751k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   751k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   751k|                  "\n"
 4733|   751k|                  "Unsupported range type given as input to a scanning "
 4734|   751k|                  "function.\n"
 4735|   751k|                  "A range needs to have a character type (value type) "
 4736|   751k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   751k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   751k|                  "to be included.\n"
 4739|   751k|                  "See the scnlib documentation for more details.");
 4740|   751k|    static_assert(
 4741|   751k|        !std::is_same_v<T, custom_char_traits>,
 4742|   751k|        "\n"
 4743|   751k|        "Unsupported range type given as input to a scanning "
 4744|   751k|        "function.\n"
 4745|   751k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   751k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   751k|        "not supported.");
 4748|   751k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   751k|                  "\n"
 4750|   751k|                  "Unsupported range type given as input to a scanning "
 4751|   751k|                  "function.\n"
 4752|   751k|                  "file_marker_found cannot be used as an "
 4753|   751k|                  "source range type to scn::scan.\n"
 4754|   751k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   751k|                  "and do not provide an explicit source range, "
 4756|   751k|                  "or use scn::scan with a FILE* directly.");
 4757|   751k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   751k|                  "\n"
 4759|   751k|                  "Unsupported range type given as input to a scanning "
 4760|   751k|                  "function.\n"
 4761|   751k|                  "In order to be scannable, a range needs to satisfy "
 4762|   751k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   751k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   751k|                  "\n"
 4765|   751k|                  "Unsupported range type given as input to a scanning "
 4766|   751k|                  "function.\n"
 4767|   751k|                  "A range needs to model forward_range and have a valid "
 4768|   751k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   751k|                  "Examples of scannable ranges are std::string, "
 4770|   751k|                  "std::string_view, "
 4771|   751k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   751k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   751k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   751k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   751k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   751k|    else {
 4714|   751k|        return make_forward_scan_buffer(r);
 4715|   751k|    }
 4716|   751k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   751k|{
 4533|   751k|    return basic_scan_forward_buffer_impl(range);
 4534|   751k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   751k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   751k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   751k|          m_cursor(ranges::begin(*m_range))
 4419|   751k|    {
 4420|   751k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   751k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   751k|    {
 4391|   751k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   751k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   751k|    {
 4159|   751k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   751k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.48M|    {
 2724|  1.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.48M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.48M|    {
 2705|  1.48M|        return decay_copy(t.begin());
 2706|  1.48M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  2.20M|    {
 3326|  2.20M|        return m_iterator;
 3327|  2.20M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  23.7M|    {
 4424|  23.7M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 25.9k, False: 23.7M]
  ------------------
 4425|  25.9k|            return false;
 4426|  25.9k|        }
 4427|  23.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  23.7M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  23.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  23.7M|        }
 4430|  23.7M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 22.9M, False: 738k]
  ------------------
 4431|  22.9M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  22.9M|                                          this->m_current_view.begin(),
 4433|  22.9M|                                          this->m_current_view.end());
 4434|  22.9M|        }
 4435|  23.7M|        m_latest = *m_cursor;
 4436|  23.7M|        ++m_cursor;
 4437|  23.7M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  23.7M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  23.7M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  23.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  23.7M|        }
 4441|  23.7M|        return true;
 4442|  23.7M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  71.1M|    {
 2781|  71.1M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  71.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  71.1M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  71.1M|    {
 2763|  71.1M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  71.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  71.1M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  71.8M|    {
 3330|  71.8M|        return m_sentinel;
 3331|  71.8M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   751k|    {
 4079|   751k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   751k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   751k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  23.4k|        : base(unexpect, std::move(e.error())),
 1474|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  23.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  23.4k|          m_has_value(false)
  446|  23.4k|    {
  447|  23.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   751k|    {
 1177|   751k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   728k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   728k|                      ranges::iterator_t<SourceRange>>) {
 5935|   728k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   728k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   728k|    {
 2724|   728k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   728k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   728k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   728k|    {
 2705|   728k|        return decay_copy(t.begin());
 2706|   728k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|   728k|{
 5920|   728k|    return ranges::end(source);
 5921|   728k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   728k|    {
 2781|   728k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   728k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   728k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   728k|    {
 2763|   728k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   728k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   728k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   728k|        : base(std::in_place, std::forward<U>(val)),
 1428|   728k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   728k|    {
 1430|   728k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   728k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   728k|    {
  437|   728k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7985|   604k|    {
 7986|   604k|        return m_str;
 7987|   604k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8830|   604k|{
 8831|   604k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.6k, False: 582k]
  |  |  ------------------
  ------------------
 8832|  21.6k|        return unexpected(result.error());
 8833|  21.6k|    }
 8834|   582k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   582k|    static_cast<    \
  |  |  929|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   582k|    static_cast<    \
  |  |  929|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   604k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   751k|    {
 1598|   751k|        return has_value();
 1599|   751k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.50M|    {
  485|  1.50M|        return m_has_value;
  486|  1.50M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  23.4k|    {
 1604|  23.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  23.4k|        return this->get_unexpected().error();
 1606|  23.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  23.4k|    {
  468|  23.4k|        return m_unexpected;
  469|  23.4k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  23.4k|        : base(unexpect, std::move(e.error())),
 1474|  23.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  23.4k|    {
 1476|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  23.4k|        : m_has_value(false)
  625|  23.4k|    {
  626|  23.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  23.4k|    {
  689|  23.4k|        scn::detail::construct_at(unexpected_ptr(),
  690|  23.4k|                                  std::forward<Args>(args)...);
  691|  23.4k|        m_has_value = false;
  692|  23.4k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  46.8k|    {
  718|  46.8k|        return reinterpret_cast<unexpected<E>*>(
  719|  46.8k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  46.8k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  46.8k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   751k|    {
 1177|   751k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   582k|    {
 1653|   582k|        return value();
 1654|   582k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   728k|    {
 1627|   728k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   728k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   728k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   728k|        return this->get_value();
 1629|   728k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   728k|    {
  451|   728k|        return m_value;
  452|   728k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|   728k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   728k|    {
 5840|   728k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|   728k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   728k|    {
 5691|   728k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   728k|        : base(std::in_place, std::forward<U>(val)),
 1428|   728k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   728k|    {
 1430|   728k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   728k|        : m_has_value(true)
  615|   728k|    {
  616|   728k|        construct(std::forward<Args>(args)...);
  617|   728k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   728k|    {
  682|   728k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   728k|        m_has_value = true;
  684|   728k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   728k|{
  392|   728k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   728k|        T(std::forward<Args>(args)...);
  394|   728k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5831|   728k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.18M|    {
  706|  2.18M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.18M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.18M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5835|  1.45M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  1.48M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.48M|    static_cast<    \
  |  |  929|  1.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.48M|    static_cast<    \
  |  |  929|  1.48M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.48M|    {
 3312|  1.48M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   604k|        : m_str(r.str)
 7981|   604k|    {
 7982|   604k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   751k|    {
 1598|   751k|        return has_value();
 1599|   751k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.23M|    {
  675|  2.23M|        return m_has_value;
  676|  2.23M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   728k|    {
 1673|   728k|        return &value();
 1674|   728k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   728k|    {
 1627|   728k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   728k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   728k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   728k|        return this->get_value();
 1629|   728k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   728k|    {
  641|   728k|        return *value_ptr();
  642|   728k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|   728k|    {
 5708|   728k|        return ranges::begin(m_range);
 5709|   728k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   751k|    {
  631|   751k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 728k, False: 23.4k]
  ------------------
  632|   728k|            destroy_value();
  633|   728k|        }
  634|  23.4k|        else {
  635|  23.4k|            destroy_unexpected();
  636|  23.4k|        }
  637|   751k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   728k|    {
  696|   728k|        scn::detail::destroy_at(value_ptr());
  697|   728k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|   728k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   728k|    else {
  404|   728k|        p->~T();
  405|   728k|    }
  406|   728k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  23.4k|    {
  700|  23.4k|        scn::detail::destroy_at(unexpected_ptr());
  701|  23.4k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   302k|{
 8618|   302k|#if !SCN_DISABLE_LOCALE
 8619|   302k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   302k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   302k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   302k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   302k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 291k]
  |  |  ------------------
  ------------------
 8626|  10.8k|        return unexpected(result.error());
 8627|  10.8k|    }
 8628|   291k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   302k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   147k|{
 8642|   147k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   147k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   147k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 145k]
  |  |  ------------------
  ------------------
 8646|  1.80k|        return unexpected(result.error());
 8647|  1.80k|    }
 8648|   145k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   147k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   145k|    {
 1663|   145k|        return std::move(value());
 1664|   145k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   137k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   137k|    {
 3564|   137k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   137k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   137k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  7.83M|    {
 3570|  7.83M|        return m_code == good;
 3571|  7.83M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  48.6k|    {
 3581|  48.6k|        return m_code;
 3582|  48.6k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  3.67M|    {
 3326|  3.67M|        return m_iterator;
 3327|  3.67M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  77.6M|    {
 3326|  77.6M|        return m_iterator;
 3327|  77.6M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  1.04M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6292|  32.4k|    {
 6293|  32.4k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6293:13): [True: 0, False: 32.4k]
  |  Branch (6293:39): [True: 0, False: 0]
  ------------------
 6294|       |            // clang-format off
 6295|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6296|       |            // clang-format on
 6297|      0|        }
 6298|       |
 6299|  32.4k|        m_specs.width = width;
 6300|  32.4k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|  1.01M|    {
 6314|  1.01M|        m_specs.type = type;
 6315|  1.01M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6330|  36.7k|    {
 6331|  36.7k|        const auto begin_value = static_cast<unsigned>(begin);
 6332|  36.7k|        const auto end_value = static_cast<unsigned>(end);
 6333|  36.7k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  36.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6334|       |
 6335|  36.7k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  36.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 36.7k, False: 0]
  |  |  ------------------
  ------------------
 6336|       |            // No need to bit-twiddle with a mask, because with the
 6337|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6338|  36.7k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  36.7k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6339|   991k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6339:40): [True: 954k, False: 36.7k]
  ------------------
 6340|   954k|                m_specs.charset_literals[v / 8] |=
 6341|   954k|                    static_cast<unsigned char>(1ul << (v % 8));
 6342|   954k|            }
 6343|  36.7k|        }
 6344|      0|        else {
 6345|      0|            m_specs.charset_has_nonascii = true;
 6346|      0|        }
 6347|  36.7k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|  32.4k|    {
 6376|  32.4k|        SCN_UNLIKELY_ATTR
 6377|  32.4k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|  32.4k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  1.10M|    {
 6387|  1.10M|        return static_cast<bool>(m_error);
 6388|  1.10M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  48.6k|{
 3605|  48.6k|    return a.code() == b;
 3606|  48.6k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  48.6k|{
 3609|  48.6k|    return !(a == b);
 3610|  48.6k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  72.3M|{
 4043|       |    // Pattern_White_Space property
 4044|  72.3M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 14.3M, False: 57.9M]
  |  Branch (4044:27): [True: 2.22M, False: 12.1M]
  ------------------
 4045|  72.3M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 2.36M, False: 67.7M]
  ------------------
 4046|  72.3M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 363k, False: 67.3M]
  ------------------
 4047|  72.3M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 164k, False: 67.2M]
  ------------------
 4048|  72.3M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 196k, False: 67.0M]
  ------------------
 4049|  72.3M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 116k, False: 66.9M]
  ------------------
 4050|  72.3M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 45, False: 66.9M]
  ------------------
 4051|  72.3M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|  16.2k|{
 7074|  16.2k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 16.2k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 16.2k]
  ------------------
 7079|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 16.2k]
  ------------------
 7080|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 16.2k]
  ------------------
 7081|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 16.2k]
  ------------------
 7082|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 16.2k]
  ------------------
 7083|      0|            return arg_type_category::integer;
 7084|       |
 7085|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 16.2k]
  ------------------
 7086|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 16.2k]
  ------------------
 7087|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 16.2k]
  ------------------
 7088|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 16.2k]
  ------------------
 7089|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 0, False: 16.2k]
  ------------------
 7090|      0|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 16.2k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 16.2k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 16.2k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 16.2k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 16.2k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 16.2k]
  ------------------
 7102|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 16.2k]
  ------------------
 7103|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 16.2k]
  ------------------
 7104|      0|            return arg_type_category::floating;
 7105|       |
 7106|  1.80k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 1.80k, False: 14.4k]
  ------------------
 7107|  5.40k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 3.60k, False: 12.6k]
  ------------------
 7108|  9.01k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 3.60k, False: 12.6k]
  ------------------
 7109|  16.2k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 7.20k, False: 9.01k]
  ------------------
 7110|  16.2k|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 16.2k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 16.2k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  16.2k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|  16.2k|            SCN_CLANG_POP
 7121|  16.2k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|  16.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  16.2k|{
 3650|  16.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  16.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  16.2k|{
 3650|  16.2k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  16.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  16.2k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  8.35k|{
 3650|  8.35k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  8.35k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  8.35k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7215|  1.01M|{
 7216|  1.01M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.01M]
  ------------------
 7217|  1.01M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7217:9): [True: 981k, False: 34.5k]
  ------------------
 7218|  1.01M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7218:9): [True: 18.3k, False: 16.2k]
  ------------------
 7219|  1.01M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7219:9): [True: 0, False: 16.2k]
  ------------------
 7220|  1.01M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7220:9): [True: 0, False: 16.2k]
  ------------------
 7221|   999k|        return;
 7222|   999k|    }
 7223|  16.2k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7223:9): [True: 16.2k, False: 0]
  ------------------
 7224|  16.2k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  16.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.2k, False: 0]
  |  |  ------------------
  ------------------
 7225|       |            // clang-format off
 7226|  16.2k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7227|       |            // clang-format on
 7228|  16.2k|        }
 7229|      0|        return;
 7230|  16.2k|    }
 7231|      0|    SCN_UNLIKELY_ATTR
 7232|      0|    handler.on_error("Invalid type specifier for string");
 7233|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  20.1M|    {
 4203|  20.1M|        assert(m_begin);
 4204|  20.1M|        return m_end == nullptr;
 4205|  20.1M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|  86.9k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|  86.9k|    else {
 3716|  86.9k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|  86.9k|    }
 3718|  86.9k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|   455k|    {
 4220|   455k|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 455k]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|   455k|        return parent()->get_segment_starting_at(position());
 4226|   455k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  11.7M|    {
 4214|  11.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  11.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  11.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  11.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|   455k|    {
 4109|   455k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   455k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 256k, False: 198k]
  |  |  ------------------
  ------------------
 4110|   455k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   256k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   256k|        }
 4113|   198k|        const auto start = pos - m_putback_buffer.size();
 4114|   198k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   198k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   198k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   198k|        return m_current_view.substr(start);
 4116|   198k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|   513k|    {
 4198|   513k|        return m_position;
 4199|   513k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|   298k|    {
 4131|   298k|        return m_is_contiguous;
 4132|   298k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   432M|    {
 4203|   432M|        assert(m_begin);
 4204|   432M|        return m_end == nullptr;
 4205|   432M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   730k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   730k|    else {
 3716|   730k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   730k|    }
 3718|   730k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  2.20M|    {
 4220|  2.20M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 2.20M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  2.20M|        return parent()->get_segment_starting_at(position());
 4226|  2.20M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|   251M|    {
 4214|   251M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   251M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   251M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   251M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   251M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  2.20M|    {
 4109|  2.20M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.45M, False: 749k]
  |  |  ------------------
  ------------------
 4110|  2.20M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  1.45M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  1.45M|        }
 4113|   749k|        const auto start = pos - m_putback_buffer.size();
 4114|   749k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   749k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   749k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   749k|        return m_current_view.substr(start);
 4116|   749k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  2.65M|    {
 4198|  2.65M|        return m_position;
 4199|  2.65M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  2.25M|    {
 4131|  2.25M|        return m_is_contiguous;
 4132|  2.25M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   442k|    {
 3180|   442k|        return static_cast<D&>(*this);
 3181|   442k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|   442k|    {
 3221|   442k|        return detail::to_address(ranges::begin(derived()));
 3222|   442k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  1.46M|    {
 3180|  1.46M|        return static_cast<D&>(*this);
 3181|  1.46M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  1.46M|    {
 3221|  1.46M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.46M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|  41.0k|    {
 8180|  41.0k|        return ranges::subrange{begin(), end()};
 8181|  41.0k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|   121k|    {
 8164|   121k|        return m_current;
 8165|   121k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|  41.0k|    {
 8172|  41.0k|        return ranges::default_sentinel;
 8173|  41.0k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  1.35M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.35M|    static_cast<    \
  |  |  929|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.35M|    static_cast<    \
  |  |  929|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.35M|    {
 3312|  1.35M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|  2.50M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  91.8k|    {
 1837|  91.8k|        return detail::transform_error_impl(std::move(*this),
 1838|  91.8k|                                            std::forward<F>(f));
 1839|  91.8k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|  91.8k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  91.8k|    else {
 1333|  91.8k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  91.8k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  91.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 89.5k, False: 2.27k]
  |  |  ------------------
  ------------------
 1335|  91.8k|                   ? result(*std::forward<Exp>(exp))
 1336|  91.8k|                   : result(unexpect,
 1337|  2.27k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.27k|                                           std::forward<Exp>(exp).error()));
 1339|  91.8k|    }
 1340|  91.8k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   183k|    {
  485|   183k|        return m_has_value;
  486|   183k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|  89.5k|    {
 1663|  89.5k|        return std::move(value());
 1664|  89.5k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|  89.5k|    {
 1627|  89.5k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  89.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  89.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  89.5k|        return this->get_value();
 1629|  89.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  89.5k|    {
  451|  89.5k|        return m_value;
  452|  89.5k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   213k|        : base(std::in_place, std::forward<U>(val)),
 1428|   213k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   213k|    {
 1430|   213k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   213k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   213k|    {
  437|   213k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   228k|    {
 1177|   228k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  15.9k|{
 1211|  15.9k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  15.9k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.27k|    {
 1614|  2.27k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.27k|        return std::move(this->get_unexpected().error());
 1616|  2.27k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.27k|    {
  468|  2.27k|        return m_unexpected;
  469|  2.27k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  31.9k|    {
  361|  31.9k|        return m_unexpected;
  362|  31.9k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.27k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.27k|    {
 1486|  2.27k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  14.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  14.7k|          m_has_value(false)
  446|  14.7k|    {
  447|  14.7k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   302k|    {
 8180|   302k|        return ranges::subrange{begin(), end()};
 8181|   302k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|   902k|    {
 8164|   902k|        return m_current;
 8165|   902k|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   302k|    {
 8172|   302k|        return ranges::default_sentinel;
 8173|   302k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  27.2M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  27.2M|    static_cast<    \
  |  |  929|  27.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  27.2M|    static_cast<    \
  |  |  929|  27.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  27.2M|    {
 3312|  27.2M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   737k|    {
 1837|   737k|        return detail::transform_error_impl(std::move(*this),
 1838|   737k|                                            std::forward<F>(f));
 1839|   737k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   737k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   737k|    else {
 1333|   737k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   737k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   737k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 733k, False: 3.37k]
  |  |  ------------------
  ------------------
 1335|   737k|                   ? result(*std::forward<Exp>(exp))
 1336|   737k|                   : result(unexpect,
 1337|  3.37k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.37k|                                           std::forward<Exp>(exp).error()));
 1339|   737k|    }
 1340|   737k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.47M|    {
  485|  1.47M|        return m_has_value;
  486|  1.47M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   733k|    {
 1663|   733k|        return std::move(value());
 1664|   733k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   733k|    {
 1627|   733k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   733k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   733k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   733k|        return this->get_value();
 1629|   733k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   733k|    {
  451|   733k|        return m_value;
  452|   733k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  1.75M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.75M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.75M|    {
 1430|  1.75M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  1.75M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.75M|    {
  437|  1.75M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.78M|    {
 1177|  1.78M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  3.37k|    {
 1614|  3.37k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  3.37k|        return std::move(this->get_unexpected().error());
 1616|  3.37k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  3.37k|    {
  468|  3.37k|        return m_unexpected;
  469|  3.37k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  3.37k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  3.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  3.37k|    {
 1486|  3.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  29.0k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.0k|          m_has_value(false)
  446|  29.0k|    {
  447|  29.0k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  40.7k|        : m_unexpected(std::forward<Err>(e))
  346|  40.7k|    {
  347|  40.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  40.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  40.7k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  25.5k|        : base(unexpect, std::move(e.error())),
 1474|  25.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  25.5k|    {
 1476|  25.5k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  29.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  29.1k|          m_has_value(false)
  446|  29.1k|    {
  447|  29.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   376k|    {
 1177|   376k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   346k|        : base(std::in_place, std::forward<U>(val)),
 1428|   346k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   346k|    {
 1430|   346k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   346k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   346k|    {
  437|   346k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   376k|    {
 1598|   376k|        return has_value();
 1599|   376k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|   753k|    {
  485|   753k|        return m_has_value;
  486|   753k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  29.1k|    {
 1604|  29.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  29.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  29.1k|        return this->get_unexpected().error();
 1606|  29.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  29.1k|    {
  468|  29.1k|        return m_unexpected;
  469|  29.1k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   288k|    {
 1663|   288k|        return std::move(value());
 1664|   288k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   347k|    {
 1627|   347k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   347k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   347k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   347k|        return this->get_value();
 1629|   347k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   347k|    {
  451|   347k|        return m_value;
  452|   347k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  51.3k|        : base(unexpect, std::move(e.error())),
 1474|  51.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  51.3k|    {
 1476|  51.3k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  58.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  58.1k|          m_has_value(false)
  446|  58.1k|    {
  447|  58.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.56M|    {
 1177|  3.56M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  3.50M|        : base(std::in_place, std::forward<U>(val)),
 1428|  3.50M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  3.50M|    {
 1430|  3.50M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  3.50M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  3.50M|    {
  437|  3.50M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  3.56M|    {
 1598|  3.56M|        return has_value();
 1599|  3.56M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  7.13M|    {
  485|  7.13M|        return m_has_value;
  486|  7.13M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  58.1k|    {
 1604|  58.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  58.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  58.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  58.1k|        return this->get_unexpected().error();
 1606|  58.1k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  58.1k|    {
  468|  58.1k|        return m_unexpected;
  469|  58.1k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  2.92M|    {
 1663|  2.92M|        return std::move(value());
 1664|  2.92M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  3.50M|    {
 1627|  3.50M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  3.50M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.50M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  3.50M|        return this->get_value();
 1629|  3.50M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  3.50M|    {
  451|  3.50M|        return m_value;
  452|  3.50M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   149k|    {
 1837|   149k|        return detail::transform_error_impl(std::move(*this),
 1838|   149k|                                            std::forward<F>(f));
 1839|   149k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   149k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   149k|    else {
 1333|   149k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   149k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   149k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 146k, False: 3.58k]
  |  |  ------------------
  ------------------
 1335|   149k|                   ? result(*std::forward<Exp>(exp))
 1336|   149k|                   : result(unexpect,
 1337|  3.58k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.58k|                                           std::forward<Exp>(exp).error()));
 1339|   149k|    }
 1340|   149k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   299k|    {
  485|   299k|        return m_has_value;
  486|   299k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   146k|    {
 1663|   146k|        return std::move(value());
 1664|   146k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   146k|    {
 1627|   146k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   146k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   146k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   146k|        return this->get_value();
 1629|   146k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   146k|    {
  451|   146k|        return m_value;
  452|   146k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  3.58k|    {
 1614|  3.58k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.58k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.58k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  3.58k|        return std::move(this->get_unexpected().error());
 1616|  3.58k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  3.58k|    {
  468|  3.58k|        return m_unexpected;
  469|  3.58k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  3.58k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  3.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  3.58k|    {
 1486|  3.58k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  5.71M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  12.5k|        : base(unexpect, std::move(e.error())),
 1474|  12.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  12.5k|    {
 1476|  12.5k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  1.04M|    {
 4289|  1.04M|        return x.is_at_end();
 4290|  1.04M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  2.15M|    {
 4333|  2.15M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 2.15M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  2.15M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 2.15M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  2.15M|        return !read_at_position();
 4340|  2.15M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  5.97M|    {
 4313|  5.97M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  5.97M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.97M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  5.97M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 5.97M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  5.97M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  5.97M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.85M, False: 1.11M]
  |  |  ------------------
  ------------------
 4320|  4.85M|            return true;
 4321|  4.85M|        }
 4322|       |
 4323|  2.22M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 1.11M, False: 1.10M]
  ------------------
 4324|  1.11M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 18.5k, False: 1.10M]
  ------------------
 4325|  18.5k|                return false;
 4326|  18.5k|            }
 4327|  1.11M|        }
 4328|  1.10M|        return true;
 4329|  1.11M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  8.19M|    {
 4089|  8.19M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  8.19M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  1.96M|    {
 4248|  1.96M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  1.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  1.96M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 1.96M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  1.96M|        auto res = read_at_position();
 4257|  1.96M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  1.96M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.96M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  1.96M|        return parent()->get_character_at(m_position);
 4259|  1.96M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  1.96M|    {
 4120|  1.96M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  1.96M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.08M, False: 886k]
  |  |  ------------------
  ------------------
 4121|  1.96M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  1.08M|            return m_putback_buffer[pos];
 4123|  1.08M|        }
 4124|   886k|        const auto start = pos - m_putback_buffer.size();
 4125|   886k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   886k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   886k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|   886k|        return m_current_view[start];
 4127|   886k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|  89.5k|        : base(std::in_place, std::forward<U>(val)),
 1428|  89.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  89.5k|    {
 1430|  89.5k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  89.5k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  89.5k|    {
  437|  89.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  91.8k|    {
 1177|  91.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  2.27k|        : base(unexpect, std::move(e.error())),
 1474|  2.27k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.27k|    {
 1476|  2.27k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  2.27k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.27k|          m_has_value(false)
  446|  2.27k|    {
  447|  2.27k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  15.9k|        : m_unexpected(std::forward<Args>(args)...)
  355|  15.9k|    {
  356|  15.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  15.9k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|   841k|    {
 4283|   841k|        return !(lhs == rhs);
 4284|   841k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|   843k|    {
 4278|   843k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 843k, False: 0]
  |  Branch (4278:46): [True: 146k, False: 697k]
  ------------------
 4279|   843k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  1.85M|    {
 4234|  1.85M|        ++m_position;
 4235|  1.85M|        (void)read_at_position();
 4236|  1.85M|        return *this;
 4237|  1.85M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  15.9k|        : m_unexpected(std::forward<Err>(e))
  346|  15.9k|    {
  347|  15.9k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  15.9k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|    994|        : base(unexpect, std::move(e.error())),
 1474|    994|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|    994|    {
 1476|    994|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|    994|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|    994|          m_has_value(false)
  446|    994|    {
  447|    994|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  74.4k|    {
 1177|  74.4k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  73.4k|        : base(std::in_place, std::forward<U>(val)),
 1428|  73.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  73.4k|    {
 1430|  73.4k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|  73.4k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  73.4k|    {
  437|  73.4k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  74.4k|    {
 1598|  74.4k|        return has_value();
 1599|  74.4k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   148k|    {
  485|   148k|        return m_has_value;
  486|   148k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|    994|    {
 1604|    994|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|    994|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    994|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|    994|        return this->get_unexpected().error();
 1606|    994|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|    994|    {
  468|    994|        return m_unexpected;
  469|    994|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|  73.4k|    {
 1663|  73.4k|        return std::move(value());
 1664|  73.4k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|  73.4k|    {
 1627|  73.4k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  73.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  73.4k|        return this->get_value();
 1629|  73.4k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  73.4k|    {
  451|  73.4k|        return m_value;
  452|  73.4k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  3.27M|    {
 3330|  3.27M|        return m_sentinel;
 3331|  3.27M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|  96.5k|    {
 3326|  96.5k|        return m_iterator;
 3327|  96.5k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|  96.5k|    {
 3330|  96.5k|        return m_sentinel;
 3331|  96.5k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   228k|    {
 1598|   228k|        return has_value();
 1599|   228k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   457k|    {
  485|   457k|        return m_has_value;
  486|   457k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  14.7k|    {
 1604|  14.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  14.7k|        return this->get_unexpected().error();
 1606|  14.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  14.7k|    {
  468|  14.7k|        return m_unexpected;
  469|  14.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   177k|    {
 1663|   177k|        return std::move(value());
 1664|   177k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   213k|    {
 1627|   213k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   213k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   213k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   213k|        return this->get_value();
 1629|   213k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   213k|    {
  451|   213k|        return m_value;
  452|   213k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|  90.1k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  90.1k|    static_cast<    \
  |  |  929|  90.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  90.1k|    static_cast<    \
  |  |  929|  90.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  90.1k|    {
 3312|  90.1k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  1.11M|    {
 4300|  1.11M|        return !x.is_at_end();
 4301|  1.11M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  3.58k|        : base(unexpect, std::move(e.error())),
 1474|  3.58k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.58k|    {
 1476|  3.58k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  3.58k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.58k|          m_has_value(false)
  446|  3.58k|    {
  447|  3.58k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   149k|    {
 1177|   149k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   146k|        : base(std::in_place, std::forward<U>(val)),
 1428|   146k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   146k|    {
 1430|   146k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   146k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   146k|    {
  437|   146k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.43k|        : base(unexpect, std::move(e.error())),
 1474|  1.43k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.43k|    {
 1476|  1.43k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.43k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.43k|          m_has_value(false)
  446|  1.43k|    {
  447|  1.43k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   121k|    {
 1177|   121k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   119k|        : base(std::in_place, std::forward<U>(val)),
 1428|   119k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   119k|    {
 1430|   119k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   119k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   119k|    {
  437|   119k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   121k|    {
 1598|   121k|        return has_value();
 1599|   121k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   242k|    {
  485|   242k|        return m_has_value;
  486|   242k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  1.43k|    {
 1604|  1.43k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.43k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.43k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.43k|        return this->get_unexpected().error();
 1606|  1.43k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.43k|    {
  468|  1.43k|        return m_unexpected;
  469|  1.43k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   119k|    {
 1663|   119k|        return std::move(value());
 1664|   119k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   119k|    {
 1627|   119k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   119k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   119k|        return this->get_value();
 1629|   119k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   119k|    {
  451|   119k|        return m_value;
  452|   119k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   442k|    {
 2855|   442k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   442k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   442k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   442k|    {
 2836|   442k|        return t.data();
 2837|   442k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   105k|        : base(unexpect, std::move(e.error())),
 1474|   105k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   105k|    {
 1476|   105k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   105k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   105k|          m_has_value(false)
  446|   105k|    {
  447|   105k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.52M|    {
 1177|  2.52M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  2.41M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.41M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.41M|    {
 1430|  2.41M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  2.41M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.41M|    {
  437|  2.41M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  36.3k|    {
 1653|  36.3k|        return value();
 1654|  36.3k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  58.8k|    {
 1653|  58.8k|        return value();
 1654|  58.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|    614|        : base(std::in_place, std::forward<U>(val)),
 1428|    614|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    614|    {
 1430|    614|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|    614|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    614|    {
  437|    614|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  1.22k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.22k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.22k|    {
 1430|  1.22k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.22k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.22k|    {
  437|  1.22k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  25.6k|        : base(unexpect, std::move(e.error())),
 1474|  25.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  25.6k|    {
 1476|  25.6k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  24.8M|    {
 4289|  24.8M|        return x.is_at_end();
 4290|  24.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  48.8M|    {
 4333|  48.8M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 48.8M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  48.8M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 48.8M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  48.8M|        return !read_at_position();
 4340|  48.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|   130M|    {
 4313|   130M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   130M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   130M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   130M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 130M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   130M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   130M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 106M, False: 23.7M]
  |  |  ------------------
  ------------------
 4320|   106M|            return true;
 4321|   106M|        }
 4322|       |
 4323|  47.4M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 23.7M, False: 23.7M]
  ------------------
 4324|  23.7M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 25.9k, False: 23.7M]
  ------------------
 4325|  25.9k|                return false;
 4326|  25.9k|            }
 4327|  23.7M|        }
 4328|  23.7M|        return true;
 4329|  23.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|   177M|    {
 4089|   177M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   177M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  48.1M|    {
 4248|  48.1M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  48.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  48.1M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 48.1M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  48.1M|        auto res = read_at_position();
 4257|  48.1M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  48.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  48.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  48.1M|        return parent()->get_character_at(m_position);
 4259|  48.1M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  48.1M|    {
 4120|  48.1M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  48.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.1M, False: 22.9M]
  |  |  ------------------
  ------------------
 4121|  48.1M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  25.1M|            return m_putback_buffer[pos];
 4123|  25.1M|        }
 4124|  22.9M|        const auto start = pos - m_putback_buffer.size();
 4125|  22.9M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  22.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  22.9M|        return m_current_view[start];
 4127|  22.9M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   134M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   134M|    else {
 3810|       |        // utf-32
 3811|   134M|        static_assert(sizeof(U) == 4);
 3812|   134M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   134M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   134M|        return 1;
 3814|   134M|    }
 3815|   134M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   733k|        : base(std::in_place, std::forward<U>(val)),
 1428|   733k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   733k|    {
 1430|   733k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   733k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   733k|    {
  437|   733k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   737k|    {
 1177|   737k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  3.37k|        : base(unexpect, std::move(e.error())),
 1474|  3.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.37k|    {
 1476|  3.37k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  3.37k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.37k|          m_has_value(false)
  446|  3.37k|    {
  447|  3.37k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  9.84M|    {
 4283|  9.84M|        return !(lhs == rhs);
 4284|  9.84M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  9.85M|    {
 4278|  9.85M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 9.85M, False: 0]
  |  Branch (4278:46): [True: 298k, False: 9.55M]
  ------------------
 4279|  9.85M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  33.2M|    {
 4234|  33.2M|        ++m_position;
 4235|  33.2M|        (void)read_at_position();
 4236|  33.2M|        return *this;
 4237|  33.2M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   134M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   134M|    else {
 4016|   134M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   134M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   134M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   134M|        auto cp = static_cast<char32_t>(input.front());
 4018|   134M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   134M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 543k, False: 133M]
  |  |  ------------------
  ------------------
 4019|   543k|            return invalid_code_point;
 4020|   543k|        }
 4021|   133M|        return cp;
 4022|   134M|    }
 4023|   134M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.35k|        : base(unexpect, std::move(e.error())),
 1474|  1.35k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.35k|    {
 1476|  1.35k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.35k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.35k|          m_has_value(false)
  446|  1.35k|    {
  447|  1.35k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   588k|    {
 1177|   588k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   587k|        : base(std::in_place, std::forward<U>(val)),
 1428|   587k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   587k|    {
 1430|   587k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   587k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   587k|    {
  437|   587k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   588k|    {
 1598|   588k|        return has_value();
 1599|   588k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.17M|    {
  485|  1.17M|        return m_has_value;
  486|  1.17M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.35k|    {
 1604|  1.35k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.35k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.35k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.35k|        return this->get_unexpected().error();
 1606|  1.35k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.35k|    {
  468|  1.35k|        return m_unexpected;
  469|  1.35k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   587k|    {
 1663|   587k|        return std::move(value());
 1664|   587k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   587k|    {
 1627|   587k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   587k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   587k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   587k|        return this->get_value();
 1629|   587k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   587k|    {
  451|   587k|        return m_value;
  452|   587k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  75.1M|    {
 3330|  75.1M|        return m_sentinel;
 3331|  75.1M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|   741k|    {
 3326|   741k|        return m_iterator;
 3327|   741k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|   741k|    {
 3330|   741k|        return m_sentinel;
 3331|   741k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  1.78M|    {
 1598|  1.78M|        return has_value();
 1599|  1.78M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.56M|    {
  485|  3.56M|        return m_has_value;
  486|  3.56M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  29.0k|    {
 1604|  29.0k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  29.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  29.0k|        return this->get_unexpected().error();
 1606|  29.0k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  29.0k|    {
  468|  29.0k|        return m_unexpected;
  469|  29.0k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.46M|    {
 1663|  1.46M|        return std::move(value());
 1664|  1.46M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.75M|    {
 1627|  1.75M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.75M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.75M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.75M|        return this->get_value();
 1629|  1.75M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.75M|    {
  451|  1.75M|        return m_value;
  452|  1.75M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  63.2M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  63.2M|    else {
 3701|  63.2M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  63.2M|                                       to_address(first), to_address(last)))};
 3703|  63.2M|    }
 3704|  63.2M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   189M|{
  326|   189M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   189M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   189M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   733k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   733k|    static_cast<    \
  |  |  929|   733k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   733k|    static_cast<    \
  |  |  929|   733k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   733k|    {
 3312|   733k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  24.0M|    {
 4300|  24.0M|        return !x.is_at_end();
 4301|  24.0M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  6.75k|        : base(unexpect, std::move(e.error())),
 1474|  6.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  6.75k|    {
 1476|  6.75k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  6.75k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  6.75k|          m_has_value(false)
  446|  6.75k|    {
  447|  6.75k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.47M|    {
 1177|  1.47M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  1.46M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.46M|    {
 1430|  1.46M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.46M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.46M|    {
  437|  1.46M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  2.94M|    {
  485|  2.94M|        return m_has_value;
  486|  2.94M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.46M|    {
 1627|  1.46M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.46M|        return this->get_value();
 1629|  1.46M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.46M|    {
  451|  1.46M|        return m_value;
  452|  1.46M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.70k|        : base(unexpect, std::move(e.error())),
 1474|  2.70k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.70k|    {
 1476|  2.70k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.70k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.70k|          m_has_value(false)
  446|  2.70k|    {
  447|  2.70k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.17M|    {
 1177|  1.17M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.17M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.17M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.17M|    {
 1430|  1.17M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.17M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.17M|    {
  437|  1.17M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.47M|    {
 1837|  1.47M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.47M|                                            std::forward<F>(f));
 1839|  1.47M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.47M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.47M|    else {
 1333|  1.47M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.47M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.47M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.46M, False: 6.75k]
  |  |  ------------------
  ------------------
 1335|  1.47M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.47M|                   : result(unexpect,
 1337|  6.75k|                            trivial_invoke(std::forward<F>(f),
 1338|  6.75k|                                           std::forward<Exp>(exp).error()));
 1339|  1.47M|    }
 1340|  1.47M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.46M|    {
 1663|  1.46M|        return std::move(value());
 1664|  1.46M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  6.75k|    {
 1614|  6.75k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  6.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  6.75k|        return std::move(this->get_unexpected().error());
 1616|  6.75k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  6.75k|    {
  468|  6.75k|        return m_unexpected;
  469|  6.75k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  6.75k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  6.75k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  6.75k|    {
 1486|  6.75k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.17M|    {
 1598|  1.17M|        return has_value();
 1599|  1.17M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.35M|    {
  485|  2.35M|        return m_has_value;
  486|  2.35M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.70k|    {
 1604|  2.70k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.70k|        return this->get_unexpected().error();
 1606|  2.70k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.70k|    {
  468|  2.70k|        return m_unexpected;
  469|  2.70k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.17M|    {
 1663|  1.17M|        return std::move(value());
 1664|  1.17M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.17M|    {
 1627|  1.17M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.17M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.17M|        return this->get_value();
 1629|  1.17M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.17M|    {
  451|  1.17M|        return m_value;
  452|  1.17M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.46M|    {
 2855|  1.46M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.46M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.46M|    {
 2836|  1.46M|        return t.data();
 2837|  1.46M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   291k|    {
 1653|   291k|        return value();
 1654|   291k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   582k|    {
 1653|   582k|        return value();
 1654|   582k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|     98|        : base(std::in_place, std::forward<U>(val)),
 1428|     98|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|     98|    {
 1430|     98|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|     98|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|     98|    {
  437|     98|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    196|        : base(std::in_place, std::forward<U>(val)),
 1428|    196|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    196|    {
 1430|    196|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    196|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    196|    {
  437|    196|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   216k|    {
 5476|   216k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   216k|        return static_cast<std::size_t>(m_desc &
 5481|   216k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   216k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|   433k|    {
 5501|   433k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   433k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   216k|    {
 5444|   216k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   216k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   216k|        const auto t = type(id);
 5456|   216k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   216k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 216k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   216k|        basic_scan_arg<Context> arg;
 5461|   216k|        arg.m_type = t;
 5462|   216k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 216k, False: 0]
  ------------------
 5463|   216k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   216k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   216k|        return arg;
 5469|   216k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   216k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   216k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   216k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   216k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   216k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   216k|    {
 5505|   216k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   216k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|   374k|    {
 5257|   374k|        return m_type != detail::arg_type::none_type;
 5258|   374k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  89.9k|{
 8428|  89.9k|#define SCN_VISIT(Type)                                         \
 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  89.9k|    }                                                           \
 8432|  89.9k|    else {                                                      \
 8433|  89.9k|        return vis(monostate_val);                              \
 8434|  89.9k|    }
 8435|       |
 8436|  89.9k|    monostate monostate_val{};
 8437|       |
 8438|  89.9k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 89.9k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 89.9k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 89.9k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 89.9k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 89.9k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 89.9k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 89.9k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 89.9k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 89.9k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 89.9k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 89.9k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 89.9k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 89.9k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 89.9k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 89.9k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 89.9k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 89.9k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 89.9k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|  44.9k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 44.9k, False: 44.9k]
  ------------------
 8476|  44.9k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  44.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  44.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  44.9k|    }                                                           \
  |  | 8432|  44.9k|    else {                                                      \
  |  | 8433|  44.9k|        return vis(monostate_val);                              \
  |  | 8434|  44.9k|    }
  ------------------
 8477|  89.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 44.9k, False: 44.9k]
  ------------------
 8478|  89.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  89.9k|    }                                                           \
  |  | 8432|  89.9k|    else {                                                      \
  |  | 8433|  89.9k|        return vis(monostate_val);                              \
  |  | 8434|  89.9k|    }
  ------------------
 8479|  89.9k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 89.9k]
  ------------------
 8480|  89.9k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  89.9k|    }                                                           \
  |  | 8432|  89.9k|    else {                                                      \
  |  | 8433|  89.9k|        return vis(monostate_val);                              \
  |  | 8434|  89.9k|    }
  ------------------
 8481|  89.9k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 89.9k]
  ------------------
 8482|  89.9k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  89.9k|    }                                                           \
  |  | 8432|  89.9k|    else {                                                      \
  |  | 8433|  89.9k|        return vis(monostate_val);                              \
  |  | 8434|  89.9k|    }
  ------------------
 8483|  89.9k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 89.9k]
  ------------------
 8484|  89.9k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  89.9k|    }                                                           \
  |  | 8432|  89.9k|    else {                                                      \
  |  | 8433|  89.9k|        return vis(monostate_val);                              \
  |  | 8434|  89.9k|    }
  ------------------
 8485|  89.9k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 89.9k]
  ------------------
 8486|  89.9k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  89.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  89.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  89.9k|    }                                                           \
  |  | 8432|  89.9k|    else {                                                      \
  |  | 8433|  89.9k|        return vis(monostate_val);                              \
  |  | 8434|  89.9k|    }
  ------------------
 8487|       |
 8488|  89.9k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 89.9k]
  ------------------
 8489|  89.9k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  89.9k|            return vis(
 8491|  89.9k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 89.9k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 89.9k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  89.9k|            SCN_CLANG_POP
 8506|  89.9k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   120k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   120k|    {
 5555|   120k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|  44.7k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|  44.7k|    {
 8149|  44.7k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|   120k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   120k|    static_cast<    \
  |  |  929|   120k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   120k|    {
 8067|   120k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|  99.6k|{
 4353|  99.6k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 99.6k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|  99.6k|    return ranges::subrange{forward_iterator{this, 0},
 4358|  99.6k|                            ranges::default_sentinel};
 4359|  99.6k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|  99.6k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|  99.6k|    {
 4185|  99.6k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|  99.6k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  99.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  99.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|  99.6k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  54.9k|{
 8428|  54.9k|#define SCN_VISIT(Type)                                         \
 8429|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  54.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  54.9k|    }                                                           \
 8432|  54.9k|    else {                                                      \
 8433|  54.9k|        return vis(monostate_val);                              \
 8434|  54.9k|    }
 8435|       |
 8436|  54.9k|    monostate monostate_val{};
 8437|       |
 8438|  54.9k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 54.9k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 54.9k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 54.9k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 54.9k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 54.9k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 54.9k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 54.9k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 54.9k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 54.9k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 54.9k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 54.9k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 54.9k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 54.9k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 54.9k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 54.9k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 54.9k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 54.9k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 54.9k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 54.9k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|  54.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 54.9k, False: 0]
  ------------------
 8478|  54.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.9k|    }                                                           \
  |  | 8432|  54.9k|    else {                                                      \
  |  | 8433|  54.9k|        return vis(monostate_val);                              \
  |  | 8434|  54.9k|    }
  ------------------
 8479|  54.9k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 54.9k]
  ------------------
 8480|  54.9k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.9k|    }                                                           \
  |  | 8432|  54.9k|    else {                                                      \
  |  | 8433|  54.9k|        return vis(monostate_val);                              \
  |  | 8434|  54.9k|    }
  ------------------
 8481|  54.9k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 54.9k]
  ------------------
 8482|  54.9k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.9k|    }                                                           \
  |  | 8432|  54.9k|    else {                                                      \
  |  | 8433|  54.9k|        return vis(monostate_val);                              \
  |  | 8434|  54.9k|    }
  ------------------
 8483|  54.9k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 54.9k]
  ------------------
 8484|  54.9k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.9k|    }                                                           \
  |  | 8432|  54.9k|    else {                                                      \
  |  | 8433|  54.9k|        return vis(monostate_val);                              \
  |  | 8434|  54.9k|    }
  ------------------
 8485|  54.9k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 54.9k]
  ------------------
 8486|  54.9k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  54.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  54.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  54.9k|    }                                                           \
  |  | 8432|  54.9k|    else {                                                      \
  |  | 8433|  54.9k|        return vis(monostate_val);                              \
  |  | 8434|  54.9k|    }
  ------------------
 8487|       |
 8488|  54.9k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 54.9k]
  ------------------
 8489|  54.9k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  54.9k|            return vis(
 8491|  54.9k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 54.9k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 54.9k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  54.9k|            SCN_CLANG_POP
 8506|  54.9k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|  75.6k|{
 7055|  75.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|  75.6k|    handler.check_args_exhausted();
 7057|  75.6k|    return handler.get_error();
 7058|  75.6k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|  75.6k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|  75.6k|    auto begin = format.data();
 7024|  75.6k|    auto it = begin;
 7025|  75.6k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   133k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 75.6k, False: 57.6k]
  ------------------
 7028|  75.6k|        const auto ch = *it++;
 7029|  75.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 75.6k, False: 0]
  ------------------
 7030|  75.6k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|  75.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|  75.6k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 18.0k, False: 57.6k]
  ------------------
 7034|  18.0k|                return;
 7035|  18.0k|            }
 7036|  75.6k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|  75.6k|    }
 7047|       |
 7048|  57.6k|    handler.on_literal_text(begin, end);
 7049|  57.6k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|  75.6k|{
 6953|  75.6k|    struct id_adapter {
 6954|  75.6k|        constexpr void operator()()
 6955|  75.6k|        {
 6956|  75.6k|            arg_id = handler.on_arg_id();
 6957|  75.6k|        }
 6958|  75.6k|        constexpr void operator()(std::size_t id)
 6959|  75.6k|        {
 6960|  75.6k|            arg_id = handler.on_arg_id(id);
 6961|  75.6k|        }
 6962|       |
 6963|  75.6k|        constexpr void on_error(const char* msg)
 6964|  75.6k|        {
 6965|  75.6k|            SCN_UNLIKELY_ATTR
 6966|  75.6k|            handler.on_error(msg);
 6967|  75.6k|        }
 6968|       |
 6969|  75.6k|        Handler& handler;
 6970|  75.6k|        std::size_t arg_id;
 6971|  75.6k|    };
 6972|       |
 6973|  75.6k|    ++begin;
 6974|  75.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|  75.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 75.6k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|  75.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 75.6k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|  75.6k|    else {
 6986|  75.6k|        auto adapter = id_adapter{handler, 0};
 6987|  75.6k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|  75.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|  75.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 75.6k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|  75.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 75.6k, False: 0]
  ------------------
 6998|  75.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|  75.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|  75.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   151k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.20k, False: 68.4k]
  |  |  |  Branch (859:45): [True: 0, False: 75.6k]
  |  |  |  Branch (859:45): [True: 7.20k, False: 68.4k]
  |  |  ------------------
  ------------------
 7004|  7.20k|                handler.on_error("Unknown format specifier");
 7005|  7.20k|                return begin;
 7006|  7.20k|            }
 7007|  75.6k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|  75.6k|    }
 7014|  68.4k|    return begin + 1;
 7015|  75.6k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|   120k|    {
 8050|   120k|        return m_args.get(id);
 8051|   120k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|   109k|    {
 8060|   109k|        return m_locale;
 8061|   109k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   120k|    {
 5576|   120k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   120k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 120k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   120k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   120k|        do_check_arg_id(id);
 5584|   120k|        return id;
 5585|   120k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   120k|{
 6064|   120k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   120k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   120k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|  75.6k|{
 6454|  75.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  75.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|  75.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 75.6k, False: 0]
  |  Branch (6455:26): [True: 0, False: 75.6k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|  75.6k|    handler();
 6460|  75.6k|    return begin;
 6461|  75.6k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6402|  10.8k|{
 6403|  10.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  10.8k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  10.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  10.8k|    unsigned long long value = 0;
 6407|  21.6k|    do {
 6408|  21.6k|        value *= 10;
 6409|  21.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  21.6k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 0, False: 21.6k]
  ------------------
 6411|  21.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|      0|            return -1;
 6413|      0|        }
 6414|  21.6k|        ++begin;
 6415|  21.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 21.6k, False: 0]
  |  Branch (6415:30): [True: 21.6k, False: 0]
  |  Branch (6415:47): [True: 10.8k, False: 10.8k]
  ------------------
 6416|  10.8k|    return static_cast<int>(value);
 6417|  10.8k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|  75.6k|        {
 6956|  75.6k|            arg_id = handler.on_arg_id();
 6957|  75.6k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|   240k|    {
 5262|   240k|        return m_type;
 5263|   240k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   109k|    {
 5571|   109k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   109k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|   229k|    {
 5560|   229k|        return m_format.data();
 5561|   229k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|  75.6k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|  75.6k|    {
 7133|  75.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  75.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  75.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|  75.6k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|  75.6k|{
 6869|  75.6k|    auto do_presentation = [&]() -> const CharT* {
 6870|  75.6k|        if (*begin == CharT{'['}) {
 6871|  75.6k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  75.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|  75.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|  75.6k|                return begin;
 6877|  75.6k|            }
 6878|  75.6k|            handler.on_character_set_string(set);
 6879|  75.6k|            return begin;
 6880|  75.6k|        }
 6881|  75.6k|        if (*begin == CharT{'/'}) {
 6882|  75.6k|            return parse_presentation_regex(begin, end, handler);
 6883|  75.6k|        }
 6884|  75.6k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  75.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|  75.6k|            handler.on_error("Invalid type specifier in format string");
 6887|  75.6k|            return begin;
 6888|  75.6k|        }
 6889|  75.6k|        handler.on_type(type);
 6890|  75.6k|        return begin;
 6891|  75.6k|    };
 6892|       |
 6893|  75.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 75.6k, False: 0]
  |  Branch (6893:28): [True: 63.5k, False: 12.0k]
  ------------------
 6894|  75.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 63.5k, False: 0]
  |  Branch (6894:36): [True: 59.9k, False: 3.60k]
  ------------------
 6895|  59.9k|        return do_presentation();
 6896|  59.9k|    }
 6897|       |
 6898|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  15.6k|    begin = parse_align(begin, end, handler);
 6904|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  15.6k|    begin = parse_width(begin, end, handler);
 6910|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  15.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 15.6k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  15.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 3.60k, False: 12.0k]
  ------------------
 6929|  3.60k|        handler.on_localized();
 6930|  3.60k|        ++begin;
 6931|  3.60k|    }
 6932|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  15.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 15.6k, False: 0]
  |  Branch (6937:25): [True: 12.0k, False: 3.60k]
  ------------------
 6938|  12.0k|        do_presentation();
 6939|  12.0k|    }
 6940|  15.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  15.6k|    return begin;
 6946|  15.6k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|   102k|{
 6518|   102k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 96.8k, False: 5.40k]
  |  Branch (6518:33): [True: 96.8k, False: 0]
  ------------------
 6519|   102k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 5.40k, False: 0]
  |  Branch (6519:33): [True: 5.40k, False: 0]
  ------------------
 6520|   102k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|  72.0k|    auto do_presentation = [&]() -> const CharT* {
 6870|  72.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 4.83k, False: 67.2k]
  ------------------
 6871|  4.83k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  4.83k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.83k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  4.83k|            handler.on_character_set_string(set);
 6879|  4.83k|            return begin;
 6880|  4.83k|        }
 6881|  67.2k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 67.2k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|  67.2k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  67.2k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  67.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 63.5k]
  |  |  ------------------
  ------------------
 6886|  3.60k|            handler.on_error("Invalid type specifier in format string");
 6887|  3.60k|            return begin;
 6888|  3.60k|        }
 6889|  63.5k|        handler.on_type(type);
 6890|  63.5k|        return begin;
 6891|  67.2k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  4.83k|{
 6708|  4.83k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  4.83k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  4.83k|    auto start = begin;
 6712|  4.83k|    ++begin;
 6713|       |
 6714|  4.83k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.83k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  4.83k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 4.83k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  4.83k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 4.83k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  14.4k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 14.4k, False: 0]
  ------------------
 6739|  14.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  14.4k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 4.83k, False: 9.66k]
  ------------------
 6744|  4.83k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  4.83k|        }
 6746|       |
 6747|  9.66k|        parse_presentation_set_literal(begin, end, handler);
 6748|  9.66k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  4.83k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6671|  9.66k|{
 6672|  9.66k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  9.66k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  9.66k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  9.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.66k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  9.66k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 9.66k, False: 0]
  |  Branch (6679:25): [True: 9.66k, False: 0]
  |  Branch (6679:49): [True: 9.66k, False: 0]
  ------------------
 6680|  9.66k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 9.66k, False: 0]
  ------------------
 6681|  9.66k|        ++begin;
 6682|       |
 6683|  9.66k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  9.66k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  9.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.66k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  9.66k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  9.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.66k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  9.66k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  9.66k|        return;
 6697|  9.66k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6647|  19.3k|{
 6648|  19.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  19.3k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  19.3k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  38.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  |  Branch (859:45): [True: 0, False: 19.3k]
  |  |  |  Branch (859:45): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  19.3k|    const auto cp =
 6657|  19.3k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  19.3k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.3k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  19.3k|    begin += len;
 6664|  19.3k|    return cp;
 6665|  19.3k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  7.24k|    {
 6357|  7.24k|        m_specs.charset_string_data = fmt.data();
 6358|  7.24k|        m_specs.charset_string_size = fmt.size();
 6359|  7.24k|        on_type(presentation_type::string_set);
 6360|  7.24k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|   107k|{
 6466|   107k|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 107k]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 107k]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 107k]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 107k]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 107k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 107k]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 107k]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 107k]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 107k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 107k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 107k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 107k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 107k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 107k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 107k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 107k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 107k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 107k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|  96.8k|        case 's':
  ------------------
  |  Branch (6496:9): [True: 96.8k, False: 10.8k]
  ------------------
 6497|  96.8k|            return presentation_type::string;
 6498|  5.40k|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 5.40k, False: 102k]
  ------------------
 6499|  5.40k|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 107k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 107k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 107k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 107k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  5.40k|        default:
  ------------------
  |  Branch (6510:9): [True: 5.40k, False: 102k]
  ------------------
 6511|  5.40k|            return presentation_type::none;
 6512|   107k|    }
 6513|   107k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  15.6k|{
 6543|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  15.6k|    auto check_align = [](wchar_t ch) {
 6546|  15.6k|        switch (ch) {
 6547|  15.6k|            case L'<':
 6548|  15.6k|                return align_type::left;
 6549|  15.6k|            case L'>':
 6550|  15.6k|                return align_type::right;
 6551|  15.6k|            case L'^':
 6552|  15.6k|                return align_type::center;
 6553|  15.6k|            default:
 6554|  15.6k|                return align_type::none;
 6555|  15.6k|        }
 6556|  15.6k|    };
 6557|       |
 6558|  15.6k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  15.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  31.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  |  Branch (859:45): [True: 0, False: 15.6k]
  |  |  |  Branch (859:45): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 6560|  15.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  15.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  15.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  15.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  15.6k|    const auto begin_before_fill = begin;
 6570|  15.6k|    begin += potential_fill_len;
 6571|       |
 6572|  15.6k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 15.6k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  15.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  15.6k|    const auto begin_after_fill = begin;
 6578|  15.6k|    ++begin;
 6579|       |
 6580|  15.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 15.6k, False: 0]
  ------------------
 6581|  15.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.6k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  15.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 4.83k, False: 10.8k]
  ------------------
 6586|  4.83k|            return begin_before_fill;
 6587|  4.83k|        }
 6588|  15.6k|    }
 6589|       |
 6590|  10.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 10.8k, False: 0]
  ------------------
 6591|  10.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 10.8k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  10.8k|        return begin_before_fill;
 6596|  10.8k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  10.8k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|  23.4k|{
 6525|  23.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|  23.4k|    else {
 6530|  23.4k|        const auto lengths =
 6531|  23.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|  23.4k|            "\3\4";
 6533|  23.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|  23.4k|        return len;
 6535|  23.4k|    }
 6536|  23.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  31.2k|    auto check_align = [](wchar_t ch) {
 6546|  31.2k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 31.2k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 31.2k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 31.2k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  31.2k|            default:
  ------------------
  |  Branch (6553:13): [True: 31.2k, False: 0]
  ------------------
 6554|  31.2k|                return align_type::none;
 6555|  31.2k|        }
 6556|  31.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  15.6k|{
 6608|  15.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  15.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 15.6k, False: 0]
  |  Branch (6610:33): [True: 7.20k, False: 8.43k]
  ------------------
 6611|  7.20k|        int width = parse_simple_int(begin, end);
 6612|  7.20k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  7.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.20k, False: 0]
  |  |  ------------------
  ------------------
 6613|  7.20k|            handler.on_width(width);
 6614|  7.20k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  7.20k|    }
 6620|  15.6k|    return begin;
 6621|  15.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|  3.60k|    {
 7138|  3.60k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  3.60k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 3.60k, False: 0]
  ------------------
 7140|  3.60k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 3.60k, False: 0]
  ------------------
 7141|  3.60k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 3.60k, False: 0]
  ------------------
 7142|  3.60k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 3.60k, False: 0]
  ------------------
 7143|  3.60k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  3.60k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  3.60k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  68.4k|{
 8428|  68.4k|#define SCN_VISIT(Type)                                         \
 8429|  68.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  68.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  68.4k|    }                                                           \
 8432|  68.4k|    else {                                                      \
 8433|  68.4k|        return vis(monostate_val);                              \
 8434|  68.4k|    }
 8435|       |
 8436|  68.4k|    monostate monostate_val{};
 8437|       |
 8438|  68.4k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 68.4k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 68.4k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 68.4k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 68.4k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 68.4k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 68.4k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 68.4k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 68.4k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 68.4k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 68.4k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 68.4k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 68.4k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 68.4k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 68.4k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 68.4k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 68.4k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 68.4k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 68.4k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|  34.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 34.2k, False: 34.2k]
  ------------------
 8476|  34.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  34.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  34.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  34.2k|    }                                                           \
  |  | 8432|  34.2k|    else {                                                      \
  |  | 8433|  34.2k|        return vis(monostate_val);                              \
  |  | 8434|  34.2k|    }
  ------------------
 8477|  68.4k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 34.2k, False: 34.2k]
  ------------------
 8478|  68.4k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  68.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  68.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  68.4k|    }                                                           \
  |  | 8432|  68.4k|    else {                                                      \
  |  | 8433|  68.4k|        return vis(monostate_val);                              \
  |  | 8434|  68.4k|    }
  ------------------
 8479|  68.4k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 68.4k]
  ------------------
 8480|  68.4k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  68.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  68.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  68.4k|    }                                                           \
  |  | 8432|  68.4k|    else {                                                      \
  |  | 8433|  68.4k|        return vis(monostate_val);                              \
  |  | 8434|  68.4k|    }
  ------------------
 8481|  68.4k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 68.4k]
  ------------------
 8482|  68.4k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  68.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  68.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  68.4k|    }                                                           \
  |  | 8432|  68.4k|    else {                                                      \
  |  | 8433|  68.4k|        return vis(monostate_val);                              \
  |  | 8434|  68.4k|    }
  ------------------
 8483|  68.4k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 68.4k]
  ------------------
 8484|  68.4k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  68.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  68.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  68.4k|    }                                                           \
  |  | 8432|  68.4k|    else {                                                      \
  |  | 8433|  68.4k|        return vis(monostate_val);                              \
  |  | 8434|  68.4k|    }
  ------------------
 8485|  68.4k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 68.4k]
  ------------------
 8486|  68.4k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  68.4k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  68.4k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  68.4k|    }                                                           \
  |  | 8432|  68.4k|    else {                                                      \
  |  | 8433|  68.4k|        return vis(monostate_val);                              \
  |  | 8434|  68.4k|    }
  ------------------
 8487|       |
 8488|  68.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 68.4k]
  ------------------
 8489|  68.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  68.4k|            return vis(
 8491|  68.4k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 68.4k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 68.4k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  68.4k|            SCN_CLANG_POP
 8506|  68.4k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|  44.7k|{
 7055|  44.7k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|  44.7k|    handler.check_args_exhausted();
 7057|  44.7k|    return handler.get_error();
 7058|  44.7k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|  44.7k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|  44.7k|    auto begin = format.data();
 7024|  44.7k|    auto it = begin;
 7025|  44.7k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  80.3k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 44.7k, False: 35.6k]
  ------------------
 7028|  44.7k|        const auto ch = *it++;
 7029|  44.7k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 44.7k, False: 0]
  ------------------
 7030|  44.7k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|  44.7k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|  44.7k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 9.01k, False: 35.6k]
  ------------------
 7034|  9.01k|                return;
 7035|  9.01k|            }
 7036|  44.7k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|  44.7k|    }
 7047|       |
 7048|  35.6k|    handler.on_literal_text(begin, end);
 7049|  35.6k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|  35.6k|    {
 8186|  35.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  35.6k|    static_cast<    \
  |  |  929|  35.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|  35.6k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|  44.7k|{
 6953|  44.7k|    struct id_adapter {
 6954|  44.7k|        constexpr void operator()()
 6955|  44.7k|        {
 6956|  44.7k|            arg_id = handler.on_arg_id();
 6957|  44.7k|        }
 6958|  44.7k|        constexpr void operator()(std::size_t id)
 6959|  44.7k|        {
 6960|  44.7k|            arg_id = handler.on_arg_id(id);
 6961|  44.7k|        }
 6962|       |
 6963|  44.7k|        constexpr void on_error(const char* msg)
 6964|  44.7k|        {
 6965|  44.7k|            SCN_UNLIKELY_ATTR
 6966|  44.7k|            handler.on_error(msg);
 6967|  44.7k|        }
 6968|       |
 6969|  44.7k|        Handler& handler;
 6970|  44.7k|        std::size_t arg_id;
 6971|  44.7k|    };
 6972|       |
 6973|  44.7k|    ++begin;
 6974|  44.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.7k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|  44.7k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 44.7k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|  44.7k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 44.7k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|  44.7k|    else {
 6986|  44.7k|        auto adapter = id_adapter{handler, 0};
 6987|  44.7k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|  44.7k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.7k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|  44.7k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 44.7k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|  44.7k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 44.7k, False: 0]
  ------------------
 6998|  44.7k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.7k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|  44.7k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|  44.7k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  89.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 41.0k]
  |  |  |  Branch (859:45): [True: 0, False: 44.7k]
  |  |  |  Branch (859:45): [True: 3.60k, False: 41.0k]
  |  |  ------------------
  ------------------
 7004|  3.60k|                handler.on_error("Unknown format specifier");
 7005|  3.60k|                return begin;
 7006|  3.60k|            }
 7007|  44.7k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|  44.7k|    }
 7014|  41.0k|    return begin + 1;
 7015|  44.7k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|  44.7k|{
 6454|  44.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|  44.7k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 44.7k, False: 0]
  |  Branch (6455:26): [True: 0, False: 44.7k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|  44.7k|    handler();
 6460|  44.7k|    return begin;
 6461|  44.7k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|  44.7k|        {
 6956|  44.7k|            arg_id = handler.on_arg_id();
 6957|  44.7k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|  44.7k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|  44.7k|    {
 7133|  44.7k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|  44.7k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|  44.7k|{
 6869|  44.7k|    auto do_presentation = [&]() -> const CharT* {
 6870|  44.7k|        if (*begin == CharT{'['}) {
 6871|  44.7k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  44.7k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|  44.7k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|  44.7k|                return begin;
 6877|  44.7k|            }
 6878|  44.7k|            handler.on_character_set_string(set);
 6879|  44.7k|            return begin;
 6880|  44.7k|        }
 6881|  44.7k|        if (*begin == CharT{'/'}) {
 6882|  44.7k|            return parse_presentation_regex(begin, end, handler);
 6883|  44.7k|        }
 6884|  44.7k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  44.7k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|  44.7k|            handler.on_error("Invalid type specifier in format string");
 6887|  44.7k|            return begin;
 6888|  44.7k|        }
 6889|  44.7k|        handler.on_type(type);
 6890|  44.7k|        return begin;
 6891|  44.7k|    };
 6892|       |
 6893|  44.7k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 44.7k, False: 0]
  |  Branch (6893:28): [True: 38.6k, False: 6.02k]
  ------------------
 6894|  44.7k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 38.6k, False: 0]
  |  Branch (6894:36): [True: 36.8k, False: 1.80k]
  ------------------
 6895|  36.8k|        return do_presentation();
 6896|  36.8k|    }
 6897|       |
 6898|  7.82k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.82k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  7.82k|    begin = parse_align(begin, end, handler);
 6904|  7.82k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.82k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  7.82k|    begin = parse_width(begin, end, handler);
 6910|  7.82k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.82k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  7.82k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 7.82k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  7.82k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 1.80k, False: 6.02k]
  ------------------
 6929|  1.80k|        handler.on_localized();
 6930|  1.80k|        ++begin;
 6931|  1.80k|    }
 6932|  7.82k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.82k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  7.82k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 7.82k, False: 0]
  |  Branch (6937:25): [True: 6.02k, False: 1.80k]
  ------------------
 6938|  6.02k|        do_presentation();
 6939|  6.02k|    }
 6940|  7.82k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.82k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  7.82k|    return begin;
 6946|  7.82k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|  42.9k|    auto do_presentation = [&]() -> const CharT* {
 6870|  42.9k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 2.41k, False: 40.4k]
  ------------------
 6871|  2.41k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  2.41k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.41k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  2.41k|            handler.on_character_set_string(set);
 6879|  2.41k|            return begin;
 6880|  2.41k|        }
 6881|  40.4k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 40.4k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|  40.4k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  40.4k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  40.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 38.6k]
  |  |  ------------------
  ------------------
 6886|  1.80k|            handler.on_error("Invalid type specifier in format string");
 6887|  1.80k|            return begin;
 6888|  1.80k|        }
 6889|  38.6k|        handler.on_type(type);
 6890|  38.6k|        return begin;
 6891|  40.4k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6707|  2.41k|{
 6708|  2.41k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  2.41k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  2.41k|    auto start = begin;
 6712|  2.41k|    ++begin;
 6713|       |
 6714|  2.41k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.41k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  2.41k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 2.41k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  2.41k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 2.41k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  7.24k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 7.24k, False: 0]
  ------------------
 6739|  7.24k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  7.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.24k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  7.24k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 2.41k, False: 4.83k]
  ------------------
 6744|  2.41k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  2.41k|        }
 6746|       |
 6747|  4.83k|        parse_presentation_set_literal(begin, end, handler);
 6748|  4.83k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  2.41k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6671|  4.83k|{
 6672|  4.83k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  4.83k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  4.83k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.83k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  4.83k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 4.83k, False: 0]
  |  Branch (6679:25): [True: 4.83k, False: 0]
  |  Branch (6679:49): [True: 4.83k, False: 0]
  ------------------
 6680|  4.83k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 4.83k, False: 0]
  ------------------
 6681|  4.83k|        ++begin;
 6682|       |
 6683|  4.83k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  4.83k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.83k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  4.83k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.83k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  4.83k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  4.83k|        return;
 6697|  4.83k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6647|  9.66k|{
 6648|  9.66k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  9.66k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  9.66k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  19.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.66k]
  |  |  |  Branch (859:45): [True: 0, False: 9.66k]
  |  |  |  Branch (859:45): [True: 0, False: 9.66k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  9.66k|    const auto cp =
 6657|  9.66k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  9.66k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  9.66k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.66k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  9.66k|    begin += len;
 6664|  9.66k|    return cp;
 6665|  9.66k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|  7.82k|{
 6543|  7.82k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  7.82k|    auto check_align = [](wchar_t ch) {
 6546|  7.82k|        switch (ch) {
 6547|  7.82k|            case L'<':
 6548|  7.82k|                return align_type::left;
 6549|  7.82k|            case L'>':
 6550|  7.82k|                return align_type::right;
 6551|  7.82k|            case L'^':
 6552|  7.82k|                return align_type::center;
 6553|  7.82k|            default:
 6554|  7.82k|                return align_type::none;
 6555|  7.82k|        }
 6556|  7.82k|    };
 6557|       |
 6558|  7.82k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  7.82k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  15.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.82k]
  |  |  |  Branch (859:45): [True: 0, False: 7.82k]
  |  |  |  Branch (859:45): [True: 0, False: 7.82k]
  |  |  ------------------
  ------------------
 6560|  7.82k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  7.82k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  7.82k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  7.82k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  7.82k|    const auto begin_before_fill = begin;
 6570|  7.82k|    begin += potential_fill_len;
 6571|       |
 6572|  7.82k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 7.82k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  7.82k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  7.82k|    const auto begin_after_fill = begin;
 6578|  7.82k|    ++begin;
 6579|       |
 6580|  7.82k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 7.82k, False: 0]
  ------------------
 6581|  7.82k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  7.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.82k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  7.82k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 2.41k, False: 5.40k]
  ------------------
 6586|  2.41k|            return begin_before_fill;
 6587|  2.41k|        }
 6588|  7.82k|    }
 6589|       |
 6590|  5.40k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 5.40k, False: 0]
  ------------------
 6591|  5.40k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 5.40k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  5.40k|        return begin_before_fill;
 6596|  5.40k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  5.40k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|  15.6k|    auto check_align = [](wchar_t ch) {
 6546|  15.6k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 15.6k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 15.6k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 15.6k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  15.6k|            default:
  ------------------
  |  Branch (6553:13): [True: 15.6k, False: 0]
  ------------------
 6554|  15.6k|                return align_type::none;
 6555|  15.6k|        }
 6556|  15.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|  7.82k|{
 6608|  7.82k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  7.82k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 7.82k, False: 0]
  |  Branch (6610:33): [True: 3.60k, False: 4.21k]
  ------------------
 6611|  3.60k|        int width = parse_simple_int(begin, end);
 6612|  3.60k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.60k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.60k, False: 0]
  |  |  ------------------
  ------------------
 6613|  3.60k|            handler.on_width(width);
 6614|  3.60k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  3.60k|    }
 6620|  7.82k|    return begin;
 6621|  7.82k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|  1.80k|    {
 7138|  1.80k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  1.80k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 1.80k, False: 0]
  ------------------
 7140|  1.80k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 1.80k, False: 0]
  ------------------
 7141|  1.80k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 1.80k, False: 0]
  ------------------
 7142|  1.80k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 1.80k, False: 0]
  ------------------
 7143|  1.80k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  1.80k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  1.80k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  41.0k|{
 8428|  41.0k|#define SCN_VISIT(Type)                                         \
 8429|  41.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  41.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  41.0k|    }                                                           \
 8432|  41.0k|    else {                                                      \
 8433|  41.0k|        return vis(monostate_val);                              \
 8434|  41.0k|    }
 8435|       |
 8436|  41.0k|    monostate monostate_val{};
 8437|       |
 8438|  41.0k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 41.0k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 41.0k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 41.0k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 41.0k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 41.0k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 41.0k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 41.0k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 41.0k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 41.0k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 41.0k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 41.0k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 41.0k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 41.0k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 41.0k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 41.0k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 41.0k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 41.0k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 41.0k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 41.0k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|  41.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 41.0k, False: 0]
  ------------------
 8478|  41.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  41.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  41.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  41.0k|    }                                                           \
  |  | 8432|  41.0k|    else {                                                      \
  |  | 8433|  41.0k|        return vis(monostate_val);                              \
  |  | 8434|  41.0k|    }
  ------------------
 8479|  41.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 41.0k]
  ------------------
 8480|  41.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  41.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  41.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  41.0k|    }                                                           \
  |  | 8432|  41.0k|    else {                                                      \
  |  | 8433|  41.0k|        return vis(monostate_val);                              \
  |  | 8434|  41.0k|    }
  ------------------
 8481|  41.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 41.0k]
  ------------------
 8482|  41.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  41.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  41.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  41.0k|    }                                                           \
  |  | 8432|  41.0k|    else {                                                      \
  |  | 8433|  41.0k|        return vis(monostate_val);                              \
  |  | 8434|  41.0k|    }
  ------------------
 8483|  41.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 41.0k]
  ------------------
 8484|  41.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  41.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  41.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  41.0k|    }                                                           \
  |  | 8432|  41.0k|    else {                                                      \
  |  | 8433|  41.0k|        return vis(monostate_val);                              \
  |  | 8434|  41.0k|    }
  ------------------
 8485|  41.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 41.0k]
  ------------------
 8486|  41.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  41.0k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  41.0k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  41.0k|    }                                                           \
  |  | 8432|  41.0k|    else {                                                      \
  |  | 8433|  41.0k|        return vis(monostate_val);                              \
  |  | 8434|  41.0k|    }
  ------------------
 8487|       |
 8488|  41.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 41.0k]
  ------------------
 8489|  41.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  41.0k|            return vis(
 8491|  41.0k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 41.0k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 41.0k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  41.0k|            SCN_CLANG_POP
 8506|  41.0k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  11.7k|    {
 4084|  11.7k|        sync(0);
 4085|  11.7k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  1.81M|    {
 5476|  1.81M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  1.81M|        return static_cast<std::size_t>(m_desc &
 5481|  1.81M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  1.81M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  3.62M|    {
 5501|  3.62M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  3.62M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  1.81M|    {
 5444|  1.81M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  1.81M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  1.81M|        const auto t = type(id);
 5456|  1.81M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  1.81M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.81M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  1.81M|        basic_scan_arg<Context> arg;
 5461|  1.81M|        arg.m_type = t;
 5462|  1.81M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 1.81M, False: 0]
  ------------------
 5463|  1.81M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  1.81M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  1.81M|        return arg;
 5469|  1.81M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  1.81M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  1.81M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  1.81M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  1.81M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  1.81M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  1.81M|    {
 5505|  1.81M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  1.81M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  3.16M|    {
 5257|  3.16M|        return m_type != detail::arg_type::none_type;
 5258|  3.16M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   884k|{
 8428|   884k|#define SCN_VISIT(Type)                                         \
 8429|   884k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   884k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   884k|    }                                                           \
 8432|   884k|    else {                                                      \
 8433|   884k|        return vis(monostate_val);                              \
 8434|   884k|    }
 8435|       |
 8436|   884k|    monostate monostate_val{};
 8437|       |
 8438|   884k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 884k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 884k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 884k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 884k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 884k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 884k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 884k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 884k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 884k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 884k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 884k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 884k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 884k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 884k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 884k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 884k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 884k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 884k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 884k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 884k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|   442k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 442k, False: 442k]
  ------------------
 8480|   442k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   442k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   442k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   442k|    }                                                           \
  |  | 8432|   442k|    else {                                                      \
  |  | 8433|   442k|        return vis(monostate_val);                              \
  |  | 8434|   442k|    }
  ------------------
 8481|   884k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 442k, False: 442k]
  ------------------
 8482|   884k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   884k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   884k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   884k|    }                                                           \
  |  | 8432|   884k|    else {                                                      \
  |  | 8433|   884k|        return vis(monostate_val);                              \
  |  | 8434|   884k|    }
  ------------------
 8483|   884k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 884k]
  ------------------
 8484|   884k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   884k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   884k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   884k|    }                                                           \
  |  | 8432|   884k|    else {                                                      \
  |  | 8433|   884k|        return vis(monostate_val);                              \
  |  | 8434|   884k|    }
  ------------------
 8485|   884k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 884k]
  ------------------
 8486|   884k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   884k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   884k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   884k|    }                                                           \
  |  | 8432|   884k|    else {                                                      \
  |  | 8433|   884k|        return vis(monostate_val);                              \
  |  | 8434|   884k|    }
  ------------------
 8487|       |
 8488|   884k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 884k]
  ------------------
 8489|   884k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   884k|            return vis(
 8491|   884k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 884k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 884k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   884k|            SCN_CLANG_POP
 8506|   884k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|   928k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   928k|    {
 5555|   928k|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   309k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   309k|    static_cast<    \
  |  |  929|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   309k|    {
 8149|   309k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|   928k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   928k|    static_cast<    \
  |  |  929|   928k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   928k|    static_cast<    \
  |  |  929|   928k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   928k|    {
 8067|   928k|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   618k|{
 7055|   618k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   618k|    handler.check_args_exhausted();
 7057|   618k|    return handler.get_error();
 7058|   618k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   618k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   618k|    auto begin = format.data();
 7024|   618k|    auto it = begin;
 7025|   618k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.20M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 618k, False: 582k]
  ------------------
 7028|   618k|        const auto ch = *it++;
 7029|   618k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 618k, False: 0]
  ------------------
 7030|   618k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   618k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   618k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 36.0k, False: 582k]
  ------------------
 7034|  36.0k|                return;
 7035|  36.0k|            }
 7036|   618k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   618k|    }
 7047|       |
 7048|   582k|    handler.on_literal_text(begin, end);
 7049|   582k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   618k|{
 6953|   618k|    struct id_adapter {
 6954|   618k|        constexpr void operator()()
 6955|   618k|        {
 6956|   618k|            arg_id = handler.on_arg_id();
 6957|   618k|        }
 6958|   618k|        constexpr void operator()(std::size_t id)
 6959|   618k|        {
 6960|   618k|            arg_id = handler.on_arg_id(id);
 6961|   618k|        }
 6962|       |
 6963|   618k|        constexpr void on_error(const char* msg)
 6964|   618k|        {
 6965|   618k|            SCN_UNLIKELY_ATTR
 6966|   618k|            handler.on_error(msg);
 6967|   618k|        }
 6968|       |
 6969|   618k|        Handler& handler;
 6970|   618k|        std::size_t arg_id;
 6971|   618k|    };
 6972|       |
 6973|   618k|    ++begin;
 6974|   618k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 618k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   618k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 618k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   618k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 618k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   618k|    else {
 6986|   618k|        auto adapter = id_adapter{handler, 0};
 6987|   618k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   618k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 618k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   618k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 618k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   618k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 618k, False: 0]
  ------------------
 6998|   618k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 618k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   618k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   618k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 604k]
  |  |  |  Branch (859:45): [True: 0, False: 618k]
  |  |  |  Branch (859:45): [True: 14.4k, False: 604k]
  |  |  ------------------
  ------------------
 7004|  14.4k|                handler.on_error("Unknown format specifier");
 7005|  14.4k|                return begin;
 7006|  14.4k|            }
 7007|   618k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   618k|    }
 7014|   604k|    return begin + 1;
 7015|   618k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|   928k|    {
 8050|   928k|        return m_args.get(id);
 8051|   928k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|   906k|    {
 8060|   906k|        return m_locale;
 8061|   906k|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|   928k|    {
 5576|   928k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   928k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 928k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   928k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   928k|        do_check_arg_id(id);
 5584|   928k|        return id;
 5585|   928k|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|   928k|{
 6064|   928k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   928k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   928k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   618k|{
 6454|   618k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   618k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 618k, False: 0]
  |  Branch (6455:26): [True: 0, False: 618k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   618k|    handler();
 6460|   618k|    return begin;
 6461|   618k|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6402|  21.6k|{
 6403|  21.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  21.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  21.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  21.6k|    unsigned long long value = 0;
 6407|  43.2k|    do {
 6408|  43.2k|        value *= 10;
 6409|  43.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  43.2k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 0, False: 43.2k]
  ------------------
 6411|  43.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|      0|            return -1;
 6413|      0|        }
 6414|  43.2k|        ++begin;
 6415|  43.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 43.2k, False: 0]
  |  Branch (6415:30): [True: 43.2k, False: 0]
  |  Branch (6415:47): [True: 21.6k, False: 21.6k]
  ------------------
 6416|  21.6k|    return static_cast<int>(value);
 6417|  21.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   618k|        {
 6956|   618k|            arg_id = handler.on_arg_id();
 6957|   618k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  1.85M|    {
 5262|  1.85M|        return m_type;
 5263|  1.85M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|   906k|    {
 5571|   906k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   906k|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   751k|{
 4353|   751k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 751k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   751k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   751k|                            ranges::default_sentinel};
 4359|   751k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   751k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   751k|    {
 4185|   751k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   751k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   751k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   751k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   751k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   751k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   751k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  1.83M|    {
 5560|  1.83M|        return m_format.data();
 5561|  1.83M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   618k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   618k|    {
 7133|   618k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   618k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   618k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   618k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   618k|{
 6869|   618k|    auto do_presentation = [&]() -> const CharT* {
 6870|   618k|        if (*begin == CharT{'['}) {
 6871|   618k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   618k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   618k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   618k|                return begin;
 6877|   618k|            }
 6878|   618k|            handler.on_character_set_string(set);
 6879|   618k|            return begin;
 6880|   618k|        }
 6881|   618k|        if (*begin == CharT{'/'}) {
 6882|   618k|            return parse_presentation_regex(begin, end, handler);
 6883|   618k|        }
 6884|   618k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   618k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   618k|            handler.on_error("Invalid type specifier in format string");
 6887|   618k|            return begin;
 6888|   618k|        }
 6889|   618k|        handler.on_type(type);
 6890|   618k|        return begin;
 6891|   618k|    };
 6892|       |
 6893|   618k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 618k, False: 0]
  |  Branch (6893:28): [True: 596k, False: 21.8k]
  ------------------
 6894|   618k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 596k, False: 0]
  |  Branch (6894:36): [True: 589k, False: 7.20k]
  ------------------
 6895|   589k|        return do_presentation();
 6896|   589k|    }
 6897|       |
 6898|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  29.0k|    begin = parse_align(begin, end, handler);
 6904|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  29.0k|    begin = parse_width(begin, end, handler);
 6910|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  29.0k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 29.0k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  29.0k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 7.20k, False: 21.8k]
  ------------------
 6929|  7.20k|        handler.on_localized();
 6930|  7.20k|        ++begin;
 6931|  7.20k|    }
 6932|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  29.0k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 29.0k, False: 0]
  |  Branch (6937:25): [True: 21.8k, False: 7.20k]
  ------------------
 6938|  21.8k|        do_presentation();
 6939|  21.8k|    }
 6940|  29.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  29.0k|    return begin;
 6946|  29.0k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|   895k|{
 6518|   895k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 884k, False: 10.8k]
  |  Branch (6518:33): [True: 884k, False: 0]
  ------------------
 6519|   895k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 10.8k, False: 0]
  |  Branch (6519:33): [True: 10.8k, False: 0]
  ------------------
 6520|   895k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   611k|    auto do_presentation = [&]() -> const CharT* {
 6870|   611k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 7.40k, False: 604k]
  ------------------
 6871|  7.40k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  7.40k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  7.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.40k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  7.40k|            handler.on_character_set_string(set);
 6879|  7.40k|            return begin;
 6880|  7.40k|        }
 6881|   604k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 604k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   604k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   604k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.20k, False: 596k]
  |  |  ------------------
  ------------------
 6886|  7.20k|            handler.on_error("Invalid type specifier in format string");
 6887|  7.20k|            return begin;
 6888|  7.20k|        }
 6889|   596k|        handler.on_type(type);
 6890|   596k|        return begin;
 6891|   604k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  7.40k|{
 6708|  7.40k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  7.40k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  7.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  7.40k|    auto start = begin;
 6712|  7.40k|    ++begin;
 6713|       |
 6714|  7.40k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.40k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  7.40k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 7.40k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  7.40k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 7.40k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  22.2k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 22.2k, False: 0]
  ------------------
 6739|  22.2k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  22.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 22.2k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  22.2k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 7.40k, False: 14.8k]
  ------------------
 6744|  7.40k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  7.40k|        }
 6746|       |
 6747|  14.8k|        parse_presentation_set_literal(begin, end, handler);
 6748|  14.8k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  7.40k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6671|  14.8k|{
 6672|  14.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  14.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  14.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  14.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 14.8k, False: 0]
  |  Branch (6679:25): [True: 14.8k, False: 0]
  |  Branch (6679:49): [True: 14.8k, False: 0]
  ------------------
 6680|  14.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 14.8k, False: 0]
  ------------------
 6681|  14.8k|        ++begin;
 6682|       |
 6683|  14.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  14.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  14.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  14.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  14.8k|        return;
 6697|  14.8k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6647|  29.6k|{
 6648|  29.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  29.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  29.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  29.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  59.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.6k]
  |  |  |  Branch (859:45): [True: 0, False: 29.6k]
  |  |  |  Branch (859:45): [True: 0, False: 29.6k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  29.6k|    const auto cp =
 6657|  29.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  29.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.6k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  29.6k|    begin += len;
 6664|  29.6k|    return cp;
 6665|  29.6k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  11.1k|    {
 6357|  11.1k|        m_specs.charset_string_data = fmt.data();
 6358|  11.1k|        m_specs.charset_string_size = fmt.size();
 6359|  11.1k|        on_type(presentation_type::string_set);
 6360|  11.1k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|   906k|{
 6466|   906k|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 906k]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 906k]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 906k]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 906k]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 906k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 906k]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 906k]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 906k]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 906k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 906k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 906k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 906k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 906k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 906k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 906k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 906k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 906k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 906k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|   884k|        case 's':
  ------------------
  |  Branch (6496:9): [True: 884k, False: 21.6k]
  ------------------
 6497|   884k|            return presentation_type::string;
 6498|  10.8k|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 10.8k, False: 895k]
  ------------------
 6499|  10.8k|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 906k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 906k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 906k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 906k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  10.8k|        default:
  ------------------
  |  Branch (6510:9): [True: 10.8k, False: 895k]
  ------------------
 6511|  10.8k|            return presentation_type::none;
 6512|   906k|    }
 6513|   906k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  29.0k|{
 6543|  29.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  29.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  29.0k|    auto check_align = [](wchar_t ch) {
 6546|  29.0k|        switch (ch) {
 6547|  29.0k|            case L'<':
 6548|  29.0k|                return align_type::left;
 6549|  29.0k|            case L'>':
 6550|  29.0k|                return align_type::right;
 6551|  29.0k|            case L'^':
 6552|  29.0k|                return align_type::center;
 6553|  29.0k|            default:
 6554|  29.0k|                return align_type::none;
 6555|  29.0k|        }
 6556|  29.0k|    };
 6557|       |
 6558|  29.0k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  29.0k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  58.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.0k]
  |  |  |  Branch (859:45): [True: 0, False: 29.0k]
  |  |  |  Branch (859:45): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 6560|  29.0k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  29.0k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  29.0k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  29.0k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  29.0k|    const auto begin_before_fill = begin;
 6570|  29.0k|    begin += potential_fill_len;
 6571|       |
 6572|  29.0k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 29.0k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  29.0k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  29.0k|    const auto begin_after_fill = begin;
 6578|  29.0k|    ++begin;
 6579|       |
 6580|  29.0k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 29.0k, False: 0]
  ------------------
 6581|  29.0k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.0k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  29.0k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 7.40k, False: 21.6k]
  ------------------
 6586|  7.40k|            return begin_before_fill;
 6587|  7.40k|        }
 6588|  29.0k|    }
 6589|       |
 6590|  21.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 21.6k, False: 0]
  ------------------
 6591|  21.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 21.6k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  21.6k|        return begin_before_fill;
 6596|  21.6k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  21.6k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|  43.5k|{
 6525|  43.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  43.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|  43.5k|    if constexpr (sizeof(CharT) != 1) {
 6527|  43.5k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|  43.5k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  58.0k|    auto check_align = [](wchar_t ch) {
 6546|  58.0k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 58.0k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 58.0k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 58.0k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  58.0k|            default:
  ------------------
  |  Branch (6553:13): [True: 58.0k, False: 0]
  ------------------
 6554|  58.0k|                return align_type::none;
 6555|  58.0k|        }
 6556|  58.0k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  29.0k|{
 6608|  29.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  29.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  29.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  29.0k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 29.0k, False: 0]
  |  Branch (6610:33): [True: 14.4k, False: 14.6k]
  ------------------
 6611|  14.4k|        int width = parse_simple_int(begin, end);
 6612|  14.4k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  14.4k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 14.4k, False: 0]
  |  |  ------------------
  ------------------
 6613|  14.4k|            handler.on_width(width);
 6614|  14.4k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  14.4k|    }
 6620|  29.0k|    return begin;
 6621|  29.0k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  7.20k|    {
 7138|  7.20k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  7.20k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 7.20k, False: 0]
  ------------------
 7140|  7.20k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 7.20k, False: 0]
  ------------------
 7141|  7.20k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 7.20k, False: 0]
  ------------------
 7142|  7.20k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 7.20k, False: 0]
  ------------------
 7143|  7.20k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  7.20k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  7.20k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   604k|{
 8428|   604k|#define SCN_VISIT(Type)                                         \
 8429|   604k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   604k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   604k|    }                                                           \
 8432|   604k|    else {                                                      \
 8433|   604k|        return vis(monostate_val);                              \
 8434|   604k|    }
 8435|       |
 8436|   604k|    monostate monostate_val{};
 8437|       |
 8438|   604k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 604k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 604k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 604k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 604k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 604k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 604k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 604k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 604k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 604k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 604k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 604k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 604k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 604k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 604k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 604k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 604k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 604k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 604k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 604k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 604k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|   302k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 302k, False: 302k]
  ------------------
 8480|   302k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   302k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   302k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   302k|    }                                                           \
  |  | 8432|   302k|    else {                                                      \
  |  | 8433|   302k|        return vis(monostate_val);                              \
  |  | 8434|   302k|    }
  ------------------
 8481|   604k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 302k, False: 302k]
  ------------------
 8482|   604k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   604k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   604k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   604k|    }                                                           \
  |  | 8432|   604k|    else {                                                      \
  |  | 8433|   604k|        return vis(monostate_val);                              \
  |  | 8434|   604k|    }
  ------------------
 8483|   604k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 604k]
  ------------------
 8484|   604k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   604k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   604k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   604k|    }                                                           \
  |  | 8432|   604k|    else {                                                      \
  |  | 8433|   604k|        return vis(monostate_val);                              \
  |  | 8434|   604k|    }
  ------------------
 8485|   604k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 604k]
  ------------------
 8486|   604k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   604k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   604k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   604k|    }                                                           \
  |  | 8432|   604k|    else {                                                      \
  |  | 8433|   604k|        return vis(monostate_val);                              \
  |  | 8434|   604k|    }
  ------------------
 8487|       |
 8488|   604k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 604k]
  ------------------
 8489|   604k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   604k|            return vis(
 8491|   604k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 604k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 604k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   604k|            SCN_CLANG_POP
 8506|   604k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   442k|{
 8428|   442k|#define SCN_VISIT(Type)                                         \
 8429|   442k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   442k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   442k|    }                                                           \
 8432|   442k|    else {                                                      \
 8433|   442k|        return vis(monostate_val);                              \
 8434|   442k|    }
 8435|       |
 8436|   442k|    monostate monostate_val{};
 8437|       |
 8438|   442k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 442k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 442k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 442k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 442k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 442k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 442k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 442k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 442k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 442k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 442k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 442k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 442k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 442k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 442k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 442k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 442k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 442k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 442k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 442k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 442k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 442k]
  ------------------
 8480|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8481|   442k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 442k, False: 0]
  ------------------
 8482|   442k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   442k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   442k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   442k|    }                                                           \
  |  | 8432|   442k|    else {                                                      \
  |  | 8433|   442k|        return vis(monostate_val);                              \
  |  | 8434|   442k|    }
  ------------------
 8483|   442k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 442k]
  ------------------
 8484|   442k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   442k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   442k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   442k|    }                                                           \
  |  | 8432|   442k|    else {                                                      \
  |  | 8433|   442k|        return vis(monostate_val);                              \
  |  | 8434|   442k|    }
  ------------------
 8485|   442k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 442k]
  ------------------
 8486|   442k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   442k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   442k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   442k|    }                                                           \
  |  | 8432|   442k|    else {                                                      \
  |  | 8433|   442k|        return vis(monostate_val);                              \
  |  | 8434|   442k|    }
  ------------------
 8487|       |
 8488|   442k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 442k]
  ------------------
 8489|   442k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   442k|            return vis(
 8491|   442k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 442k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 442k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   442k|            SCN_CLANG_POP
 8506|   442k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   309k|{
 7055|   309k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   309k|    handler.check_args_exhausted();
 7057|   309k|    return handler.get_error();
 7058|   309k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   309k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   309k|    auto begin = format.data();
 7024|   309k|    auto it = begin;
 7025|   309k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   600k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 309k, False: 291k]
  ------------------
 7028|   309k|        const auto ch = *it++;
 7029|   309k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 309k, False: 0]
  ------------------
 7030|   309k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   309k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   309k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 18.0k, False: 291k]
  ------------------
 7034|  18.0k|                return;
 7035|  18.0k|            }
 7036|   309k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   309k|    }
 7047|       |
 7048|   291k|    handler.on_literal_text(begin, end);
 7049|   291k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|   291k|    {
 8186|   291k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   291k|    static_cast<    \
  |  |  929|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   291k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   309k|{
 6953|   309k|    struct id_adapter {
 6954|   309k|        constexpr void operator()()
 6955|   309k|        {
 6956|   309k|            arg_id = handler.on_arg_id();
 6957|   309k|        }
 6958|   309k|        constexpr void operator()(std::size_t id)
 6959|   309k|        {
 6960|   309k|            arg_id = handler.on_arg_id(id);
 6961|   309k|        }
 6962|       |
 6963|   309k|        constexpr void on_error(const char* msg)
 6964|   309k|        {
 6965|   309k|            SCN_UNLIKELY_ATTR
 6966|   309k|            handler.on_error(msg);
 6967|   309k|        }
 6968|       |
 6969|   309k|        Handler& handler;
 6970|   309k|        std::size_t arg_id;
 6971|   309k|    };
 6972|       |
 6973|   309k|    ++begin;
 6974|   309k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 309k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   309k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 309k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   309k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 309k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   309k|    else {
 6986|   309k|        auto adapter = id_adapter{handler, 0};
 6987|   309k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   309k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 309k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   309k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 309k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   309k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 309k, False: 0]
  ------------------
 6998|   309k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 309k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   309k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   309k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.20k, False: 302k]
  |  |  |  Branch (859:45): [True: 0, False: 309k]
  |  |  |  Branch (859:45): [True: 7.20k, False: 302k]
  |  |  ------------------
  ------------------
 7004|  7.20k|                handler.on_error("Unknown format specifier");
 7005|  7.20k|                return begin;
 7006|  7.20k|            }
 7007|   309k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   309k|    }
 7014|   302k|    return begin + 1;
 7015|   309k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   309k|{
 6454|   309k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   309k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   309k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   309k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 309k, False: 0]
  |  Branch (6455:26): [True: 0, False: 309k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   309k|    handler();
 6460|   309k|    return begin;
 6461|   309k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   309k|        {
 6956|   309k|            arg_id = handler.on_arg_id();
 6957|   309k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   309k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   309k|    {
 7133|   309k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   309k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   309k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   309k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   309k|{
 6869|   309k|    auto do_presentation = [&]() -> const CharT* {
 6870|   309k|        if (*begin == CharT{'['}) {
 6871|   309k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   309k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   309k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   309k|                return begin;
 6877|   309k|            }
 6878|   309k|            handler.on_character_set_string(set);
 6879|   309k|            return begin;
 6880|   309k|        }
 6881|   309k|        if (*begin == CharT{'/'}) {
 6882|   309k|            return parse_presentation_regex(begin, end, handler);
 6883|   309k|        }
 6884|   309k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   309k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   309k|            handler.on_error("Invalid type specifier in format string");
 6887|   309k|            return begin;
 6888|   309k|        }
 6889|   309k|        handler.on_type(type);
 6890|   309k|        return begin;
 6891|   309k|    };
 6892|       |
 6893|   309k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 309k, False: 0]
  |  Branch (6893:28): [True: 298k, False: 10.9k]
  ------------------
 6894|   309k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 298k, False: 0]
  |  Branch (6894:36): [True: 294k, False: 3.60k]
  ------------------
 6895|   294k|        return do_presentation();
 6896|   294k|    }
 6897|       |
 6898|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  14.5k|    begin = parse_align(begin, end, handler);
 6904|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  14.5k|    begin = parse_width(begin, end, handler);
 6910|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  14.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 14.5k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  14.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 3.60k, False: 10.9k]
  ------------------
 6929|  3.60k|        handler.on_localized();
 6930|  3.60k|        ++begin;
 6931|  3.60k|    }
 6932|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  14.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 14.5k, False: 0]
  |  Branch (6937:25): [True: 10.9k, False: 3.60k]
  ------------------
 6938|  10.9k|        do_presentation();
 6939|  10.9k|    }
 6940|  14.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  14.5k|    return begin;
 6946|  14.5k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   305k|    auto do_presentation = [&]() -> const CharT* {
 6870|   305k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 3.70k, False: 302k]
  ------------------
 6871|  3.70k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  3.70k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  3.70k|            handler.on_character_set_string(set);
 6879|  3.70k|            return begin;
 6880|  3.70k|        }
 6881|   302k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 302k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   302k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   302k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 298k]
  |  |  ------------------
  ------------------
 6886|  3.60k|            handler.on_error("Invalid type specifier in format string");
 6887|  3.60k|            return begin;
 6888|  3.60k|        }
 6889|   298k|        handler.on_type(type);
 6890|   298k|        return begin;
 6891|   302k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6707|  3.70k|{
 6708|  3.70k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  3.70k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.70k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.70k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  3.70k|    auto start = begin;
 6712|  3.70k|    ++begin;
 6713|       |
 6714|  3.70k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  3.70k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 3.70k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  3.70k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 3.70k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  11.1k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 11.1k, False: 0]
  ------------------
 6739|  11.1k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  11.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 3.70k, False: 7.40k]
  ------------------
 6744|  3.70k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  3.70k|        }
 6746|       |
 6747|  7.40k|        parse_presentation_set_literal(begin, end, handler);
 6748|  7.40k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  3.70k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6671|  7.40k|{
 6672|  7.40k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.40k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.40k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  7.40k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  7.40k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  7.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.40k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  7.40k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 7.40k, False: 0]
  |  Branch (6679:25): [True: 7.40k, False: 0]
  |  Branch (6679:49): [True: 7.40k, False: 0]
  ------------------
 6680|  7.40k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 7.40k, False: 0]
  ------------------
 6681|  7.40k|        ++begin;
 6682|       |
 6683|  7.40k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  7.40k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  7.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.40k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  7.40k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  7.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.40k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  7.40k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  7.40k|        return;
 6697|  7.40k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6647|  14.8k|{
 6648|  14.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  14.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  14.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.8k]
  |  |  |  Branch (859:45): [True: 0, False: 14.8k]
  |  |  |  Branch (859:45): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  14.8k|    const auto cp =
 6657|  14.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  14.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  14.8k|    begin += len;
 6664|  14.8k|    return cp;
 6665|  14.8k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  14.5k|{
 6543|  14.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  14.5k|    auto check_align = [](wchar_t ch) {
 6546|  14.5k|        switch (ch) {
 6547|  14.5k|            case L'<':
 6548|  14.5k|                return align_type::left;
 6549|  14.5k|            case L'>':
 6550|  14.5k|                return align_type::right;
 6551|  14.5k|            case L'^':
 6552|  14.5k|                return align_type::center;
 6553|  14.5k|            default:
 6554|  14.5k|                return align_type::none;
 6555|  14.5k|        }
 6556|  14.5k|    };
 6557|       |
 6558|  14.5k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  14.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  29.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  |  Branch (859:45): [True: 0, False: 14.5k]
  |  |  |  Branch (859:45): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 6560|  14.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  14.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  14.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  14.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  14.5k|    const auto begin_before_fill = begin;
 6570|  14.5k|    begin += potential_fill_len;
 6571|       |
 6572|  14.5k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 14.5k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  14.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  14.5k|    const auto begin_after_fill = begin;
 6578|  14.5k|    ++begin;
 6579|       |
 6580|  14.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 14.5k, False: 0]
  ------------------
 6581|  14.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  14.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.5k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  14.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 3.70k, False: 10.8k]
  ------------------
 6586|  3.70k|            return begin_before_fill;
 6587|  3.70k|        }
 6588|  14.5k|    }
 6589|       |
 6590|  10.8k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 10.8k, False: 0]
  ------------------
 6591|  10.8k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 10.8k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  10.8k|        return begin_before_fill;
 6596|  10.8k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  10.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|  29.0k|    auto check_align = [](wchar_t ch) {
 6546|  29.0k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 29.0k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 29.0k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 29.0k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  29.0k|            default:
  ------------------
  |  Branch (6553:13): [True: 29.0k, False: 0]
  ------------------
 6554|  29.0k|                return align_type::none;
 6555|  29.0k|        }
 6556|  29.0k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  14.5k|{
 6608|  14.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  14.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 14.5k, False: 0]
  |  Branch (6610:33): [True: 7.20k, False: 7.30k]
  ------------------
 6611|  7.20k|        int width = parse_simple_int(begin, end);
 6612|  7.20k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  7.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 7.20k, False: 0]
  |  |  ------------------
  ------------------
 6613|  7.20k|            handler.on_width(width);
 6614|  7.20k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  7.20k|    }
 6620|  14.5k|    return begin;
 6621|  14.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  3.60k|    {
 7138|  3.60k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  3.60k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 3.60k, False: 0]
  ------------------
 7140|  3.60k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 3.60k, False: 0]
  ------------------
 7141|  3.60k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 3.60k, False: 0]
  ------------------
 7142|  3.60k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 3.60k, False: 0]
  ------------------
 7143|  3.60k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  3.60k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  3.60k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   302k|{
 8428|   302k|#define SCN_VISIT(Type)                                         \
 8429|   302k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   302k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   302k|    }                                                           \
 8432|   302k|    else {                                                      \
 8433|   302k|        return vis(monostate_val);                              \
 8434|   302k|    }
 8435|       |
 8436|   302k|    monostate monostate_val{};
 8437|       |
 8438|   302k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 302k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 302k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 302k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 302k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 302k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 302k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 302k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 302k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 302k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 302k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 302k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 302k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 302k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 302k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 302k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 302k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 302k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 302k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 302k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 302k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 302k]
  ------------------
 8480|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8481|   302k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 302k, False: 0]
  ------------------
 8482|   302k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   302k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   302k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   302k|    }                                                           \
  |  | 8432|   302k|    else {                                                      \
  |  | 8433|   302k|        return vis(monostate_val);                              \
  |  | 8434|   302k|    }
  ------------------
 8483|   302k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 302k]
  ------------------
 8484|   302k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   302k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   302k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   302k|    }                                                           \
  |  | 8432|   302k|    else {                                                      \
  |  | 8433|   302k|        return vis(monostate_val);                              \
  |  | 8434|   302k|    }
  ------------------
 8485|   302k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 302k]
  ------------------
 8486|   302k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   302k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   302k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   302k|    }                                                           \
  |  | 8432|   302k|    else {                                                      \
  |  | 8433|   302k|        return vis(monostate_val);                              \
  |  | 8434|   302k|    }
  ------------------
 8487|       |
 8488|   302k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 302k]
  ------------------
 8489|   302k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   302k|            return vis(
 8491|   302k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 302k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 302k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   302k|            SCN_CLANG_POP
 8506|   302k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|  23.4k|    {
 4084|  23.4k|        sync(0);
 4085|  23.4k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|  48.3k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|   442k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   302k|{
   89|   302k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   302k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   302k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   302k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   604k|{
   44|   604k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   604k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   604k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|   302k|{
  127|   302k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   302k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   302k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   302k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   604k|{
   60|   604k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   604k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   604k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  162|   147k|{
  163|   147k|    T value;
  164|   147k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   147k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.80k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.80k|    }                                                  \
  |  |  |  | 3667|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   145k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   147k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   294k|{
   72|   294k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   294k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   302k|{
   89|   302k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   302k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   302k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   302k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  126|   302k|{
  127|   302k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   302k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   302k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   302k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  162|   147k|{
  163|   147k|    T value;
  164|   147k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   147k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.80k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.80k|    }                                                  \
  |  |  |  | 3667|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   145k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   147k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   302k|{
   89|   302k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   302k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   302k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   302k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   302k|{
   44|   302k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   302k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  126|   302k|{
  127|   302k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   302k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   302k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   302k|    static_cast<    \
  |  |  929|   302k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   302k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   302k|{
   60|   302k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   302k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  162|   147k|{
  163|   147k|    T value;
  164|   147k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   147k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   147k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   147k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   147k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   147k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.80k, False: 145k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.80k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.80k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.80k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.80k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.80k|    }                                                  \
  |  |  |  | 3667|   147k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   145k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   145k|    static_cast<    \
  |  |  929|   145k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   147k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   147k|{
   72|   147k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   147k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  1.01M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  1.01M|{
  653|  1.01M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.01M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|  67.8k|{
 2184|  67.8k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|  67.8k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  40.6k|{
 2192|  40.6k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  40.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  40.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 35.2k, False: 5.40k]
  |  |  ------------------
  ------------------
 2194|  35.2k|        source.sync(*n);
 2195|  35.2k|    }
 2196|  5.40k|    else {
 2197|  5.40k|        source.sync_all();
 2198|  5.40k|    }
 2199|  40.6k|    return n;
 2200|  40.6k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   604k|{
 2208|   604k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   604k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   302k|{
 2216|   302k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   302k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   302k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 291k, False: 10.8k]
  |  |  ------------------
  ------------------
 2218|   291k|        source.sync(*n);
 2219|   291k|    }
 2220|  10.8k|    else {
 2221|  10.8k|        source.sync_all();
 2222|  10.8k|    }
 2223|   302k|    return n;
 2224|   302k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   235k|{
  194|   235k|    return find_classic_impl(
  195|   235k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   235k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|   235k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   239k|{
  202|   239k|    return find_classic_impl(
  203|   239k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   239k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|   239k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|  67.8k|{
 2141|  67.8k|    return vscan_internal(source, format, args);
 2142|  67.8k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  40.6k|{
 2147|  40.6k|    auto n = vscan_internal(source, format, args);
 2148|  40.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  40.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 35.2k, False: 5.40k]
  |  |  ------------------
  ------------------
 2149|  35.2k|        source.sync(*n);
 2150|  35.2k|    }
 2151|  5.40k|    else {
 2152|  5.40k|        source.sync_all();
 2153|  5.40k|    }
 2154|  40.6k|    return n;
 2155|  40.6k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   604k|{
 2161|   604k|    return vscan_internal(source, format, args);
 2162|   604k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   302k|{
 2167|   302k|    auto n = vscan_internal(source, format, args);
 2168|   302k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   302k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 291k, False: 10.8k]
  |  |  ------------------
  ------------------
 2169|   291k|        source.sync(*n);
 2170|   291k|    }
 2171|  10.8k|    else {
 2172|  10.8k|        source.sync_all();
 2173|  10.8k|    }
 2174|   302k|    return n;
 2175|   302k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  29.9k|{
 2251|  29.9k|    return vscan_value_internal(source, arg);
 2252|  29.9k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  18.3k|{
 2256|  18.3k|    auto n = vscan_value_internal(source, arg);
 2257|  18.3k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  18.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 17.4k, False: 901]
  |  |  ------------------
  ------------------
 2258|  17.4k|        source.sync(*n);
 2259|  17.4k|    }
 2260|    901|    else {
 2261|    901|        source.sync_all();
 2262|    901|    }
 2263|  18.3k|    return n;
 2264|  18.3k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|   294k|{
 2270|   294k|    return vscan_value_internal(source, arg);
 2271|   294k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|   147k|{
 2276|   147k|    auto n = vscan_value_internal(source, arg);
 2277|   147k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   147k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 145k, False: 1.80k]
  |  |  ------------------
  ------------------
 2278|   145k|        source.sync(*n);
 2279|   145k|    }
 2280|  1.80k|    else {
 2281|  1.80k|        source.sync_all();
 2282|  1.80k|    }
 2283|   147k|    return n;
 2284|   147k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   235k|{
  118|   235k|    auto it = source.begin();
  119|       |
  120|   435k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 340k, False: 95.1k]
  ------------------
  121|   340k|        auto sv =
  122|   340k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   340k|                .substr(0, 8);
  124|       |
  125|   340k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 236k, False: 103k]
  ------------------
  126|   236k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   236k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   236k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 100k, False: 136k]
  ------------------
  129|   100k|                break;
  130|   100k|            }
  131|   136k|            continue;
  132|   236k|        }
  133|       |
  134|   307k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 244k, False: 63.2k]
  ------------------
  135|   244k|            auto tmp =
  136|   244k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   244k|            auto res = get_next_code_point(tmp);
  138|   244k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 40.6k, False: 203k]
  ------------------
  139|  40.6k|                return it;
  140|  40.6k|            }
  141|   203k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   203k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   203k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   203k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   203k|        }
  145|   103k|    }
  146|       |
  147|   195k|    return detail::make_string_view_iterator(source, it);
  148|   235k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   563k|{
  105|   563k|    static_assert(sizeof(*source.data()) == 1);
  106|   563k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   563k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   563k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   563k|    uint64_t word{};
  108|   563k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   563k|    return has_byte_greater(word, 127) != 0;
  111|   563k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|   947k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   244k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   239k|{
  118|   239k|    auto it = source.begin();
  119|       |
  120|   307k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 222k, False: 85.2k]
  ------------------
  121|   222k|        auto sv =
  122|   222k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   222k|                .substr(0, 8);
  124|       |
  125|   222k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 170k, False: 51.8k]
  ------------------
  126|   170k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   170k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   170k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 104k, False: 66.4k]
  ------------------
  129|   104k|                break;
  130|   104k|            }
  131|  66.4k|            continue;
  132|   170k|        }
  133|       |
  134|  99.1k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 97.2k, False: 1.92k]
  ------------------
  135|  97.2k|            auto tmp =
  136|  97.2k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|  97.2k|            auto res = get_next_code_point(tmp);
  138|  97.2k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 49.9k, False: 47.2k]
  ------------------
  139|  49.9k|                return it;
  140|  49.9k|            }
  141|  47.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  47.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  47.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  47.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  47.2k|        }
  145|  51.8k|    }
  146|       |
  147|   189k|    return detail::make_string_view_iterator(source, it);
  148|   239k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|   442k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|  97.2k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  81.3k|{
 2073|  81.3k|    const auto argcount = args.size();
 2074|  81.3k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 36.6k, False: 44.7k]
  |  Branch (2074:60): [True: 36.6k, False: 0]
  ------------------
 2075|  36.6k|        auto arg = args.get(0);
 2076|  36.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  36.6k|    static_cast<    \
  |  |  929|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  36.6k|    }
 2078|       |
 2079|  44.7k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 44.7k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  44.7k|    SCN_UNLIKELY_ATTR
 2087|  44.7k|    {
 2088|  44.7k|        auto handler = format_handler<false, CharT>{
 2089|  44.7k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  44.7k|        return vscan_parse_format_string(format, handler);
 2091|  44.7k|    }
 2092|  44.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   216k|{
 1625|   216k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 120k, False: 96.6k]
  ------------------
 1626|   120k|        return false;
 1627|   120k|    }
 1628|  96.6k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 96.6k, False: 0]
  |  Branch (1628:39): [True: 96.6k, False: 0]
  ------------------
 1629|   216k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  54.9k|{
 1658|  54.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 54.9k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  54.9k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  54.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 54.9k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  54.9k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  54.9k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  54.9k|    static_cast<    \
  |  |  929|  54.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  54.9k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  54.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.70k, False: 52.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.70k|    }                                                  \
  |  |  |  | 3667|  54.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  52.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  52.2k|    return it.position();
 1675|  54.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|  75.6k|        : format_handler_base{argcount},
 1900|  75.6k|          parse_ctx{format},
 1901|  75.6k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  75.6k|    static_cast<    \
  |  |  929|  75.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  75.6k|    static_cast<    \
  |  |  929|  75.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  75.6k|    {
 1903|  75.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  1.04M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  1.04M|    {
 1722|  1.04M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  1.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|  75.6k|        : contiguous_ctx(source, args, loc)
 1852|  75.6k|    {
 1853|  75.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  75.6k|{
 2038|  75.6k|    const auto beg = handler.get_ctx().begin();
 2039|  75.6k|    detail::parse_format_string<false>(format, handler);
 2040|  75.6k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 57.6k]
  |  |  ------------------
  ------------------
 2041|  18.0k|        return unexpected(handler.error);
 2042|  18.0k|    }
 2043|  57.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  75.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   478k|    {
 2022|   478k|        return ctx.get();
 2023|   478k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   478k|    {
 1857|   478k|        return contiguous_ctx;
 1858|   478k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   133k|    {
 1907|   133k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 133k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   133k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  75.6k|{
 1681|  75.6k|    auto arg = ctx.arg(id);
 1682|  75.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 75.6k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  75.6k|    return arg;
 1686|  75.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  1.04M|    {
 1797|  1.04M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  1.04M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  1.04M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.04M, False: 0]
  |  |  ------------------
  ------------------
 1807|  1.04M|            visited_args_lower64 |= (1ull << id);
 1808|  1.04M|            return;
 1809|  1.04M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  1.04M|    {
 1782|  1.04M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.04M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.04M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  1.04M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.04M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.04M, False: 0]
  |  |  ------------------
  ------------------
 1788|  1.04M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  1.04M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  1.04M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  48.6k|    {
 1766|  48.6k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  48.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 48.6k, False: 0]
  |  |  ------------------
  ------------------
 1767|  48.6k|            error = err;
 1768|  48.6k|        }
 1769|  48.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|  75.6k|    {
 1944|  75.6k|        return parse_ctx.next_arg_id();
 1945|  75.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|  75.6k|    {
 1985|  75.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  75.6k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  75.6k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 75.6k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  75.6k|        auto specs = detail::format_specs{};
 1998|  75.6k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  75.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  75.6k|            arg.type()};
 2001|       |
 2002|  75.6k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  75.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 75.6k]
  |  Branch (2003:29): [True: 0, False: 75.6k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  75.6k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  75.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.20k, False: 68.4k]
  |  |  ------------------
  ------------------
 2009|  7.20k|            return parse_ctx.begin();
 2010|  7.20k|        }
 2011|  68.4k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  68.4k|        on_visit_scan_arg(
 2014|  68.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  68.4k|                                           get_ctx().locale()},
 2016|  68.4k|            arg);
 2017|  68.4k|        return parse_ctx.begin();
 2018|  75.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|  75.6k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  75.6k|    {
 1701|  75.6k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|  68.4k|    {
 1956|  68.4k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 68.4k]
  |  Branch (1956:23): [True: 0, False: 68.4k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  68.4k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  68.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 57.6k]
  |  |  ------------------
  ------------------
 1963|  10.8k|            on_error(r.error());
 1964|  10.8k|        }
 1965|  57.6k|        else {
 1966|  57.6k|            get_ctx().advance_to(*r);
 1967|  57.6k|        }
 1968|  68.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  32.4k|    {
 1761|  32.4k|        SCN_UNLIKELY_ATTR
 1762|  32.4k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  32.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  1.04M|    {
 1729|  1.04M|        {
 1730|  1.04M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 1.04M]
  ------------------
 1731|  1.04M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 1.04M]
  ------------------
 1732|  1.04M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  1.04M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  1.04M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 1.04M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  1.04M|        }
 1739|       |
 1740|  1.04M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 1.04M, False: 0]
  ------------------
 1741|  1.04M|            return;
 1742|  1.04M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  1.04M|    {
 1777|  1.04M|        return error;
 1778|  1.04M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  3.11M|    {
 1773|  3.11M|        return static_cast<bool>(error);
 1774|  3.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|  44.7k|        : format_handler_base{argcount},
 1900|  44.7k|          parse_ctx{format},
 1901|  44.7k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  44.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  44.7k|    {
 1903|  44.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|  44.7k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  44.7k|    static_cast<    \
  |  |  929|  44.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  44.7k|    {
 1830|  44.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  44.7k|{
 2038|  44.7k|    const auto beg = handler.get_ctx().begin();
 2039|  44.7k|    detail::parse_format_string<false>(format, handler);
 2040|  44.7k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.01k, False: 35.6k]
  |  |  ------------------
  ------------------
 2041|  9.01k|        return unexpected(handler.error);
 2042|  9.01k|    }
 2043|  35.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  44.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   287k|    {
 2022|   287k|        return ctx.get();
 2023|   287k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   287k|    {
 1834|   287k|        return ctx;
 1835|   287k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|  80.3k|    {
 1907|  80.3k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 80.3k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  80.3k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  44.7k|{
 1681|  44.7k|    auto arg = ctx.arg(id);
 1682|  44.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 44.7k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  44.7k|    return arg;
 1686|  44.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  44.7k|    {
 1944|  44.7k|        return parse_ctx.next_arg_id();
 1945|  44.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  44.7k|    {
 1985|  44.7k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  44.7k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  44.7k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 44.7k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  44.7k|        auto specs = detail::format_specs{};
 1998|  44.7k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  44.7k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  44.7k|            arg.type()};
 2001|       |
 2002|  44.7k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  44.7k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 44.7k]
  |  Branch (2003:29): [True: 0, False: 44.7k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  44.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  44.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 41.0k]
  |  |  ------------------
  ------------------
 2009|  3.60k|            return parse_ctx.begin();
 2010|  3.60k|        }
 2011|  41.0k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  41.0k|        on_visit_scan_arg(
 2014|  41.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  41.0k|                                           get_ctx().locale()},
 2016|  41.0k|            arg);
 2017|  41.0k|        return parse_ctx.begin();
 2018|  44.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|  44.7k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  44.7k|    {
 1701|  44.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  41.0k|    {
 1956|  41.0k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 41.0k]
  |  Branch (1956:23): [True: 0, False: 41.0k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  41.0k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  41.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  41.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  41.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.40k, False: 35.6k]
  |  |  ------------------
  ------------------
 1963|  5.40k|            on_error(r.error());
 1964|  5.40k|        }
 1965|  35.6k|        else {
 1966|  35.6k|            get_ctx().advance_to(*r);
 1967|  35.6k|        }
 1968|  41.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   135k|{
 2053|   135k|    const auto argcount = args.size();
 2054|   135k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 59.9k, False: 75.6k]
  |  Branch (2054:60): [True: 59.9k, False: 0]
  ------------------
 2055|  59.9k|        auto arg = args.get(0);
 2056|  59.9k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  59.9k|    static_cast<    \
  |  |  929|  59.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  59.9k|    }
 2058|       |
 2059|  75.6k|    auto handler = format_handler<true, CharT>{
 2060|  75.6k|        ranges::subrange<const CharT*>{source.data(),
 2061|  75.6k|                                       source.data() + source.size()},
 2062|  75.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  75.6k|    static_cast<    \
  |  |  929|  75.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  75.6k|    static_cast<    \
  |  |  929|  75.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  75.6k|    return vscan_parse_format_string(format, handler);
 2064|   135k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  89.9k|{
 1638|  89.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 89.9k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  89.9k|    auto reader =
 1644|  89.9k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  89.9k|            ranges::subrange<const CharT*>{source.data(),
 1646|  89.9k|                                           source.data() + source.size()},
 1647|  89.9k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  89.9k|    static_cast<    \
  |  |  929|  89.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  89.9k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  89.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  89.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  89.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.40k, False: 84.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.40k|    }                                                  \
  |  |  |  | 3667|  89.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  84.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  84.5k|    return ranges::distance(source.data(), it);
 1650|  89.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.20M|{
 2053|  1.20M|    const auto argcount = args.size();
 2054|  1.20M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 589k, False: 618k]
  |  Branch (2054:60): [True: 589k, False: 0]
  ------------------
 2055|   589k|        auto arg = args.get(0);
 2056|   589k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   589k|    static_cast<    \
  |  |  929|   589k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   589k|    }
 2058|       |
 2059|   618k|    auto handler = format_handler<true, CharT>{
 2060|   618k|        ranges::subrange<const CharT*>{source.data(),
 2061|   618k|                                       source.data() + source.size()},
 2062|   618k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   618k|    static_cast<    \
  |  |  929|   618k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   618k|    static_cast<    \
  |  |  929|   618k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   618k|    return vscan_parse_format_string(format, handler);
 2064|  1.20M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  1.81M|{
 1625|  1.81M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 928k, False: 884k]
  ------------------
 1626|   928k|        return false;
 1627|   928k|    }
 1628|   884k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 884k, False: 0]
  |  Branch (1628:39): [True: 884k, False: 0]
  ------------------
 1629|  1.81M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   884k|{
 1638|   884k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   884k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 884k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   884k|    auto reader =
 1644|   884k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   884k|            ranges::subrange<const CharT*>{source.data(),
 1646|   884k|                                           source.data() + source.size()},
 1647|   884k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   884k|    static_cast<    \
  |  |  929|   884k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   884k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   884k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   884k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   884k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   884k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.8k, False: 873k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  10.8k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  10.8k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  10.8k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  10.8k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  10.8k|    }                                                  \
  |  |  |  | 3667|   884k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   873k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   873k|    return ranges::distance(source.data(), it);
 1650|   884k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   618k|        : format_handler_base{argcount},
 1900|   618k|          parse_ctx{format},
 1901|   618k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   618k|    static_cast<    \
  |  |  929|   618k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   618k|    static_cast<    \
  |  |  929|   618k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   618k|    {
 1903|   618k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   618k|        : contiguous_ctx(source, args, loc)
 1852|   618k|    {
 1853|   618k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   618k|{
 2038|   618k|    const auto beg = handler.get_ctx().begin();
 2039|   618k|    detail::parse_format_string<false>(format, handler);
 2040|   618k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 36.0k, False: 582k]
  |  |  ------------------
  ------------------
 2041|  36.0k|        return unexpected(handler.error);
 2042|  36.0k|    }
 2043|   582k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   618k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  4.23M|    {
 2022|  4.23M|        return ctx.get();
 2023|  4.23M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  4.23M|    {
 1857|  4.23M|        return contiguous_ctx;
 1858|  4.23M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  1.20M|    {
 1907|  1.20M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.20M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.20M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   618k|{
 1681|   618k|    auto arg = ctx.arg(id);
 1682|   618k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 618k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   618k|    return arg;
 1686|   618k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   618k|    {
 1944|   618k|        return parse_ctx.next_arg_id();
 1945|   618k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   618k|    {
 1985|   618k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   618k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   618k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 618k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   618k|        auto specs = detail::format_specs{};
 1998|   618k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   618k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   618k|            arg.type()};
 2001|       |
 2002|   618k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   618k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 618k]
  |  Branch (2003:29): [True: 0, False: 618k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   618k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   618k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.4k, False: 604k]
  |  |  ------------------
  ------------------
 2009|  14.4k|            return parse_ctx.begin();
 2010|  14.4k|        }
 2011|   604k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   604k|        on_visit_scan_arg(
 2014|   604k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   604k|                                           get_ctx().locale()},
 2016|   604k|            arg);
 2017|   604k|        return parse_ctx.begin();
 2018|   618k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   618k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   618k|    {
 1701|   618k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   604k|    {
 1956|   604k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 604k]
  |  Branch (1956:23): [True: 0, False: 604k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   604k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   604k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   604k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   604k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.6k, False: 582k]
  |  |  ------------------
  ------------------
 1963|  21.6k|            on_error(r.error());
 1964|  21.6k|        }
 1965|   582k|        else {
 1966|   582k|            get_ctx().advance_to(*r);
 1967|   582k|        }
 1968|   604k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   604k|{
 2073|   604k|    const auto argcount = args.size();
 2074|   604k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 294k, False: 309k]
  |  Branch (2074:60): [True: 294k, False: 0]
  ------------------
 2075|   294k|        auto arg = args.get(0);
 2076|   294k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   294k|    static_cast<    \
  |  |  929|   294k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   294k|    }
 2078|       |
 2079|   309k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 309k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   309k|    SCN_UNLIKELY_ATTR
 2087|   309k|    {
 2088|   309k|        auto handler = format_handler<false, CharT>{
 2089|   309k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   309k|    static_cast<    \
  |  |  929|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   309k|    static_cast<    \
  |  |  929|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   309k|        return vscan_parse_format_string(format, handler);
 2091|   309k|    }
 2092|   309k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   442k|{
 1658|   442k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 442k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   442k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   442k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 442k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   442k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   442k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   442k|    static_cast<    \
  |  |  929|   442k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   442k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   442k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.40k, False: 436k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  5.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  5.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  5.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  5.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  5.40k|    }                                                  \
  |  |  |  | 3667|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   436k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   436k|    return it.position();
 1675|   442k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   309k|        : format_handler_base{argcount},
 1900|   309k|          parse_ctx{format},
 1901|   309k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   309k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   309k|    static_cast<    \
  |  |  929|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   309k|    static_cast<    \
  |  |  929|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   309k|    {
 1903|   309k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   309k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   309k|    static_cast<    \
  |  |  929|   309k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   309k|    {
 1830|   309k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   309k|{
 2038|   309k|    const auto beg = handler.get_ctx().begin();
 2039|   309k|    detail::parse_format_string<false>(format, handler);
 2040|   309k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.0k, False: 291k]
  |  |  ------------------
  ------------------
 2041|  18.0k|        return unexpected(handler.error);
 2042|  18.0k|    }
 2043|   291k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   309k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.11M|    {
 2022|  2.11M|        return ctx.get();
 2023|  2.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.11M|    {
 1834|  2.11M|        return ctx;
 1835|  2.11M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   600k|    {
 1907|   600k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 600k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   600k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   309k|{
 1681|   309k|    auto arg = ctx.arg(id);
 1682|   309k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 309k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   309k|    return arg;
 1686|   309k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   309k|    {
 1944|   309k|        return parse_ctx.next_arg_id();
 1945|   309k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   309k|    {
 1985|   309k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   309k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   309k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 309k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   309k|        auto specs = detail::format_specs{};
 1998|   309k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   309k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   309k|            arg.type()};
 2001|       |
 2002|   309k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   309k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 309k]
  |  Branch (2003:29): [True: 0, False: 309k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   309k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   309k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.20k, False: 302k]
  |  |  ------------------
  ------------------
 2009|  7.20k|            return parse_ctx.begin();
 2010|  7.20k|        }
 2011|   302k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   302k|        on_visit_scan_arg(
 2014|   302k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   302k|                                           get_ctx().locale()},
 2016|   302k|            arg);
 2017|   302k|        return parse_ctx.begin();
 2018|   309k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   309k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   309k|    {
 1701|   309k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   302k|    {
 1956|   302k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 302k]
  |  Branch (1956:23): [True: 0, False: 302k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   302k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   302k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   302k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 291k]
  |  |  ------------------
  ------------------
 1963|  10.8k|            on_error(r.error());
 1964|  10.8k|        }
 1965|   291k|        else {
 1966|   291k|            get_ctx().advance_to(*r);
 1967|   291k|        }
 1968|   302k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  29.9k|{
 2099|  29.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  29.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  29.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  18.3k|{
 2099|  18.3k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  18.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  18.3k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   294k|{
 2099|   294k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   294k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   147k|{
 2099|   147k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   147k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|    901|{
 1351|    901|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|    901|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|    901|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|    901|            return transcode_to_string_impl_to32(src, dest);
 1362|    901|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|    901|    SCN_EXPECT(false);
  ------------------
  |  |  924|    901|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    901|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|    901|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|    901|{
 1244|    901|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|    901|    auto it = src.begin();
 1247|   196k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 195k, False: 901]
  ------------------
 1248|   195k|        auto res = get_next_code_point(
 1249|   195k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   195k|                                                                 src.end()));
 1251|   195k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.01k, False: 192k]
  |  |  ------------------
  ------------------
 1252|  3.01k|            dest.push_back(DestCharT{0xfffd});
 1253|  3.01k|        }
 1254|   192k|        else {
 1255|   192k|            dest.push_back(res.value);
 1256|   192k|        }
 1257|   195k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   195k|    }
 1259|    901|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   536k|{
 1169|   536k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   536k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   536k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   536k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   536k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   536k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.4k, False: 519k]
  |  |  ------------------
  ------------------
 1173|  17.4k|        return {get_start_for_next_code_point(input),
 1174|  17.4k|                detail::invalid_code_point};
 1175|  17.4k|    }
 1176|   519k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   519k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.7k, False: 505k]
  |  |  ------------------
  ------------------
 1177|  13.7k|        return {input.end(), detail::invalid_code_point};
 1178|  13.7k|    }
 1179|       |
 1180|   505k|    return {input.begin() + len,
 1181|   505k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   519k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  17.4k|{
 1155|  17.4k|    auto it = input.begin();
 1156|  64.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 61.9k, False: 2.45k]
  ------------------
 1157|  61.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 15.0k, False: 46.8k]
  ------------------
 1158|  15.0k|            break;
 1159|  15.0k|        }
 1160|  61.9k|    }
 1161|  17.4k|    return it;
 1162|  17.4k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|  16.2k|    {
 2920|  16.2k|        SCN_UNLIKELY_ATTR
 2921|  16.2k|        m_msg = msg;
 2922|  16.2k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  1.01M|    {
 2925|  1.01M|        return m_msg == nullptr;
 2926|  1.01M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  1.38M|{
  458|  1.38M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.38M|        static_cast<unsigned char>(ch))];
  460|  1.38M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  35.8k|{
  469|  35.8k|    return static_cast<unsigned char>(ch) <= 127;
  470|  35.8k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  11.9k|{
  474|  11.9k|#if WCHAR_MIN < 0
  475|  11.9k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 10.7k, False: 1.20k]
  |  Branch (475:23): [True: 7.09k, False: 3.68k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  11.9k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   563k|{
  539|   563k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   563k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  3.91M|{
  784|  3.91M|    return e != eof_error::good;
  785|  3.91M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  15.9k|{
  798|  15.9k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  15.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  15.9k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  15.9k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|   967k|{
 5997|   967k|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 967k]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|   967k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 967k]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|   967k|    return {};
 6012|   967k|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   294k|    {
  304|   294k|        ranges::advance(x, n);
  305|   294k|        return x;
  306|   294k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   294k|    {
  268|   294k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   294k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   294k|    {
  151|   294k|        i += n;
  152|   294k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   696k|    {
  108|   696k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   696k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   696k|    {
   87|   696k|        return s - i;
   88|   696k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.45M|    {
  108|  1.45M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.45M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.45M|    {
   87|  1.45M|        return s - i;
   88|  1.45M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  94.2k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|  94.2k|                               detail::char_t<Range>>::forward_iterator>) {
  989|  94.2k|        auto beg = r.begin();
  990|  94.2k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 94.2k, False: 0]
  ------------------
  991|  94.2k|            return false;
  992|  94.2k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|  94.2k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  30.5k|    {
  763|  30.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  30.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  30.5k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  7.24k|        : m_fptr([](storage fn,
  743|  7.24k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.24k|              cvref<T> obj = *get<T>(fn);
  745|  7.24k|              if constexpr (std::is_void_v<R>) {
  746|  7.24k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.24k|              }
  748|  7.24k|              else {
  749|  7.24k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.24k|              }
  751|  7.24k|          }),
  752|  7.24k|          m_storage(std::addressof(f))
  753|  7.24k|    {
  754|  7.24k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  15.2k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.2k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.2k|              else {
  749|  15.2k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.2k|              }
  751|  15.2k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  15.2k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.2k|        else if constexpr (std::is_object_v<T>) {
  688|  15.2k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.2k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  7.24k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.24k|        {
  662|  7.24k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  77.3M|    {
  763|  77.3M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  77.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  77.3M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.28M|        : m_fptr([](storage fn,
  743|  2.28M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.28M|              cvref<T> obj = *get<T>(fn);
  745|  2.28M|              if constexpr (std::is_void_v<R>) {
  746|  2.28M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.28M|              }
  748|  2.28M|              else {
  749|  2.28M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.28M|              }
  751|  2.28M|          }),
  752|  2.28M|          m_storage(std::addressof(f))
  753|  2.28M|    {
  754|  2.28M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.35M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.35M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.35M|              else {
  749|  5.35M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.35M|              }
  751|  5.35M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.35M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.35M|        else if constexpr (std::is_object_v<T>) {
  688|  5.35M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.35M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.28M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.28M|        {
  662|  2.28M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|  39.2k|    {
 6026|  39.2k|        const bool need_skipped_width =
 6027|  39.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 39.2k]
  |  Branch (6027:33): [True: 0, False: 39.2k]
  ------------------
 6028|  39.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  39.2k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 39.2k]
  ------------------
 6032|  39.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 39.2k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  39.2k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 39.2k, False: 0]
  |  Branch (6036:56): [True: 36.8k, False: 2.41k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  36.8k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 36.8k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  72.7k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  36.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  36.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  36.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  36.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 994, False: 35.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    994|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    994|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    994|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    994|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    994|    }                                                  \
  |  |  |  | 3667|  36.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  72.7k|                            make_eof_scan_error));
 6047|       |
 6048|  72.7k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 35.8k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  35.8k|            return result_type{it, 0};
 6056|  72.7k|        }
 6057|       |
 6058|  2.41k|        return result_type{rng.begin(), 0};
 6059|  39.2k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  2.41k|{
 1964|  2.41k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  2.41k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  2.41k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  2.41k|    else {
 1949|  2.41k|        auto first = range.begin();
 1950|  5.16k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 5.08k, False: 72]
  ------------------
 1951|  5.08k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 2.34k, False: 2.74k]
  ------------------
 1952|  2.34k|                return first;
 1953|  2.34k|            }
 1954|  5.08k|        }
 1955|     72|        return first;
 1956|  2.41k|    }
 1957|  2.41k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  35.6k|    {
  108|  35.6k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  35.6k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  35.6k|    {
   94|  35.6k|        iter_difference_t<I> counter{0};
   95|   376k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 341k, False: 35.6k]
  ------------------
   96|   341k|            ++i;
   97|   341k|            ++counter;
   98|   341k|        }
   99|  35.6k|        return counter;
  100|  35.6k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   145k|{
  950|   145k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.27k, False: 143k]
  |  |  ------------------
  ------------------
  951|  2.27k|        return eof_error::eof;
  952|  2.27k|    }
  953|   143k|    return eof_error::good;
  954|   145k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.04M|{
  944|  1.04M|    return is_range_eof(r.begin(), r.end());
  945|  1.04M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.04M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.04M|    {
  937|  1.04M|        return begin == end;
  938|  1.04M|    }
  939|  1.04M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|  90.1k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|  90.1k|    else {
 1677|  90.1k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  90.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|  90.1k|    }
 1679|  90.1k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|  90.1k|    {
 1525|  90.1k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  90.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|  90.1k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|  90.1k|    {
 1609|  90.1k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|  90.1k|                           ranges::common_range<Range>) {
 1626|  90.1k|            auto beg_seg = range.begin().contiguous_segment();
 1627|  90.1k|            auto end_seg = range.end().contiguous_segment();
 1628|  90.1k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  90.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.19k, False: 86.9k]
  |  |  ------------------
  ------------------
 1629|  90.1k|                             detail::to_address(end_seg.end()))) {
 1630|  3.19k|                auto& str = m_storage.emplace();
 1631|  3.19k|                str.reserve(range.end().position() - range.begin().position());
 1632|  3.19k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  3.19k|                m_view = string_view_type{str};
 1634|  3.19k|                return;
 1635|  3.19k|            }
 1636|       |
 1637|  86.9k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|  86.9k|                                                            end_seg.data());
 1639|  86.9k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|  90.1k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   176k|    {
 1570|   176k|        return m_view;
 1571|   176k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|  90.1k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  35.1k|    {
 6068|  35.1k|        const bool need_skipped_width =
 6069|  35.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 35.1k]
  |  Branch (6069:33): [True: 0, False: 35.1k]
  ------------------
 6070|  35.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  35.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 35.1k]
  ------------------
 6073|  35.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 35.1k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  35.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 35.1k, False: 0]
  ------------------
 6082|  35.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 578, False: 34.5k]
  ------------------
 6083|  35.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 578]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    578|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 578]
  ------------------
 6085|    578|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  35.1k|        return result_type{rng.begin(), 0};
 6107|  35.1k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   238k|{
  950|   238k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   238k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.58k, False: 234k]
  |  |  ------------------
  ------------------
  951|  3.58k|        return eof_error::eof;
  952|  3.58k|    }
  953|   234k|    return eof_error::good;
  954|   238k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   238k|{
  944|   238k|    return is_range_eof(r.begin(), r.end());
  945|   238k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   238k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   238k|    {
  937|   238k|        return begin == end;
  938|   238k|    }
  939|   238k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   147k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   147k|                  ranges::sized_range<Range>) {
 1674|   147k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   147k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   147k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   147k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   147k|    {
 1478|   147k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|   808k|    {
 1491|   808k|        return sv;
 1492|   808k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  4.83k|{
 1964|  4.83k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  4.83k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  4.83k|{
 1945|  4.83k|    if constexpr (ranges::common_range<Range>) {
 1946|  4.83k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  4.83k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   148k|{
 2940|   148k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 148k, False: 0]
  ------------------
 2941|   148k|        auto it = read_while_classic_space(range);
 2942|   148k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   148k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.15k, False: 146k]
  |  |  ------------------
  ------------------
 2944|  2.15k|            return unexpected(e);
 2945|  2.15k|        }
 2946|       |
 2947|   146k|        return it;
 2948|   148k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   148k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   148k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   148k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   148k|        auto buf = make_contiguous_buffer(range);
 2109|   148k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   148k|        return ranges::next(range.begin(),
 2111|   148k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   148k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   294k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   294k|                  ranges::sized_range<Range>) {
 1674|   294k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   294k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   294k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   294k|    {
 1478|   294k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  7.89k|    {
  304|  7.89k|        ranges::advance(x, n);
  305|  7.89k|        return x;
  306|  7.89k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   180k|    {
  268|   180k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   180k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   180k|    {
  181|   333k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 152k, False: 180k]
  ------------------
  182|   152k|            ++i;
  183|   152k|        }
  184|   180k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|  89.7k|    {
 1575|  89.7k|        return m_storage.has_value();
 1576|  89.7k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  1.83k|    {
 1580|  1.83k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  1.83k|        return *m_storage;
 1582|  1.83k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  41.0k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  41.0k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  41.0k|            auto rd = make_reader<T, char_type>();
 6195|  41.0k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  41.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 39.2k]
  |  |  ------------------
  ------------------
 6196|  1.80k|                return unexpected(e);
 6197|  1.80k|            }
 6198|       |
 6199|  39.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 39.2k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  39.2k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  39.2k|                return impl(rd, range, value);
 6202|  39.2k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  41.0k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|   175k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|   175k|                       std::is_same_v<T, std::wstring>) {
 5816|   175k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   175k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|   254k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   109k|    {
 3029|   109k|        reader_error_handler eh{};
 3030|   109k|        get_derived().check_specs_impl(specs, eh);
 3031|   109k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   109k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.40k, False: 104k]
  |  |  ------------------
  ------------------
 3032|  5.40k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  5.40k|        }
 3034|   104k|        return {};
 3035|   109k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|   109k|    {
 3040|   109k|        return static_cast<Derived&>(*this);
 3041|   109k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|   109k|    {
 5199|   109k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|   109k|        SCN_GCC_PUSH
 5202|   109k|        SCN_GCC_IGNORE("-Wswitch")
 5203|   109k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|   109k|        SCN_CLANG_PUSH
 5206|   109k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|   109k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|   109k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 109k]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 109k]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|  96.8k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 96.8k, False: 12.6k]
  ------------------
 5215|  96.8k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 96.8k]
  ------------------
 5216|  96.8k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 96.8k]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|  96.8k|                else {
 5220|  96.8k|                    m_type = reader_type::word;
 5221|  96.8k|                }
 5222|  96.8k|                break;
 5223|      0|            }
 5224|       |
 5225|  5.40k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 5.40k, False: 104k]
  ------------------
 5226|  5.40k|                m_type = reader_type::character;
 5227|  5.40k|                break;
 5228|       |
 5229|  7.24k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 7.24k, False: 102k]
  ------------------
 5230|  7.24k|                m_type = reader_type::character_set;
 5231|  7.24k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 109k]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 109k]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|   109k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|   109k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|  39.2k|    {
 6113|  39.2k|        const bool need_skipped_width =
 6114|  39.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 39.2k]
  |  Branch (6114:33): [True: 0, False: 39.2k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  39.2k|        auto it = rng.begin();
 6118|  39.2k|        std::ptrdiff_t prefix_width = 0;
 6119|  39.2k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 39.2k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  39.2k|        else {
 6127|  39.2k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  39.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  39.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  39.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 994, False: 38.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    994|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    994|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    994|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    994|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    994|    }                                                  \
  |  |  |  | 3667|  39.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  38.3k|            std::tie(it, prefix_width) = prefix_result;
 6129|  38.3k|        }
 6130|  38.3k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  38.3k|        std::ptrdiff_t value_width = 0;
 6134|  38.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 38.3k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  38.3k|        else {
 6150|  38.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  38.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  38.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  38.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.61k, False: 35.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.61k|    }                                                  \
  |  | 3667|  38.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  38.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  35.6k|                                             specs, value, loc));
 6152|       |
 6153|  35.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 35.6k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  35.6k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  35.6k|        std::ptrdiff_t postfix_width = 0;
 6162|  35.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 35.1k, False: 582]
  ------------------
 6163|  35.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  35.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  35.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  35.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  35.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 35.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  35.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  35.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  35.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  35.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  35.1k|                                 value_width));
 6167|  35.1k|            std::tie(it, postfix_width) = postfix_result;
 6168|  35.1k|        }
 6169|       |
 6170|  35.6k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  35.6k|                                                 value_width, postfix_width);
 6172|  35.6k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 35.6k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  35.6k|        return it;
 6177|  35.6k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|   340k|    {
 5248|   340k|        return m_type == reader_type::word;
 5249|   340k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   237k|{
 1132|   237k|    auto it = src.begin();
 1133|  1.68M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 1.45M, False: 230k]
  ------------------
 1134|  1.45M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  1.45M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 4.52k, False: 1.44M]
  ------------------
 1136|  4.52k|            return false;
 1137|  4.52k|        }
 1138|  1.44M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 911, False: 1.44M]
  ------------------
 1139|    911|            return false;
 1140|    911|        }
 1141|  1.44M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  1.44M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  1.44M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.22k, False: 1.44M]
  ------------------
 1144|  2.22k|            return false;
 1145|  2.22k|        }
 1146|  1.44M|        it += len;
 1147|  1.44M|    }
 1148|   230k|    return true;
 1149|   237k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|  87.9k|{
 2982|  87.9k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|  87.9k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 1.83k, False: 86.1k]
  ------------------
 2984|  1.83k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  1.83k|    static_cast<    \
  |  |  929|  1.83k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  1.83k|        }
 2986|  86.1k|        else {
 2987|  86.1k|            dest.assign(source.view());
 2988|  86.1k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|  87.9k|    return {};
 2995|  87.9k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  7.24k|        {
 5092|  7.24k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 7.24k, False: 0]
  ------------------
 5093|  7.24k|                return {};
 5094|  7.24k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|  13.4k|        {
 5065|  13.4k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  13.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  13.4k|            const auto val =
 5067|  13.4k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  13.4k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  13.4k|                    (val % 8)) &
 5070|  13.4k|                   1u;
 5071|  13.4k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  15.2k|        {
 5118|  15.2k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 1.77k, False: 13.4k]
  ------------------
 5119|  1.77k|                return false;
 5120|  1.77k|            }
 5121|       |
 5122|  13.4k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  15.2k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  7.24k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|  38.3k|    {
 5266|  38.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  38.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  38.3k|        return read_impl(range, specs, value);
 5268|  38.3k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|  38.3k|    {
 5284|  38.3k|        SCN_CLANG_PUSH
 5285|  38.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  38.3k|        switch (m_type) {
 5288|  35.8k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 35.8k, False: 2.41k]
  ------------------
 5289|  35.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 38.3k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 38.3k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.41k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.41k, False: 35.8k]
  ------------------
 5299|  2.41k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.41k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 38.3k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 38.3k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 38.3k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  38.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  38.3k|        }
 5320|       |
 5321|  38.3k|        SCN_CLANG_POP
 5322|  38.3k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|  89.5k|    {
 4809|  89.5k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|  89.5k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|  89.5k|{
 4741|  89.5k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  89.5k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  89.5k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 2.23k, False: 87.3k]
  ------------------
 4745|  2.23k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  2.23k|                                     "Invalid encoding in scanned string");
 4747|  2.23k|    }
 4748|  87.3k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  87.3k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  87.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 87.3k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  87.3k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  87.3k|    static_cast<    \
  |  |  929|  87.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  87.3k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|  89.5k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  89.5k|    else {
 2085|  89.5k|        auto it = range.begin();
 2086|       |
 2087|  89.5k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|  89.5k|            auto seg = get_contiguous_beginning(range);
 2089|  89.5k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|  89.5k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 89.5k]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|  89.5k|            ranges::advance(it, seg.size());
 2094|  89.5k|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|  89.5k|            ranges::subrange{it, range.end()},
 2098|  89.5k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  89.5k|    }
 2100|  89.5k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   180k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   180k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   180k|        else {
 1054|   180k|            return r.begin().contiguous_segment();
 1055|   180k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   180k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   172k|{
 2049|   172k|    auto it = range.begin();
 2050|   900k|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 896k, False: 4.25k]
  ------------------
 2051|   896k|        const auto val =
 2052|   896k|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|   896k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   896k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 883k, False: 12.3k]
  |  |  ------------------
  ------------------
 2054|   883k|            const auto cp = detail::decode_code_point_exhaustive(
 2055|   883k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|   883k|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 168k, False: 715k]
  ------------------
 2057|   168k|                return it;
 2058|   168k|            }
 2059|   883k|        }
 2060|   727k|        it = val.iterator;
 2061|   727k|    }
 2062|       |
 2063|  4.25k|    return it;
 2064|   172k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|   896k|{
 1887|   896k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|   896k|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|   896k|    auto it = range.begin();
 1891|   896k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|   896k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   896k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.3k, False: 883k]
  |  |  ------------------
  ------------------
 1894|  12.3k|        ++it;
 1895|  12.3k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  12.3k|        return {it, {}};
 1897|  12.3k|    }
 1898|       |
 1899|   883k|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 830k, False: 52.8k]
  ------------------
 1900|   830k|        ++it;
 1901|   830k|        return {it, string_type(1, *range.begin())};
 1902|   830k|    }
 1903|       |
 1904|  52.8k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  52.8k|    return {it, string_type{range.begin(), it}};
 1906|   883k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  12.3k|{
 1155|  12.3k|    auto it = input.begin();
 1156|  25.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 25.0k, False: 669]
  ------------------
 1157|  25.0k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 11.6k, False: 13.3k]
  ------------------
 1158|  11.6k|            break;
 1159|  11.6k|        }
 1160|  25.0k|    }
 1161|  12.3k|    return it;
 1162|  12.3k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  52.8k|    {
  283|  52.8k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  52.8k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  52.8k|    {
  252|  52.8k|        constexpr iter_difference_t<I> zero{0};
  253|  52.8k|        iter_difference_t<I> counter{0};
  254|       |
  255|   198k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 146k, False: 52.3k]
  |  Branch (255:30): [True: 145k, False: 542]
  ------------------
  256|   145k|            ++i;
  257|   145k|            ++counter;
  258|   145k|        }
  259|       |
  260|  52.8k|        return counter;
  261|  52.8k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|   896k|    {
 1878|   896k|        return !codepoint.empty();
 1879|   896k|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  89.5k|        : m_fptr([](storage fn,
  743|  89.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  89.5k|              cvref<T> obj = *get<T>(fn);
  745|  89.5k|              if constexpr (std::is_void_v<R>) {
  746|  89.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  89.5k|              }
  748|  89.5k|              else {
  749|  89.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  89.5k|              }
  751|  89.5k|          }),
  752|  89.5k|          m_storage(std::addressof(f))
  753|  89.5k|    {
  754|  89.5k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   562k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   562k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   562k|              else {
  749|   562k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   562k|              }
  751|   562k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   562k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   562k|        else if constexpr (std::is_object_v<T>) {
  688|   562k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   562k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|   562k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  89.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  89.5k|        {
  662|  89.5k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  2.41k|    {
 5037|  2.41k|        auto it = read_source_impl(range, {specs});
 5038|  2.41k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 614]
  |  |  ------------------
  ------------------
 5039|  1.80k|            return unexpected(it.error());
 5040|  1.80k|        }
 5041|       |
 5042|    614|        return read_string_impl(range, *it, value);
 5043|  2.41k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  2.41k|    {
 5142|  2.41k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  2.41k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  2.41k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.41k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  2.41k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  2.41k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 2.41k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  2.41k|        const auto cb = [&](SourceCharT ch) {
 5165|  2.41k|            return cb_wrapper.on_ascii_only(ch);
 5166|  2.41k|        };
 5167|       |
 5168|  2.41k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 2.41k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  2.41k|        auto it = read_while_code_unit(range, cb);
 5173|  2.41k|        return check_nonempty(it, range);
 5174|  2.41k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  2.41k|    {
 5180|  2.41k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 1.80k, False: 614]
  ------------------
 5181|  1.80k|            return unexpected_scan_error(
 5182|  1.80k|                scan_error::invalid_scanned_value,
 5183|  1.80k|                "No characters matched in [character set]");
 5184|  1.80k|        }
 5185|       |
 5186|    614|        return it;
 5187|  2.41k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|  83.0k|{
 2070|  83.0k|    return read_until_code_point(range, std::not_fn(pred));
 2071|  83.0k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.41k|        : m_fptr([](storage fn,
  743|  2.41k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.41k|              cvref<T> obj = *get<T>(fn);
  745|  2.41k|              if constexpr (std::is_void_v<R>) {
  746|  2.41k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.41k|              }
  748|  2.41k|              else {
  749|  2.41k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.41k|              }
  751|  2.41k|          }),
  752|  2.41k|          m_storage(std::addressof(f))
  753|  2.41k|    {
  754|  2.41k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  5.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.08k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.08k|              else {
  749|  5.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.08k|              }
  751|  5.08k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.08k|    {
  684|  5.08k|        if constexpr (std::is_const_v<T>) {
  685|  5.08k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.08k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5164|  5.08k|        const auto cb = [&](SourceCharT ch) {
 5165|  5.08k|            return cb_wrapper.on_ascii_only(ch);
 5166|  5.08k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.41k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.41k|        {
  667|  2.41k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|    614|{
 4741|    614|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    614|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    614|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 614]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    614|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    614|    static_cast<    \
  |  |  929|    614|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    614|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    614|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 614]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    614|    return SCN_MOVE(result);
  ------------------
  |  |  928|    614|    static_cast<    \
  |  |  929|    614|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    614|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  31.6k|    {
 5266|  31.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  31.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  31.6k|        return read_impl(range, specs, value);
 5268|  31.6k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  31.6k|    {
 5284|  31.6k|        SCN_CLANG_PUSH
 5285|  31.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  31.6k|        switch (m_type) {
 5288|  29.2k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 29.2k, False: 2.41k]
  ------------------
 5289|  29.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 31.6k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 31.6k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.41k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.41k, False: 29.2k]
  ------------------
 5299|  2.41k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.41k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 31.6k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 31.6k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 31.6k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  31.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  31.6k|        }
 5320|       |
 5321|  31.6k|        SCN_CLANG_POP
 5322|  31.6k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|  73.2k|    {
 4809|  73.2k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|  73.2k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|  73.2k|{
 4741|  73.2k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|  73.2k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|  73.2k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 2.71k, False: 70.4k]
  ------------------
 4745|  2.71k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  2.71k|                                     "Invalid encoding in scanned string");
 4747|  2.71k|    }
 4748|  70.4k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  70.4k|    static_cast<    \
  |  |  929|  70.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|  70.4k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  70.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 70.4k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|  70.4k|    return SCN_MOVE(result);
  ------------------
  |  |  928|  70.4k|    static_cast<    \
  |  |  929|  70.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|  70.4k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|  71.0k|{
 3001|  71.0k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|  71.0k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|  71.0k|    return {};
 3009|  71.0k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|   146k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|   146k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|   146k|        auto buf = make_contiguous_buffer(range);
 2080|   146k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|   146k|        return ranges::next(range.begin(),
 2082|   146k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|   146k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  2.41k|    {
 5037|  2.41k|        auto it = read_source_impl(range, {specs});
 5038|  2.41k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 614]
  |  |  ------------------
  ------------------
 5039|  1.80k|            return unexpected(it.error());
 5040|  1.80k|        }
 5041|       |
 5042|    614|        return read_string_impl(range, *it, value);
 5043|  2.41k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  4.83k|    {
 5142|  4.83k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  4.83k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  4.83k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.83k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.83k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  4.83k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  4.83k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 4.83k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  4.83k|        const auto cb = [&](SourceCharT ch) {
 5165|  4.83k|            return cb_wrapper.on_ascii_only(ch);
 5166|  4.83k|        };
 5167|       |
 5168|  4.83k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 4.83k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  4.83k|        auto it = read_while_code_unit(range, cb);
 5173|  4.83k|        return check_nonempty(it, range);
 5174|  4.83k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  4.83k|    {
 5180|  4.83k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 3.60k, False: 1.22k]
  ------------------
 5181|  3.60k|            return unexpected_scan_error(
 5182|  3.60k|                scan_error::invalid_scanned_value,
 5183|  3.60k|                "No characters matched in [character set]");
 5184|  3.60k|        }
 5185|       |
 5186|  1.22k|        return it;
 5187|  4.83k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  4.83k|        : m_fptr([](storage fn,
  743|  4.83k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.83k|              cvref<T> obj = *get<T>(fn);
  745|  4.83k|              if constexpr (std::is_void_v<R>) {
  746|  4.83k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.83k|              }
  748|  4.83k|              else {
  749|  4.83k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.83k|              }
  751|  4.83k|          }),
  752|  4.83k|          m_storage(std::addressof(f))
  753|  4.83k|    {
  754|  4.83k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  10.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.1k|              else {
  749|  10.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.1k|              }
  751|  10.1k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  10.1k|    {
  684|  10.1k|        if constexpr (std::is_const_v<T>) {
  685|  10.1k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.1k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  10.1k|        const auto cb = [&](SourceCharT ch) {
 5165|  10.1k|            return cb_wrapper.on_ascii_only(ch);
 5166|  10.1k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  4.83k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.83k|        {
  667|  4.83k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    614|{
 4741|    614|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    614|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    614|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 614]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    614|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    614|    static_cast<    \
  |  |  929|    614|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    614|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    614|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 614]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    614|    return SCN_MOVE(result);
  ------------------
  |  |  928|    614|    static_cast<    \
  |  |  929|    614|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    614|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|  79.2k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|  79.2k|                       std::is_same_v<T, std::wstring_view>) {
 5812|  79.2k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  79.2k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  31.6k|    {
 5266|  31.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  31.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  31.6k|        return read_impl(range, specs, value);
 5268|  31.6k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  31.6k|    {
 5284|  31.6k|        SCN_CLANG_PUSH
 5285|  31.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  31.6k|        switch (m_type) {
 5288|  29.2k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 29.2k, False: 2.41k]
  ------------------
 5289|  29.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 31.6k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 31.6k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.41k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.41k, False: 29.2k]
  ------------------
 5299|  2.41k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.41k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 31.6k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 31.6k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 31.6k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  31.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  31.6k|        }
 5320|       |
 5321|  31.6k|        SCN_CLANG_POP
 5322|  31.6k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|  73.2k|    {
 4816|  73.2k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|  73.2k|                                     value);
 4818|  73.2k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|  73.2k|{
 4762|  73.2k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|  73.2k|    auto src = [&]() {
 4765|  73.2k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|  73.2k|            return make_contiguous_buffer(
 4767|  73.2k|                ranges::subrange{range.begin().base(), result.base()});
 4768|  73.2k|        }
 4769|  73.2k|        else {
 4770|  73.2k|            return make_contiguous_buffer(
 4771|  73.2k|                ranges::subrange{range.begin(), result});
 4772|  73.2k|        }
 4773|  73.2k|    }();
 4774|  73.2k|    using src_type = decltype(src);
 4775|       |
 4776|  73.2k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|  73.2k|    else {
 4789|  73.2k|        const auto view = src.view();
 4790|  73.2k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|  73.2k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 2.71k, False: 70.4k]
  ------------------
 4793|  2.71k|            return unexpected_scan_error(
 4794|  2.71k|                scan_error::invalid_scanned_value,
 4795|  2.71k|                "Invalid encoding in scanned string_view");
 4796|  2.71k|        }
 4797|       |
 4798|  70.4k|        return SCN_MOVE(result);
  ------------------
  |  |  928|  70.4k|    static_cast<    \
  |  |  929|  70.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|  73.2k|    }
 4800|  73.2k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|  73.2k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|  73.2k|        else {
 4770|  73.2k|            return make_contiguous_buffer(
 4771|  73.2k|                ranges::subrange{range.begin(), result});
 4772|  73.2k|        }
 4773|  73.2k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  2.41k|    {
 5051|  2.41k|        auto it = read_source_impl(range, {specs});
 5052|  2.41k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.41k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 614]
  |  |  ------------------
  ------------------
 5053|  1.80k|            return unexpected(it.error());
 5054|  1.80k|        }
 5055|       |
 5056|    614|        return read_string_view_impl(range, *it, value);
 5057|  2.41k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    614|{
 4762|    614|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    614|    auto src = [&]() {
 4765|    614|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    614|            return make_contiguous_buffer(
 4767|    614|                ranges::subrange{range.begin().base(), result.base()});
 4768|    614|        }
 4769|    614|        else {
 4770|    614|            return make_contiguous_buffer(
 4771|    614|                ranges::subrange{range.begin(), result});
 4772|    614|        }
 4773|    614|    }();
 4774|    614|    using src_type = decltype(src);
 4775|       |
 4776|    614|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    614|    else {
 4789|    614|        const auto view = src.view();
 4790|    614|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    614|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 614]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|    614|        return SCN_MOVE(result);
  ------------------
  |  |  928|    614|    static_cast<    \
  |  |  929|    614|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    614|    }
 4800|    614|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    614|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    614|        else {
 4770|    614|            return make_contiguous_buffer(
 4771|    614|                ranges::subrange{range.begin(), result});
 4772|    614|        }
 4773|    614|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|  90.9k|{
 2940|  90.9k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 90.9k, False: 0]
  ------------------
 2941|  90.9k|        auto it = read_while_classic_space(range);
 2942|  90.9k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  90.9k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  90.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.43k, False: 89.5k]
  |  |  ------------------
  ------------------
 2944|  1.43k|            return unexpected(e);
 2945|  1.43k|        }
 2946|       |
 2947|  89.5k|        return it;
 2948|  90.9k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  90.9k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|  90.9k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  90.9k|    else {
 2114|  90.9k|        auto it = range.begin();
 2115|       |
 2116|  90.9k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|  90.9k|            auto seg = get_contiguous_beginning(range);
 2118|  90.9k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|  90.9k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 7.89k, False: 83.0k]
  ------------------
 2120|  7.89k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  7.89k|            }
 2122|  83.0k|            ranges::advance(it, seg.size());
 2123|  83.0k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  90.9k|            return detail::is_cp_space(cp);
 2127|  90.9k|        });
 2128|  90.9k|    }
 2129|  90.9k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  83.0k|        : m_fptr([](storage fn,
  743|  83.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.0k|              cvref<T> obj = *get<T>(fn);
  745|  83.0k|              if constexpr (std::is_void_v<R>) {
  746|  83.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.0k|              }
  748|  83.0k|              else {
  749|  83.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.0k|              }
  751|  83.0k|          }),
  752|  83.0k|          m_storage(std::addressof(f))
  753|  83.0k|    {
  754|  83.0k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   321k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   321k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   321k|              else {
  749|   321k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   321k|              }
  751|   321k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   321k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   321k|        else if constexpr (std::is_object_v<T>) {
  688|   321k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   321k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   321k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   321k|            return detail::is_cp_space(cp);
 2127|   321k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  83.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  83.0k|        {
  662|  83.0k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   740k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   740k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   740k|        auto beg = r.begin();
  990|   740k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 740k, False: 0]
  ------------------
  991|   740k|            return false;
  992|   740k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   740k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  23.9k|    {
  763|  23.9k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  23.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  23.9k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  11.1k|        : m_fptr([](storage fn,
  743|  11.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.1k|              cvref<T> obj = *get<T>(fn);
  745|  11.1k|              if constexpr (std::is_void_v<R>) {
  746|  11.1k|                  obj(static_cast<decltype(args)>(args)...);
  747|  11.1k|              }
  748|  11.1k|              else {
  749|  11.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.1k|              }
  751|  11.1k|          }),
  752|  11.1k|          m_storage(std::addressof(f))
  753|  11.1k|    {
  754|  11.1k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  11.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.9k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.9k|              else {
  749|  11.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.9k|              }
  751|  11.9k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  11.9k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.9k|        else if constexpr (std::is_object_v<T>) {
  688|  11.9k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.9k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  11.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  11.1k|        {
  662|  11.1k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   298k|    {
 6026|   298k|        const bool need_skipped_width =
 6027|   298k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 298k]
  |  Branch (6027:33): [True: 0, False: 298k]
  ------------------
 6028|   298k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   298k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 298k]
  ------------------
 6032|   298k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 298k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   298k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 298k, False: 0]
  |  Branch (6036:56): [True: 294k, False: 3.70k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   294k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 294k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   588k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   294k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 293k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|   294k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   293k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   588k|                            make_eof_scan_error));
 6047|       |
 6048|   588k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 293k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   293k|            return result_type{it, 0};
 6056|   588k|        }
 6057|       |
 6058|  3.70k|        return result_type{rng.begin(), 0};
 6059|   298k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  3.70k|{
 1964|  3.70k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  3.70k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  3.70k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  3.70k|    else {
 1949|  3.70k|        auto first = range.begin();
 1950|  4.06k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 3.99k, False: 68]
  ------------------
 1951|  3.99k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 3.63k, False: 360]
  ------------------
 1952|  3.63k|                return first;
 1953|  3.63k|            }
 1954|  3.99k|        }
 1955|     68|        return first;
 1956|  3.70k|    }
 1957|  3.70k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   291k|    {
  108|   291k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   291k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   291k|    {
   94|   291k|        iter_difference_t<I> counter{0};
   95|  9.09M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 8.80M, False: 291k]
  ------------------
   96|  8.80M|            ++i;
   97|  8.80M|            ++counter;
   98|  8.80M|        }
   99|   291k|        return counter;
  100|   291k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.17M|{
  950|  1.17M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.37k, False: 1.17M]
  |  |  ------------------
  ------------------
  951|  3.37k|        return eof_error::eof;
  952|  3.37k|    }
  953|  1.17M|    return eof_error::good;
  954|  1.17M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  24.8M|{
  944|  24.8M|    return is_range_eof(r.begin(), r.end());
  945|  24.8M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  24.8M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  24.8M|    {
  937|  24.8M|        return begin == end;
  938|  24.8M|    }
  939|  24.8M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|   733k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   733k|    else {
 1677|   733k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   733k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   733k|    }
 1679|   733k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   733k|    {
 1525|   733k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   733k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   733k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|   733k|    {
 1609|   733k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   733k|                           ranges::common_range<Range>) {
 1626|   733k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   733k|            auto end_seg = range.end().contiguous_segment();
 1628|   733k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   733k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.64k, False: 730k]
  |  |  ------------------
  ------------------
 1629|   733k|                             detail::to_address(end_seg.end()))) {
 1630|  3.64k|                auto& str = m_storage.emplace();
 1631|  3.64k|                str.reserve(range.end().position() - range.begin().position());
 1632|  3.64k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  3.64k|                m_view = string_view_type{str};
 1634|  3.64k|                return;
 1635|  3.64k|            }
 1636|       |
 1637|   730k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   730k|                                                            end_seg.data());
 1639|   730k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   733k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  1.46M|    {
 1570|  1.46M|        return m_view;
 1571|  1.46M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|   733k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   290k|    {
 6068|   290k|        const bool need_skipped_width =
 6069|   290k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 290k]
  |  Branch (6069:33): [True: 0, False: 290k]
  ------------------
 6070|   290k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   290k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 290k]
  ------------------
 6073|   290k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 290k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   290k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 290k, False: 0]
  ------------------
 6082|   290k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 64, False: 290k]
  ------------------
 6083|   290k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 64]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|     64|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 64]
  ------------------
 6085|     64|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   290k|        return result_type{rng.begin(), 0};
 6107|   290k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  47.4M|{
 1887|  47.4M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  47.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  47.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  47.4M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  47.4M|    auto it = range.begin();
 1891|  47.4M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  47.4M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  47.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 47.4M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  47.4M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 47.4M, False: 0]
  ------------------
 1900|  47.4M|        ++it;
 1901|  47.4M|        return {it, string_type(1, *range.begin())};
 1902|  47.4M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  47.4M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  49.7M|{
  944|  49.7M|    return is_range_eof(r.begin(), r.end());
  945|  49.7M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  49.7M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  49.7M|    {
  937|  49.7M|        return begin == end;
  938|  49.7M|    }
  939|  49.7M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  47.4M|    {
 1878|  47.4M|        return !codepoint.empty();
 1879|  47.4M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.35M|{
  950|  2.35M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.35M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.75k, False: 2.34M]
  |  |  ------------------
  ------------------
  951|  6.75k|        return eof_error::eof;
  952|  6.75k|    }
  953|  2.34M|    return eof_error::good;
  954|  2.35M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  1.46M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.46M|                  ranges::sized_range<Range>) {
 1674|  1.46M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.46M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  1.46M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.46M|    {
 1478|  1.46M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  2.19M|    {
 1491|  2.19M|        return sv;
 1492|  2.19M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  7.40k|{
 1964|  7.40k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  7.40k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  7.40k|{
 1945|  7.40k|    if constexpr (ranges::common_range<Range>) {
 1946|  7.40k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  7.40k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  1.47M|{
 2940|  1.47M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.47M, False: 0]
  ------------------
 2941|  1.47M|        auto it = read_while_classic_space(range);
 2942|  1.47M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.47M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.47M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.31k, False: 1.46M]
  |  |  ------------------
  ------------------
 2944|  3.31k|            return unexpected(e);
 2945|  3.31k|        }
 2946|       |
 2947|  1.46M|        return it;
 2948|  1.47M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.47M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  1.47M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.47M|    else {
 2114|  1.47M|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  1.47M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.47M|            return detail::is_cp_space(cp);
 2127|  1.47M|        });
 2128|  1.47M|    }
 2129|  1.47M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  1.47M|{
 2070|  1.47M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.47M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  2.93M|{
 2049|  2.93M|    auto it = range.begin();
 2050|  47.4M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 47.4M, False: 15.0k]
  ------------------
 2051|  47.4M|        const auto val =
 2052|  47.4M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  47.4M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  47.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 47.4M, False: 0]
  |  |  ------------------
  ------------------
 2054|  47.4M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  47.4M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  47.4M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 2.92M, False: 44.4M]
  ------------------
 2057|  2.92M|                return it;
 2058|  2.92M|            }
 2059|  47.4M|        }
 2060|  44.4M|        it = val.iterator;
 2061|  44.4M|    }
 2062|       |
 2063|  15.0k|    return it;
 2064|  2.93M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.47M|        : m_fptr([](storage fn,
  743|  1.47M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.47M|              cvref<T> obj = *get<T>(fn);
  745|  1.47M|              if constexpr (std::is_void_v<R>) {
  746|  1.47M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.47M|              }
  748|  1.47M|              else {
  749|  1.47M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.47M|              }
  751|  1.47M|          }),
  752|  1.47M|          m_storage(std::addressof(f))
  753|  1.47M|    {
  754|  1.47M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.35M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.35M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.35M|              else {
  749|  3.35M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.35M|              }
  751|  3.35M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.35M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.35M|        else if constexpr (std::is_object_v<T>) {
  688|  3.35M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.35M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  3.35M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  3.35M|            return detail::is_cp_space(cp);
 2127|  3.35M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.47M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.47M|        {
  662|  1.47M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|   729k|    {
 1575|   729k|        return m_storage.has_value();
 1576|   729k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|  1.67k|    {
 1580|  1.67k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  1.67k|        return *m_storage;
 1582|  1.67k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  2.23M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|   906k|    {
 3029|   906k|        reader_error_handler eh{};
 3030|   906k|        get_derived().check_specs_impl(specs, eh);
 3031|   906k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   906k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.8k, False: 895k]
  |  |  ------------------
  ------------------
 3032|  10.8k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  10.8k|        }
 3034|   895k|        return {};
 3035|   906k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|   906k|    {
 3040|   906k|        return static_cast<Derived&>(*this);
 3041|   906k|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|   906k|    {
 5199|   906k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|   906k|        SCN_GCC_PUSH
 5202|   906k|        SCN_GCC_IGNORE("-Wswitch")
 5203|   906k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|   906k|        SCN_CLANG_PUSH
 5206|   906k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|   906k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|   906k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 906k]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 906k]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|   884k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 884k, False: 21.9k]
  ------------------
 5215|   884k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 884k]
  ------------------
 5216|   884k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 884k]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|   884k|                else {
 5220|   884k|                    m_type = reader_type::word;
 5221|   884k|                }
 5222|   884k|                break;
 5223|      0|            }
 5224|       |
 5225|  10.8k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 10.8k, False: 895k]
  ------------------
 5226|  10.8k|                m_type = reader_type::character;
 5227|  10.8k|                break;
 5228|       |
 5229|  11.1k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 11.1k, False: 895k]
  ------------------
 5230|  11.1k|                m_type = reader_type::character_set;
 5231|  11.1k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 906k]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 906k]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|   906k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|   906k|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  3.09M|    {
 5248|  3.09M|        return m_type == reader_type::word;
 5249|  3.09M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  2.20M|{
 1132|  2.20M|    auto it = src.begin();
 1133|  65.4M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 63.2M, False: 2.18M]
  ------------------
 1134|  63.2M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  63.2M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 63.2M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  63.2M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 63.2M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  63.2M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  63.2M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  63.2M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 16.9k, False: 63.2M]
  ------------------
 1144|  16.9k|            return false;
 1145|  16.9k|        }
 1146|  63.2M|        it += len;
 1147|  63.2M|    }
 1148|  2.18M|    return true;
 1149|  2.20M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|  11.1k|        {
 5092|  11.1k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 11.1k, False: 0]
  ------------------
 5093|  11.1k|                return {};
 5094|  11.1k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  7.09k|        {
 5065|  7.09k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  7.09k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.09k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  7.09k|            const auto val =
 5067|  7.09k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  7.09k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  7.09k|                    (val % 8)) &
 5070|  7.09k|                   1u;
 5071|  7.09k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  11.9k|        {
 5118|  11.9k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 4.89k, False: 7.09k]
  ------------------
 5119|  4.89k|                return false;
 5120|  4.89k|            }
 5121|       |
 5122|  7.09k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  11.9k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  11.1k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|   733k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   733k|    else {
 2085|   733k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|   733k|        return read_until_code_point(
 2097|   733k|            ranges::subrange{it, range.end()},
 2098|   733k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   733k|    }
 2100|   733k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.46M|{
 2049|  1.46M|    auto it = range.begin();
 2050|  23.7M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 23.7M, False: 7.51k]
  ------------------
 2051|  23.7M|        const auto val =
 2052|  23.7M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  23.7M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  23.7M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 23.7M, False: 0]
  |  |  ------------------
  ------------------
 2054|  23.7M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  23.7M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  23.7M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.46M, False: 22.2M]
  ------------------
 2057|  1.46M|                return it;
 2058|  1.46M|            }
 2059|  23.7M|        }
 2060|  22.2M|        it = val.iterator;
 2061|  22.2M|    }
 2062|       |
 2063|  7.51k|    return it;
 2064|  1.46M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  23.7M|{
 1887|  23.7M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  23.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  23.7M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  23.7M|    auto it = range.begin();
 1891|  23.7M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  23.7M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  23.7M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.7M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  23.7M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 23.7M, False: 0]
  ------------------
 1900|  23.7M|        ++it;
 1901|  23.7M|        return {it, string_type(1, *range.begin())};
 1902|  23.7M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  23.7M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|  23.7M|    {
 1878|  23.7M|        return !codepoint.empty();
 1879|  23.7M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   733k|        : m_fptr([](storage fn,
  743|   733k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   733k|              cvref<T> obj = *get<T>(fn);
  745|   733k|              if constexpr (std::is_void_v<R>) {
  746|   733k|                  obj(static_cast<decltype(args)>(args)...);
  747|   733k|              }
  748|   733k|              else {
  749|   733k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   733k|              }
  751|   733k|          }),
  752|   733k|          m_storage(std::addressof(f))
  753|   733k|    {
  754|   733k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  22.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.0M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  22.0M|              else {
  749|  22.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.0M|              }
  751|  22.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  22.0M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  22.0M|        else if constexpr (std::is_object_v<T>) {
  688|  22.0M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  22.0M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|  22.0M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   733k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   733k|        {
  662|   733k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  3.70k|    {
 5142|  3.70k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  3.70k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  3.70k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.70k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  3.70k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  3.70k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 3.70k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  3.70k|        const auto cb = [&](SourceCharT ch) {
 5165|  3.70k|            return cb_wrapper.on_ascii_only(ch);
 5166|  3.70k|        };
 5167|       |
 5168|  3.70k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 3.70k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  3.70k|        auto it = read_while_code_unit(range, cb);
 5173|  3.70k|        return check_nonempty(it, range);
 5174|  3.70k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  3.70k|    {
 5180|  3.70k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 3.60k, False: 98]
  ------------------
 5181|  3.60k|            return unexpected_scan_error(
 5182|  3.60k|                scan_error::invalid_scanned_value,
 5183|  3.60k|                "No characters matched in [character set]");
 5184|  3.60k|        }
 5185|       |
 5186|     98|        return it;
 5187|  3.70k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   735k|{
 2070|   735k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   735k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  3.70k|        : m_fptr([](storage fn,
  743|  3.70k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.70k|              cvref<T> obj = *get<T>(fn);
  745|  3.70k|              if constexpr (std::is_void_v<R>) {
  746|  3.70k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.70k|              }
  748|  3.70k|              else {
  749|  3.70k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.70k|              }
  751|  3.70k|          }),
  752|  3.70k|          m_storage(std::addressof(f))
  753|  3.70k|    {
  754|  3.70k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  3.99k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.99k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.99k|              else {
  749|  3.99k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.99k|              }
  751|  3.99k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  3.99k|    {
  684|  3.99k|        if constexpr (std::is_const_v<T>) {
  685|  3.99k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.99k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5164|  3.99k|        const auto cb = [&](SourceCharT ch) {
 5165|  3.99k|            return cb_wrapper.on_ascii_only(ch);
 5166|  3.99k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  3.70k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.70k|        {
  667|  3.70k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  1.46M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  1.46M|    else {
 2085|  1.46M|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  1.46M|        return read_until_code_point(
 2097|  1.46M|            ranges::subrange{it, range.end()},
 2098|  1.46M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  1.46M|    }
 2100|  1.46M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.46M|        : m_fptr([](storage fn,
  743|  1.46M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.46M|              cvref<T> obj = *get<T>(fn);
  745|  1.46M|              if constexpr (std::is_void_v<R>) {
  746|  1.46M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.46M|              }
  748|  1.46M|              else {
  749|  1.46M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.46M|              }
  751|  1.46M|          }),
  752|  1.46M|          m_storage(std::addressof(f))
  753|  1.46M|    {
  754|  1.46M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  44.0M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  44.0M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  44.0M|              else {
  749|  44.0M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  44.0M|              }
  751|  44.0M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  44.0M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  44.0M|        else if constexpr (std::is_object_v<T>) {
  688|  44.0M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  44.0M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|  44.0M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.46M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.46M|        {
  662|  1.46M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  7.40k|    {
 5142|  7.40k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  7.40k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  7.40k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  7.40k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.40k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  7.40k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  7.40k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 7.40k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  7.40k|        const auto cb = [&](SourceCharT ch) {
 5165|  7.40k|            return cb_wrapper.on_ascii_only(ch);
 5166|  7.40k|        };
 5167|       |
 5168|  7.40k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 7.40k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  7.40k|        auto it = read_while_code_unit(range, cb);
 5173|  7.40k|        return check_nonempty(it, range);
 5174|  7.40k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  7.40k|    {
 5180|  7.40k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 7.20k, False: 196]
  ------------------
 5181|  7.20k|            return unexpected_scan_error(
 5182|  7.20k|                scan_error::invalid_scanned_value,
 5183|  7.20k|                "No characters matched in [character set]");
 5184|  7.20k|        }
 5185|       |
 5186|    196|        return it;
 5187|  7.40k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  7.40k|        : m_fptr([](storage fn,
  743|  7.40k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.40k|              cvref<T> obj = *get<T>(fn);
  745|  7.40k|              if constexpr (std::is_void_v<R>) {
  746|  7.40k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.40k|              }
  748|  7.40k|              else {
  749|  7.40k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.40k|              }
  751|  7.40k|          }),
  752|  7.40k|          m_storage(std::addressof(f))
  753|  7.40k|    {
  754|  7.40k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  7.98k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.98k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.98k|              else {
  749|  7.98k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.98k|              }
  751|  7.98k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  7.98k|    {
  684|  7.98k|        if constexpr (std::is_const_v<T>) {
  685|  7.98k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.98k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  7.98k|        const auto cb = [&](SourceCharT ch) {
 5165|  7.98k|            return cb_wrapper.on_ascii_only(ch);
 5166|  7.98k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  7.40k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  7.40k|        {
  667|  7.40k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   302k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   302k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   302k|            auto rd = make_reader<T, char_type>();
 6195|   302k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 298k]
  |  |  ------------------
  ------------------
 6196|  3.60k|                return unexpected(e);
 6197|  3.60k|            }
 6198|       |
 6199|   298k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 298k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   298k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   298k|                return impl(rd, range, value);
 6202|   298k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   302k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  1.48M|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  1.48M|                       std::is_same_v<T, std::wstring>) {
 5816|  1.48M|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  1.48M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|   298k|    {
 6113|   298k|        const bool need_skipped_width =
 6114|   298k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 298k]
  |  Branch (6114:33): [True: 0, False: 298k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   298k|        auto it = rng.begin();
 6118|   298k|        std::ptrdiff_t prefix_width = 0;
 6119|   298k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 298k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   298k|        else {
 6127|   298k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   297k|            std::tie(it, prefix_width) = prefix_result;
 6129|   297k|        }
 6130|   297k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   297k|        std::ptrdiff_t value_width = 0;
 6134|   297k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 297k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   297k|        else {
 6150|   297k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 5.85k, False: 291k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  5.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  5.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  5.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  5.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  5.85k|    }                                                  \
  |  | 3667|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   291k|                                             specs, value, loc));
 6152|       |
 6153|   291k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 291k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   291k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   291k|        std::ptrdiff_t postfix_width = 0;
 6162|   291k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 290k, False: 1.17k]
  ------------------
 6163|   290k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   290k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   290k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   290k|                                 value_width));
 6167|   290k|            std::tie(it, postfix_width) = postfix_result;
 6168|   290k|        }
 6169|       |
 6170|   291k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   291k|                                                 value_width, postfix_width);
 6172|   291k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 291k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   291k|        return it;
 6177|   291k|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|   728k|{
 2982|   728k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|   728k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 1.67k, False: 726k]
  ------------------
 2984|  1.67k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  1.67k|    static_cast<    \
  |  |  929|  1.67k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  1.67k|        }
 2986|   726k|        else {
 2987|   726k|            dest.assign(source.view());
 2988|   726k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|   728k|    return {};
 2995|   728k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|   297k|    {
 5266|   297k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   297k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   297k|        return read_impl(range, specs, value);
 5268|   297k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|   297k|    {
 5284|   297k|        SCN_CLANG_PUSH
 5285|   297k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   297k|        switch (m_type) {
 5288|   293k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 293k, False: 3.70k]
  ------------------
 5289|   293k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 297k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 297k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  3.70k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 3.70k, False: 293k]
  ------------------
 5299|  3.70k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  3.70k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 297k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 297k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 297k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   297k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   297k|        }
 5320|       |
 5321|   297k|        SCN_CLANG_POP
 5322|   297k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|   733k|    {
 4809|   733k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   733k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|   733k|{
 4741|   733k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   733k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   733k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 5.63k, False: 728k]
  ------------------
 4745|  5.63k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  5.63k|                                     "Invalid encoding in scanned string");
 4747|  5.63k|    }
 4748|   728k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   728k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 728k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   728k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   728k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  3.70k|    {
 5037|  3.70k|        auto it = read_source_impl(range, {specs});
 5038|  3.70k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 98]
  |  |  ------------------
  ------------------
 5039|  3.60k|            return unexpected(it.error());
 5040|  3.60k|        }
 5041|       |
 5042|     98|        return read_string_impl(range, *it, value);
 5043|  3.70k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|     98|{
 4741|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     98|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     98|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 98]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     98|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     98|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     98|    return SCN_MOVE(result);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     98|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|   297k|    {
 5266|   297k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   297k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   297k|        return read_impl(range, specs, value);
 5268|   297k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|   297k|    {
 5284|   297k|        SCN_CLANG_PUSH
 5285|   297k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   297k|        switch (m_type) {
 5288|   293k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 293k, False: 3.70k]
  ------------------
 5289|   293k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 297k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 297k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  3.70k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 3.70k, False: 293k]
  ------------------
 5299|  3.70k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  3.70k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 297k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 297k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 297k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   297k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   297k|        }
 5320|       |
 5321|   297k|        SCN_CLANG_POP
 5322|   297k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|   733k|    {
 4809|   733k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   733k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|   733k|{
 4741|   733k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   733k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   733k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 5.63k, False: 728k]
  ------------------
 4745|  5.63k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  5.63k|                                     "Invalid encoding in scanned string");
 4747|  5.63k|    }
 4748|   728k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   728k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   728k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 728k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   728k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   728k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|   728k|{
 3001|   728k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|   728k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|   728k|    return {};
 3009|   728k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  3.70k|    {
 5037|  3.70k|        auto it = read_source_impl(range, {specs});
 5038|  3.70k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 98]
  |  |  ------------------
  ------------------
 5039|  3.60k|            return unexpected(it.error());
 5040|  3.60k|        }
 5041|       |
 5042|     98|        return read_string_impl(range, *it, value);
 5043|  3.70k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|     98|{
 4741|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     98|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     98|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 98]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     98|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     98|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     98|    return SCN_MOVE(result);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     98|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|   744k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|   744k|                       std::is_same_v<T, std::wstring_view>) {
 5812|   744k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   744k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|   297k|    {
 5266|   297k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   297k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   297k|        return read_impl(range, specs, value);
 5268|   297k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|   297k|    {
 5284|   297k|        SCN_CLANG_PUSH
 5285|   297k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   297k|        switch (m_type) {
 5288|   293k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 293k, False: 3.70k]
  ------------------
 5289|   293k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 297k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 297k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  3.70k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 3.70k, False: 293k]
  ------------------
 5299|  3.70k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  3.70k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 297k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 297k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 297k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   297k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   297k|        }
 5320|       |
 5321|   297k|        SCN_CLANG_POP
 5322|   297k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|   733k|    {
 4816|   733k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|   733k|                                     value);
 4818|   733k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|   733k|{
 4762|   733k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|   733k|    auto src = [&]() {
 4765|   733k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|   733k|            return make_contiguous_buffer(
 4767|   733k|                ranges::subrange{range.begin().base(), result.base()});
 4768|   733k|        }
 4769|   733k|        else {
 4770|   733k|            return make_contiguous_buffer(
 4771|   733k|                ranges::subrange{range.begin(), result});
 4772|   733k|        }
 4773|   733k|    }();
 4774|   733k|    using src_type = decltype(src);
 4775|       |
 4776|   733k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|   733k|    else {
 4789|   733k|        const auto view = src.view();
 4790|   733k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|   733k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 5.63k, False: 728k]
  ------------------
 4793|  5.63k|            return unexpected_scan_error(
 4794|  5.63k|                scan_error::invalid_scanned_value,
 4795|  5.63k|                "Invalid encoding in scanned string_view");
 4796|  5.63k|        }
 4797|       |
 4798|   728k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   728k|    static_cast<    \
  |  |  929|   728k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|   733k|    }
 4800|   733k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|   733k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|   733k|        else {
 4770|   733k|            return make_contiguous_buffer(
 4771|   733k|                ranges::subrange{range.begin(), result});
 4772|   733k|        }
 4773|   733k|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  3.70k|    {
 5051|  3.70k|        auto it = read_source_impl(range, {specs});
 5052|  3.70k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.70k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 98]
  |  |  ------------------
  ------------------
 5053|  3.60k|            return unexpected(it.error());
 5054|  3.60k|        }
 5055|       |
 5056|     98|        return read_string_view_impl(range, *it, value);
 5057|  3.70k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|     98|{
 4762|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|     98|    auto src = [&]() {
 4765|     98|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     98|            return make_contiguous_buffer(
 4767|     98|                ranges::subrange{range.begin().base(), result.base()});
 4768|     98|        }
 4769|     98|        else {
 4770|     98|            return make_contiguous_buffer(
 4771|     98|                ranges::subrange{range.begin(), result});
 4772|     98|        }
 4773|     98|    }();
 4774|     98|    using src_type = decltype(src);
 4775|       |
 4776|     98|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|     98|    else {
 4789|     98|        const auto view = src.view();
 4790|     98|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|     98|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 98]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|     98|        return SCN_MOVE(result);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|     98|    }
 4800|     98|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|     98|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|     98|        else {
 4770|     98|            return make_contiguous_buffer(
 4771|     98|                ranges::subrange{range.begin(), result});
 4772|     98|        }
 4773|     98|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   735k|{
 2940|   735k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 735k, False: 0]
  ------------------
 2941|   735k|        auto it = read_while_classic_space(range);
 2942|   735k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   735k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   735k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.65k, False: 733k]
  |  |  ------------------
  ------------------
 2944|  1.65k|            return unexpected(e);
 2945|  1.65k|        }
 2946|       |
 2947|   733k|        return it;
 2948|   735k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   735k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   735k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   735k|    else {
 2114|   735k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   735k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   735k|            return detail::is_cp_space(cp);
 2127|   735k|        });
 2128|   735k|    }
 2129|   735k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   735k|        : m_fptr([](storage fn,
  743|   735k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   735k|              cvref<T> obj = *get<T>(fn);
  745|   735k|              if constexpr (std::is_void_v<R>) {
  746|   735k|                  obj(static_cast<decltype(args)>(args)...);
  747|   735k|              }
  748|   735k|              else {
  749|   735k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   735k|              }
  751|   735k|          }),
  752|   735k|          m_storage(std::addressof(f))
  753|   735k|    {
  754|   735k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.67M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.67M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.67M|              else {
  749|  1.67M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.67M|              }
  751|  1.67M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.67M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.67M|        else if constexpr (std::is_object_v<T>) {
  688|  1.67M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.67M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  1.67M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.67M|            return detail::is_cp_space(cp);
 2127|  1.67M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   735k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   735k|        {
  662|   735k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  89.9k|{
 5784|  89.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  89.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.42k, False: 88.5k]
  |  |  ------------------
  ------------------
 5785|  1.42k|        return unexpected(e);
 5786|  1.42k|    }
 5787|       |
 5788|  88.5k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 88.5k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  88.5k|    return skip_classic_whitespace(range);
 5793|  88.5k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|  44.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  44.9k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  44.9k|            auto rd = make_reader<T, char_type>();
 5865|  44.9k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  44.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|  44.9k|    {
 5852|  44.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.07k, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.07k|    }                                                  \
  |  |  |  | 3667|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  43.9k|                        .transform_error(make_eof_scan_error));
 5854|  43.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  44.9k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|  43.9k|    {
 5255|  43.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  43.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  43.9k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  43.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|  44.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  44.9k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  44.9k|            auto rd = make_reader<T, char_type>();
 5865|  44.9k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  44.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|  44.9k|    {
 5852|  44.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.07k, False: 43.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.07k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.07k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.07k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.07k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.07k|    }                                                  \
  |  |  |  | 3667|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  43.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  43.9k|                        .transform_error(make_eof_scan_error));
 5854|  43.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  44.9k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|  43.9k|    {
 5255|  43.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  43.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  43.9k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  43.9k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  54.9k|{
 5784|  54.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 840, False: 54.1k]
  |  |  ------------------
  ------------------
 5785|    840|        return unexpected(e);
 5786|    840|    }
 5787|       |
 5788|  54.1k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 54.1k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  54.1k|    return skip_classic_whitespace(range);
 5793|  54.1k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  54.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  54.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  54.9k|            auto rd = make_reader<T, char_type>();
 5869|  54.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 54.9k, False: 0]
  ------------------
 5870|  54.9k|                return impl(rd, range, value);
 5871|  54.9k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  54.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|  54.9k|    {
 5852|  54.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  54.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  54.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  54.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  54.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.28k, False: 53.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.28k|    }                                                  \
  |  |  |  | 3667|  54.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  53.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  53.6k|                        .transform_error(make_eof_scan_error));
 5854|  53.6k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  54.9k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|  53.6k|    {
 5255|  53.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  53.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  53.6k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  53.6k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|  75.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|  75.6k|    static_cast<    \
  |  |  929|  75.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|  75.6k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|  75.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|  75.6k|          m_current(m_range.begin())
 2867|  75.6k|    {
 2868|  75.6k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   201k|    {
 2872|   201k|        return m_current;
 2873|   201k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   126k|    {
 2877|   126k|        return m_range.end();
 2878|   126k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  57.6k|    {
 2892|  57.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  57.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  57.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  57.6k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 57.6k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  57.6k|        }
 2898|  57.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  57.6k|    static_cast<    \
  |  |  929|  57.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  57.6k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|  68.4k|    {
 2882|  68.4k|        return ranges::subrange{begin(), end()};
 2883|  68.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  64.8k|    {
 6026|  64.8k|        const bool need_skipped_width =
 6027|  64.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 64.8k]
  |  Branch (6027:33): [True: 0, False: 64.8k]
  ------------------
 6028|  64.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  64.8k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 64.8k]
  ------------------
 6032|  64.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 64.8k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  64.8k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 64.8k, False: 0]
  |  Branch (6036:56): [True: 59.9k, False: 4.83k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  59.9k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 59.9k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   118k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  59.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  59.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  59.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.43k, False: 58.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.43k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.43k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.43k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.43k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.43k|    }                                                  \
  |  |  |  | 3667|  59.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  58.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   118k|                            make_eof_scan_error));
 6047|       |
 6048|   118k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 58.5k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  58.5k|            return result_type{it, 0};
 6056|   118k|        }
 6057|       |
 6058|  4.83k|        return result_type{rng.begin(), 0};
 6059|  64.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  56.5k|    {
 6068|  56.5k|        const bool need_skipped_width =
 6069|  56.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 56.5k]
  |  Branch (6069:33): [True: 0, False: 56.5k]
  ------------------
 6070|  56.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  56.5k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 56.5k]
  ------------------
 6073|  56.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 56.5k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  56.5k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 56.5k, False: 0]
  ------------------
 6082|  56.5k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 1.15k, False: 55.4k]
  ------------------
 6083|  56.5k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 1.15k]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|  1.15k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 1.15k]
  ------------------
 6085|  1.15k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  56.5k|        return result_type{rng.begin(), 0};
 6107|  56.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  34.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  34.2k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  34.2k|            auto rd = make_reader<T, char_type>();
 6187|  34.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 32.4k]
  |  |  ------------------
  ------------------
 6188|  1.80k|                return unexpected(e);
 6189|  1.80k|            }
 6190|       |
 6191|  32.4k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  34.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  32.4k|    {
 6113|  32.4k|        const bool need_skipped_width =
 6114|  32.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 32.4k]
  |  Branch (6114:33): [True: 0, False: 32.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  32.4k|        auto it = rng.begin();
 6118|  32.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  32.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 32.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  32.4k|        else {
 6127|  32.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  32.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 31.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  32.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  31.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  31.6k|        }
 6130|  31.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  31.6k|        std::ptrdiff_t value_width = 0;
 6134|  31.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 31.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  31.6k|        else {
 6150|  31.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  31.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  31.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.88k, False: 28.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.88k|    }                                                  \
  |  | 3667|  31.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  28.8k|                                             specs, value, loc));
 6152|       |
 6153|  28.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 28.8k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  28.8k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  28.8k|        std::ptrdiff_t postfix_width = 0;
 6162|  28.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 28.2k, False: 512]
  ------------------
 6163|  28.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  28.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  28.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  28.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 28.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  28.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  28.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  28.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  28.2k|                                 value_width));
 6167|  28.2k|            std::tie(it, postfix_width) = postfix_result;
 6168|  28.2k|        }
 6169|       |
 6170|  28.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  28.8k|                                                 value_width, postfix_width);
 6172|  28.8k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 28.8k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  28.8k|        return it;
 6177|  28.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  34.2k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  34.2k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  34.2k|            auto rd = make_reader<T, char_type>();
 6187|  34.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.80k, False: 32.4k]
  |  |  ------------------
  ------------------
 6188|  1.80k|                return unexpected(e);
 6189|  1.80k|            }
 6190|       |
 6191|  32.4k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  34.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  32.4k|    {
 6113|  32.4k|        const bool need_skipped_width =
 6114|  32.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 32.4k]
  |  Branch (6114:33): [True: 0, False: 32.4k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  32.4k|        auto it = rng.begin();
 6118|  32.4k|        std::ptrdiff_t prefix_width = 0;
 6119|  32.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 32.4k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  32.4k|        else {
 6127|  32.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  32.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  32.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  32.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  32.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 716, False: 31.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    716|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    716|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    716|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    716|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    716|    }                                                  \
  |  |  |  | 3667|  32.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  31.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  31.6k|        }
 6130|  31.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  31.6k|        std::ptrdiff_t value_width = 0;
 6134|  31.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 31.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  31.6k|        else {
 6150|  31.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  31.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  31.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  31.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.88k, False: 28.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  2.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  2.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  2.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  2.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  2.88k|    }                                                  \
  |  | 3667|  31.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  31.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  28.8k|                                             specs, value, loc));
 6152|       |
 6153|  28.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 28.8k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  28.8k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  28.8k|        std::ptrdiff_t postfix_width = 0;
 6162|  28.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 28.2k, False: 512]
  ------------------
 6163|  28.2k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  28.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  28.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  28.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  28.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 28.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  28.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  28.2k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  28.2k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  28.2k|                                 value_width));
 6167|  28.2k|            std::tie(it, postfix_width) = postfix_result;
 6168|  28.2k|        }
 6169|       |
 6170|  28.8k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  28.8k|                                                 value_width, postfix_width);
 6172|  28.8k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 28.8k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  28.8k|        return it;
 6177|  28.8k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   884k|{
 5784|   884k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   884k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.43k, False: 881k]
  |  |  ------------------
  ------------------
 5785|  3.43k|        return unexpected(e);
 5786|  3.43k|    }
 5787|       |
 5788|   881k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 881k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   881k|    return skip_classic_whitespace(range);
 5793|   881k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|   442k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   442k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   442k|            auto rd = make_reader<T, char_type>();
 5865|   442k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   442k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|   442k|    {
 5852|   442k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   442k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.02k, False: 440k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.02k|    }                                                  \
  |  |  |  | 3667|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   440k|                        .transform_error(make_eof_scan_error));
 5854|   440k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   442k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|   440k|    {
 5255|   440k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   440k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   440k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   440k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|   442k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   442k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   442k|            auto rd = make_reader<T, char_type>();
 5865|   442k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   442k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|   442k|    {
 5852|   442k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   442k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.02k, False: 440k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.02k|    }                                                  \
  |  |  |  | 3667|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   440k|                        .transform_error(make_eof_scan_error));
 5854|   440k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   442k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|   440k|    {
 5255|   440k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   440k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   440k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   440k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   618k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   618k|    static_cast<    \
  |  |  929|   618k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   618k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   618k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   618k|          m_current(m_range.begin())
 2867|   618k|    {
 2868|   618k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  1.80M|    {
 2872|  1.80M|        return m_current;
 2873|  1.80M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|  1.18M|    {
 2877|  1.18M|        return m_range.end();
 2878|  1.18M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   582k|    {
 2892|   582k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   582k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   582k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   582k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   582k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 582k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   582k|        }
 2898|   582k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   582k|    static_cast<    \
  |  |  929|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   582k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   604k|    {
 2882|   604k|        return ranges::subrange{begin(), end()};
 2883|   604k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   597k|    {
 6026|   597k|        const bool need_skipped_width =
 6027|   597k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 597k]
  |  Branch (6027:33): [True: 0, False: 597k]
  ------------------
 6028|   597k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   597k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 597k]
  ------------------
 6032|   597k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 597k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   597k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 597k, False: 0]
  |  Branch (6036:56): [True: 589k, False: 7.40k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   589k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 589k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.17M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   589k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   589k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   589k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   589k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.70k, False: 587k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.70k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.70k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.70k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.70k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.70k|    }                                                  \
  |  |  |  | 3667|   589k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   587k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.17M|                            make_eof_scan_error));
 6047|       |
 6048|  1.17M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 587k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   587k|            return result_type{it, 0};
 6056|  1.17M|        }
 6057|       |
 6058|  7.40k|        return result_type{rng.begin(), 0};
 6059|   597k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   580k|    {
 6068|   580k|        const bool need_skipped_width =
 6069|   580k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 580k]
  |  Branch (6069:33): [True: 0, False: 580k]
  ------------------
 6070|   580k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   580k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 580k]
  ------------------
 6073|   580k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 580k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   580k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 580k, False: 0]
  ------------------
 6082|   580k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 128, False: 580k]
  ------------------
 6083|   580k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 128]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    128|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 128]
  ------------------
 6085|    128|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   580k|        return result_type{rng.begin(), 0};
 6107|   580k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|   302k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   302k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   302k|            auto rd = make_reader<T, char_type>();
 6187|   302k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 298k]
  |  |  ------------------
  ------------------
 6188|  3.60k|                return unexpected(e);
 6189|  3.60k|            }
 6190|       |
 6191|   298k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   302k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|   298k|    {
 6113|   298k|        const bool need_skipped_width =
 6114|   298k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 298k]
  |  Branch (6114:33): [True: 0, False: 298k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   298k|        auto it = rng.begin();
 6118|   298k|        std::ptrdiff_t prefix_width = 0;
 6119|   298k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 298k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   298k|        else {
 6127|   298k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   297k|            std::tie(it, prefix_width) = prefix_result;
 6129|   297k|        }
 6130|   297k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   297k|        std::ptrdiff_t value_width = 0;
 6134|   297k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 297k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   297k|        else {
 6150|   297k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 5.85k, False: 291k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  5.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  5.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  5.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  5.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  5.85k|    }                                                  \
  |  | 3667|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   291k|                                             specs, value, loc));
 6152|       |
 6153|   291k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 291k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   291k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   291k|        std::ptrdiff_t postfix_width = 0;
 6162|   291k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 290k, False: 1.17k]
  ------------------
 6163|   290k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   290k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   290k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   290k|                                 value_width));
 6167|   290k|            std::tie(it, postfix_width) = postfix_result;
 6168|   290k|        }
 6169|       |
 6170|   291k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   291k|                                                 value_width, postfix_width);
 6172|   291k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 291k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   291k|        return it;
 6177|   291k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|   302k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   302k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   302k|            auto rd = make_reader<T, char_type>();
 6187|   302k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   302k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.60k, False: 298k]
  |  |  ------------------
  ------------------
 6188|  3.60k|                return unexpected(e);
 6189|  3.60k|            }
 6190|       |
 6191|   298k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   302k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|   298k|    {
 6113|   298k|        const bool need_skipped_width =
 6114|   298k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 298k]
  |  Branch (6114:33): [True: 0, False: 298k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   298k|        auto it = rng.begin();
 6118|   298k|        std::ptrdiff_t prefix_width = 0;
 6119|   298k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 298k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   298k|        else {
 6127|   298k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   298k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   298k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   298k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.35k, False: 297k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.35k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.35k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.35k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.35k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.35k|    }                                                  \
  |  |  |  | 3667|   298k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   297k|            std::tie(it, prefix_width) = prefix_result;
 6129|   297k|        }
 6130|   297k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   297k|        std::ptrdiff_t value_width = 0;
 6134|   297k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 297k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   297k|        else {
 6150|   297k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   297k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   297k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 5.85k, False: 291k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  5.85k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  5.85k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  5.85k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  5.85k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  5.85k|    }                                                  \
  |  | 3667|   297k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   291k|                                             specs, value, loc));
 6152|       |
 6153|   291k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 291k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   291k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   291k|        std::ptrdiff_t postfix_width = 0;
 6162|   291k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 290k, False: 1.17k]
  ------------------
 6163|   290k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   290k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   290k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   290k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   290k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   290k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   290k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   290k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   290k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   290k|                                 value_width));
 6167|   290k|            std::tie(it, postfix_width) = postfix_result;
 6168|   290k|        }
 6169|       |
 6170|   291k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   291k|                                                 value_width, postfix_width);
 6172|   291k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 291k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   291k|        return it;
 6177|   291k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   442k|{
 5784|   442k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.71k, False: 440k]
  |  |  ------------------
  ------------------
 5785|  1.71k|        return unexpected(e);
 5786|  1.71k|    }
 5787|       |
 5788|   440k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 440k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   440k|    return skip_classic_whitespace(range);
 5793|   440k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|   442k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   442k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   442k|            auto rd = make_reader<T, char_type>();
 5869|   442k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 442k, False: 0]
  ------------------
 5870|   442k|                return impl(rd, range, value);
 5871|   442k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   442k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|   442k|    {
 5852|   442k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   442k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   442k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   442k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   442k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.02k, False: 440k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.02k|    }                                                  \
  |  |  |  | 3667|   442k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   440k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   440k|                        .transform_error(make_eof_scan_error));
 5854|   440k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   442k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|   440k|    {
 5255|   440k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   440k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   440k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   440k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    901|{
   52|    901|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    901|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    901|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    901|    string_buffer.resize(size);
   56|    901|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    901|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    901|    const auto wsv_reinterpret_size =
   61|    901|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 259, False: 642]
  ------------------
   62|    901|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    901|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    901|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    901|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    901|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    901|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    901|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    901|{
  122|    901|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    901|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    901|    buf.resize(sizeof...(Args));
  125|    901|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    901|    return buf;
  127|    901|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    901|{
  108|    901|    if constexpr (std::is_same_v<CharT, char>) {
  109|    901|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|    901|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    901|{
  185|    901|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    901|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    901|                                   format_strings);
  188|    901|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|    901|{
  133|       |    // Regular scan
  134|  5.40k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 5.40k, False: 901]
  ------------------
  135|  5.40k|        auto it = scn::ranges::begin(source);
  136|  33.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.9k|            auto result = scn::scan<T>(
  139|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.9k|                scn::runtime_format(f));
  141|  33.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 5.40k, False: 28.5k]
  ------------------
  142|  5.40k|                break;
  143|  5.40k|            }
  144|  28.5k|            it = result->begin();
  145|  28.5k|        }
  146|  5.40k|    }
  147|       |
  148|       |    // scan localized
  149|  5.40k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 5.40k, False: 901]
  ------------------
  150|  5.40k|        auto it = scn::ranges::begin(source);
  151|  33.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.9k|            auto result = scn::scan<T>(
  154|  33.9k|                global_locale,
  155|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.9k|                scn::runtime_format(f));
  157|  33.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 5.40k, False: 28.5k]
  ------------------
  158|  5.40k|                break;
  159|  5.40k|            }
  160|  28.5k|            it = result->begin();
  161|  28.5k|        }
  162|  5.40k|    }
  163|       |
  164|       |    // scan_value
  165|    901|    {
  166|    901|        auto it = scn::ranges::begin(source);
  167|  14.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.9k|            auto result = scn::scan_value<T>(
  170|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 901, False: 14.0k]
  ------------------
  172|    901|                break;
  173|    901|            }
  174|  14.0k|            it = result->begin();
  175|  14.0k|        }
  176|    901|    }
  177|    901|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    901|{
  133|       |    // Regular scan
  134|  5.40k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 5.40k, False: 901]
  ------------------
  135|  5.40k|        auto it = scn::ranges::begin(source);
  136|  33.9k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  33.9k|            auto result = scn::scan<T>(
  139|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  33.9k|                scn::runtime_format(f));
  141|  33.9k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 5.40k, False: 28.5k]
  ------------------
  142|  5.40k|                break;
  143|  5.40k|            }
  144|  28.5k|            it = result->begin();
  145|  28.5k|        }
  146|  5.40k|    }
  147|       |
  148|       |    // scan localized
  149|  5.40k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 5.40k, False: 901]
  ------------------
  150|  5.40k|        auto it = scn::ranges::begin(source);
  151|  33.9k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  33.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  33.9k|            auto result = scn::scan<T>(
  154|  33.9k|                global_locale,
  155|  33.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  33.9k|                scn::runtime_format(f));
  157|  33.9k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 5.40k, False: 28.5k]
  ------------------
  158|  5.40k|                break;
  159|  5.40k|            }
  160|  28.5k|            it = result->begin();
  161|  28.5k|        }
  162|  5.40k|    }
  163|       |
  164|       |    // scan_value
  165|    901|    {
  166|    901|        auto it = scn::ranges::begin(source);
  167|  14.9k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  14.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  14.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  14.9k|            auto result = scn::scan_value<T>(
  170|  14.9k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  14.9k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 901, False: 14.0k]
  ------------------
  172|    901|                break;
  173|    901|            }
  174|  14.0k|            it = result->begin();
  175|  14.0k|        }
  176|    901|    }
  177|    901|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|    901|{
  133|       |    // Regular scan
  134|  5.40k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 5.40k, False: 901]
  ------------------
  135|  5.40k|        auto it = scn::ranges::begin(source);
  136|  40.6k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  40.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  40.6k|            auto result = scn::scan<T>(
  139|  40.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  40.6k|                scn::runtime_format(f));
  141|  40.6k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 5.40k, False: 35.2k]
  ------------------
  142|  5.40k|                break;
  143|  5.40k|            }
  144|  35.2k|            it = result->begin();
  145|  35.2k|        }
  146|  5.40k|    }
  147|       |
  148|       |    // scan localized
  149|  5.40k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 5.40k, False: 901]
  ------------------
  150|  5.40k|        auto it = scn::ranges::begin(source);
  151|  40.6k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  40.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  40.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  40.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  40.6k|            auto result = scn::scan<T>(
  154|  40.6k|                global_locale,
  155|  40.6k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  40.6k|                scn::runtime_format(f));
  157|  40.6k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 5.40k, False: 35.2k]
  ------------------
  158|  5.40k|                break;
  159|  5.40k|            }
  160|  35.2k|            it = result->begin();
  161|  35.2k|        }
  162|  5.40k|    }
  163|       |
  164|       |    // scan_value
  165|    901|    {
  166|    901|        auto it = scn::ranges::begin(source);
  167|  18.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  18.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  18.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  18.3k|            auto result = scn::scan_value<T>(
  170|  18.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  18.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 901, False: 17.4k]
  ------------------
  172|    901|                break;
  173|    901|            }
  174|  17.4k|            it = result->begin();
  175|  17.4k|        }
  176|    901|    }
  177|    901|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    901|{
   90|    901|    using char_type = ranges::range_value_t<Source>;
   91|    901|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    901|    deque.clear();
   93|    901|    std::copy(ranges::begin(source), ranges::end(source),
   94|    901|              std::back_inserter(deque));
   95|    901|    return deque;
   96|    901|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    901|{
   79|    901|    if constexpr (std::is_same_v<CharT, char>) {
   80|    901|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|    901|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    901|{
  122|    901|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    901|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    901|    buf.resize(sizeof...(Args));
  125|    901|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    901|    return buf;
  127|    901|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    901|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|    901|    else {
  112|    901|        return wformat_string_view_buffer;
  113|    901|    }
  114|    901|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.80k|{
  185|  1.80k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.80k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.80k|                                   format_strings);
  188|  1.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.80k|{
  133|       |    // Regular scan
  134|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 10.8k, False: 1.80k]
  ------------------
  135|  10.8k|        auto it = scn::ranges::begin(source);
  136|   302k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   302k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   302k|            auto result = scn::scan<T>(
  139|   302k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   302k|                scn::runtime_format(f));
  141|   302k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 10.8k, False: 291k]
  ------------------
  142|  10.8k|                break;
  143|  10.8k|            }
  144|   291k|            it = result->begin();
  145|   291k|        }
  146|  10.8k|    }
  147|       |
  148|       |    // scan localized
  149|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 10.8k, False: 1.80k]
  ------------------
  150|  10.8k|        auto it = scn::ranges::begin(source);
  151|   302k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   302k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   302k|            auto result = scn::scan<T>(
  154|   302k|                global_locale,
  155|   302k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   302k|                scn::runtime_format(f));
  157|   302k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 10.8k, False: 291k]
  ------------------
  158|  10.8k|                break;
  159|  10.8k|            }
  160|   291k|            it = result->begin();
  161|   291k|        }
  162|  10.8k|    }
  163|       |
  164|       |    // scan_value
  165|  1.80k|    {
  166|  1.80k|        auto it = scn::ranges::begin(source);
  167|   147k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   147k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   147k|            auto result = scn::scan_value<T>(
  170|   147k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   147k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.80k, False: 145k]
  ------------------
  172|  1.80k|                break;
  173|  1.80k|            }
  174|   145k|            it = result->begin();
  175|   145k|        }
  176|  1.80k|    }
  177|  1.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.80k|{
  133|       |    // Regular scan
  134|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 10.8k, False: 1.80k]
  ------------------
  135|  10.8k|        auto it = scn::ranges::begin(source);
  136|   302k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   302k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   302k|            auto result = scn::scan<T>(
  139|   302k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   302k|                scn::runtime_format(f));
  141|   302k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 10.8k, False: 291k]
  ------------------
  142|  10.8k|                break;
  143|  10.8k|            }
  144|   291k|            it = result->begin();
  145|   291k|        }
  146|  10.8k|    }
  147|       |
  148|       |    // scan localized
  149|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 10.8k, False: 1.80k]
  ------------------
  150|  10.8k|        auto it = scn::ranges::begin(source);
  151|   302k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   302k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   302k|            auto result = scn::scan<T>(
  154|   302k|                global_locale,
  155|   302k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   302k|                scn::runtime_format(f));
  157|   302k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 10.8k, False: 291k]
  ------------------
  158|  10.8k|                break;
  159|  10.8k|            }
  160|   291k|            it = result->begin();
  161|   291k|        }
  162|  10.8k|    }
  163|       |
  164|       |    // scan_value
  165|  1.80k|    {
  166|  1.80k|        auto it = scn::ranges::begin(source);
  167|   147k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   147k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   147k|            auto result = scn::scan_value<T>(
  170|   147k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   147k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.80k, False: 145k]
  ------------------
  172|  1.80k|                break;
  173|  1.80k|            }
  174|   145k|            it = result->begin();
  175|   145k|        }
  176|  1.80k|    }
  177|  1.80k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.80k|{
  133|       |    // Regular scan
  134|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 10.8k, False: 1.80k]
  ------------------
  135|  10.8k|        auto it = scn::ranges::begin(source);
  136|   302k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   302k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   302k|            auto result = scn::scan<T>(
  139|   302k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   302k|                scn::runtime_format(f));
  141|   302k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 10.8k, False: 291k]
  ------------------
  142|  10.8k|                break;
  143|  10.8k|            }
  144|   291k|            it = result->begin();
  145|   291k|        }
  146|  10.8k|    }
  147|       |
  148|       |    // scan localized
  149|  10.8k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 10.8k, False: 1.80k]
  ------------------
  150|  10.8k|        auto it = scn::ranges::begin(source);
  151|   302k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   302k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   302k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   302k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   302k|            auto result = scn::scan<T>(
  154|   302k|                global_locale,
  155|   302k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   302k|                scn::runtime_format(f));
  157|   302k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 10.8k, False: 291k]
  ------------------
  158|  10.8k|                break;
  159|  10.8k|            }
  160|   291k|            it = result->begin();
  161|   291k|        }
  162|  10.8k|    }
  163|       |
  164|       |    // scan_value
  165|  1.80k|    {
  166|  1.80k|        auto it = scn::ranges::begin(source);
  167|   147k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   147k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   147k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   147k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   147k|            auto result = scn::scan_value<T>(
  170|   147k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   147k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.80k, False: 145k]
  ------------------
  172|  1.80k|                break;
  173|  1.80k|            }
  174|   145k|            it = result->begin();
  175|   145k|        }
  176|  1.80k|    }
  177|  1.80k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.80k|{
   90|  1.80k|    using char_type = ranges::range_value_t<Source>;
   91|  1.80k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.80k|    deque.clear();
   93|  1.80k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.80k|              std::back_inserter(deque));
   95|  1.80k|    return deque;
   96|  1.80k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.80k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  1.80k|    else {
   83|  1.80k|        return wnoncontiguous_buffer;
   84|  1.80k|    }
   85|  1.80k|}

LLVMFuzzerTestOneInput:
   57|    902|{
   58|    902|    scn::fuzz::run(data, size);
   59|    902|    return 0;
   60|    902|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    902|{
   36|    902|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 901]
  |  Branch (36:35): [True: 0, False: 901]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    901|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    901|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    901|                                             "{:64U}", "{:[A-Za-z]}");
   44|    901|    do_basic_run(sv, f);
   45|       |
   46|    901|    const auto& wf = get_format_strings<wchar_t>(
   47|    901|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    901|    do_basic_run(wsv_reinterpret, wf);
   49|    901|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 901, False: 0]
  ------------------
   50|    901|        do_basic_run(wsv_transcode, wf);
   51|    901|    }
   52|    901|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    901|{
   25|    901|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    901|                                                           format_strings);
   27|    901|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    901|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    901|            source, format_strings);
   30|    901|    }
   31|    901|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    901|{
   25|    901|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    901|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    901|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.80k|{
   25|  1.80k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.80k|                                                           format_strings);
   27|  1.80k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.80k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.80k|            source, format_strings);
   30|  1.80k|    }
   31|  1.80k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.80k|{
   25|  1.80k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.80k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.80k|}

