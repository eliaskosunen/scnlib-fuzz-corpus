_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4123|  3.96M|{
 4124|  3.96M|    if constexpr (sizeof(U) == 1) {
 4125|  3.96M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|       |    else {
 4131|       |        // utf-32
 4132|       |        static_assert(sizeof(U) == 4);
 4133|       |        SCN_UNUSED(ch);
 4134|       |        return 1;
 4135|       |    }
 4136|  3.96M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4087|  3.96M|{
 4088|  3.96M|    static_assert(sizeof(U8) == 1);
 4089|       |
 4090|  3.96M|    SCN_GCC_COMPAT_PUSH
 4091|  3.96M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4092|  3.96M|    constexpr char lengths[] =
 4093|  3.96M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4094|  3.96M|        "\1\1\1\1\1\1\1\1"
 4095|  3.96M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4096|       |                            // byte
 4097|  3.96M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4098|  3.96M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4099|  3.96M|        "\4";               // highest bits 11110 -> 4-byte cp
 4100|  3.96M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4101|  3.96M|    SCN_GCC_COMPAT_POP
 4102|  3.96M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|  3.81M|{
 4330|  3.81M|    if constexpr (sizeof(CharT) == 1) {
 4331|  3.81M|        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|       |    else {
 4337|       |        SCN_EXPECT(input.size() == 1);
 4338|       |        auto cp = static_cast<char32_t>(input.front());
 4339|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4340|       |            return invalid_code_point;
 4341|       |        }
 4342|       |        return cp;
 4343|       |    }
 4344|  3.81M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4142|  3.81M|{
 4143|  3.81M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1079|  3.81M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.81M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4144|       |
 4145|  3.81M|    const auto is_trailing_code_unit = [](char ch) {
 4146|  3.81M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|  3.81M|    };
 4148|       |
 4149|  3.81M|    if (input.size() == 1) {
  ------------------
  |  Branch (4149:9): [True: 3.47M, False: 340k]
  ------------------
 4150|  3.47M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4150:13): [True: 253, False: 3.47M]
  ------------------
 4151|    253|            SCN_UNLIKELY_ATTR
 4152|    253|            return invalid_code_point;
 4153|    253|        }
 4154|  3.47M|        return static_cast<char32_t>(input[0]);
 4155|  3.47M|    }
 4156|       |
 4157|   340k|    if (input.size() == 2) {
  ------------------
  |  Branch (4157:9): [True: 101k, False: 238k]
  ------------------
 4158|   101k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4158:13): [True: 197, False: 101k]
  ------------------
 4159|    197|            SCN_UNLIKELY_ATTR
 4160|    197|            return invalid_code_point;
 4161|    197|        }
 4162|   101k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4162:13): [True: 9.99k, False: 91.7k]
  ------------------
 4163|  9.99k|            SCN_UNLIKELY_ATTR
 4164|  9.99k|            return invalid_code_point;
 4165|  9.99k|        }
 4166|       |
 4167|  91.7k|        char32_t cp{};
 4168|  91.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4169|  91.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4170|  91.7k|        return cp;
 4171|   101k|    }
 4172|       |
 4173|   238k|    if (input.size() == 3) {
  ------------------
  |  Branch (4173:9): [True: 229k, False: 8.96k]
  ------------------
 4174|   229k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4174:13): [True: 35, False: 229k]
  ------------------
 4175|     35|            SCN_UNLIKELY_ATTR
 4176|     35|            return invalid_code_point;
 4177|     35|        }
 4178|   229k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4178:13): [True: 3.09k, False: 226k]
  ------------------
 4179|   229k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4179:13): [True: 735, False: 225k]
  ------------------
 4180|  3.82k|            SCN_UNLIKELY_ATTR
 4181|  3.82k|            return invalid_code_point;
 4182|  3.82k|        }
 4183|       |
 4184|   225k|        char32_t cp{};
 4185|   225k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4186|   225k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4187|   225k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4188|   225k|        return cp;
 4189|   229k|    }
 4190|       |
 4191|  8.96k|    if (input.size() == 4) {
  ------------------
  |  Branch (4191:9): [True: 8.96k, False: 0]
  ------------------
 4192|  8.96k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4192:13): [True: 0, False: 8.96k]
  ------------------
 4193|      0|            SCN_UNLIKELY_ATTR
 4194|      0|            return invalid_code_point;
 4195|      0|        }
 4196|  8.96k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4196:13): [True: 1.65k, False: 7.30k]
  ------------------
 4197|  1.65k|            SCN_UNLIKELY_ATTR
 4198|  1.65k|            return invalid_code_point;
 4199|  1.65k|        }
 4200|  7.30k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4200:13): [True: 2.25k, False: 5.05k]
  ------------------
 4201|  7.30k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4201:13): [True: 163, False: 4.89k]
  ------------------
 4202|  7.30k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4202:13): [True: 112, False: 4.78k]
  ------------------
 4203|  2.52k|            SCN_UNLIKELY_ATTR
 4204|  2.52k|            return invalid_code_point;
 4205|  2.52k|        }
 4206|       |
 4207|  4.78k|        char32_t cp{};
 4208|  4.78k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4209|  4.78k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4210|  4.78k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4211|  4.78k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4212|  4.78k|        return cp;
 4213|  7.30k|    }
 4214|       |
 4215|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4216|       |    // gcc 7 thinks we'll get here, even when we won't
 4217|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4218|      0|#endif
 4219|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4220|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4145|   574k|    const auto is_trailing_code_unit = [](char ch) {
 4146|   574k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4147|   574k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|  3.33M|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|  3.33M|    else {
 4022|  3.33M|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|  3.33M|                                       to_address(first), to_address(last)))};
 4024|  3.33M|    }
 4025|  3.33M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  10.3M|{
  341|  10.3M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  10.3M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  10.3M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  318|  11.5M|{
  319|  11.5M|    return p;
  320|  11.5M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4046|  1.62M|{
 4047|       |    if constexpr (std::is_constructible_v<
 4048|       |                      typename std::basic_string_view<CharT>::iterator,
 4049|       |                      decltype(it)> &&
 4050|  1.62M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4051|  1.62M|        SCN_UNUSED(sv);
  ------------------
  |  | 1064|  1.62M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4052|  1.62M|        return it;
 4053|       |    }
 4054|       |    else {
 4055|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4056|       |    }
 4057|  1.62M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  24.2k|    {
 2901|  24.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  24.2k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  24.2k|    {
 2882|  24.2k|        return decay_copy(t.begin());
 2883|  24.2k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2125|  1.98M|{
 2126|  1.98M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  1.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  1.98M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   421k|    {
 2958|   421k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   421k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   421k|    {
 2940|   421k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   421k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   421k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
10004|  42.8k|{
10005|  42.8k|    auto result = make_scan_result<Source, Args...>();
10006|  42.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  42.8k|                                   make_scan_args(result->values())));
10008|  42.8k|    return result;
10009|  42.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9960|   105k|{
 9961|   105k|    return scan_result_type<Source, Args...>();
 9962|   105k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   105k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|   105k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|   105k|    {
  646|   105k|        construct();
  647|   105k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|   105k|    {
  727|   105k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|   105k|        m_has_value = true;
  729|   105k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  428|   105k|{
  429|   105k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   105k|        T(std::forward<Args>(args)...);
  431|   105k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6775|   105k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6618|   210k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3491|   210k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6549|   235k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   502k|    {
  751|   502k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   502k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   502k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|   105k|{
 9946|   105k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.6k, False: 93.5k]
  |  |  ------------------
  ------------------
 9947|  11.6k|        out = unexpected(in.error());
 9948|  11.6k|    }
 9949|  93.5k|    else {
 9950|  93.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  93.5k|    static_cast<    \
  |  | 1084|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  93.5k|    }
 9952|   105k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1771|   210k|    {
 1772|   210k|        return has_value();
 1773|   210k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   420k|    {
  523|   420k|        return m_has_value;
  524|   420k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1777|  23.3k|    {
 1778|  23.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  23.3k|        return this->get_unexpected().error();
 1780|  23.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  23.3k|    {
  506|  23.3k|        return m_unexpected;
  507|  23.3k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  397|  1.00M|    {
  398|  1.00M|        return m_unexpected;
  399|  1.00M|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  380|   440k|        : m_unexpected(std::forward<Err>(e))
  381|   440k|    {
  382|   440k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   440k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|   440k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  11.6k|        : base(unexpect, std::move(e.error())),
 1648|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.6k|    {
 1650|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  11.6k|        : m_has_value(false)
  670|  11.6k|    {
  671|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  733|  11.6k|    {
  734|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  735|  11.6k|                                  std::forward<Args>(args)...);
  736|  11.6k|        m_has_value = false;
  737|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  428|  69.9k|{
  429|  69.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|  69.9k|        T(std::forward<Args>(args)...);
  431|  69.9k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  391|   577k|        : m_unexpected(std::forward<Args>(args)...)
  392|   577k|    {
  393|   577k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   577k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|   577k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  58.3k|    {
  763|  58.3k|        return reinterpret_cast<unexpected<E>*>(
  764|  58.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  58.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  58.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.6k|    {
 1348|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  934|  11.6k|    {
  935|  11.6k|        assign_common(std::move(other));
  936|  11.6k|        return *this;
  937|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  11.6k|    {
  982|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.6k, False: 0]
  ------------------
  983|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.6k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.6k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   537k|    {
  720|   537k|        return m_has_value;
  721|   537k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|   292k|    {
  686|   292k|        return *value_ptr();
  687|   292k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  11.6k|    {
 1078|  11.6k|        this->destroy_value();
 1079|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|   105k|    {
  741|   105k|        scn::detail::destroy_at(value_ptr());
  742|   105k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  434|   105k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   105k|    else {
  441|   105k|        p->~T();
  442|   105k|    }
  443|   105k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6782|   105k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  11.6k|    {
  734|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  735|  11.6k|                                  std::forward<Args>(args)...);
  736|  11.6k|        m_has_value = false;
  737|  11.6k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  428|   104k|{
  429|   104k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   104k|        T(std::forward<Args>(args)...);
  431|   104k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  11.6k|    {
  711|  11.6k|        return std::move(*unexpected_ptr());
  712|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  23.3k|    {
  745|  23.3k|        scn::detail::destroy_at(unexpected_ptr());
  746|  23.3k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  434|   139k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   139k|    else {
  441|   139k|        p->~T();
  442|   139k|    }
  443|   139k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6649|   187k|    {
 6650|   187k|        m_range = std::forward<Other>(r);
 6651|   187k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|   187k|    {
 1827|   187k|        return value();
 1828|   187k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|   187k|    {
 1801|   187k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   187k|        return this->get_value();
 1803|   187k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   187k|    {
  489|   187k|        return m_value;
  490|   187k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9766|  85.7k|{
 9767|  85.7k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  85.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|  85.7k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|  85.7k|{
 9704|  85.7k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  85.7k|    auto result = vscan_impl(buffer, format, args);
 9707|  85.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  85.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.7k, False: 74.9k]
  |  |  ------------------
  ------------------
 9708|  10.7k|        return unexpected(result.error());
 9709|  10.7k|    }
 9710|  74.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  85.7k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5465|   210k|{
 5466|   210k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   210k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   210k|                  "\n"
 5470|   210k|                  "Unsupported range type given as input to a scanning "
 5471|   210k|                  "function.\n"
 5472|   210k|                  "A range needs to have a character type (value type) "
 5473|   210k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   210k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   210k|                  "to be included.\n"
 5476|   210k|                  "See the scnlib documentation for more details.");
 5477|   210k|    static_assert(
 5478|   210k|        !std::is_same_v<T, custom_char_traits>,
 5479|   210k|        "\n"
 5480|   210k|        "Unsupported range type given as input to a scanning "
 5481|   210k|        "function.\n"
 5482|   210k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   210k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   210k|        "not supported.");
 5485|   210k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   210k|                  "\n"
 5487|   210k|                  "Unsupported range type given as input to a scanning "
 5488|   210k|                  "function.\n"
 5489|   210k|                  "file_marker_found cannot be used as an "
 5490|   210k|                  "source range type to scn::scan.\n"
 5491|   210k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   210k|                  "and do not provide an explicit source range, "
 5493|   210k|                  "or use scn::scan with a FILE* directly.");
 5494|   210k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   210k|                  "\n"
 5496|   210k|                  "Unsupported range type given as input to a scanning "
 5497|   210k|                  "function.\n"
 5498|   210k|                  "In order to be scannable, a range needs to satisfy "
 5499|   210k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   210k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   210k|                  "\n"
 5502|   210k|                  "Unsupported range type given as input to a scanning "
 5503|   210k|                  "function.\n"
 5504|   210k|                  "A range needs to model forward_range and have a valid "
 5505|   210k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   210k|                  "Examples of scannable ranges are std::string, "
 5507|   210k|                  "std::string_view, "
 5508|   210k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   210k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   210k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   210k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|   210k|{
 5404|   210k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|   210k|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|   210k|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|   210k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   210k|    {
 3032|   210k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   210k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   210k|    {
 3013|   210k|        return t.data();
 3014|   210k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3414|   210k|    {
 3415|   210k|        return detail::to_address(ranges::begin(derived()));
 3416|   210k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  1.21M|{
  341|  1.21M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  1.21M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   397k|    {
 2901|   397k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   397k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   397k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   397k|    {
 2882|   397k|        return decay_copy(t.begin());
 2883|   397k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3512|  2.50M|    {
 3513|  2.50M|        return m_iterator;
 3514|  2.50M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3370|   210k|    {
 3371|   210k|        return static_cast<const D&>(*this);
 3372|   210k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|   210k|    {
 3107|   210k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   210k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|   210k|    {
 3073|   210k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   210k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   210k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2125|  2.40M|{
 2126|  2.40M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  2.40M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  2.40M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|   881k|    {
 3530|   881k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|   881k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1771|  3.44M|    {
 1772|  3.44M|        return has_value();
 1773|  3.44M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  522|  6.85M|    {
  523|  6.85M|        return m_has_value;
  524|  6.85M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1777|   104k|    {
 1778|   104k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|   104k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   104k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|   104k|        return this->get_unexpected().error();
 1780|   104k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|   104k|    {
  506|   104k|        return m_unexpected;
  507|   104k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  23.3k|        : base(unexpect, std::move(e.error())),
 1648|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.3k|    {
 1650|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  23.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  23.3k|          m_has_value(false)
  484|  23.3k|    {
  485|  23.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   210k|    {
 1348|   210k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|   187k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   187k|                      ranges::iterator_t<SourceRange>>) {
 6882|   187k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   187k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   951k|    {
 2901|   951k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   951k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   951k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   951k|    {
 2882|   951k|        return decay_copy(t.begin());
 2883|   951k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6866|   187k|{
 6867|   187k|    return ranges::end(source);
 6868|   187k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   187k|    {
 2958|   187k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   187k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   187k|    {
 2940|   187k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   187k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   187k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3517|  1.20M|    {
 3518|  1.20M|        return m_sentinel;
 3519|  1.20M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1826|  3.30M|    {
 1827|  3.30M|        return value();
 1828|  3.30M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1800|  3.30M|    {
 1801|  3.30M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.30M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.30M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.30M|        return this->get_value();
 1803|  3.30M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  488|  3.30M|    {
  489|  3.30M|        return m_value;
  490|  3.30M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   187k|        : base(std::in_place, std::forward<U>(val)),
 1602|   187k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   187k|    {
 1604|   187k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|   187k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   187k|    {
  475|   187k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8962|  85.7k|    {
 8963|  85.7k|        return m_str;
 8964|  85.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|   191k|{
 6275|   191k|    detail::check_scan_arg_types<Args...>();
 6276|   191k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   191k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5985|   235k|{
 5986|   235k|    constexpr bool default_constructible_constraint =
 5987|   235k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   235k|    static_assert(default_constructible_constraint,
 5989|   235k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   235k|    constexpr bool destructible_constraint =
 5992|   235k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   235k|    static_assert(destructible_constraint,
 5994|   235k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   235k|    constexpr bool non_reference_constraint =
 5997|   235k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   235k|    static_assert(non_reference_constraint,
 5999|   235k|                  "Scan argument types must not be references");
 6000|       |
 6001|   235k|    constexpr bool movable_constraint =
 6002|   235k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   235k|    static_assert(movable_constraint,
 6004|   235k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   235k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   235k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   235k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6250|   191k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   191k|    {
 6252|   191k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|   191k|    {
 6260|   191k|        return {detail::make_arg<
 6261|   191k|            kind, Context,
 6262|   191k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   191k|                                 typename Context::char_type>::value>(args)...};
 6264|   191k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 6035|   191k|{
 6036|   191k|    return make_value<Context>(value).ref_value;
 6037|   191k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5970|   235k|{
 5971|   235k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   235k|                                  needs_context_tag>) {
 5975|   235k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   235k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   235k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5772|   235k|    {                                                                        \
 5773|   235k|        return val;                                                          \
 5774|   235k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5939|   235k|{
 5940|   235k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   235k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   235k|    constexpr bool scannable_char =
 5944|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   235k|    static_assert(scannable_char,
 5946|   235k|                  "Cannot scan an argument of an unsupported character "
 5947|   235k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   235k|    constexpr bool scannable_const =
 5950|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   235k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   235k|    constexpr bool scannable_disabled =
 5954|   235k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   235k|    static_assert(scannable_disabled,
 5956|   235k|                  "Cannot scan an argument that has been disabled by "
 5957|   235k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   235k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   235k|    static_assert(
 5961|   235k|        scannable,
 5962|   235k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   235k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   235k|    return arg_value{arg};
 5966|   235k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5715|   235k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   235k|    {
 5717|   235k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6558|   191k|    {
 6559|   191k|        return m_values;
 6560|   191k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   191k|        : basic_scan_args(store.desc, store.args.data())
 6301|   191k|    {
 6302|   191k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6352|   277k|        : m_desc(desc), m_builtin_values(data)
 6353|   277k|    {
 6354|   277k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  1.44M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.44M|    static_cast<    \
  |  | 1084|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.44M|    static_cast<    \
  |  | 1084|  1.44M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  1.44M|    {
 3498|  1.44M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8639|   277k|{
 8640|   277k|    return s;
 8641|   277k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8616|   277k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  85.7k|        : m_str(r.str)
 8958|  85.7k|    {
 8959|  85.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   105k|    {
 1772|   105k|        return has_value();
 1773|   105k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1846|   292k|    {
 1847|   292k|        return &value();
 1848|   292k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|   292k|    {
 1801|   292k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   292k|        return this->get_value();
 1803|   292k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6638|   187k|    {
 6639|   187k|        return ranges::begin(m_range);
 6640|   187k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|   116k|    {
  676|   116k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 93.5k, False: 23.3k]
  ------------------
  677|  93.5k|            destroy_value();
  678|  93.5k|        }
  679|  23.3k|        else {
  680|  23.3k|            destroy_unexpected();
  681|  23.3k|        }
  682|   116k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
10073|  42.8k|{
10074|  42.8k|    auto result = make_scan_result<Source, Args...>();
10075|  42.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  42.8k|                                   make_scan_args(result->values())));
10077|  42.8k|    return result;
10078|  42.8k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9784|  85.7k|{
 9785|  85.7k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  85.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|  85.7k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|  85.7k|{
 9720|  85.7k|#if !SCN_DISABLE_LOCALE
 9721|  85.7k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  85.7k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  85.7k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  85.7k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  85.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  85.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.7k, False: 74.9k]
  |  |  ------------------
  ------------------
 9728|  10.7k|        return unexpected(result.error());
 9729|  10.7k|    }
 9730|  74.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  74.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  85.7k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10114|  19.4k|{
10115|  19.4k|    auto result = make_scan_result<Source, T>();
10116|  19.4k|    fill_scan_result(
10117|  19.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  19.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  19.4k|                            detail::make_arg<scan_context>(result->value())));
10119|  19.4k|    return result;
10120|  19.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9797|  38.9k|{
 9798|  38.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  38.9k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  38.9k|{
 9744|  38.9k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  38.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  38.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  38.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.79k, False: 37.1k]
  |  |  ------------------
  ------------------
 9748|  1.79k|        return unexpected(result.error());
 9749|  1.79k|    }
 9750|  37.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  37.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  38.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 6020|  44.0k|{
 6021|  44.0k|    check_scan_arg_types<T>();
 6022|       |
 6023|  44.0k|    basic_scan_arg<Context> arg;
 6024|  44.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  44.0k|    arg.m_value = make_value<Context>(value);
 6026|  44.0k|    return arg;
 6027|  44.0k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6118|   341k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5711|  2.57M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  44.0k|    {
 6581|  44.0k|        return std::get<0>(m_values);
 6582|  44.0k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
10004|  42.8k|{
10005|  42.8k|    auto result = make_scan_result<Source, Args...>();
10006|  42.8k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  42.8k|                                   make_scan_args(result->values())));
10008|  42.8k|    return result;
10009|  42.8k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9960|   105k|{
 9961|   105k|    return scan_result_type<Source, Args...>();
 9962|   105k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   105k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  459|   105k|        : m_value(T{}), m_has_value(true)
  460|   105k|    {
  461|   105k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6775|   105k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6549|   105k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9945|   105k|{
 9946|   105k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   105k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.6k, False: 93.5k]
  |  |  ------------------
  ------------------
 9947|  11.6k|        out = unexpected(in.error());
 9948|  11.6k|    }
 9949|  93.5k|    else {
 9950|  93.5k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|  93.5k|    static_cast<    \
  |  | 1084|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|  93.5k|    }
 9952|   105k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1647|  11.6k|        : base(unexpect, std::move(e.error())),
 1648|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.6k|    {
 1650|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  482|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.6k|          m_has_value(false)
  484|  11.6k|    {
  485|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.6k|    {
 1348|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1588|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  934|  11.6k|    {
  935|  11.6k|        assign_common(std::move(other));
  936|  11.6k|        return *this;
  937|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  981|  11.6k|    {
  982|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.6k, False: 0]
  ------------------
  983|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.6k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.6k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  522|   420k|    {
  523|   420k|        return m_has_value;
  524|   420k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  488|   292k|    {
  489|   292k|        return m_value;
  490|   292k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1077|  11.6k|    {
 1078|  11.6k|        this->destroy_value();
 1079|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  11.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  536|  11.6k|    {
  537|  11.6k|        scn::detail::construct_at(&get_unexpected(),
  538|  11.6k|                                  std::forward<Args>(args)...);
  539|  11.6k|        m_has_value = false;
  540|  11.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  11.6k|    {
  506|  11.6k|        return m_unexpected;
  507|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  11.6k|    {
  514|  11.6k|        return std::move(m_unexpected);
  515|  11.6k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8962|  85.7k|    {
 8963|  85.7k|        return m_str;
 8964|  85.7k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  85.7k|{
 6275|  85.7k|    detail::check_scan_arg_types<Args...>();
 6276|  85.7k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  85.7k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5985|   105k|{
 5986|   105k|    constexpr bool default_constructible_constraint =
 5987|   105k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   105k|    static_assert(default_constructible_constraint,
 5989|   105k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   105k|    constexpr bool destructible_constraint =
 5992|   105k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   105k|    static_assert(destructible_constraint,
 5994|   105k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   105k|    constexpr bool non_reference_constraint =
 5997|   105k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   105k|    static_assert(non_reference_constraint,
 5999|   105k|                  "Scan argument types must not be references");
 6000|       |
 6001|   105k|    constexpr bool movable_constraint =
 6002|   105k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   105k|    static_assert(movable_constraint,
 6004|   105k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   105k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   105k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   105k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6250|  85.7k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  85.7k|    {
 6252|  85.7k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  85.7k|    {
 6260|  85.7k|        return {detail::make_arg<
 6261|  85.7k|            kind, Context,
 6262|  85.7k|            mapped_type_constant<remove_cvref_t<A>,
 6263|  85.7k|                                 typename Context::char_type>::value>(args)...};
 6264|  85.7k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE26ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 6035|  85.7k|{
 6036|  85.7k|    return make_value<Context>(value).ref_value;
 6037|  85.7k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5970|   105k|{
 5971|   105k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   105k|                                  needs_context_tag>) {
 5975|   105k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   105k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   105k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5772|   105k|    {                                                                        \
 5773|   105k|        return val;                                                          \
 5774|   105k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5939|   105k|{
 5940|   105k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   105k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   105k|    constexpr bool scannable_char =
 5944|   105k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   105k|    static_assert(scannable_char,
 5946|   105k|                  "Cannot scan an argument of an unsupported character "
 5947|   105k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   105k|    constexpr bool scannable_const =
 5950|   105k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   105k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   105k|    constexpr bool scannable_disabled =
 5954|   105k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   105k|    static_assert(scannable_disabled,
 5956|   105k|                  "Cannot scan an argument that has been disabled by "
 5957|   105k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   105k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   105k|    static_assert(
 5961|   105k|        scannable,
 5962|   105k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   105k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   105k|    return arg_value{arg};
 5966|   105k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5715|   105k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   105k|    {
 5717|   105k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6558|  85.7k|    {
 6559|  85.7k|        return m_values;
 6560|  85.7k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  85.7k|        : basic_scan_args(store.desc, store.args.data())
 6301|  85.7k|    {
 6302|  85.7k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|  85.7k|        : m_str(r.str)
 8958|  85.7k|    {
 8959|  85.7k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   105k|    {
 1772|   105k|        return has_value();
 1773|   105k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1846|   292k|    {
 1847|   292k|        return &value();
 1848|   292k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1800|   292k|    {
 1801|   292k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   292k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   292k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   292k|        return this->get_value();
 1803|   292k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
10073|  42.8k|{
10074|  42.8k|    auto result = make_scan_result<Source, Args...>();
10075|  42.8k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  42.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  42.8k|                                   make_scan_args(result->values())));
10077|  42.8k|    return result;
10078|  42.8k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
10114|  19.4k|{
10115|  19.4k|    auto result = make_scan_result<Source, T>();
10116|  19.4k|    fill_scan_result(
10117|  19.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  19.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  19.4k|                            detail::make_arg<scan_context>(result->value())));
10119|  19.4k|    return result;
10120|  19.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 6020|  19.4k|{
 6021|  19.4k|    check_scan_arg_types<T>();
 6022|       |
 6023|  19.4k|    basic_scan_arg<Context> arg;
 6024|  19.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|  19.4k|    arg.m_value = make_value<Context>(value);
 6026|  19.4k|    return arg;
 6027|  19.4k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|  19.4k|    {
 6581|  19.4k|        return std::get<0>(m_values);
 6582|  19.4k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  11.6k|    {
 2901|  11.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  11.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  11.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  11.6k|    {
 2882|  11.6k|        return decay_copy(t.begin());
 2883|  11.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2125|  5.24M|{
 2126|  5.24M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  5.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  5.24M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   261k|    {
 2958|   261k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   261k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   261k|    {
 2940|   261k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   261k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   261k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
10004|  53.0k|{
10005|  53.0k|    auto result = make_scan_result<Source, Args...>();
10006|  53.0k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10007|  53.0k|                                   make_scan_args(result->values())));
10008|  53.0k|    return result;
10009|  53.0k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9960|   130k|{
 9961|   130k|    return scan_result_type<Source, Args...>();
 9962|   130k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   130k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|   130k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|   130k|    {
  646|   130k|        construct();
  647|   130k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|   130k|    {
  727|   130k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|   130k|        m_has_value = true;
  729|   130k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  428|   130k|{
  429|   130k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   130k|        T(std::forward<Args>(args)...);
  431|   130k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6775|   130k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6618|   130k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3491|   130k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|   629k|    {
  751|   629k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|   629k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|   629k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9945|   130k|{
 9946|   130k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   130k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 11.6k, False: 118k]
  |  |  ------------------
  ------------------
 9947|  11.6k|        out = unexpected(in.error());
 9948|  11.6k|    }
 9949|   118k|    else {
 9950|   118k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   118k|    static_cast<    \
  |  | 1084|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   118k|    }
 9952|   130k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   130k|    {
 1772|   130k|        return has_value();
 1773|   130k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|   261k|    {
  523|   261k|        return m_has_value;
  524|   261k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1777|  11.6k|    {
 1778|  11.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  11.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  11.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  11.6k|        return this->get_unexpected().error();
 1780|  11.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  11.6k|    {
  506|  11.6k|        return m_unexpected;
  507|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1647|  11.6k|        : base(unexpect, std::move(e.error())),
 1648|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.6k|    {
 1650|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  669|  11.6k|        : m_has_value(false)
  670|  11.6k|    {
  671|  11.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  733|  11.6k|    {
  734|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  735|  11.6k|                                  std::forward<Args>(args)...);
  736|  11.6k|        m_has_value = false;
  737|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|  58.3k|    {
  763|  58.3k|        return reinterpret_cast<unexpected<E>*>(
  764|  58.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|  58.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|  58.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  11.6k|    {
 1348|  11.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1588|  11.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  934|  11.6k|    {
  935|  11.6k|        assign_common(std::move(other));
  936|  11.6k|        return *this;
  937|  11.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  981|  11.6k|    {
  982|  11.6k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 11.6k, False: 0]
  ------------------
  983|  11.6k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 11.6k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  11.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  11.6k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|   664k|    {
  720|   664k|        return m_has_value;
  721|   664k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|   368k|    {
  686|   368k|        return *value_ptr();
  687|   368k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1077|  11.6k|    {
 1078|  11.6k|        this->destroy_value();
 1079|  11.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|   130k|    {
  741|   130k|        scn::detail::destroy_at(value_ptr());
  742|   130k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  434|   130k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   130k|    else {
  441|   130k|        p->~T();
  442|   130k|    }
  443|   130k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6782|   130k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  733|  11.6k|    {
  734|  11.6k|        scn::detail::construct_at(unexpected_ptr(),
  735|  11.6k|                                  std::forward<Args>(args)...);
  736|  11.6k|        m_has_value = false;
  737|  11.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  11.6k|    {
  711|  11.6k|        return std::move(*unexpected_ptr());
  712|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  23.3k|    {
  745|  23.3k|        scn::detail::destroy_at(unexpected_ptr());
  746|  23.3k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6649|   118k|    {
 6650|   118k|        m_range = std::forward<Other>(r);
 6651|   118k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|   118k|    {
 1827|   118k|        return value();
 1828|   118k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|   118k|    {
 1801|   118k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   118k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   118k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   118k|        return this->get_value();
 1803|   118k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   118k|    {
  489|   118k|        return m_value;
  490|   118k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9766|  53.0k|{
 9767|  53.0k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9768|  53.0k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|  53.0k|{
 9704|  53.0k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|  53.0k|    auto result = vscan_impl(buffer, format, args);
 9707|  53.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.38k, False: 47.6k]
  |  |  ------------------
  ------------------
 9708|  5.38k|        return unexpected(result.error());
 9709|  5.38k|    }
 9710|  47.6k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|  53.0k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5465|   130k|{
 5466|   130k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   130k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   130k|                  "\n"
 5470|   130k|                  "Unsupported range type given as input to a scanning "
 5471|   130k|                  "function.\n"
 5472|   130k|                  "A range needs to have a character type (value type) "
 5473|   130k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   130k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   130k|                  "to be included.\n"
 5476|   130k|                  "See the scnlib documentation for more details.");
 5477|   130k|    static_assert(
 5478|   130k|        !std::is_same_v<T, custom_char_traits>,
 5479|   130k|        "\n"
 5480|   130k|        "Unsupported range type given as input to a scanning "
 5481|   130k|        "function.\n"
 5482|   130k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   130k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   130k|        "not supported.");
 5485|   130k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   130k|                  "\n"
 5487|   130k|                  "Unsupported range type given as input to a scanning "
 5488|   130k|                  "function.\n"
 5489|   130k|                  "file_marker_found cannot be used as an "
 5490|   130k|                  "source range type to scn::scan.\n"
 5491|   130k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   130k|                  "and do not provide an explicit source range, "
 5493|   130k|                  "or use scn::scan with a FILE* directly.");
 5494|   130k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   130k|                  "\n"
 5496|   130k|                  "Unsupported range type given as input to a scanning "
 5497|   130k|                  "function.\n"
 5498|   130k|                  "In order to be scannable, a range needs to satisfy "
 5499|   130k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   130k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   130k|                  "\n"
 5502|   130k|                  "Unsupported range type given as input to a scanning "
 5503|   130k|                  "function.\n"
 5504|   130k|                  "A range needs to model forward_range and have a valid "
 5505|   130k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   130k|                  "Examples of scannable ranges are std::string, "
 5507|   130k|                  "std::string_view, "
 5508|   130k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   130k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   130k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   130k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   130k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   130k|    else {
 5451|   130k|        return make_forward_scan_buffer(r);
 5452|   130k|    }
 5453|   130k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5268|   130k|{
 5269|   130k|    return basic_scan_forward_buffer_impl(range);
 5270|   130k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   130k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   130k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   130k|          m_cursor(ranges::begin(*m_range))
 4830|   130k|    {
 4831|   130k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4800|   130k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   130k|    {
 4802|   130k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4491|   130k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   130k|    {
 4493|   130k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4396|   130k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   249k|    {
 2901|   249k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   249k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   249k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   249k|    {
 2882|   249k|        return decay_copy(t.begin());
 2883|   249k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3512|   368k|    {
 3513|   368k|        return m_iterator;
 3514|   368k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4834|  1.50M|    {
 4835|  1.50M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 17.6k, False: 1.48M]
  ------------------
 4836|  17.6k|            return false;
 4837|  17.6k|        }
 4838|  1.48M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  1.48M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  1.48M|        }
 4841|  1.48M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 1.36M, False: 123k]
  ------------------
 4842|  1.36M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  1.36M|                                          this->m_current_view.begin(),
 4844|  1.36M|                                          this->m_current_view.end());
 4845|  1.36M|        }
 4846|  1.48M|        m_latest = *m_cursor;
 4847|  1.48M|        ++m_cursor;
 4848|  1.48M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  1.48M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  1.48M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  1.48M|        }
 4852|  1.48M|        return true;
 4853|  1.50M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  4.48M|    {
 2958|  4.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  4.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  4.48M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  4.48M|    {
 2940|  4.48M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  4.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  4.48M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3517|  4.60M|    {
 3518|  4.60M|        return m_sentinel;
 3519|  4.60M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4401|   130k|    {
 4402|   130k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   130k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   130k|        return true;
 4404|   130k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  11.6k|        : base(unexpect, std::move(e.error())),
 1648|  11.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  11.6k|    {
 1650|  11.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|  11.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  11.6k|          m_has_value(false)
  484|  11.6k|    {
  485|  11.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   130k|    {
 1348|   130k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|   118k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   118k|                      ranges::iterator_t<SourceRange>>) {
 6882|   118k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   118k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   118k|    {
 2901|   118k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   118k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   118k|    {
 2882|   118k|        return decay_copy(t.begin());
 2883|   118k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6866|   118k|{
 6867|   118k|    return ranges::end(source);
 6868|   118k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   118k|    {
 2958|   118k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   118k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   118k|    {
 2940|   118k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   118k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|   118k|        : base(std::in_place, std::forward<U>(val)),
 1602|   118k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   118k|    {
 1604|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|   118k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   118k|    {
  475|   118k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8962|   106k|    {
 8963|   106k|        return m_str;
 8964|   106k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|   249k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   249k|    static_cast<    \
  |  | 1084|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   249k|    static_cast<    \
  |  | 1084|   249k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   249k|    {
 3498|   249k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8957|   106k|        : m_str(r.str)
 8958|   106k|    {
 8959|   106k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   130k|    {
 1772|   130k|        return has_value();
 1773|   130k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1846|   368k|    {
 1847|   368k|        return &value();
 1848|   368k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1800|   368k|    {
 1801|   368k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   368k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   368k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   368k|        return this->get_value();
 1803|   368k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6638|   118k|    {
 6639|   118k|        return ranges::begin(m_range);
 6640|   118k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|   142k|    {
  676|   142k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 118k, False: 23.3k]
  ------------------
  677|   118k|            destroy_value();
  678|   118k|        }
  679|  23.3k|        else {
  680|  23.3k|            destroy_unexpected();
  681|  23.3k|        }
  682|   142k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
10073|  53.0k|{
10074|  53.0k|    auto result = make_scan_result<Source, Args...>();
10075|  53.0k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10076|  53.0k|                                   make_scan_args(result->values())));
10077|  53.0k|    return result;
10078|  53.0k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9784|  53.0k|{
 9785|  53.0k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1085|  53.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9786|  53.0k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|  53.0k|{
 9720|  53.0k|#if !SCN_DISABLE_LOCALE
 9721|  53.0k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|  53.0k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|  53.0k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|  53.0k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|  53.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.38k, False: 47.6k]
  |  |  ------------------
  ------------------
 9728|  5.38k|        return unexpected(result.error());
 9729|  5.38k|    }
 9730|  47.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|  53.0k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
10114|  24.5k|{
10115|  24.5k|    auto result = make_scan_result<Source, T>();
10116|  24.5k|    fill_scan_result(
10117|  24.5k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10118|  24.5k|                            detail::make_arg<scan_context>(result->value())));
10119|  24.5k|    return result;
10120|  24.5k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9797|  24.5k|{
 9798|  24.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1085|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9799|  24.5k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|  24.5k|{
 9744|  24.5k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|  24.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|  24.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|  24.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 897, False: 23.6k]
  |  |  ------------------
  ------------------
 9748|    897|        return unexpected(result.error());
 9749|    897|    }
 9750|  23.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|  24.5k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  48.4k|    {
 2901|  48.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  48.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  48.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  48.4k|    {
 2882|  48.4k|        return decay_copy(t.begin());
 2883|  48.4k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2125|  11.5M|{
 2126|  11.5M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  11.5M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  11.5M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  2.97M|    {
 2958|  2.97M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  2.97M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  2.97M|    {
 2940|  2.97M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  2.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  2.97M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9960|   743k|{
 9961|   743k|    return scan_result_type<Source, Args...>();
 9962|   743k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   743k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|   743k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|   743k|    {
  646|   743k|        construct();
  647|   743k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|   743k|    {
  727|   743k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|   743k|        m_has_value = true;
  729|   743k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  428|   743k|{
  429|   743k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   743k|        T(std::forward<Args>(args)...);
  431|   743k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6775|   743k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6618|  1.48M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3491|  1.48M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6549|  1.48M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  3.66M|    {
  751|  3.66M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  3.66M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  3.66M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9945|   743k|{
 9946|   743k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   743k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 23.3k, False: 719k]
  |  |  ------------------
  ------------------
 9947|  23.3k|        out = unexpected(in.error());
 9948|  23.3k|    }
 9949|   719k|    else {
 9950|   719k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   719k|    static_cast<    \
  |  | 1084|   719k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   719k|    }
 9952|   743k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1771|  1.48M|    {
 1772|  1.48M|        return has_value();
 1773|  1.48M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  2.97M|    {
  523|  2.97M|        return m_has_value;
  524|  2.97M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1777|  46.6k|    {
 1778|  46.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  46.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  46.6k|        return this->get_unexpected().error();
 1780|  46.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  46.6k|    {
  506|  46.6k|        return m_unexpected;
  507|  46.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1647|  23.3k|        : base(unexpect, std::move(e.error())),
 1648|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.3k|    {
 1650|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  669|  23.3k|        : m_has_value(false)
  670|  23.3k|    {
  671|  23.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  733|  23.3k|    {
  734|  23.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  23.3k|                                  std::forward<Args>(args)...);
  736|  23.3k|        m_has_value = false;
  737|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|   116k|    {
  763|   116k|        return reinterpret_cast<unexpected<E>*>(
  764|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  23.3k|    {
 1348|  23.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1588|  23.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  934|  23.3k|    {
  935|  23.3k|        assign_common(std::move(other));
  936|  23.3k|        return *this;
  937|  23.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  981|  23.3k|    {
  982|  23.3k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 23.3k, False: 0]
  ------------------
  983|  23.3k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 23.3k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  23.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  23.3k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  3.73M|    {
  720|  3.73M|        return m_has_value;
  721|  3.73M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  2.18M|    {
  686|  2.18M|        return *value_ptr();
  687|  2.18M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1077|  23.3k|    {
 1078|  23.3k|        this->destroy_value();
 1079|  23.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|   743k|    {
  741|   743k|        scn::detail::destroy_at(value_ptr());
  742|   743k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  434|   743k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   743k|    else {
  441|   743k|        p->~T();
  442|   743k|    }
  443|   743k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6782|   743k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  733|  23.3k|    {
  734|  23.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  23.3k|                                  std::forward<Args>(args)...);
  736|  23.3k|        m_has_value = false;
  737|  23.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  23.3k|    {
  711|  23.3k|        return std::move(*unexpected_ptr());
  712|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  46.6k|    {
  745|  46.6k|        scn::detail::destroy_at(unexpected_ptr());
  746|  46.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6649|  1.43M|    {
 6650|  1.43M|        m_range = std::forward<Other>(r);
 6651|  1.43M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1826|  1.43M|    {
 1827|  1.43M|        return value();
 1828|  1.43M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1800|  1.43M|    {
 1801|  1.43M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.43M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.43M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.43M|        return this->get_value();
 1803|  1.43M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.43M|    {
  489|  1.43M|        return m_value;
  490|  1.43M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9703|   597k|{
 9704|   597k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   597k|    auto result = vscan_impl(buffer, format, args);
 9707|   597k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   597k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 21.5k, False: 575k]
  |  |  ------------------
  ------------------
 9708|  21.5k|        return unexpected(result.error());
 9709|  21.5k|    }
 9710|   575k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   575k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   597k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5465|  1.48M|{
 5466|  1.48M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|  1.48M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|  1.48M|                  "\n"
 5470|  1.48M|                  "Unsupported range type given as input to a scanning "
 5471|  1.48M|                  "function.\n"
 5472|  1.48M|                  "A range needs to have a character type (value type) "
 5473|  1.48M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|  1.48M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|  1.48M|                  "to be included.\n"
 5476|  1.48M|                  "See the scnlib documentation for more details.");
 5477|  1.48M|    static_assert(
 5478|  1.48M|        !std::is_same_v<T, custom_char_traits>,
 5479|  1.48M|        "\n"
 5480|  1.48M|        "Unsupported range type given as input to a scanning "
 5481|  1.48M|        "function.\n"
 5482|  1.48M|        "String types (std::basic_string, and std::basic_string_view) "
 5483|  1.48M|        "need to use std::char_traits. Strings with custom Traits are "
 5484|  1.48M|        "not supported.");
 5485|  1.48M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|  1.48M|                  "\n"
 5487|  1.48M|                  "Unsupported range type given as input to a scanning "
 5488|  1.48M|                  "function.\n"
 5489|  1.48M|                  "file_marker_found cannot be used as an "
 5490|  1.48M|                  "source range type to scn::scan.\n"
 5491|  1.48M|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|  1.48M|                  "and do not provide an explicit source range, "
 5493|  1.48M|                  "or use scn::scan with a FILE* directly.");
 5494|  1.48M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|  1.48M|                  "\n"
 5496|  1.48M|                  "Unsupported range type given as input to a scanning "
 5497|  1.48M|                  "function.\n"
 5498|  1.48M|                  "In order to be scannable, a range needs to satisfy "
 5499|  1.48M|                  "`forward_range`. `input_range` is not sufficient.");
 5500|  1.48M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|  1.48M|                  "\n"
 5502|  1.48M|                  "Unsupported range type given as input to a scanning "
 5503|  1.48M|                  "function.\n"
 5504|  1.48M|                  "A range needs to model forward_range and have a valid "
 5505|  1.48M|                  "character type (char or wchar_t) to be scannable.\n"
 5506|  1.48M|                  "Examples of scannable ranges are std::string, "
 5507|  1.48M|                  "std::string_view, "
 5508|  1.48M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|  1.48M|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|  1.48M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|  1.48M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5403|  1.48M|{
 5404|  1.48M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5405|  1.48M|        return std::basic_string_view<detail::char_t<Range>>{ranges::data(r),
 5406|  1.48M|                                                             ranges::size(r)};
 5407|       |    }
 5408|       |    else {
 5409|       |        return invalid_char_type{};
 5410|       |    }
 5411|  1.48M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  1.48M|    {
 3032|  1.48M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  1.48M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  1.48M|    {
 3013|  1.48M|        return t.data();
 3014|  1.48M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3414|  1.48M|    {
 3415|  1.48M|        return detail::to_address(ranges::begin(derived()));
 3416|  1.48M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|  5.61M|{
  341|  5.61M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|  5.61M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|  5.61M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  318|   189M|{
  319|   189M|    return p;
  320|   189M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  2.92M|    {
 2901|  2.92M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  2.92M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  2.92M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  2.92M|    {
 2882|  2.92M|        return decay_copy(t.begin());
 2883|  2.92M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3512|   157M|    {
 3513|   157M|        return m_iterator;
 3514|   157M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3370|  1.48M|    {
 3371|  1.48M|        return static_cast<const D&>(*this);
 3372|  1.48M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3106|  1.48M|    {
 3107|  1.48M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  1.48M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3072|  1.48M|    {
 3073|  1.48M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  1.48M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3529|  3.55M|    {
 3530|  3.55M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3531|  3.55M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1647|  46.6k|        : base(unexpect, std::move(e.error())),
 1648|  46.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  46.6k|    {
 1650|  46.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  482|  46.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  46.6k|          m_has_value(false)
  484|  46.6k|    {
  485|  46.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.48M|    {
 1348|  1.48M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6879|  1.43M|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|  1.43M|                      ranges::iterator_t<SourceRange>>) {
 6882|  1.43M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|  1.43M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  4.11M|    {
 2901|  4.11M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  4.11M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  4.11M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  4.11M|    {
 2882|  4.11M|        return decay_copy(t.begin());
 2883|  4.11M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6866|  1.43M|{
 6867|  1.43M|    return ranges::end(source);
 6868|  1.43M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.43M|    {
 2958|  1.43M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.43M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.43M|    {
 2940|  1.43M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.43M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.43M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3517|   149M|    {
 3518|   149M|        return m_sentinel;
 3519|   149M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|  1.43M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.43M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.43M|    {
 1604|  1.43M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  473|  1.43M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.43M|    {
  475|  1.43M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8962|   597k|    {
 8963|   597k|        return m_str;
 8964|   597k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|  1.19M|{
 6275|  1.19M|    detail::check_scan_arg_types<Args...>();
 6276|  1.19M|    return detail::scan_arg_store<Context, Args...>(values);
 6277|  1.19M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5985|  1.48M|{
 5986|  1.48M|    constexpr bool default_constructible_constraint =
 5987|  1.48M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|  1.48M|    static_assert(default_constructible_constraint,
 5989|  1.48M|                  "Scan argument types must be default constructible");
 5990|       |
 5991|  1.48M|    constexpr bool destructible_constraint =
 5992|  1.48M|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|  1.48M|    static_assert(destructible_constraint,
 5994|  1.48M|                  "Scan argument types must be Destructible");
 5995|       |
 5996|  1.48M|    constexpr bool non_reference_constraint =
 5997|  1.48M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|  1.48M|    static_assert(non_reference_constraint,
 5999|  1.48M|                  "Scan argument types must not be references");
 6000|       |
 6001|  1.48M|    constexpr bool movable_constraint =
 6002|  1.48M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|  1.48M|    static_assert(movable_constraint,
 6004|  1.48M|                  "Scan argument types must be move constructible");
 6005|       |
 6006|  1.48M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|  1.48M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|  1.48M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6250|  1.19M|        : args(std::apply(make_argptrs<Args...>, a))
 6251|  1.19M|    {
 6252|  1.19M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|  1.19M|    {
 6260|  1.19M|        return {detail::make_arg<
 6261|  1.19M|            kind, Context,
 6262|  1.19M|            mapped_type_constant<remove_cvref_t<A>,
 6263|  1.19M|                                 typename Context::char_type>::value>(args)...};
 6264|  1.19M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 6035|  1.19M|{
 6036|  1.19M|    return make_value<Context>(value).ref_value;
 6037|  1.19M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5970|  1.48M|{
 5971|  1.48M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|  1.48M|                                  needs_context_tag>) {
 5975|  1.48M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|  1.48M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5772|  1.48M|    {                                                                        \
 5773|  1.48M|        return val;                                                          \
 5774|  1.48M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5939|  1.48M|{
 5940|  1.48M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|  1.48M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|  1.48M|    constexpr bool scannable_char =
 5944|  1.48M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|  1.48M|    static_assert(scannable_char,
 5946|  1.48M|                  "Cannot scan an argument of an unsupported character "
 5947|  1.48M|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|  1.48M|    constexpr bool scannable_const =
 5950|  1.48M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|  1.48M|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|  1.48M|    constexpr bool scannable_disabled =
 5954|  1.48M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|  1.48M|    static_assert(scannable_disabled,
 5956|  1.48M|                  "Cannot scan an argument that has been disabled by "
 5957|  1.48M|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|  1.48M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|  1.48M|    static_assert(
 5961|  1.48M|        scannable,
 5962|  1.48M|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|  1.48M|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|  1.48M|    return arg_value{arg};
 5966|  1.48M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5715|  1.48M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|  1.48M|    {
 5717|  1.48M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6558|  1.19M|    {
 6559|  1.19M|        return m_values;
 6560|  1.19M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|  1.19M|        : basic_scan_args(store.desc, store.args.data())
 6301|  1.19M|    {
 6302|  1.19M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6352|  1.79M|        : m_desc(desc), m_builtin_values(data)
 6353|  1.79M|    {
 6354|  1.79M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3496|  58.2M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  58.2M|    static_cast<    \
  |  | 1084|  58.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  58.2M|    static_cast<    \
  |  | 1084|  58.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  58.2M|    {
 3498|  58.2M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8644|  1.79M|{
 8645|  1.79M|    return s;
 8646|  1.79M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8616|  1.79M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   597k|        : m_str(r.str)
 8958|   597k|    {
 8959|   597k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   743k|    {
 1772|   743k|        return has_value();
 1773|   743k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1846|  2.18M|    {
 1847|  2.18M|        return &value();
 1848|  2.18M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1800|  2.18M|    {
 1801|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.18M|        return this->get_value();
 1803|  2.18M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6638|  1.43M|    {
 6639|  1.43M|        return ranges::begin(m_range);
 6640|  1.43M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|   766k|    {
  676|   766k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 719k, False: 46.6k]
  ------------------
  677|   719k|            destroy_value();
  678|   719k|        }
  679|  46.6k|        else {
  680|  46.6k|            destroy_unexpected();
  681|  46.6k|        }
  682|   766k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9719|   597k|{
 9720|   597k|#if !SCN_DISABLE_LOCALE
 9721|   597k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   597k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   597k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   597k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   597k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   597k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 21.5k, False: 575k]
  |  |  ------------------
  ------------------
 9728|  21.5k|        return unexpected(result.error());
 9729|  21.5k|    }
 9730|   575k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   575k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   597k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|   291k|{
 9744|   291k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|   291k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|   291k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.58k, False: 287k]
  |  |  ------------------
  ------------------
 9748|  3.58k|        return unexpected(result.error());
 9749|  3.58k|    }
 9750|   287k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|   291k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 6020|   291k|{
 6021|   291k|    check_scan_arg_types<T>();
 6022|       |
 6023|   291k|    basic_scan_arg<Context> arg;
 6024|   291k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|   291k|    arg.m_value = make_value<Context>(value);
 6026|   291k|    return arg;
 6027|   291k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6118|  2.22M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|   291k|    {
 6581|   291k|        return std::get<0>(m_values);
 6582|   291k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9960|   743k|{
 9961|   743k|    return scan_result_type<Source, Args...>();
 9962|   743k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   743k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  459|   743k|        : m_value(T{}), m_has_value(true)
  460|   743k|    {
  461|   743k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6775|   743k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6549|   743k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9945|   743k|{
 9946|   743k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   743k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 23.3k, False: 719k]
  |  |  ------------------
  ------------------
 9947|  23.3k|        out = unexpected(in.error());
 9948|  23.3k|    }
 9949|   719k|    else {
 9950|   719k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   719k|    static_cast<    \
  |  | 1084|   719k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   719k|    }
 9952|   743k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1647|  23.3k|        : base(unexpect, std::move(e.error())),
 1648|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.3k|    {
 1650|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  482|  23.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  23.3k|          m_has_value(false)
  484|  23.3k|    {
  485|  23.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  23.3k|    {
 1348|  23.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1588|  23.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  934|  23.3k|    {
  935|  23.3k|        assign_common(std::move(other));
  936|  23.3k|        return *this;
  937|  23.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  981|  23.3k|    {
  982|  23.3k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 23.3k, False: 0]
  ------------------
  983|  23.3k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 23.3k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  23.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  23.3k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  522|  2.97M|    {
  523|  2.97M|        return m_has_value;
  524|  2.97M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  488|  2.18M|    {
  489|  2.18M|        return m_value;
  490|  2.18M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1077|  23.3k|    {
 1078|  23.3k|        this->destroy_value();
 1079|  23.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  543|  23.3k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  536|  23.3k|    {
  537|  23.3k|        scn::detail::construct_at(&get_unexpected(),
  538|  23.3k|                                  std::forward<Args>(args)...);
  539|  23.3k|        m_has_value = false;
  540|  23.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  23.3k|    {
  506|  23.3k|        return m_unexpected;
  507|  23.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  513|  23.3k|    {
  514|  23.3k|        return std::move(m_unexpected);
  515|  23.3k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8962|   597k|    {
 8963|   597k|        return m_str;
 8964|   597k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6274|   597k|{
 6275|   597k|    detail::check_scan_arg_types<Args...>();
 6276|   597k|    return detail::scan_arg_store<Context, Args...>(values);
 6277|   597k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5985|   743k|{
 5986|   743k|    constexpr bool default_constructible_constraint =
 5987|   743k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5988|   743k|    static_assert(default_constructible_constraint,
 5989|   743k|                  "Scan argument types must be default constructible");
 5990|       |
 5991|   743k|    constexpr bool destructible_constraint =
 5992|   743k|        std::conjunction_v<std::is_destructible<Args>...>;
 5993|   743k|    static_assert(destructible_constraint,
 5994|   743k|                  "Scan argument types must be Destructible");
 5995|       |
 5996|   743k|    constexpr bool non_reference_constraint =
 5997|   743k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5998|   743k|    static_assert(non_reference_constraint,
 5999|   743k|                  "Scan argument types must not be references");
 6000|       |
 6001|   743k|    constexpr bool movable_constraint =
 6002|   743k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 6003|   743k|    static_assert(movable_constraint,
 6004|   743k|                  "Scan argument types must be move constructible");
 6005|       |
 6006|   743k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (6006:12): [Folded - Ignored]
  |  Branch (6006:48): [Folded - Ignored]
  ------------------
 6007|   743k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (6007:12): [Folded - Ignored]
  |  Branch (6007:40): [Folded - Ignored]
  ------------------
 6008|   743k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6250|   597k|        : args(std::apply(make_argptrs<Args...>, a))
 6251|   597k|    {
 6252|   597k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6259|   597k|    {
 6260|   597k|        return {detail::make_arg<
 6261|   597k|            kind, Context,
 6262|   597k|            mapped_type_constant<remove_cvref_t<A>,
 6263|   597k|                                 typename Context::char_type>::value>(args)...};
 6264|   597k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE26ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 6035|   597k|{
 6036|   597k|    return make_value<Context>(value).ref_value;
 6037|   597k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5970|   743k|{
 5971|   743k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5972|       |
 5973|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5974|   743k|                                  needs_context_tag>) {
 5975|   743k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1085|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5976|       |    }
 5977|       |    else {
 5978|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5979|       |            value, context_tag<Context>{}));
 5980|       |    }
 5981|   743k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5772|   743k|    {                                                                        \
 5773|   743k|        return val;                                                          \
 5774|   743k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5939|   743k|{
 5940|   743k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5941|   743k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5942|       |
 5943|   743k|    constexpr bool scannable_char =
 5944|   743k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5945|   743k|    static_assert(scannable_char,
 5946|   743k|                  "Cannot scan an argument of an unsupported character "
 5947|   743k|                  "type (i.e. char from a wchar_t source)");
 5948|       |
 5949|   743k|    constexpr bool scannable_const =
 5950|   743k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5951|   743k|    static_assert(scannable_const, "Cannot scan a const argument");
 5952|       |
 5953|   743k|    constexpr bool scannable_disabled =
 5954|   743k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5955|   743k|    static_assert(scannable_disabled,
 5956|   743k|                  "Cannot scan an argument that has been disabled by "
 5957|   743k|                  "flag (SCN_DISABLE_TYPE_*)");
 5958|       |
 5959|   743k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5960|   743k|    static_assert(
 5961|   743k|        scannable,
 5962|   743k|        "Cannot scan an argument. To make a type T scannable, provide "
 5963|   743k|        "a scn::scanner<T, CharT> specialization.");
 5964|       |
 5965|   743k|    return arg_value{arg};
 5966|   743k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5715|   743k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5716|   743k|    {
 5717|   743k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6558|   597k|    {
 6559|   597k|        return m_values;
 6560|   597k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6300|   597k|        : basic_scan_args(store.desc, store.args.data())
 6301|   597k|    {
 6302|   597k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   597k|        : m_str(r.str)
 8958|   597k|    {
 8959|   597k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   743k|    {
 1772|   743k|        return has_value();
 1773|   743k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1846|  2.18M|    {
 1847|  2.18M|        return &value();
 1848|  2.18M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1800|  2.18M|    {
 1801|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.18M|        return this->get_value();
 1803|  2.18M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 6020|   145k|{
 6021|   145k|    check_scan_arg_types<T>();
 6022|       |
 6023|   145k|    basic_scan_arg<Context> arg;
 6024|   145k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 6025|   145k|    arg.m_value = make_value<Context>(value);
 6026|   145k|    return arg;
 6027|   145k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6580|   145k|    {
 6581|   145k|        return std::get<0>(m_values);
 6582|   145k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  23.3k|    {
 2901|  23.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  23.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  23.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  23.3k|    {
 2882|  23.3k|        return decay_copy(t.begin());
 2883|  23.3k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2125|  73.8M|{
 2126|  73.8M|    return SCN_FWD(t);
  ------------------
  |  | 1085|  73.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2127|  73.8M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  1.48M|    {
 2958|  1.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  1.48M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  1.48M|    {
 2940|  1.48M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.48M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9960|   743k|{
 9961|   743k|    return scan_result_type<Source, Args...>();
 9962|   743k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1583|   743k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  644|   743k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  645|   743k|    {
  646|   743k|        construct();
  647|   743k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  726|   743k|    {
  727|   743k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  728|   743k|        m_has_value = true;
  729|   743k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  428|   743k|{
  429|   743k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  430|   743k|        T(std::forward<Args>(args)...);
  431|   743k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6775|   743k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6618|   743k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3491|   743k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  750|  3.66M|    {
  751|  3.66M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1049|  3.66M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  752|  3.66M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9945|   743k|{
 9946|   743k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1014|   743k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 23.3k, False: 719k]
  |  |  ------------------
  ------------------
 9947|  23.3k|        out = unexpected(in.error());
 9948|  23.3k|    }
 9949|   719k|    else {
 9950|   719k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1083|   719k|    static_cast<    \
  |  | 1084|   719k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9951|   719k|    }
 9952|   743k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1771|   743k|    {
 1772|   743k|        return has_value();
 1773|   743k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.48M|    {
  523|  1.48M|        return m_has_value;
  524|  1.48M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1777|  23.3k|    {
 1778|  23.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  23.3k|        return this->get_unexpected().error();
 1780|  23.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  23.3k|    {
  506|  23.3k|        return m_unexpected;
  507|  23.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1647|  23.3k|        : base(unexpect, std::move(e.error())),
 1648|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.3k|    {
 1650|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  669|  23.3k|        : m_has_value(false)
  670|  23.3k|    {
  671|  23.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  672|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  733|  23.3k|    {
  734|  23.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  23.3k|                                  std::forward<Args>(args)...);
  736|  23.3k|        m_has_value = false;
  737|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  762|   116k|    {
  763|   116k|        return reinterpret_cast<unexpected<E>*>(
  764|   116k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1049|   116k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  765|   116k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  23.3k|    {
 1348|  23.3k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1588|  23.3k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  934|  23.3k|    {
  935|  23.3k|        assign_common(std::move(other));
  936|  23.3k|        return *this;
  937|  23.3k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  981|  23.3k|    {
  982|  23.3k|        if (this->has_value()) {
  ------------------
  |  Branch (982:13): [True: 23.3k, False: 0]
  ------------------
  983|  23.3k|            if (other.has_value()) {
  ------------------
  |  Branch (983:17): [True: 0, False: 23.3k]
  ------------------
  984|      0|                return reassign_value(std::forward<Other>(other));
  985|      0|            }
  986|  23.3k|            return assign_unexpected_over_value(std::forward<Other>(other));
  987|  23.3k|        }
  988|       |
  989|      0|        if (other.has_value()) {
  ------------------
  |  Branch (989:13): [True: 0, False: 0]
  ------------------
  990|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  991|      0|        }
  992|      0|        return reassign_unexpected(std::forward<Other>(other));
  993|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  719|  3.73M|    {
  720|  3.73M|        return m_has_value;
  721|  3.73M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  685|  2.18M|    {
  686|  2.18M|        return *value_ptr();
  687|  2.18M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1077|  23.3k|    {
 1078|  23.3k|        this->destroy_value();
 1079|  23.3k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1080|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  740|   743k|    {
  741|   743k|        scn::detail::destroy_at(value_ptr());
  742|   743k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  434|   743k|{
  435|       |    if constexpr (std::is_array_v<T>) {
  436|       |        for (auto& elem : *p) {
  437|       |            scn::detail::destroy_at(&elem);
  438|       |        }
  439|       |    }
  440|   743k|    else {
  441|   743k|        p->~T();
  442|   743k|    }
  443|   743k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6782|   743k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  733|  23.3k|    {
  734|  23.3k|        scn::detail::construct_at(unexpected_ptr(),
  735|  23.3k|                                  std::forward<Args>(args)...);
  736|  23.3k|        m_has_value = false;
  737|  23.3k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  710|  23.3k|    {
  711|  23.3k|        return std::move(*unexpected_ptr());
  712|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  744|  46.6k|    {
  745|  46.6k|        scn::detail::destroy_at(unexpected_ptr());
  746|  46.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6649|   719k|    {
 6650|   719k|        m_range = std::forward<Other>(r);
 6651|   719k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1826|   719k|    {
 1827|   719k|        return value();
 1828|   719k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1800|   719k|    {
 1801|   719k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   719k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   719k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   719k|        return this->get_value();
 1803|   719k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  488|   719k|    {
  489|   719k|        return m_value;
  490|   719k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9703|   298k|{
 9704|   298k|    auto buffer = make_scan_buffer(range);
 9705|       |
 9706|   298k|    auto result = vscan_impl(buffer, format, args);
 9707|   298k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.7k, False: 287k]
  |  |  ------------------
  ------------------
 9708|  10.7k|        return unexpected(result.error());
 9709|  10.7k|    }
 9710|   287k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9711|   298k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5465|   743k|{
 5466|   743k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5467|       |
 5468|   743k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5469|   743k|                  "\n"
 5470|   743k|                  "Unsupported range type given as input to a scanning "
 5471|   743k|                  "function.\n"
 5472|   743k|                  "A range needs to have a character type (value type) "
 5473|   743k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5474|   743k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5475|   743k|                  "to be included.\n"
 5476|   743k|                  "See the scnlib documentation for more details.");
 5477|   743k|    static_assert(
 5478|   743k|        !std::is_same_v<T, custom_char_traits>,
 5479|   743k|        "\n"
 5480|   743k|        "Unsupported range type given as input to a scanning "
 5481|   743k|        "function.\n"
 5482|   743k|        "String types (std::basic_string, and std::basic_string_view) "
 5483|   743k|        "need to use std::char_traits. Strings with custom Traits are "
 5484|   743k|        "not supported.");
 5485|   743k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5486|   743k|                  "\n"
 5487|   743k|                  "Unsupported range type given as input to a scanning "
 5488|   743k|                  "function.\n"
 5489|   743k|                  "file_marker_found cannot be used as an "
 5490|   743k|                  "source range type to scn::scan.\n"
 5491|   743k|                  "To read from stdin, use scn::input or scn::prompt, "
 5492|   743k|                  "and do not provide an explicit source range, "
 5493|   743k|                  "or use scn::scan with a FILE* directly.");
 5494|   743k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5495|   743k|                  "\n"
 5496|   743k|                  "Unsupported range type given as input to a scanning "
 5497|   743k|                  "function.\n"
 5498|   743k|                  "In order to be scannable, a range needs to satisfy "
 5499|   743k|                  "`forward_range`. `input_range` is not sufficient.");
 5500|   743k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5501|   743k|                  "\n"
 5502|   743k|                  "Unsupported range type given as input to a scanning "
 5503|   743k|                  "function.\n"
 5504|   743k|                  "A range needs to model forward_range and have a valid "
 5505|   743k|                  "character type (char or wchar_t) to be scannable.\n"
 5506|   743k|                  "Examples of scannable ranges are std::string, "
 5507|   743k|                  "std::string_view, "
 5508|   743k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5509|   743k|                  "See the scnlib documentation for more details.");
 5510|       |
 5511|   743k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5512|   743k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5435|   743k|{
 5436|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5437|       |        return file_marker_found{};
 5438|       |    }
 5439|       |    else if constexpr (!ranges::forward_range<Range>) {
 5440|       |        if constexpr (ranges::range<Range>) {
 5441|       |            return insufficient_range{};
 5442|       |        }
 5443|       |        else {
 5444|       |            return invalid_input_range{};
 5445|       |        }
 5446|       |    }
 5447|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5448|       |        return invalid_char_type{};
 5449|       |    }
 5450|   743k|    else {
 5451|   743k|        return make_forward_scan_buffer(r);
 5452|   743k|    }
 5453|   743k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5268|   743k|{
 5269|   743k|    return basic_scan_forward_buffer_impl(range);
 5270|   743k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4828|   743k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1085|   743k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4829|   743k|          m_cursor(ranges::begin(*m_range))
 4830|   743k|    {
 4831|   743k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4800|   743k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4801|   743k|    {
 4802|   743k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4491|   743k|        : m_current_view(sv), m_is_contiguous(false)
 4492|   743k|    {
 4493|   743k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4396|   743k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|  1.46M|    {
 2901|  1.46M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  1.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|  1.46M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|  1.46M|    {
 2882|  1.46M|        return decay_copy(t.begin());
 2883|  1.46M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3512|  2.18M|    {
 3513|  2.18M|        return m_iterator;
 3514|  2.18M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4834|  23.1M|    {
 4835|  23.1M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4835:13): [True: 21.3k, False: 23.1M]
  ------------------
 4836|  21.3k|            return false;
 4837|  21.3k|        }
 4838|  23.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4839|  23.1M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1079|  23.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4840|  23.1M|        }
 4841|  23.1M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4841:13): [True: 22.4M, False: 730k]
  ------------------
 4842|  22.4M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4843|  22.4M|                                          this->m_current_view.begin(),
 4844|  22.4M|                                          this->m_current_view.end());
 4845|  22.4M|        }
 4846|  23.1M|        m_latest = *m_cursor;
 4847|  23.1M|        ++m_cursor;
 4848|  23.1M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4849|  23.1M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4850|  23.1M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1079|  23.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4851|  23.1M|        }
 4852|  23.1M|        return true;
 4853|  23.1M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|  69.4M|    {
 2958|  69.4M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|  69.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|  69.4M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|  69.4M|    {
 2940|  69.4M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|  69.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  69.4M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3517|  70.1M|    {
 3518|  70.1M|        return m_sentinel;
 3519|  70.1M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4401|   743k|    {
 4402|   743k|        SCN_UNUSED(position);
  ------------------
  |  | 1064|   743k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4403|   743k|        return true;
 4404|   743k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1647|  23.3k|        : base(unexpect, std::move(e.error())),
 1648|  23.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  23.3k|    {
 1650|  23.3k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  482|  23.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  23.3k|          m_has_value(false)
  484|  23.3k|    {
  485|  23.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   743k|    {
 1348|   743k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6879|   719k|{
 6880|       |    if constexpr (ranges::random_access_iterator<
 6881|   719k|                      ranges::iterator_t<SourceRange>>) {
 6882|   719k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6883|       |    }
 6884|       |    else {
 6885|       |        auto it = ranges::begin(source);
 6886|       |        while (n > 0) {
 6887|       |            --n;
 6888|       |            ++it;
 6889|       |        }
 6890|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6891|       |    }
 6892|   719k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2900|   719k|    {
 2901|   719k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   719k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2902|   719k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2881|   719k|    {
 2882|   719k|        return decay_copy(t.begin());
 2883|   719k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6866|   719k|{
 6867|   719k|    return ranges::end(source);
 6868|   719k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2957|   719k|    {
 2958|   719k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1085|   719k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2959|   719k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2939|   719k|    {
 2940|   719k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1085|   719k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   719k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1601|   719k|        : base(std::in_place, std::forward<U>(val)),
 1602|   719k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   719k|    {
 1604|   719k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  473|   719k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   719k|    {
  475|   719k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8962|   597k|    {
 8963|   597k|        return m_str;
 8964|   597k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3496|  1.46M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.46M|    static_cast<    \
  |  | 1084|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.46M|    static_cast<    \
  |  | 1084|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  1.46M|    {
 3498|  1.46M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8957|   597k|        : m_str(r.str)
 8958|   597k|    {
 8959|   597k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1771|   743k|    {
 1772|   743k|        return has_value();
 1773|   743k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1846|  2.18M|    {
 1847|  2.18M|        return &value();
 1848|  2.18M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1800|  2.18M|    {
 1801|  2.18M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  2.18M|        return this->get_value();
 1803|  2.18M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6638|   719k|    {
 6639|   719k|        return ranges::begin(m_range);
 6640|   719k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  675|   766k|    {
  676|   766k|        if (has_value()) {
  ------------------
  |  Branch (676:13): [True: 719k, False: 46.6k]
  ------------------
  677|   719k|            destroy_value();
  678|   719k|        }
  679|  46.6k|        else {
  680|  46.6k|            destroy_unexpected();
  681|  46.6k|        }
  682|   766k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9719|   298k|{
 9720|   298k|#if !SCN_DISABLE_LOCALE
 9721|   298k|    auto buffer = detail::make_scan_buffer(range);
 9722|       |
 9723|   298k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9724|   298k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9725|   298k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9726|       |
 9727|   298k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.7k, False: 287k]
  |  |  ------------------
  ------------------
 9728|  10.7k|        return unexpected(result.error());
 9729|  10.7k|    }
 9730|   287k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9731|       |#else
 9732|       |    static_assert(dependent_false<Locale>::value,
 9733|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9734|       |
 9735|       |    return {};
 9736|       |#endif
 9737|   298k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9743|   145k|{
 9744|   145k|    auto buffer = detail::make_scan_buffer(range);
 9745|       |
 9746|   145k|    auto result = detail::vscan_value_impl(buffer, arg);
 9747|   145k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1014|   145k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.79k, False: 143k]
  |  |  ------------------
  ------------------
 9748|  1.79k|        return unexpected(result.error());
 9749|  1.79k|    }
 9750|   143k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1085|   143k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9751|   145k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3785|   137k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3786|   137k|    {
 3787|   137k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1064|   137k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3788|   137k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   118k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   118k|    else {
 4037|   118k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   118k|    }
 4039|   118k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  5.01M|    {
 3513|  5.01M|        return m_iterator;
 3514|  5.01M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3512|  75.8M|    {
 3513|  75.8M|        return m_iterator;
 3514|  75.8M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  604|  8.08M|    {
  605|  8.08M|        return m_has_value;
  606|  8.08M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  587|  96.8k|    {
  588|  96.8k|        return m_unexpected;
  589|  96.8k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1777|  96.8k|    {
 1778|  96.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  96.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  96.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  96.8k|        return this->get_unexpected().error();
 1780|  96.8k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7185|  1.06M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7208|  32.2k|    {
 7209|  32.2k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7209:13): [True: 0, False: 32.2k]
  |  Branch (7209:39): [True: 0, False: 0]
  ------------------
 7210|       |            // clang-format off
 7211|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7212|       |            // clang-format on
 7213|      0|        }
 7214|       |
 7215|  32.2k|        m_specs.width = width;
 7216|  32.2k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7229|  1.03M|    {
 7230|  1.03M|        m_specs.type = type;
 7231|  1.03M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7246|  37.2k|    {
 7247|  37.2k|        const auto begin_value = static_cast<unsigned>(begin);
 7248|  37.2k|        const auto end_value = static_cast<unsigned>(end);
 7249|  37.2k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  | 1079|  37.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  37.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7250|       |
 7251|  37.2k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  | 1013|  37.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 37.2k, False: 0]
  |  |  ------------------
  ------------------
 7252|       |            // No need to bit-twiddle with a mask, because with the
 7253|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7254|  37.2k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  | 1033|  37.2k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7255|  1.00M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7255:40): [True: 969k, False: 37.2k]
  ------------------
 7256|   969k|                m_specs.charset_literals[v / 8] |=
 7257|   969k|                    static_cast<unsigned char>(1ul << (v % 8));
 7258|   969k|            }
 7259|  37.2k|        }
 7260|      0|        else {
 7261|      0|            m_specs.charset_has_nonascii = true;
 7262|      0|        }
 7263|  37.2k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7293|  32.2k|    {
 7294|  32.2k|        SCN_UNLIKELY_ATTR
 7295|  32.2k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7296|  32.2k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7304|  1.12M|    {
 7305|  1.12M|        return m_error;
 7306|  1.12M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3971|   124k|{
 3972|   124k|    return unexpected(scan_error{c, m});
 3973|   124k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4363|  71.1M|{
 4364|       |    // Pattern_White_Space property
 4365|  71.1M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4365:13): [True: 13.8M, False: 57.3M]
  |  Branch (4365:27): [True: 2.70M, False: 11.0M]
  ------------------
 4366|  71.1M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4366:12): [True: 2.01M, False: 66.3M]
  ------------------
 4367|  71.1M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4367:12): [True: 367k, False: 66.0M]
  ------------------
 4368|  71.1M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4368:12): [True: 183k, False: 65.8M]
  ------------------
 4369|  71.1M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4369:12): [True: 292k, False: 65.5M]
  ------------------
 4370|  71.1M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4370:12): [True: 194k, False: 65.3M]
  ------------------
 4371|  71.1M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4371:12): [True: 0, False: 65.3M]
  ------------------
 4372|  71.1M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7989|  16.1k|{
 7990|  16.1k|    switch (type) {
 7991|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7991:9): [True: 0, False: 16.1k]
  ------------------
 7992|      0|            return arg_type_category::none;
 7993|       |
 7994|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7994:9): [True: 0, False: 16.1k]
  ------------------
 7995|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7995:9): [True: 0, False: 16.1k]
  ------------------
 7996|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7996:9): [True: 0, False: 16.1k]
  ------------------
 7997|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7997:9): [True: 0, False: 16.1k]
  ------------------
 7998|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7998:9): [True: 0, False: 16.1k]
  ------------------
 7999|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7999:9): [True: 0, False: 16.1k]
  ------------------
 8000|      0|            return arg_type_category::integer;
 8001|       |
 8002|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (8002:9): [True: 0, False: 16.1k]
  ------------------
 8003|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (8003:9): [True: 0, False: 16.1k]
  ------------------
 8004|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (8004:9): [True: 0, False: 16.1k]
  ------------------
 8005|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (8005:9): [True: 0, False: 16.1k]
  ------------------
 8006|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (8006:9): [True: 0, False: 16.1k]
  ------------------
 8007|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (8007:9): [True: 0, False: 16.1k]
  ------------------
 8008|      0|            return arg_type_category::unsigned_integer;
 8009|       |
 8010|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (8010:9): [True: 0, False: 16.1k]
  ------------------
 8011|      0|            return arg_type_category::pointer;
 8012|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (8012:9): [True: 0, False: 16.1k]
  ------------------
 8013|      0|            return arg_type_category::boolean;
 8014|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (8014:9): [True: 0, False: 16.1k]
  ------------------
 8015|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (8015:9): [True: 0, False: 16.1k]
  ------------------
 8016|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (8016:9): [True: 0, False: 16.1k]
  ------------------
 8017|      0|            return arg_type_category::character;
 8018|       |
 8019|      0|        case arg_type::float_type:
  ------------------
  |  Branch (8019:9): [True: 0, False: 16.1k]
  ------------------
 8020|      0|        case arg_type::double_type:
  ------------------
  |  Branch (8020:9): [True: 0, False: 16.1k]
  ------------------
 8021|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (8021:9): [True: 0, False: 16.1k]
  ------------------
 8022|      0|        case arg_type::float16_type:
  ------------------
  |  Branch (8022:9): [True: 0, False: 16.1k]
  ------------------
 8023|      0|        case arg_type::float32_type:
  ------------------
  |  Branch (8023:9): [True: 0, False: 16.1k]
  ------------------
 8024|      0|        case arg_type::float64_type:
  ------------------
  |  Branch (8024:9): [True: 0, False: 16.1k]
  ------------------
 8025|      0|        case arg_type::float128_type:
  ------------------
  |  Branch (8025:9): [True: 0, False: 16.1k]
  ------------------
 8026|      0|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (8026:9): [True: 0, False: 16.1k]
  ------------------
 8027|      0|            return arg_type_category::floating;
 8028|       |
 8029|  3.58k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (8029:9): [True: 3.58k, False: 12.5k]
  ------------------
 8030|  10.7k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (8030:9): [True: 7.17k, False: 8.97k]
  ------------------
 8031|  16.1k|        case arg_type::string_view_type:
  ------------------
  |  Branch (8031:9): [True: 5.38k, False: 10.7k]
  ------------------
 8032|  16.1k|            return arg_type_category::string;
 8033|       |
 8034|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (8034:9): [True: 0, False: 16.1k]
  ------------------
 8035|      0|            return arg_type_category::custom;
 8036|       |
 8037|      0|            SCN_CLANG_PUSH
 8038|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8039|      0|        default:
  ------------------
  |  Branch (8039:9): [True: 0, False: 16.1k]
  ------------------
 8040|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8041|  16.1k|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8042|  16.1k|            SCN_CLANG_POP
 8043|  16.1k|    }
 8044|       |
 8045|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8046|  16.1k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1771|  7.99M|    {
 1772|  7.99M|        return has_value();
 1773|  7.99M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8137|  1.03M|{
 8138|  1.03M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (8138:9): [True: 0, False: 1.03M]
  ------------------
 8139|  1.03M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (8139:9): [True: 1.00M, False: 34.7k]
  ------------------
 8140|  1.03M|        specs.type == presentation_type::string_set
  ------------------
  |  Branch (8140:9): [True: 18.6k, False: 16.1k]
  ------------------
 8141|  1.03M|#if !SCN_DISABLE_REGEX
 8142|  1.03M|        || specs.type == presentation_type::regex ||
  ------------------
  |  Branch (8142:12): [True: 0, False: 16.1k]
  ------------------
 8143|  1.03M|        specs.type == presentation_type::regex_escaped
  ------------------
  |  Branch (8143:9): [True: 0, False: 16.1k]
  ------------------
 8144|  1.03M|#endif
 8145|  1.03M|    ) {
 8146|  1.01M|        return;
 8147|  1.01M|    }
 8148|  16.1k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (8148:9): [True: 16.1k, False: 0]
  ------------------
 8149|  16.1k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  | 1014|  16.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 16.1k, False: 0]
  |  |  ------------------
  ------------------
 8150|       |            // clang-format off
 8151|  16.1k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 8152|       |            // clang-format on
 8153|  16.1k|        }
 8154|      0|        return;
 8155|  16.1k|    }
 8156|      0|    SCN_UNLIKELY_ATTR
 8157|      0|    handler.on_error("Invalid type specifier for string");
 8158|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4536|  27.0M|    {
 4537|  27.0M|        assert(m_begin);
 4538|  27.0M|        return m_end == nullptr;
 4539|  27.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4553|   610k|    {
 4554|   610k|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 610k]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|   610k|        return parent()->get_segment_starting_at(position());
 4560|   610k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4547|  15.7M|    {
 4548|  15.7M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|  15.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|  15.7M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|  15.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4436|   610k|    {
 4437|   610k|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|   610k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   610k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|   610k|        const auto upos = static_cast<std::size_t>(pos);
 4439|   610k|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|   610k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 344k, False: 265k]
  |  |  ------------------
  ------------------
 4440|   344k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|   344k|        }
 4442|   265k|        const auto start = upos - m_putback_buffer.size();
 4443|   265k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|   265k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   265k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|   265k|        return m_current_view.substr(start);
 4445|   265k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4531|   687k|    {
 4532|   687k|        return m_position;
 4533|   687k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4462|   391k|    {
 4463|   391k|        return m_is_contiguous;
 4464|   391k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4536|   419M|    {
 4537|   419M|        assert(m_begin);
 4538|   419M|        return m_end == nullptr;
 4539|   419M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 4031|   722k|{
 4032|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4033|       |                                          const CharT*, const CharT*>) {
 4034|       |        return {first, last};
 4035|       |    }
 4036|   722k|    else {
 4037|   722k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4038|   722k|    }
 4039|   722k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4553|  2.18M|    {
 4554|  2.18M|        if (!stores_parent()) {
  ------------------
  |  Branch (4554:13): [True: 0, False: 2.18M]
  ------------------
 4555|      0|            return make_string_view_from_pointers(
 4556|      0|                static_cast<const CharT*>(m_begin) + position(),
 4557|      0|                static_cast<const CharT*>(m_end));
 4558|      0|        }
 4559|  2.18M|        return parent()->get_segment_starting_at(position());
 4560|  2.18M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4547|   244M|    {
 4548|   244M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1079|   244M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   244M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4549|   244M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4550|   244M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4436|  2.18M|    {
 4437|  2.18M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  2.18M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.18M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4438|  2.18M|        const auto upos = static_cast<std::size_t>(pos);
 4439|  2.18M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  2.18M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.44M, False: 739k]
  |  |  ------------------
  ------------------
 4440|  1.44M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(upos);
 4441|  1.44M|        }
 4442|   739k|        const auto start = upos - m_putback_buffer.size();
 4443|   739k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1079|   739k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   739k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4444|   739k|        return m_current_view.substr(start);
 4445|   739k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4531|  2.62M|    {
 4532|  2.62M|        return m_position;
 4533|  2.62M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4462|  2.22M|    {
 4463|  2.22M|        return m_is_contiguous;
 4464|  2.22M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3365|   764k|    {
 3366|   764k|        return static_cast<D&>(*this);
 3367|   764k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3406|   764k|    {
 3407|   764k|        return detail::to_address(ranges::begin(derived()));
 3408|   764k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3365|  2.67M|    {
 3366|  2.67M|        return static_cast<D&>(*this);
 3367|  2.67M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3406|  2.67M|    {
 3407|  2.67M|        return detail::to_address(ranges::begin(derived()));
 3408|  2.67M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9159|  53.3k|    {
 9160|  53.3k|        return ranges::subrange{begin(), end()};
 9161|  53.3k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9151|  53.3k|    {
 9152|  53.3k|        return ranges::default_sentinel;
 9153|  53.3k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|  1.84M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.84M|    static_cast<    \
  |  | 1084|  1.84M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  1.84M|    static_cast<    \
  |  | 1084|  1.84M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  1.84M|    {
 3498|  1.84M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8978|  2.55M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   122k|    {
 2011|   122k|        return detail::transform_error_impl(std::move(*this),
 2012|   122k|                                            std::forward<F>(f));
 2013|   122k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   122k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   122k|    else {
 1504|   122k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   122k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   122k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 120k, False: 2.25k]
  |  |  ------------------
  ------------------
 1506|   122k|                   ? result(*std::forward<Exp>(exp))
 1507|   122k|                   : result(unexpect,
 1508|  2.25k|                            trivial_invoke(std::forward<F>(f),
 1509|  2.25k|                                           std::forward<Exp>(exp).error()));
 1510|   122k|    }
 1511|   122k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   245k|    {
  523|   245k|        return m_has_value;
  524|   245k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   120k|    {
 1837|   120k|        return std::move(value());
 1838|   120k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   120k|    {
 1801|   120k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   120k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   120k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   120k|        return this->get_value();
 1803|   120k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   120k|    {
  489|   120k|        return m_value;
  490|   120k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|   287k|        : base(std::in_place, std::forward<U>(val)),
 1602|   287k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   287k|    {
 1604|   287k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   287k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   287k|    {
  475|   287k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   302k|    {
 1348|   302k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1381|  12.6k|{
 1382|  12.6k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1383|  12.6k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  2.25k|    {
 1788|  2.25k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  2.25k|        return std::move(this->get_unexpected().error());
 1790|  2.25k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  2.25k|    {
  506|  2.25k|        return m_unexpected;
  507|  2.25k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  397|  25.3k|    {
  398|  25.3k|        return m_unexpected;
  399|  25.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|  2.25k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  2.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  2.25k|    {
 1660|  2.25k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  14.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  14.7k|          m_has_value(false)
  484|  14.7k|    {
  485|  14.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9159|   298k|    {
 9160|   298k|        return ranges::subrange{begin(), end()};
 9161|   298k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9151|   298k|    {
 9152|   298k|        return ranges::default_sentinel;
 9153|   298k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3496|  26.6M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  26.6M|    static_cast<    \
  |  | 1084|  26.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|  26.6M|    static_cast<    \
  |  | 1084|  26.6M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|  26.6M|    {
 3498|  26.6M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 2010|   728k|    {
 2011|   728k|        return detail::transform_error_impl(std::move(*this),
 2012|   728k|                                            std::forward<F>(f));
 2013|   728k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1493|   728k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   728k|    else {
 1504|   728k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   728k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   728k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 726k, False: 2.33k]
  |  |  ------------------
  ------------------
 1506|   728k|                   ? result(*std::forward<Exp>(exp))
 1507|   728k|                   : result(unexpect,
 1508|  2.33k|                            trivial_invoke(std::forward<F>(f),
 1509|  2.33k|                                           std::forward<Exp>(exp).error()));
 1510|   728k|    }
 1511|   728k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  1.45M|    {
  523|  1.45M|        return m_has_value;
  524|  1.45M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1836|   726k|    {
 1837|   726k|        return std::move(value());
 1838|   726k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1800|   726k|    {
 1801|   726k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   726k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   726k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   726k|        return this->get_value();
 1803|   726k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   726k|    {
  489|   726k|        return m_value;
  490|   726k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1601|  1.73M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.73M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.73M|    {
 1604|  1.73M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|  1.73M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.73M|    {
  475|  1.73M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.76M|    {
 1348|  1.76M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1787|  2.33k|    {
 1788|  2.33k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  2.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  2.33k|        return std::move(this->get_unexpected().error());
 1790|  2.33k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  2.33k|    {
  506|  2.33k|        return m_unexpected;
  507|  2.33k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1657|  2.33k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  2.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  2.33k|    {
 1660|  2.33k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  28.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.3k|          m_has_value(false)
  484|  28.3k|    {
  485|  28.3k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  380|   124k|        : m_unexpected(std::forward<Err>(e))
  381|   124k|    {
  382|   124k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|   124k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|   124k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   104k|        : base(unexpect, std::move(e.error())),
 1648|   104k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   104k|    {
 1650|   104k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  482|   104k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|   104k|          m_has_value(false)
  484|   104k|    {
  485|   104k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  2.57M|    {
 1348|  2.57M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|  25.5k|        : base(unexpect, std::move(e.error())),
 1648|  25.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  25.5k|    {
 1650|  25.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|  28.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  28.9k|          m_has_value(false)
  484|  28.9k|    {
  485|  28.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   484k|    {
 1348|   484k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|   453k|        : base(std::in_place, std::forward<U>(val)),
 1602|   453k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   453k|    {
 1604|   453k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   453k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   453k|    {
  475|   453k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1771|   484k|    {
 1772|   484k|        return has_value();
 1773|   484k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  522|   968k|    {
  523|   968k|        return m_has_value;
  524|   968k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1777|  28.9k|    {
 1778|  28.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  28.9k|        return this->get_unexpected().error();
 1780|  28.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.9k|    {
  506|  28.9k|        return m_unexpected;
  507|  28.9k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|   378k|    {
 1837|   378k|        return std::move(value());
 1838|   378k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|   455k|    {
 1801|   455k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   455k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   455k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   455k|        return this->get_value();
 1803|   455k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  488|   455k|    {
  489|   455k|        return m_value;
  490|   455k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1647|  51.9k|        : base(unexpect, std::move(e.error())),
 1648|  51.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  51.9k|    {
 1650|  51.9k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  482|  56.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  56.6k|          m_has_value(false)
  484|  56.6k|    {
  485|  56.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  3.52M|    {
 1348|  3.52M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1601|  3.46M|        : base(std::in_place, std::forward<U>(val)),
 1602|  3.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  3.46M|    {
 1604|  3.46M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  3.46M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  3.46M|    {
  475|  3.46M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1771|  3.52M|    {
 1772|  3.52M|        return has_value();
 1773|  3.52M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  522|  7.04M|    {
  523|  7.04M|        return m_has_value;
  524|  7.04M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1777|  56.6k|    {
 1778|  56.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  56.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  56.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  56.6k|        return this->get_unexpected().error();
 1780|  56.6k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  56.6k|    {
  506|  56.6k|        return m_unexpected;
  507|  56.6k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1836|  2.89M|    {
 1837|  2.89M|        return std::move(value());
 1838|  2.89M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1800|  3.46M|    {
 1801|  3.46M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  3.46M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.46M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  3.46M|        return this->get_value();
 1803|  3.46M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  488|  3.46M|    {
  489|  3.46M|        return m_value;
  490|  3.46M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|   194k|    {
 2011|   194k|        return detail::transform_error_impl(std::move(*this),
 2012|   194k|                                            std::forward<F>(f));
 2013|   194k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|   194k|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|   194k|    else {
 1504|   194k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|   194k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|   194k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 191k, False: 3.41k]
  |  |  ------------------
  ------------------
 1506|   194k|                   ? result(*std::forward<Exp>(exp))
 1507|   194k|                   : result(unexpect,
 1508|  3.41k|                            trivial_invoke(std::forward<F>(f),
 1509|  3.41k|                                           std::forward<Exp>(exp).error()));
 1510|   194k|    }
 1511|   194k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|   389k|    {
  523|   389k|        return m_has_value;
  524|   389k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|   191k|    {
 1837|   191k|        return std::move(value());
 1838|   191k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|   191k|    {
 1801|   191k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   191k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   191k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   191k|        return this->get_value();
 1803|   191k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|   191k|    {
  489|   191k|        return m_value;
  490|   191k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1787|  3.41k|    {
 1788|  3.41k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  3.41k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.41k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  3.41k|        return std::move(this->get_unexpected().error());
 1790|  3.41k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  3.41k|    {
  506|  3.41k|        return m_unexpected;
  507|  3.41k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|  3.41k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  3.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  3.41k|    {
 1660|  3.41k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9143|   158k|    {
 9144|   158k|        return m_current;
 9145|   158k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 9036|   139k|    {
 9037|   139k|        return m_locale;
 9038|   139k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 9042|   150k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   150k|    static_cast<    \
  |  | 1084|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   150k|    static_cast<    \
  |  | 1084|   150k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   150k|    {
 9044|   150k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  12.4k|        : base(unexpect, std::move(e.error())),
 1648|  12.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  12.4k|    {
 1650|  12.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9143|   892k|    {
 9144|   892k|        return m_current;
 9145|   892k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 9036|   896k|    {
 9037|   896k|        return m_locale;
 9038|   896k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 9042|   917k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   917k|    static_cast<    \
  |  | 1084|   917k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1083|   917k|    static_cast<    \
  |  | 1084|   917k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9043|   917k|    {
 9044|   917k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  25.9k|        : base(unexpect, std::move(e.error())),
 1648|  25.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  25.9k|    {
 1650|  25.9k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1647|   129k|        : base(unexpect, std::move(e.error())),
 1648|   129k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|   129k|    {
 1650|   129k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  581|   129k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  582|   129k|          m_has_value(false)
  583|   129k|    {
  584|   129k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   129k|    {
 1348|   129k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1583|  6.90M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  561|  6.90M|        : m_deferred_init(), m_has_value(true)
  562|  6.90M|    {
  563|  6.90M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|  1.42M|    {
 4623|  1.42M|        return x.is_at_end();
 4624|  1.42M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4666|  2.91M|    {
 4667|  2.91M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 2.91M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  2.91M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 2.91M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  2.91M|        return !read_at_position();
 4674|  2.91M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4646|  7.98M|    {
 4647|  7.98M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  7.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|  7.98M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 7.98M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|  7.98M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|  7.98M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 6.47M, False: 1.50M]
  |  |  ------------------
  ------------------
 4654|  6.47M|            return true;
 4655|  6.47M|        }
 4656|       |
 4657|  2.99M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 1.50M, False: 1.48M]
  ------------------
 4658|  1.50M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 17.6k, False: 1.48M]
  ------------------
 4659|  17.6k|                return false;
 4660|  17.6k|            }
 4661|  1.50M|        }
 4662|  1.48M|        return true;
 4663|  1.50M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4581|  2.65M|    {
 4582|  2.65M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  2.65M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 2.65M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  2.65M|        auto res = read_at_position();
 4591|  2.65M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  2.65M|        return parent()->get_character_at(m_position);
 4593|  2.65M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4448|  2.65M|    {
 4449|  2.65M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  2.65M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.65M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  2.65M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  2.65M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  2.65M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.44M, False: 1.21M]
  |  |  ------------------
  ------------------
 4452|  1.44M|            return m_putback_buffer[upos];
 4453|  1.44M|        }
 4454|  1.21M|        const auto start = upos - m_putback_buffer.size();
 4455|  1.21M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  1.21M|        return m_current_view[start];
 4457|  1.21M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|   120k|        : base(std::in_place, std::forward<U>(val)),
 1602|   120k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   120k|    {
 1604|   120k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   120k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   120k|    {
  475|   120k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   122k|    {
 1348|   122k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  2.25k|        : base(unexpect, std::move(e.error())),
 1648|  2.25k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.25k|    {
 1650|  2.25k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  2.25k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.25k|          m_has_value(false)
  484|  2.25k|    {
  485|  2.25k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  391|  12.6k|        : m_unexpected(std::forward<Args>(args)...)
  392|  12.6k|    {
  393|  12.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  394|  12.6k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4567|  2.41M|    {
 4568|  2.41M|        ++m_position;
 4569|  2.41M|        (void)read_at_position();
 4570|  2.41M|        return *this;
 4571|  2.41M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4616|  1.03M|    {
 4617|  1.03M|        return !(lhs == rhs);
 4618|  1.03M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4611|  1.04M|    {
 4612|  1.04M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 1.04M, False: 0]
  |  Branch (4612:46): [True: 177k, False: 863k]
  ------------------
 4613|  1.04M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  380|  12.6k|        : m_unexpected(std::forward<Err>(e))
  381|  12.6k|    {
  382|  12.6k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1064|  12.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  383|  12.6k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|    970|        : base(unexpect, std::move(e.error())),
 1648|    970|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    970|    {
 1650|    970|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|    970|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    970|          m_has_value(false)
  484|    970|    {
  485|    970|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  99.0k|    {
 1348|  99.0k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|  98.0k|        : base(std::in_place, std::forward<U>(val)),
 1602|  98.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  98.0k|    {
 1604|  98.0k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|  98.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  98.0k|    {
  475|  98.0k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|  99.0k|    {
 1772|  99.0k|        return has_value();
 1773|  99.0k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|   198k|    {
  523|   198k|        return m_has_value;
  524|   198k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|    970|    {
 1778|    970|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    970|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    970|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    970|        return this->get_unexpected().error();
 1780|    970|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|    970|    {
  506|    970|        return m_unexpected;
  507|    970|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|  98.0k|    {
 1837|  98.0k|        return std::move(value());
 1838|  98.0k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|  98.0k|    {
 1801|  98.0k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  98.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  98.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  98.0k|        return this->get_value();
 1803|  98.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|  98.0k|    {
  489|  98.0k|        return m_value;
  490|  98.0k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  4.47M|    {
 3518|  4.47M|        return m_sentinel;
 3519|  4.47M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|   302k|    {
 1772|   302k|        return has_value();
 1773|   302k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|   605k|    {
  523|   605k|        return m_has_value;
  524|   605k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|  14.7k|    {
 1778|  14.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  14.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  14.7k|        return this->get_unexpected().error();
 1780|  14.7k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  14.7k|    {
  506|  14.7k|        return m_unexpected;
  507|  14.7k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   239k|    {
 1837|   239k|        return std::move(value());
 1838|   239k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   288k|    {
 1801|   288k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   288k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   288k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   288k|        return this->get_value();
 1803|   288k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|   288k|    {
  489|   288k|        return m_value;
  490|   288k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3512|   127k|    {
 3513|   127k|        return m_iterator;
 3514|   127k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3517|   127k|    {
 3518|   127k|        return m_sentinel;
 3519|   127k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|   121k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   121k|    static_cast<    \
  |  | 1084|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   121k|    static_cast<    \
  |  | 1084|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   121k|    {
 3498|   121k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  1.48M|    {
 4634|  1.48M|        return !x.is_at_end();
 4635|  1.48M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  3.41k|        : base(unexpect, std::move(e.error())),
 1648|  3.41k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  3.41k|    {
 1650|  3.41k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  3.41k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  3.41k|          m_has_value(false)
  484|  3.41k|    {
  485|  3.41k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   194k|    {
 1348|   194k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|   191k|        : base(std::in_place, std::forward<U>(val)),
 1602|   191k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   191k|    {
 1604|   191k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|   191k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   191k|    {
  475|   191k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  1.36k|        : base(unexpect, std::move(e.error())),
 1648|  1.36k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.36k|    {
 1650|  1.36k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  1.36k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.36k|          m_has_value(false)
  484|  1.36k|    {
  485|  1.36k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   157k|    {
 1348|   157k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|   156k|        : base(std::in_place, std::forward<U>(val)),
 1602|   156k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   156k|    {
 1604|   156k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|   156k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   156k|    {
  475|   156k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1771|   157k|    {
 1772|   157k|        return has_value();
 1773|   157k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  522|   315k|    {
  523|   315k|        return m_has_value;
  524|   315k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1777|  1.36k|    {
 1778|  1.36k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.36k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.36k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.36k|        return this->get_unexpected().error();
 1780|  1.36k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  1.36k|    {
  506|  1.36k|        return m_unexpected;
  507|  1.36k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|   156k|    {
 1837|   156k|        return std::move(value());
 1838|   156k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|   156k|    {
 1801|   156k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   156k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   156k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   156k|        return this->get_value();
 1803|   156k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  488|   156k|    {
  489|   156k|        return m_value;
  490|   156k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|   764k|    {
 3032|   764k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|   764k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|   764k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|   764k|    {
 3013|   764k|        return t.data();
 3014|   764k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1601|  2.46M|        : base(std::in_place, std::forward<U>(val)),
 1602|  2.46M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  2.46M|    {
 1604|  2.46M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  473|  2.46M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  2.46M|    {
  475|  2.46M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|  48.6k|    {
 1827|  48.6k|        return value();
 1828|  48.6k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|  77.0k|    {
 1827|  77.0k|        return value();
 1828|  77.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1601|    700|        : base(std::in_place, std::forward<U>(val)),
 1602|    700|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    700|    {
 1604|    700|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  473|    700|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    700|    {
  475|    700|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1601|  1.40k|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.40k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.40k|    {
 1604|  1.40k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.40k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.40k|    {
  475|  1.40k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4622|  24.3M|    {
 4623|  24.3M|        return x.is_at_end();
 4624|  24.3M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4666|  47.7M|    {
 4667|  47.7M|        if (m_end) {
  ------------------
  |  Branch (4667:13): [True: 0, False: 47.7M]
  ------------------
 4668|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4669|      0|        }
 4670|  47.7M|        if (!m_begin) {
  ------------------
  |  Branch (4670:13): [True: 0, False: 47.7M]
  ------------------
 4671|      0|            return true;
 4672|      0|        }
 4673|  47.7M|        return !read_at_position();
 4674|  47.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4646|   126M|    {
 4647|   126M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|   126M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   126M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4648|       |
 4649|   126M|        if (!stores_parent()) {
  ------------------
  |  Branch (4649:13): [True: 0, False: 126M]
  ------------------
 4650|      0|            return true;
 4651|      0|        }
 4652|       |
 4653|   126M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1013|   126M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 103M, False: 23.1M]
  |  |  ------------------
  ------------------
 4654|   103M|            return true;
 4655|   103M|        }
 4656|       |
 4657|  46.3M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4657:16): [True: 23.1M, False: 23.1M]
  ------------------
 4658|  23.1M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4658:17): [True: 21.3k, False: 23.1M]
  ------------------
 4659|  21.3k|                return false;
 4660|  21.3k|            }
 4661|  23.1M|        }
 4662|  23.1M|        return true;
 4663|  23.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4412|   172M|    {
 4413|   172M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|   172M|                                           m_current_view.size());
 4415|   172M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4581|  46.5M|    {
 4582|  46.5M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1079|  46.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4583|       |
 4584|  46.5M|        if (!stores_parent()) {
  ------------------
  |  Branch (4584:13): [True: 0, False: 46.5M]
  ------------------
 4585|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4586|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4587|      0|            return *ptr;
 4588|      0|        }
 4589|       |
 4590|  46.5M|        auto res = read_at_position();
 4591|  46.5M|        SCN_EXPECT(res);
  ------------------
  |  | 1079|  46.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4592|  46.5M|        return parent()->get_character_at(m_position);
 4593|  46.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4448|  46.5M|    {
 4449|  46.5M|        SCN_EXPECT(pos >= 0);
  ------------------
  |  | 1079|  46.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4450|  46.5M|        const auto upos = static_cast<std::size_t>(pos);
 4451|  46.5M|        if (SCN_UNLIKELY(upos < m_putback_buffer.size())) {
  ------------------
  |  | 1014|  46.5M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 24.1M, False: 22.4M]
  |  |  ------------------
  ------------------
 4452|  24.1M|            return m_putback_buffer[upos];
 4453|  24.1M|        }
 4454|  22.4M|        const auto start = upos - m_putback_buffer.size();
 4455|  22.4M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1079|  22.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  22.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|  22.4M|        return m_current_view[start];
 4457|  22.4M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1601|   726k|        : base(std::in_place, std::forward<U>(val)),
 1602|   726k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   726k|    {
 1604|   726k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  473|   726k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   726k|    {
  475|   726k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   728k|    {
 1348|   728k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1647|  2.33k|        : base(unexpect, std::move(e.error())),
 1648|  2.33k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  2.33k|    {
 1650|  2.33k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  482|  2.33k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  2.33k|          m_has_value(false)
  484|  2.33k|    {
  485|  2.33k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4567|  31.9M|    {
 4568|  31.9M|        ++m_position;
 4569|  31.9M|        (void)read_at_position();
 4570|  31.9M|        return *this;
 4571|  31.9M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4616|  9.11M|    {
 4617|  9.11M|        return !(lhs == rhs);
 4618|  9.11M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4611|  9.11M|    {
 4612|  9.11M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4612:16): [True: 9.11M, False: 0]
  |  Branch (4612:46): [True: 295k, False: 8.82M]
  ------------------
 4613|  9.11M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4123|   130M|{
 4124|       |    if constexpr (sizeof(U) == 1) {
 4125|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4126|       |    }
 4127|       |    else if constexpr (sizeof(U) == 2) {
 4128|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4129|       |    }
 4130|   130M|    else {
 4131|       |        // utf-32
 4132|   130M|        static_assert(sizeof(U) == 4);
 4133|   130M|        SCN_UNUSED(ch);
  ------------------
  |  | 1064|   130M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4134|   130M|        return 1;
 4135|   130M|    }
 4136|   130M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4329|   130M|{
 4330|       |    if constexpr (sizeof(CharT) == 1) {
 4331|       |        return decode_utf8_code_point_exhaustive(input);
 4332|       |    }
 4333|       |    else if constexpr (sizeof(CharT) == 2) {
 4334|       |        return decode_utf16_code_point_exhaustive(input);
 4335|       |    }
 4336|   130M|    else {
 4337|   130M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1079|   130M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   130M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4338|   130M|        auto cp = static_cast<char32_t>(input.front());
 4339|   130M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|   130M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 695k, False: 130M]
  |  |  ------------------
  ------------------
 4340|   695k|            return invalid_code_point;
 4341|   695k|        }
 4342|   130M|        return cp;
 4343|   130M|    }
 4344|   130M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1647|    934|        : base(unexpect, std::move(e.error())),
 1648|    934|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|    934|    {
 1650|    934|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  482|    934|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|    934|          m_has_value(false)
  484|    934|    {
  485|    934|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|   582k|    {
 1348|   582k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1601|   581k|        : base(std::in_place, std::forward<U>(val)),
 1602|   581k|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|   581k|    {
 1604|   581k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  473|   581k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|   581k|    {
  475|   581k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1771|   582k|    {
 1772|   582k|        return has_value();
 1773|   582k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  522|  1.16M|    {
  523|  1.16M|        return m_has_value;
  524|  1.16M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1777|    934|    {
 1778|    934|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|    934|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    934|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|    934|        return this->get_unexpected().error();
 1780|    934|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|    934|    {
  506|    934|        return m_unexpected;
  507|    934|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1836|   581k|    {
 1837|   581k|        return std::move(value());
 1838|   581k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1800|   581k|    {
 1801|   581k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|   581k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   581k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|   581k|        return this->get_value();
 1803|   581k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  488|   581k|    {
  489|   581k|        return m_value;
  490|   581k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3517|  73.3M|    {
 3518|  73.3M|        return m_sentinel;
 3519|  73.3M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1771|  1.76M|    {
 1772|  1.76M|        return has_value();
 1773|  1.76M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  522|  3.52M|    {
  523|  3.52M|        return m_has_value;
  524|  3.52M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1777|  28.3k|    {
 1778|  28.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  28.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  28.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  28.3k|        return this->get_unexpected().error();
 1780|  28.3k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  28.3k|    {
  506|  28.3k|        return m_unexpected;
  507|  28.3k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  1.44M|    {
 1837|  1.44M|        return std::move(value());
 1838|  1.44M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  1.73M|    {
 1801|  1.73M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.73M|        return this->get_value();
 1803|  1.73M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.73M|    {
  489|  1.73M|        return m_value;
  490|  1.73M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 4015|  61.2M|{
 4016|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 4017|       |                                          decltype(first), decltype(last)> &&
 4018|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 4019|       |        return {first, last};
 4020|       |    }
 4021|  61.2M|    else {
 4022|  61.2M|        return {to_address(first), static_cast<size_t>(std::distance(
 4023|  61.2M|                                       to_address(first), to_address(last)))};
 4024|  61.2M|    }
 4025|  61.2M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  340|   183M|{
  341|   183M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1085|   183M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  342|   183M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3512|   733k|    {
 3513|   733k|        return m_iterator;
 3514|   733k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3517|   733k|    {
 3518|   733k|        return m_sentinel;
 3519|   733k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3496|   726k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   726k|    static_cast<    \
  |  | 1084|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1083|   726k|    static_cast<    \
  |  | 1084|   726k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3497|   726k|    {
 3498|   726k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4633|  23.4M|    {
 4634|  23.4M|        return !x.is_at_end();
 4635|  23.4M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1647|  4.67k|        : base(unexpect, std::move(e.error())),
 1648|  4.67k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  4.67k|    {
 1650|  4.67k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  482|  4.67k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  4.67k|          m_has_value(false)
  484|  4.67k|    {
  485|  4.67k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.45M|    {
 1348|  1.45M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1601|  1.45M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.45M|    {
 1604|  1.45M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  473|  1.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.45M|    {
  475|  1.45M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  522|  2.91M|    {
  523|  2.91M|        return m_has_value;
  524|  2.91M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1800|  1.45M|    {
 1801|  1.45M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.45M|        return this->get_value();
 1803|  1.45M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  488|  1.45M|    {
  489|  1.45M|        return m_value;
  490|  1.45M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1647|  1.86k|        : base(unexpect, std::move(e.error())),
 1648|  1.86k|          ctor_base(detail::non_default_ctor_tag_t{})
 1649|  1.86k|    {
 1650|  1.86k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  482|  1.86k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  483|  1.86k|          m_has_value(false)
  484|  1.86k|    {
  485|  1.86k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1347|  1.16M|    {
 1348|  1.16M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1601|  1.16M|        : base(std::in_place, std::forward<U>(val)),
 1602|  1.16M|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|  1.16M|    {
 1604|  1.16M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  473|  1.16M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|  1.16M|    {
  475|  1.16M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 2010|  1.45M|    {
 2011|  1.45M|        return detail::transform_error_impl(std::move(*this),
 2012|  1.45M|                                            std::forward<F>(f));
 2013|  1.45M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1493|  1.45M|{
 1494|       |    if constexpr (std::is_void_v<Ret>) {
 1495|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1496|       |        if (SCN_LIKELY(exp.has_value())) {
 1497|       |            return result(*std::forward<Exp>(exp));
 1498|       |        }
 1499|       |
 1500|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1501|       |        return result(unexpect, monostate{});
 1502|       |    }
 1503|  1.45M|    else {
 1504|  1.45M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1505|  1.45M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1013|  1.45M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.45M, False: 4.67k]
  |  |  ------------------
  ------------------
 1506|  1.45M|                   ? result(*std::forward<Exp>(exp))
 1507|  1.45M|                   : result(unexpect,
 1508|  4.67k|                            trivial_invoke(std::forward<F>(f),
 1509|  4.67k|                                           std::forward<Exp>(exp).error()));
 1510|  1.45M|    }
 1511|  1.45M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1836|  1.45M|    {
 1837|  1.45M|        return std::move(value());
 1838|  1.45M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1787|  4.67k|    {
 1788|  4.67k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  4.67k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.67k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1789|  4.67k|        return std::move(this->get_unexpected().error());
 1790|  4.67k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  505|  4.67k|    {
  506|  4.67k|        return m_unexpected;
  507|  4.67k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1657|  4.67k|        : base(unexpect, std::forward<Args>(args)...),
 1658|  4.67k|          ctor_base(detail::non_default_ctor_tag_t{})
 1659|  4.67k|    {
 1660|  4.67k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1771|  1.16M|    {
 1772|  1.16M|        return has_value();
 1773|  1.16M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  522|  2.32M|    {
  523|  2.32M|        return m_has_value;
  524|  2.32M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1777|  1.86k|    {
 1778|  1.86k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1079|  1.86k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.86k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1779|  1.86k|        return this->get_unexpected().error();
 1780|  1.86k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  505|  1.86k|    {
  506|  1.86k|        return m_unexpected;
  507|  1.86k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1836|  1.16M|    {
 1837|  1.16M|        return std::move(value());
 1838|  1.16M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1800|  1.16M|    {
 1801|  1.16M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1079|  1.16M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.16M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1802|  1.16M|        return this->get_value();
 1803|  1.16M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  488|  1.16M|    {
  489|  1.16M|        return m_value;
  490|  1.16M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3031|  2.67M|    {
 3032|  2.67M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1085|  2.67M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3033|  2.67M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 3012|  2.67M|    {
 3013|  2.67M|        return t.data();
 3014|  2.67M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1826|   288k|    {
 1827|   288k|        return value();
 1828|   288k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1826|   576k|    {
 1827|   576k|        return value();
 1828|   576k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1601|    132|        : base(std::in_place, std::forward<U>(val)),
 1602|    132|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    132|    {
 1604|    132|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  473|    132|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    132|    {
  475|    132|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1601|    264|        : base(std::in_place, std::forward<U>(val)),
 1602|    264|          ctor_base(detail::non_default_ctor_tag_t{})
 1603|    264|    {
 1604|    264|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  473|    264|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  474|    264|    {
  475|    264|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4412|  10.9M|    {
 4413|  10.9M|        return static_cast<std::ptrdiff_t>(m_putback_buffer.size() +
 4414|  10.9M|                                           m_current_view.size());
 4415|  10.9M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6341|   277k|    {
 6342|   277k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|   277k|        return static_cast<std::size_t>(m_desc &
 6347|   277k|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|   277k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6367|   555k|    {
 6368|   555k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|   555k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6309|   277k|    {
 6310|   277k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|   277k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|   277k|        const auto t = type(id);
 6322|   277k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|   277k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 277k]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|   277k|        basic_scan_arg<Context> arg;
 6327|   277k|        arg.m_type = t;
 6328|   277k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 277k, False: 0]
  ------------------
 6329|   277k|            arg.m_value.ref_value = m_builtin_values[id];
 6330|   277k|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|   277k|        return arg;
 6335|   277k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6376|   277k|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|   277k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|   277k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|   277k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|   277k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6371|   277k|    {
 6372|   277k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|   277k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6124|   480k|    {
 6125|   480k|        return m_type != detail::arg_type::none_type;
 6126|   480k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|   116k|{
 9606|   116k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   116k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   116k|{
 9463|   116k|#define SCN_VISIT(Type)                                                    \
 9464|   116k|    do {                                                                   \
 9465|   116k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   116k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   116k|        }                                                                  \
 9468|   116k|        else {                                                             \
 9469|   116k|            return vis(monostate_val);                                     \
 9470|   116k|        }                                                                  \
 9471|   116k|    } while (false)
 9472|       |
 9473|   116k|    monostate monostate_val{};
 9474|       |
 9475|   116k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 116k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 116k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 116k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 116k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 116k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 116k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 116k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 116k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 116k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 116k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 116k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 116k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 116k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 116k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 116k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 116k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 116k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 116k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 116k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 116k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 116k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 116k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 116k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 116k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 116k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  58.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 58.3k, False: 58.3k]
  ------------------
 9555|  58.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  58.3k|    do {                                                                   \
  |  | 9465|  58.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  58.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  58.3k|        }                                                                  \
  |  | 9468|  58.3k|        else {                                                             \
  |  | 9469|  58.3k|            return vis(monostate_val);                                     \
  |  | 9470|  58.3k|        }                                                                  \
  |  | 9471|  58.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  58.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 116k]
  ------------------
 9557|  58.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  58.3k|    do {                                                                   \
  |  | 9465|  58.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  58.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  58.3k|        }                                                                  \
  |  | 9468|  58.3k|        else {                                                             \
  |  | 9469|  58.3k|            return vis(monostate_val);                                     \
  |  | 9470|  58.3k|        }                                                                  \
  |  | 9471|  58.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   116k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 58.3k, False: 58.3k]
  ------------------
 9559|   116k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|   116k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|   116k|    do {                                                                   \
  |  | 9465|   116k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   116k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   116k|        }                                                                  \
  |  | 9468|   116k|        else {                                                             \
  |  | 9469|   116k|            return vis(monostate_val);                                     \
  |  | 9470|   116k|        }                                                                  \
  |  | 9471|   116k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|   116k|        }
 9566|       |
 9567|   116k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 116k]
  ------------------
 9568|   116k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   116k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   116k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 116k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 116k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   116k|            SCN_CLANG_POP
 9585|   116k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|   631k|{
 6171|   631k|    return arg.m_type;
 6172|   631k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|   330k|{
 6183|   330k|    return arg.m_value;
 6184|   330k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|  56.9k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|  56.9k|    static_cast<    \
  |  | 1084|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|  56.9k|    {
 9129|  56.9k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4754|   130k|{
 4755|   130k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 130k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   130k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   130k|                            ranges::default_sentinel};
 4761|   130k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4517|   130k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   130k|    {
 4519|   130k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   130k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   130k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   130k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   130k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|  73.7k|{
 9606|  73.7k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  73.7k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  73.7k|{
 9463|  73.7k|#define SCN_VISIT(Type)                                                    \
 9464|  73.7k|    do {                                                                   \
 9465|  73.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  73.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  73.7k|        }                                                                  \
 9468|  73.7k|        else {                                                             \
 9469|  73.7k|            return vis(monostate_val);                                     \
 9470|  73.7k|        }                                                                  \
 9471|  73.7k|    } while (false)
 9472|       |
 9473|  73.7k|    monostate monostate_val{};
 9474|       |
 9475|  73.7k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 73.7k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 73.7k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 73.7k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 73.7k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 73.7k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 73.7k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 73.7k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 73.7k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 73.7k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 73.7k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 73.7k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 73.7k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 73.7k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 73.7k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 73.7k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 73.7k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 73.7k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 73.7k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 73.7k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 73.7k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 73.7k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 73.7k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 73.7k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 73.7k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 73.7k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  73.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 73.7k, False: 0]
  ------------------
 9555|  73.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  73.7k|    do {                                                                   \
  |  | 9465|  73.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  73.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  73.7k|        }                                                                  \
  |  | 9468|  73.7k|        else {                                                             \
  |  | 9469|  73.7k|            return vis(monostate_val);                                     \
  |  | 9470|  73.7k|        }                                                                  \
  |  | 9471|  73.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  73.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 73.7k]
  ------------------
 9557|  73.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  73.7k|    do {                                                                   \
  |  | 9465|  73.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  73.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  73.7k|        }                                                                  \
  |  | 9468|  73.7k|        else {                                                             \
  |  | 9469|  73.7k|            return vis(monostate_val);                                     \
  |  | 9470|  73.7k|        }                                                                  \
  |  | 9471|  73.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  73.7k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 73.7k]
  ------------------
 9559|  73.7k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|  73.7k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|  73.7k|    do {                                                                   \
  |  | 9465|  73.7k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  73.7k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  73.7k|        }                                                                  \
  |  | 9468|  73.7k|        else {                                                             \
  |  | 9469|  73.7k|            return vis(monostate_val);                                     \
  |  | 9470|  73.7k|        }                                                                  \
  |  | 9471|  73.7k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|  73.7k|        }
 9566|       |
 9567|  73.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 73.7k]
  ------------------
 9568|  73.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  73.7k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  73.7k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 73.7k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 73.7k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  73.7k|            SCN_CLANG_POP
 9585|  73.7k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6444|  93.5k|        : m_format{format},
 6445|  93.5k|          m_next_arg_id{next_arg_id},
 6446|  93.5k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  93.5k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  93.5k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  93.5k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  93.5k|    {
 6452|  93.5k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|  93.5k|    {
 3107|  93.5k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|  93.5k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|  93.5k|    {
 3073|  93.5k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|  93.5k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|  93.5k|{
 7971|  93.5k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|  93.5k|    handler.check_args_exhausted();
 7973|  93.5k|    return handler.get_error();
 7974|  93.5k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|  93.5k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|  93.5k|    auto begin = format.data();
 7939|  93.5k|    auto it = begin;
 7940|  93.5k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   169k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 93.5k, False: 75.6k]
  ------------------
 7943|  93.5k|        const auto ch = *it++;
 7944|  93.5k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 93.5k, False: 0]
  ------------------
 7945|  93.5k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  93.5k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  93.5k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 17.9k, False: 75.6k]
  ------------------
 7949|  17.9k|                return;
 7950|  17.9k|            }
 7951|  93.5k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|  93.5k|    }
 7962|       |
 7963|  75.6k|    handler.on_literal_text(begin, end);
 7964|  75.6k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7867|  93.5k|{
 7868|  93.5k|    struct id_adapter {
 7869|  93.5k|        constexpr void operator()()
 7870|  93.5k|        {
 7871|  93.5k|            arg_id = handler.on_arg_id();
 7872|  93.5k|        }
 7873|  93.5k|        constexpr void operator()(std::size_t id)
 7874|  93.5k|        {
 7875|  93.5k|            arg_id = handler.on_arg_id(id);
 7876|  93.5k|        }
 7877|       |
 7878|  93.5k|        constexpr void on_error(const char* msg)
 7879|  93.5k|        {
 7880|  93.5k|            SCN_UNLIKELY_ATTR
 7881|  93.5k|            handler.on_error(msg);
 7882|  93.5k|        }
 7883|       |
 7884|  93.5k|        Handler& handler;
 7885|  93.5k|        std::size_t arg_id;
 7886|  93.5k|    };
 7887|       |
 7888|  93.5k|    ++begin;
 7889|  93.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|  93.5k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 93.5k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|  93.5k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 93.5k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|  93.5k|    else {
 7901|  93.5k|        auto adapter = id_adapter{handler, 0};
 7902|  93.5k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  93.5k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|  93.5k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 93.5k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|  93.5k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 93.5k, False: 0]
  ------------------
 7913|  93.5k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|  93.5k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  93.5k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   187k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.17k, False: 86.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 93.5k]
  |  |  |  Branch (1014:45): [True: 7.17k, False: 86.4k]
  |  |  ------------------
  ------------------
 7919|  7.17k|                handler.on_error("Unknown format specifier");
 7920|  7.17k|                return begin;
 7921|  7.17k|            }
 7922|  93.5k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|  93.5k|    }
 7929|  86.4k|    return begin + 1;
 7930|  93.5k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 9026|   150k|    {
 9027|   150k|        return m_args.get(id);
 9028|   150k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6479|   150k|    {
 6480|   150k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 150k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   150k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   150k|        do_check_arg_id(id);
 6488|   150k|        return id;
 6489|   150k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6973|   150k|{
 6974|   150k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   150k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   150k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  93.5k|{
 7367|  93.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  93.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  93.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  93.5k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 93.5k, False: 0]
  |  Branch (7368:26): [True: 0, False: 93.5k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|  93.5k|    handler();
 7373|  93.5k|    return begin;
 7374|  93.5k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7315|  10.7k|{
 7316|  10.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7317|  10.7k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1079|  10.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  10.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7318|       |
 7319|  10.7k|    unsigned long long value = 0;
 7320|  21.5k|    do {
 7321|  21.5k|        value *= 10;
 7322|  21.5k|        value += static_cast<unsigned long long>(*begin - '0');
 7323|  21.5k|        if (value >
  ------------------
  |  Branch (7323:13): [True: 0, False: 21.5k]
  ------------------
 7324|  21.5k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7325|      0|            return -1;
 7326|      0|        }
 7327|  21.5k|        ++begin;
 7328|  21.5k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7328:14): [True: 21.5k, False: 0]
  |  Branch (7328:30): [True: 21.5k, False: 0]
  |  Branch (7328:47): [True: 10.7k, False: 10.7k]
  ------------------
 7329|  10.7k|    return static_cast<int>(value);
 7330|  10.7k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  93.5k|        {
 7871|  93.5k|            arg_id = handler.on_arg_id();
 7872|  93.5k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6474|   139k|    {
 6475|   139k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   139k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6463|   290k|    {
 6464|   290k|        return m_format.data();
 6465|   290k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|  93.5k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|  93.5k|    {
 8055|  93.5k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|  93.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  93.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|  93.5k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7783|  93.5k|{
 7784|  93.5k|    auto do_presentation = [&]() -> const CharT* {
 7785|  93.5k|        if (*begin == CharT{'['}) {
 7786|  93.5k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  93.5k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|  93.5k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|  93.5k|                return begin;
 7792|  93.5k|            }
 7793|  93.5k|            handler.on_character_set_string(set);
 7794|  93.5k|            return begin;
 7795|  93.5k|        }
 7796|  93.5k|        if (*begin == CharT{'/'}) {
 7797|  93.5k|            return parse_presentation_regex(begin, end, handler);
 7798|  93.5k|        }
 7799|  93.5k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  93.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|  93.5k|            handler.on_error("Invalid type specifier in format string");
 7802|  93.5k|            return begin;
 7803|  93.5k|        }
 7804|  93.5k|        handler.on_type(type);
 7805|  93.5k|        return begin;
 7806|  93.5k|    };
 7807|       |
 7808|  93.5k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 93.5k, False: 0]
  |  Branch (7808:28): [True: 81.4k, False: 12.1k]
  ------------------
 7809|  93.5k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 81.4k, False: 0]
  |  Branch (7809:36): [True: 77.8k, False: 3.58k]
  ------------------
 7810|  77.8k|        return do_presentation();
 7811|  77.8k|    }
 7812|       |
 7813|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  15.7k|    begin = parse_align(begin, end, handler);
 7819|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  15.7k|    begin = parse_width(begin, end, handler);
 7825|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  15.7k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 15.7k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  15.7k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 3.58k, False: 12.1k]
  ------------------
 7844|  3.58k|        handler.on_localized();
 7845|  3.58k|        ++begin;
 7846|  3.58k|    }
 7847|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  15.7k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 15.7k, False: 0]
  |  Branch (7852:25): [True: 12.1k, False: 3.58k]
  ------------------
 7853|  12.1k|        do_presentation();
 7854|  12.1k|    }
 7855|  15.7k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  15.7k|    return begin;
 7861|  15.7k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7430|   132k|{
 7431|   132k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 126k, False: 5.38k]
  |  Branch (7431:33): [True: 126k, False: 0]
  ------------------
 7432|   132k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 5.38k, False: 0]
  |  Branch (7432:33): [True: 5.38k, False: 0]
  ------------------
 7433|   132k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|  90.0k|    auto do_presentation = [&]() -> const CharT* {
 7785|  90.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 4.98k, False: 85.0k]
  ------------------
 7786|  4.98k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  4.98k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.98k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|  4.98k|            handler.on_character_set_string(set);
 7794|  4.98k|            return begin;
 7795|  4.98k|        }
 7796|  85.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 85.0k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|  85.0k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  85.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|  85.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.58k, False: 81.4k]
  |  |  ------------------
  ------------------
 7801|  3.58k|            handler.on_error("Invalid type specifier in format string");
 7802|  3.58k|            return begin;
 7803|  3.58k|        }
 7804|  81.4k|        handler.on_type(type);
 7805|  81.4k|        return begin;
 7806|  85.0k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7620|  4.98k|{
 7621|  4.98k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  4.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  4.98k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  4.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  4.98k|    auto start = begin;
 7625|  4.98k|    ++begin;
 7626|       |
 7627|  4.98k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.98k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|  4.98k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 0, False: 4.98k]
  ------------------
 7634|      0|        handler.on_charset_inverted();
 7635|      0|        ++begin;
 7636|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 0, False: 0]
  ------------------
 7643|      0|            handler.on_charset_single(char32_t{']'});
 7644|      0|            ++begin;
 7645|      0|        }
 7646|      0|    }
 7647|  4.98k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 4.98k]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|  14.9k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 14.9k, False: 0]
  ------------------
 7652|  14.9k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  14.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.9k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|  14.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 4.98k, False: 9.97k]
  ------------------
 7657|  4.98k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  4.98k|        }
 7659|       |
 7660|  9.97k|        parse_presentation_set_literal(begin, end, handler);
 7661|  9.97k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|  4.98k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7584|  9.97k|{
 7585|  9.97k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  9.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  9.97k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  9.97k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  9.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.97k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|  9.97k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 9.97k, False: 0]
  |  Branch (7592:25): [True: 9.97k, False: 0]
  |  Branch (7592:49): [True: 9.97k, False: 0]
  ------------------
 7593|  9.97k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 9.97k, False: 0]
  ------------------
 7594|  9.97k|        ++begin;
 7595|       |
 7596|  9.97k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  9.97k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  9.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.97k]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|  9.97k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  9.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.97k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|  9.97k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  9.97k|        return;
 7610|  9.97k|    }
 7611|       |
 7612|      0|    handler.on_charset_single(cp_first);
 7613|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7560|  19.9k|{
 7561|  19.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  19.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  19.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  19.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  19.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  39.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 19.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 19.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 19.9k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  19.9k|    const auto cp =
 7570|  19.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  19.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 19.9k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|  19.9k|    begin += len;
 7577|  19.9k|    return cp;
 7578|  19.9k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7272|  7.48k|    {
 7273|  7.48k|        m_specs.charset_string_data = fmt.data();
 7274|  7.48k|        m_specs.charset_string_size = fmt.size();
 7275|  7.48k|        on_type(presentation_type::string_set);
 7276|  7.48k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7378|   137k|{
 7379|   137k|    switch (type) {
 7380|      0|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 0, False: 137k]
  ------------------
 7381|      0|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 0, False: 137k]
  ------------------
 7382|      0|            return presentation_type::int_binary;
 7383|      0|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 0, False: 137k]
  ------------------
 7384|      0|            return presentation_type::int_decimal;
 7385|      0|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 0, False: 137k]
  ------------------
 7386|      0|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 137k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|      0|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 0, False: 137k]
  ------------------
 7390|      0|            return presentation_type::int_octal;
 7391|      0|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 0, False: 137k]
  ------------------
 7392|      0|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 137k]
  ------------------
 7393|      0|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 137k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 137k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|      0|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 0, False: 137k]
  ------------------
 7398|      0|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 137k]
  ------------------
 7399|      0|            return presentation_type::float_hex;
 7400|      0|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 0, False: 137k]
  ------------------
 7401|      0|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 137k]
  ------------------
 7402|      0|            return presentation_type::float_scientific;
 7403|      0|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 0, False: 137k]
  ------------------
 7404|      0|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 137k]
  ------------------
 7405|      0|            return presentation_type::float_fixed;
 7406|      0|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 0, False: 137k]
  ------------------
 7407|      0|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 137k]
  ------------------
 7408|      0|            return presentation_type::float_general;
 7409|   126k|        case 's':
  ------------------
  |  Branch (7409:9): [True: 126k, False: 10.7k]
  ------------------
 7410|   126k|            return presentation_type::string;
 7411|  5.38k|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 5.38k, False: 132k]
  ------------------
 7412|  5.38k|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 137k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 137k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 137k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 137k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|  5.38k|        default:
  ------------------
  |  Branch (7423:9): [True: 5.38k, False: 132k]
  ------------------
 7424|  5.38k|            return presentation_type::none;
 7425|   137k|    }
 7426|   137k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7455|  15.7k|{
 7456|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  15.7k|    auto check_align = [](wchar_t ch) {
 7459|  15.7k|        switch (ch) {
 7460|  15.7k|            case L'<':
 7461|  15.7k|                return align_type::left;
 7462|  15.7k|            case L'>':
 7463|  15.7k|                return align_type::right;
 7464|  15.7k|            case L'^':
 7465|  15.7k|                return align_type::center;
 7466|  15.7k|            default:
 7467|  15.7k|                return align_type::none;
 7468|  15.7k|        }
 7469|  15.7k|    };
 7470|       |
 7471|  15.7k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  15.7k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  31.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 15.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7473|  15.7k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  15.7k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  15.7k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  15.7k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  15.7k|    const auto begin_before_fill = begin;
 7483|  15.7k|    begin += potential_fill_len;
 7484|       |
 7485|  15.7k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 15.7k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  15.7k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  15.7k|    const auto begin_after_fill = begin;
 7491|  15.7k|    ++begin;
 7492|       |
 7493|  15.7k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 15.7k, False: 0]
  ------------------
 7494|  15.7k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  15.7k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 4.98k, False: 10.7k]
  ------------------
 7499|  4.98k|            return begin_before_fill;
 7500|  4.98k|        }
 7501|  15.7k|    }
 7502|       |
 7503|  10.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 10.7k, False: 0]
  ------------------
 7504|  10.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 10.7k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  10.7k|        return begin_before_fill;
 7509|  10.7k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  10.7k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7437|  23.6k|{
 7438|  23.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|       |    if constexpr (sizeof(CharT) != 1) {
 7440|       |        return 1;
 7441|       |    }
 7442|  23.6k|    else {
 7443|  23.6k|        const auto lengths =
 7444|  23.6k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|  23.6k|            "\3\4";
 7446|  23.6k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|  23.6k|        return len;
 7448|  23.6k|    }
 7449|  23.6k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|  31.5k|    auto check_align = [](wchar_t ch) {
 7459|  31.5k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 31.5k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 31.5k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 31.5k]
  ------------------
 7465|      0|                return align_type::center;
 7466|  31.5k|            default:
  ------------------
  |  Branch (7466:13): [True: 31.5k, False: 0]
  ------------------
 7467|  31.5k|                return align_type::none;
 7468|  31.5k|        }
 7469|  31.5k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7520|  15.7k|{
 7521|  15.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  15.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  15.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  15.7k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 15.7k, False: 0]
  |  Branch (7523:33): [True: 7.17k, False: 8.57k]
  ------------------
 7524|  7.17k|        int width = parse_simple_int(begin, end);
 7525|  7.17k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  7.17k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 7.17k, False: 0]
  |  |  ------------------
  ------------------
 7526|  7.17k|            handler.on_width(width);
 7527|  7.17k|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|  7.17k|    }
 7533|  15.7k|    return begin;
 7534|  15.7k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 8059|  3.58k|    {
 8060|  3.58k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  3.58k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 3.58k, False: 0]
  ------------------
 8062|  3.58k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 3.58k, False: 0]
  ------------------
 8063|  3.58k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 3.58k, False: 0]
  ------------------
 8064|  3.58k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 3.58k, False: 0]
  ------------------
 8065|  3.58k|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|  3.58k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|  3.58k|        }
 8070|       |
 8071|      0|        Handler::on_localized();
 8072|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9605|  86.4k|{
 9606|  86.4k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  86.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  86.4k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  86.4k|{
 9463|  86.4k|#define SCN_VISIT(Type)                                                    \
 9464|  86.4k|    do {                                                                   \
 9465|  86.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  86.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  86.4k|        }                                                                  \
 9468|  86.4k|        else {                                                             \
 9469|  86.4k|            return vis(monostate_val);                                     \
 9470|  86.4k|        }                                                                  \
 9471|  86.4k|    } while (false)
 9472|       |
 9473|  86.4k|    monostate monostate_val{};
 9474|       |
 9475|  86.4k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 86.4k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 86.4k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 86.4k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 86.4k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 86.4k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 86.4k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 86.4k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 86.4k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 86.4k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 86.4k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 86.4k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 86.4k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 86.4k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 86.4k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 86.4k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 86.4k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 86.4k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 86.4k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 86.4k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 86.4k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 86.4k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 86.4k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 86.4k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 86.4k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 86.4k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  43.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 43.2k, False: 43.2k]
  ------------------
 9555|  43.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  43.2k|    do {                                                                   \
  |  | 9465|  43.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  43.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  43.2k|        }                                                                  \
  |  | 9468|  43.2k|        else {                                                             \
  |  | 9469|  43.2k|            return vis(monostate_val);                                     \
  |  | 9470|  43.2k|        }                                                                  \
  |  | 9471|  43.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  43.2k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 86.4k]
  ------------------
 9557|  43.2k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  43.2k|    do {                                                                   \
  |  | 9465|  43.2k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  43.2k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  43.2k|        }                                                                  \
  |  | 9468|  43.2k|        else {                                                             \
  |  | 9469|  43.2k|            return vis(monostate_val);                                     \
  |  | 9470|  43.2k|        }                                                                  \
  |  | 9471|  43.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  86.4k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 43.2k, False: 43.2k]
  ------------------
 9559|  86.4k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|  86.4k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|  86.4k|    do {                                                                   \
  |  | 9465|  86.4k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  86.4k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  86.4k|        }                                                                  \
  |  | 9468|  86.4k|        else {                                                             \
  |  | 9469|  86.4k|            return vis(monostate_val);                                     \
  |  | 9470|  86.4k|        }                                                                  \
  |  | 9471|  86.4k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|  86.4k|        }
 9566|       |
 9567|  86.4k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 86.4k]
  ------------------
 9568|  86.4k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  86.4k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  86.4k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 86.4k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 86.4k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  86.4k|            SCN_CLANG_POP
 9585|  86.4k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6444|  56.9k|        : m_format{format},
 6445|  56.9k|          m_next_arg_id{next_arg_id},
 6446|  56.9k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|  56.9k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|  56.9k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|  56.9k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|  56.9k|    {
 6452|  56.9k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|  56.9k|{
 7971|  56.9k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|  56.9k|    handler.check_args_exhausted();
 7973|  56.9k|    return handler.get_error();
 7974|  56.9k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|  56.9k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|  56.9k|    auto begin = format.data();
 7939|  56.9k|    auto it = begin;
 7940|  56.9k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   104k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 56.9k, False: 47.9k]
  ------------------
 7943|  56.9k|        const auto ch = *it++;
 7944|  56.9k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 56.9k, False: 0]
  ------------------
 7945|  56.9k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|  56.9k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|  56.9k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 8.97k, False: 47.9k]
  ------------------
 7949|  8.97k|                return;
 7950|  8.97k|            }
 7951|  56.9k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|  56.9k|    }
 7962|       |
 7963|  47.9k|    handler.on_literal_text(begin, end);
 7964|  47.9k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9165|  47.9k|    {
 9166|  47.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|  47.9k|    static_cast<    \
  |  | 1084|  47.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|  47.9k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7867|  56.9k|{
 7868|  56.9k|    struct id_adapter {
 7869|  56.9k|        constexpr void operator()()
 7870|  56.9k|        {
 7871|  56.9k|            arg_id = handler.on_arg_id();
 7872|  56.9k|        }
 7873|  56.9k|        constexpr void operator()(std::size_t id)
 7874|  56.9k|        {
 7875|  56.9k|            arg_id = handler.on_arg_id(id);
 7876|  56.9k|        }
 7877|       |
 7878|  56.9k|        constexpr void on_error(const char* msg)
 7879|  56.9k|        {
 7880|  56.9k|            SCN_UNLIKELY_ATTR
 7881|  56.9k|            handler.on_error(msg);
 7882|  56.9k|        }
 7883|       |
 7884|  56.9k|        Handler& handler;
 7885|  56.9k|        std::size_t arg_id;
 7886|  56.9k|    };
 7887|       |
 7888|  56.9k|    ++begin;
 7889|  56.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 56.9k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|  56.9k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 56.9k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|  56.9k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 56.9k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|  56.9k|    else {
 7901|  56.9k|        auto adapter = id_adapter{handler, 0};
 7902|  56.9k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|  56.9k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 56.9k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|  56.9k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 56.9k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|  56.9k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 56.9k, False: 0]
  ------------------
 7913|  56.9k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 56.9k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|  56.9k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|  56.9k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   113k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.58k, False: 53.3k]
  |  |  |  Branch (1014:45): [True: 0, False: 56.9k]
  |  |  |  Branch (1014:45): [True: 3.58k, False: 53.3k]
  |  |  ------------------
  ------------------
 7919|  3.58k|                handler.on_error("Unknown format specifier");
 7920|  3.58k|                return begin;
 7921|  3.58k|            }
 7922|  56.9k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|  56.9k|    }
 7929|  53.3k|    return begin + 1;
 7930|  56.9k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|  56.9k|{
 7367|  56.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  56.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  56.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|  56.9k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 56.9k, False: 0]
  |  Branch (7368:26): [True: 0, False: 56.9k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|  56.9k|    handler();
 7373|  56.9k|    return begin;
 7374|  56.9k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|  56.9k|        {
 7871|  56.9k|            arg_id = handler.on_arg_id();
 7872|  56.9k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|  56.9k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|  56.9k|    {
 8055|  56.9k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|  56.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  56.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|  56.9k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7783|  56.9k|{
 7784|  56.9k|    auto do_presentation = [&]() -> const CharT* {
 7785|  56.9k|        if (*begin == CharT{'['}) {
 7786|  56.9k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  56.9k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|  56.9k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|  56.9k|                return begin;
 7792|  56.9k|            }
 7793|  56.9k|            handler.on_character_set_string(set);
 7794|  56.9k|            return begin;
 7795|  56.9k|        }
 7796|  56.9k|        if (*begin == CharT{'/'}) {
 7797|  56.9k|            return parse_presentation_regex(begin, end, handler);
 7798|  56.9k|        }
 7799|  56.9k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  56.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|  56.9k|            handler.on_error("Invalid type specifier in format string");
 7802|  56.9k|            return begin;
 7803|  56.9k|        }
 7804|  56.9k|        handler.on_type(type);
 7805|  56.9k|        return begin;
 7806|  56.9k|    };
 7807|       |
 7808|  56.9k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 56.9k, False: 0]
  |  Branch (7808:28): [True: 50.8k, False: 6.08k]
  ------------------
 7809|  56.9k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 50.8k, False: 0]
  |  Branch (7809:36): [True: 49.0k, False: 1.79k]
  ------------------
 7810|  49.0k|        return do_presentation();
 7811|  49.0k|    }
 7812|       |
 7813|  7.87k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.87k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  7.87k|    begin = parse_align(begin, end, handler);
 7819|  7.87k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.87k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  7.87k|    begin = parse_width(begin, end, handler);
 7825|  7.87k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.87k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  7.87k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 7.87k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  7.87k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 1.79k, False: 6.08k]
  ------------------
 7844|  1.79k|        handler.on_localized();
 7845|  1.79k|        ++begin;
 7846|  1.79k|    }
 7847|  7.87k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.87k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  7.87k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 7.87k, False: 0]
  |  Branch (7852:25): [True: 6.08k, False: 1.79k]
  ------------------
 7853|  6.08k|        do_presentation();
 7854|  6.08k|    }
 7855|  7.87k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.87k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  7.87k|    return begin;
 7861|  7.87k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|  55.1k|    auto do_presentation = [&]() -> const CharT* {
 7785|  55.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 2.49k, False: 52.6k]
  ------------------
 7786|  2.49k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  2.49k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|  2.49k|            handler.on_character_set_string(set);
 7794|  2.49k|            return begin;
 7795|  2.49k|        }
 7796|  52.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 52.6k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|  52.6k|        presentation_type type = parse_presentation_type(*begin++);
 7800|  52.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|  52.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.79k, False: 50.8k]
  |  |  ------------------
  ------------------
 7801|  1.79k|            handler.on_error("Invalid type specifier in format string");
 7802|  1.79k|            return begin;
 7803|  1.79k|        }
 7804|  50.8k|        handler.on_type(type);
 7805|  50.8k|        return begin;
 7806|  52.6k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7620|  2.49k|{
 7621|  2.49k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  2.49k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  2.49k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  2.49k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  2.49k|    auto start = begin;
 7625|  2.49k|    ++begin;
 7626|       |
 7627|  2.49k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 2.49k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|  2.49k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 0, False: 2.49k]
  ------------------
 7634|      0|        handler.on_charset_inverted();
 7635|      0|        ++begin;
 7636|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 0, False: 0]
  ------------------
 7643|      0|            handler.on_charset_single(char32_t{']'});
 7644|      0|            ++begin;
 7645|      0|        }
 7646|      0|    }
 7647|  2.49k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 2.49k]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|  7.48k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 7.48k, False: 0]
  ------------------
 7652|  7.48k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  7.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.48k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|  7.48k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 2.49k, False: 4.98k]
  ------------------
 7657|  2.49k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  2.49k|        }
 7659|       |
 7660|  4.98k|        parse_presentation_set_literal(begin, end, handler);
 7661|  4.98k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|  2.49k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7584|  4.98k|{
 7585|  4.98k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  4.98k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  4.98k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  4.98k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  4.98k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.98k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|  4.98k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 4.98k, False: 0]
  |  Branch (7592:25): [True: 4.98k, False: 0]
  |  Branch (7592:49): [True: 4.98k, False: 0]
  ------------------
 7593|  4.98k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 4.98k, False: 0]
  ------------------
 7594|  4.98k|        ++begin;
 7595|       |
 7596|  4.98k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  4.98k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.98k]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|  4.98k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 4.98k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|  4.98k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  4.98k|        return;
 7610|  4.98k|    }
 7611|       |
 7612|      0|    handler.on_charset_single(cp_first);
 7613|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7560|  9.97k|{
 7561|  9.97k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  9.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  9.97k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  9.97k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  19.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.97k]
  |  |  |  Branch (1014:45): [True: 0, False: 9.97k]
  |  |  |  Branch (1014:45): [True: 0, False: 9.97k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  9.97k|    const auto cp =
 7570|  9.97k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  9.97k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  9.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 9.97k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|  9.97k|    begin += len;
 7577|  9.97k|    return cp;
 7578|  9.97k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7455|  7.87k|{
 7456|  7.87k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  7.87k|    auto check_align = [](wchar_t ch) {
 7459|  7.87k|        switch (ch) {
 7460|  7.87k|            case L'<':
 7461|  7.87k|                return align_type::left;
 7462|  7.87k|            case L'>':
 7463|  7.87k|                return align_type::right;
 7464|  7.87k|            case L'^':
 7465|  7.87k|                return align_type::center;
 7466|  7.87k|            default:
 7467|  7.87k|                return align_type::none;
 7468|  7.87k|        }
 7469|  7.87k|    };
 7470|       |
 7471|  7.87k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  7.87k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.87k]
  |  |  |  Branch (1014:45): [True: 0, False: 7.87k]
  |  |  |  Branch (1014:45): [True: 0, False: 7.87k]
  |  |  ------------------
  ------------------
 7473|  7.87k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  7.87k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  7.87k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  7.87k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  7.87k|    const auto begin_before_fill = begin;
 7483|  7.87k|    begin += potential_fill_len;
 7484|       |
 7485|  7.87k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 7.87k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  7.87k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  7.87k|    const auto begin_after_fill = begin;
 7491|  7.87k|    ++begin;
 7492|       |
 7493|  7.87k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 7.87k, False: 0]
  ------------------
 7494|  7.87k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  7.87k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.87k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  7.87k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 2.49k, False: 5.38k]
  ------------------
 7499|  2.49k|            return begin_before_fill;
 7500|  2.49k|        }
 7501|  7.87k|    }
 7502|       |
 7503|  5.38k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 5.38k, False: 0]
  ------------------
 7504|  5.38k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 5.38k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  5.38k|        return begin_before_fill;
 7509|  5.38k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  5.38k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|  15.7k|    auto check_align = [](wchar_t ch) {
 7459|  15.7k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 15.7k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 15.7k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 15.7k]
  ------------------
 7465|      0|                return align_type::center;
 7466|  15.7k|            default:
  ------------------
  |  Branch (7466:13): [True: 15.7k, False: 0]
  ------------------
 7467|  15.7k|                return align_type::none;
 7468|  15.7k|        }
 7469|  15.7k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7520|  7.87k|{
 7521|  7.87k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  7.87k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 7.87k, False: 0]
  |  Branch (7523:33): [True: 3.58k, False: 4.28k]
  ------------------
 7524|  3.58k|        int width = parse_simple_int(begin, end);
 7525|  3.58k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  3.58k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 3.58k, False: 0]
  |  |  ------------------
  ------------------
 7526|  3.58k|            handler.on_width(width);
 7527|  3.58k|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|  3.58k|    }
 7533|  7.87k|    return begin;
 7534|  7.87k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 8059|  1.79k|    {
 8060|  1.79k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  1.79k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 1.79k, False: 0]
  ------------------
 8062|  1.79k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 1.79k, False: 0]
  ------------------
 8063|  1.79k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 1.79k, False: 0]
  ------------------
 8064|  1.79k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 1.79k, False: 0]
  ------------------
 8065|  1.79k|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|  1.79k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|  1.79k|        }
 8070|       |
 8071|      0|        Handler::on_localized();
 8072|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|  53.3k|{
 9606|  53.3k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|  53.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|  53.3k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|  53.3k|{
 9463|  53.3k|#define SCN_VISIT(Type)                                                    \
 9464|  53.3k|    do {                                                                   \
 9465|  53.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|  53.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|  53.3k|        }                                                                  \
 9468|  53.3k|        else {                                                             \
 9469|  53.3k|            return vis(monostate_val);                                     \
 9470|  53.3k|        }                                                                  \
 9471|  53.3k|    } while (false)
 9472|       |
 9473|  53.3k|    monostate monostate_val{};
 9474|       |
 9475|  53.3k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 53.3k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 53.3k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 53.3k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 53.3k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 53.3k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 53.3k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 53.3k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 53.3k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 53.3k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 53.3k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 53.3k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 53.3k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 53.3k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 53.3k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 53.3k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 53.3k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 53.3k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 53.3k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 53.3k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 53.3k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 53.3k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 53.3k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 53.3k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 53.3k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 53.3k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|  53.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 53.3k, False: 0]
  ------------------
 9555|  53.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|  53.3k|    do {                                                                   \
  |  | 9465|  53.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  53.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  53.3k|        }                                                                  \
  |  | 9468|  53.3k|        else {                                                             \
  |  | 9469|  53.3k|            return vis(monostate_val);                                     \
  |  | 9470|  53.3k|        }                                                                  \
  |  | 9471|  53.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|  53.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 0, False: 53.3k]
  ------------------
 9557|  53.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|  53.3k|    do {                                                                   \
  |  | 9465|  53.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  53.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  53.3k|        }                                                                  \
  |  | 9468|  53.3k|        else {                                                             \
  |  | 9469|  53.3k|            return vis(monostate_val);                                     \
  |  | 9470|  53.3k|        }                                                                  \
  |  | 9471|  53.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|  53.3k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 53.3k]
  ------------------
 9559|  53.3k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|  53.3k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9464|  53.3k|    do {                                                                   \
  |  | 9465|  53.3k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|  53.3k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|  53.3k|        }                                                                  \
  |  | 9468|  53.3k|        else {                                                             \
  |  | 9469|  53.3k|            return vis(monostate_val);                                     \
  |  | 9470|  53.3k|        }                                                                  \
  |  | 9471|  53.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9561|       |            }
 9562|       |            else {
 9563|       |                SCN_VISIT(std::wstring_view);
 9564|       |            }
 9565|  53.3k|        }
 9566|       |
 9567|  53.3k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 53.3k]
  ------------------
 9568|  53.3k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|  53.3k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|  53.3k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 53.3k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 53.3k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|  53.3k|            SCN_CLANG_POP
 9585|  53.3k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4407|  11.6k|    {
 4408|  11.6k|        return sync(0);
 4409|  11.6k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6341|  1.79M|    {
 6342|  1.79M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 6343|      0|            return max_size();
 6344|      0|        }
 6345|       |
 6346|  1.79M|        return static_cast<std::size_t>(m_desc &
 6347|  1.79M|                                        ((1 << detail::packed_arg_bits) - 1));
 6348|  1.79M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6367|  3.58M|    {
 6368|  3.58M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6369|  3.58M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6309|  1.79M|    {
 6310|  1.79M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1014|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 6311|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1013|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6312|      0|                return m_args[id];
 6313|      0|            }
 6314|      0|            return {};
 6315|      0|        }
 6316|       |
 6317|  1.79M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1014|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 6318|      0|            return {};
 6319|      0|        }
 6320|       |
 6321|  1.79M|        const auto t = type(id);
 6322|  1.79M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1014|  1.79M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.79M]
  |  |  ------------------
  ------------------
 6323|      0|            return {};
 6324|      0|        }
 6325|       |
 6326|  1.79M|        basic_scan_arg<Context> arg;
 6327|  1.79M|        arg.m_type = t;
 6328|  1.79M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6328:13): [True: 1.79M, False: 0]
  ------------------
 6329|  1.79M|            arg.m_value.ref_value = m_builtin_values[id];
 6330|  1.79M|        }
 6331|      0|        else {
 6332|      0|            arg.m_value = m_values[id];
 6333|      0|        }
 6334|  1.79M|        return arg;
 6335|  1.79M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6376|  1.79M|    {
 6377|       |        // First (0th) index is size, types start after that
 6378|  1.79M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6379|  1.79M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6380|  1.79M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6381|  1.79M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6371|  1.79M|    {
 6372|  1.79M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6373|  1.79M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6124|  3.12M|    {
 6125|  3.12M|        return m_type != detail::arg_type::none_type;
 6126|  3.12M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|   874k|{
 9606|   874k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   874k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   874k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   874k|{
 9463|   874k|#define SCN_VISIT(Type)                                                    \
 9464|   874k|    do {                                                                   \
 9465|   874k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   874k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   874k|        }                                                                  \
 9468|   874k|        else {                                                             \
 9469|   874k|            return vis(monostate_val);                                     \
 9470|   874k|        }                                                                  \
 9471|   874k|    } while (false)
 9472|       |
 9473|   874k|    monostate monostate_val{};
 9474|       |
 9475|   874k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 874k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 874k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 874k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 874k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 874k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 874k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 874k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 874k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 874k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 874k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 874k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 874k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 874k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 874k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 874k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 874k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 874k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 874k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 874k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 874k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 874k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 874k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 874k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 874k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 874k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 874k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|   437k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 437k, False: 437k]
  ------------------
 9557|   437k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|   437k|    do {                                                                   \
  |  | 9465|   437k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   437k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   437k|        }                                                                  \
  |  | 9468|   437k|        else {                                                             \
  |  | 9469|   437k|            return vis(monostate_val);                                     \
  |  | 9470|   437k|        }                                                                  \
  |  | 9471|   437k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   874k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 437k, False: 437k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|   874k|            else {
 9563|   874k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|   874k|    do {                                                                   \
  |  | 9465|   874k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   874k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   874k|        }                                                                  \
  |  | 9468|   874k|        else {                                                             \
  |  | 9469|   874k|            return vis(monostate_val);                                     \
  |  | 9470|   874k|        }                                                                  \
  |  | 9471|   874k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|   874k|            }
 9565|   874k|        }
 9566|       |
 9567|   874k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 874k]
  ------------------
 9568|   874k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   874k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   874k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 874k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 874k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   874k|            SCN_CLANG_POP
 9585|   874k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6170|  4.04M|{
 6171|  4.04M|    return arg.m_type;
 6172|  4.04M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6182|  2.20M|{
 6183|  2.20M|    return arg.m_value;
 6184|  2.20M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9127|   305k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1083|   305k|    static_cast<    \
  |  | 1084|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9128|   305k|    {
 9129|   305k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6444|   611k|        : m_format{format},
 6445|   611k|          m_next_arg_id{next_arg_id},
 6446|   611k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   611k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   611k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   611k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   611k|    {
 6452|   611k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3106|   611k|    {
 3107|   611k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3108|   611k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3072|   611k|    {
 3073|   611k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1085|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3074|   611k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   611k|{
 7971|   611k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   611k|    handler.check_args_exhausted();
 7973|   611k|    return handler.get_error();
 7974|   611k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   611k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   611k|    auto begin = format.data();
 7939|   611k|    auto it = begin;
 7940|   611k|    const auto end = format.data() + format.size();
 7941|       |
 7942|  1.18M|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 611k, False: 575k]
  ------------------
 7943|   611k|        const auto ch = *it++;
 7944|   611k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 611k, False: 0]
  ------------------
 7945|   611k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   611k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   611k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 35.8k, False: 575k]
  ------------------
 7949|  35.8k|                return;
 7950|  35.8k|            }
 7951|   611k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   611k|    }
 7962|       |
 7963|   575k|    handler.on_literal_text(begin, end);
 7964|   575k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7867|   611k|{
 7868|   611k|    struct id_adapter {
 7869|   611k|        constexpr void operator()()
 7870|   611k|        {
 7871|   611k|            arg_id = handler.on_arg_id();
 7872|   611k|        }
 7873|   611k|        constexpr void operator()(std::size_t id)
 7874|   611k|        {
 7875|   611k|            arg_id = handler.on_arg_id(id);
 7876|   611k|        }
 7877|       |
 7878|   611k|        constexpr void on_error(const char* msg)
 7879|   611k|        {
 7880|   611k|            SCN_UNLIKELY_ATTR
 7881|   611k|            handler.on_error(msg);
 7882|   611k|        }
 7883|       |
 7884|   611k|        Handler& handler;
 7885|   611k|        std::size_t arg_id;
 7886|   611k|    };
 7887|       |
 7888|   611k|    ++begin;
 7889|   611k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   611k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 611k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   611k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 611k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   611k|    else {
 7901|   611k|        auto adapter = id_adapter{handler, 0};
 7902|   611k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   611k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   611k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 611k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   611k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 611k, False: 0]
  ------------------
 7913|   611k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   611k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   611k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|  1.22M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.3k, False: 597k]
  |  |  |  Branch (1014:45): [True: 0, False: 611k]
  |  |  |  Branch (1014:45): [True: 14.3k, False: 597k]
  |  |  ------------------
  ------------------
 7919|  14.3k|                handler.on_error("Unknown format specifier");
 7920|  14.3k|                return begin;
 7921|  14.3k|            }
 7922|   611k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   611k|    }
 7929|   597k|    return begin + 1;
 7930|   611k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 9026|   917k|    {
 9027|   917k|        return m_args.get(id);
 9028|   917k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6479|   917k|    {
 6480|   917k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1014|   917k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 917k]
  |  |  ------------------
  ------------------
 6481|      0|            on_error(
 6482|      0|                "Cannot switch from manual to automatic argument indexing");
 6483|      0|            return 0;
 6484|      0|        }
 6485|       |
 6486|   917k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6487|   917k|        do_check_arg_id(id);
 6488|   917k|        return id;
 6489|   917k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6973|   917k|{
 6974|   917k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6974:9): [Folded - Ignored]
  ------------------
 6975|   917k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  291|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   60|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6975:10): [Folded - Ignored]
  |  Branch (6975:22): [Folded - Ignored]
  ------------------
 6976|       |        // The cast below will cause an error on gcc pre-12
 6977|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6978|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6978:13): [True: 0, False: 0]
  ------------------
 6979|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6980|      0|            SCN_UNLIKELY_ATTR
 6981|      0|            on_error("Argument not found");
 6982|      0|        }
 6983|      0|    }
 6984|   917k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   611k|{
 7367|   611k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   611k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   611k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   611k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 611k, False: 0]
  |  Branch (7368:26): [True: 0, False: 611k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   611k|    handler();
 7373|   611k|    return begin;
 7374|   611k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7315|  21.5k|{
 7316|  21.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7317|  21.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1079|  21.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  21.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7318|       |
 7319|  21.5k|    unsigned long long value = 0;
 7320|  43.0k|    do {
 7321|  43.0k|        value *= 10;
 7322|  43.0k|        value += static_cast<unsigned long long>(*begin - '0');
 7323|  43.0k|        if (value >
  ------------------
  |  Branch (7323:13): [True: 0, False: 43.0k]
  ------------------
 7324|  43.0k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7325|      0|            return -1;
 7326|      0|        }
 7327|  43.0k|        ++begin;
 7328|  43.0k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7328:14): [True: 43.0k, False: 0]
  |  Branch (7328:30): [True: 43.0k, False: 0]
  |  Branch (7328:47): [True: 21.5k, False: 21.5k]
  ------------------
 7329|  21.5k|    return static_cast<int>(value);
 7330|  21.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   611k|        {
 7871|   611k|            arg_id = handler.on_arg_id();
 7872|   611k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6474|   896k|    {
 6475|   896k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6476|   896k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4754|   743k|{
 4755|   743k|    if (is_contiguous()) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 743k]
  ------------------
 4756|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4757|      0|                                ranges::default_sentinel};
 4758|      0|    }
 4759|   743k|    return ranges::subrange{forward_iterator{this, 0},
 4760|   743k|                            ranges::default_sentinel};
 4761|   743k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4517|   743k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4518|   743k|    {
 4519|   743k|        SCN_EXPECT(parent);
  ------------------
  |  | 1079|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4520|   743k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1079|   743k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   743k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4521|   743k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6463|  1.81M|    {
 6464|  1.81M|        return m_format.data();
 6465|  1.81M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 8053|   611k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   611k|    {
 8055|   611k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   611k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   611k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   611k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7783|   611k|{
 7784|   611k|    auto do_presentation = [&]() -> const CharT* {
 7785|   611k|        if (*begin == CharT{'['}) {
 7786|   611k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   611k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   611k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   611k|                return begin;
 7792|   611k|            }
 7793|   611k|            handler.on_character_set_string(set);
 7794|   611k|            return begin;
 7795|   611k|        }
 7796|   611k|        if (*begin == CharT{'/'}) {
 7797|   611k|            return parse_presentation_regex(begin, end, handler);
 7798|   611k|        }
 7799|   611k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   611k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   611k|            handler.on_error("Invalid type specifier in format string");
 7802|   611k|            return begin;
 7803|   611k|        }
 7804|   611k|        handler.on_type(type);
 7805|   611k|        return begin;
 7806|   611k|    };
 7807|       |
 7808|   611k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 611k, False: 0]
  |  Branch (7808:28): [True: 589k, False: 21.7k]
  ------------------
 7809|   611k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 589k, False: 0]
  |  Branch (7809:36): [True: 582k, False: 7.17k]
  ------------------
 7810|   582k|        return do_presentation();
 7811|   582k|    }
 7812|       |
 7813|  28.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 28.9k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  28.9k|    begin = parse_align(begin, end, handler);
 7819|  28.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 28.9k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  28.9k|    begin = parse_width(begin, end, handler);
 7825|  28.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 28.9k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  28.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 28.9k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  28.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 7.17k, False: 21.7k]
  ------------------
 7844|  7.17k|        handler.on_localized();
 7845|  7.17k|        ++begin;
 7846|  7.17k|    }
 7847|  28.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 28.9k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  28.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 28.9k, False: 0]
  |  Branch (7852:25): [True: 21.7k, False: 7.17k]
  ------------------
 7853|  21.7k|        do_presentation();
 7854|  21.7k|    }
 7855|  28.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 28.9k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  28.9k|    return begin;
 7861|  28.9k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7430|   884k|{
 7431|   884k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7431:13): [True: 874k, False: 10.7k]
  |  Branch (7431:33): [True: 874k, False: 0]
  ------------------
 7432|   884k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7432:13): [True: 10.7k, False: 0]
  |  Branch (7432:33): [True: 10.7k, False: 0]
  ------------------
 7433|   884k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7784|   604k|    auto do_presentation = [&]() -> const CharT* {
 7785|   604k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 7.44k, False: 597k]
  ------------------
 7786|  7.44k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  7.44k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|  7.44k|            handler.on_character_set_string(set);
 7794|  7.44k|            return begin;
 7795|  7.44k|        }
 7796|   597k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 597k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   597k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   597k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   597k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.17k, False: 589k]
  |  |  ------------------
  ------------------
 7801|  7.17k|            handler.on_error("Invalid type specifier in format string");
 7802|  7.17k|            return begin;
 7803|  7.17k|        }
 7804|   589k|        handler.on_type(type);
 7805|   589k|        return begin;
 7806|   597k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7620|  7.44k|{
 7621|  7.44k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  7.44k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  7.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  7.44k|    auto start = begin;
 7625|  7.44k|    ++begin;
 7626|       |
 7627|  7.44k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|  7.44k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 0, False: 7.44k]
  ------------------
 7634|      0|        handler.on_charset_inverted();
 7635|      0|        ++begin;
 7636|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 0, False: 0]
  ------------------
 7643|      0|            handler.on_charset_single(char32_t{']'});
 7644|      0|            ++begin;
 7645|      0|        }
 7646|      0|    }
 7647|  7.44k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 7.44k]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|  22.3k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 22.3k, False: 0]
  ------------------
 7652|  22.3k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  22.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 22.3k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|  22.3k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 7.44k, False: 14.8k]
  ------------------
 7657|  7.44k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  7.44k|        }
 7659|       |
 7660|  14.8k|        parse_presentation_set_literal(begin, end, handler);
 7661|  14.8k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|  7.44k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7584|  14.8k|{
 7585|  14.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  14.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  14.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|  14.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 14.8k, False: 0]
  |  Branch (7592:25): [True: 14.8k, False: 0]
  |  Branch (7592:49): [True: 14.8k, False: 0]
  ------------------
 7593|  14.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 14.8k, False: 0]
  ------------------
 7594|  14.8k|        ++begin;
 7595|       |
 7596|  14.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  14.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|  14.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|  14.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  14.8k|        return;
 7610|  14.8k|    }
 7611|       |
 7612|      0|    handler.on_charset_single(cp_first);
 7613|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7560|  29.7k|{
 7561|  29.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  29.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  29.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  29.7k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  29.7k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  59.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 29.7k]
  |  |  |  Branch (1014:45): [True: 0, False: 29.7k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  29.7k|    const auto cp =
 7570|  29.7k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  29.7k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 29.7k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|  29.7k|    begin += len;
 7577|  29.7k|    return cp;
 7578|  29.7k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7272|  11.1k|    {
 7273|  11.1k|        m_specs.charset_string_data = fmt.data();
 7274|  11.1k|        m_specs.charset_string_size = fmt.size();
 7275|  11.1k|        on_type(presentation_type::string_set);
 7276|  11.1k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7378|   895k|{
 7379|   895k|    switch (type) {
 7380|      0|        case 'b':
  ------------------
  |  Branch (7380:9): [True: 0, False: 895k]
  ------------------
 7381|      0|        case 'B':
  ------------------
  |  Branch (7381:9): [True: 0, False: 895k]
  ------------------
 7382|      0|            return presentation_type::int_binary;
 7383|      0|        case 'd':
  ------------------
  |  Branch (7383:9): [True: 0, False: 895k]
  ------------------
 7384|      0|            return presentation_type::int_decimal;
 7385|      0|        case 'i':
  ------------------
  |  Branch (7385:9): [True: 0, False: 895k]
  ------------------
 7386|      0|            return presentation_type::int_generic;
 7387|      0|        case 'u':
  ------------------
  |  Branch (7387:9): [True: 0, False: 895k]
  ------------------
 7388|      0|            return presentation_type::int_unsigned_decimal;
 7389|      0|        case 'o':
  ------------------
  |  Branch (7389:9): [True: 0, False: 895k]
  ------------------
 7390|      0|            return presentation_type::int_octal;
 7391|      0|        case 'x':
  ------------------
  |  Branch (7391:9): [True: 0, False: 895k]
  ------------------
 7392|      0|        case 'X':
  ------------------
  |  Branch (7392:9): [True: 0, False: 895k]
  ------------------
 7393|      0|            return presentation_type::int_hex;
 7394|      0|        case 'r':
  ------------------
  |  Branch (7394:9): [True: 0, False: 895k]
  ------------------
 7395|      0|        case 'R':
  ------------------
  |  Branch (7395:9): [True: 0, False: 895k]
  ------------------
 7396|      0|            return presentation_type::int_arbitrary_base;
 7397|      0|        case 'a':
  ------------------
  |  Branch (7397:9): [True: 0, False: 895k]
  ------------------
 7398|      0|        case 'A':
  ------------------
  |  Branch (7398:9): [True: 0, False: 895k]
  ------------------
 7399|      0|            return presentation_type::float_hex;
 7400|      0|        case 'e':
  ------------------
  |  Branch (7400:9): [True: 0, False: 895k]
  ------------------
 7401|      0|        case 'E':
  ------------------
  |  Branch (7401:9): [True: 0, False: 895k]
  ------------------
 7402|      0|            return presentation_type::float_scientific;
 7403|      0|        case 'f':
  ------------------
  |  Branch (7403:9): [True: 0, False: 895k]
  ------------------
 7404|      0|        case 'F':
  ------------------
  |  Branch (7404:9): [True: 0, False: 895k]
  ------------------
 7405|      0|            return presentation_type::float_fixed;
 7406|      0|        case 'g':
  ------------------
  |  Branch (7406:9): [True: 0, False: 895k]
  ------------------
 7407|      0|        case 'G':
  ------------------
  |  Branch (7407:9): [True: 0, False: 895k]
  ------------------
 7408|      0|            return presentation_type::float_general;
 7409|   874k|        case 's':
  ------------------
  |  Branch (7409:9): [True: 874k, False: 21.5k]
  ------------------
 7410|   874k|            return presentation_type::string;
 7411|  10.7k|        case 'c':
  ------------------
  |  Branch (7411:9): [True: 10.7k, False: 884k]
  ------------------
 7412|  10.7k|            return presentation_type::character;
 7413|      0|        case '?':
  ------------------
  |  Branch (7413:9): [True: 0, False: 895k]
  ------------------
 7414|      0|            return presentation_type::escaped_character;
 7415|      0|        case 'p':
  ------------------
  |  Branch (7415:9): [True: 0, False: 895k]
  ------------------
 7416|      0|            return presentation_type::pointer;
 7417|      0|        case '[':
  ------------------
  |  Branch (7417:9): [True: 0, False: 895k]
  ------------------
 7418|      0|        case '/':
  ------------------
  |  Branch (7418:9): [True: 0, False: 895k]
  ------------------
 7419|       |            // Should be handled by parse_presentation_set and
 7420|       |            // parse_presentation_regex
 7421|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7422|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7423|  10.7k|        default:
  ------------------
  |  Branch (7423:9): [True: 10.7k, False: 884k]
  ------------------
 7424|  10.7k|            return presentation_type::none;
 7425|   895k|    }
 7426|   895k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7455|  28.9k|{
 7456|  28.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  28.9k|    auto check_align = [](wchar_t ch) {
 7459|  28.9k|        switch (ch) {
 7460|  28.9k|            case L'<':
 7461|  28.9k|                return align_type::left;
 7462|  28.9k|            case L'>':
 7463|  28.9k|                return align_type::right;
 7464|  28.9k|            case L'^':
 7465|  28.9k|                return align_type::center;
 7466|  28.9k|            default:
 7467|  28.9k|                return align_type::none;
 7468|  28.9k|        }
 7469|  28.9k|    };
 7470|       |
 7471|  28.9k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  28.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  57.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 28.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 28.9k]
  |  |  |  Branch (1014:45): [True: 0, False: 28.9k]
  |  |  ------------------
  ------------------
 7473|  28.9k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  28.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  28.9k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  28.9k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  28.9k|    const auto begin_before_fill = begin;
 7483|  28.9k|    begin += potential_fill_len;
 7484|       |
 7485|  28.9k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 28.9k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  28.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  28.9k|    const auto begin_after_fill = begin;
 7491|  28.9k|    ++begin;
 7492|       |
 7493|  28.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 28.9k, False: 0]
  ------------------
 7494|  28.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 28.9k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  28.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 7.44k, False: 21.5k]
  ------------------
 7499|  7.44k|            return begin_before_fill;
 7500|  7.44k|        }
 7501|  28.9k|    }
 7502|       |
 7503|  21.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 21.5k, False: 0]
  ------------------
 7504|  21.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 21.5k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  21.5k|        return begin_before_fill;
 7509|  21.5k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  21.5k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7437|  43.4k|{
 7438|  43.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7439|  43.4k|    if constexpr (sizeof(CharT) != 1) {
 7440|  43.4k|        return 1;
 7441|       |    }
 7442|       |    else {
 7443|       |        const auto lengths =
 7444|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7445|       |            "\3\4";
 7446|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7447|       |        return len;
 7448|       |    }
 7449|  43.4k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7458|  57.9k|    auto check_align = [](wchar_t ch) {
 7459|  57.9k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 57.9k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 57.9k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 57.9k]
  ------------------
 7465|      0|                return align_type::center;
 7466|  57.9k|            default:
  ------------------
  |  Branch (7466:13): [True: 57.9k, False: 0]
  ------------------
 7467|  57.9k|                return align_type::none;
 7468|  57.9k|        }
 7469|  57.9k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7520|  28.9k|{
 7521|  28.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  28.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 28.9k, False: 0]
  |  Branch (7523:33): [True: 14.3k, False: 14.6k]
  ------------------
 7524|  14.3k|        int width = parse_simple_int(begin, end);
 7525|  14.3k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  14.3k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 14.3k, False: 0]
  |  |  ------------------
  ------------------
 7526|  14.3k|            handler.on_width(width);
 7527|  14.3k|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|  14.3k|    }
 7533|  28.9k|    return begin;
 7534|  28.9k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 8059|  7.17k|    {
 8060|  7.17k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  7.17k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 7.17k, False: 0]
  ------------------
 8062|  7.17k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 7.17k, False: 0]
  ------------------
 8063|  7.17k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 7.17k, False: 0]
  ------------------
 8064|  7.17k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 7.17k, False: 0]
  ------------------
 8065|  7.17k|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|  7.17k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|  7.17k|        }
 8070|       |
 8071|      0|        Handler::on_localized();
 8072|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9605|   597k|{
 9606|   597k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   597k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   597k|{
 9463|   597k|#define SCN_VISIT(Type)                                                    \
 9464|   597k|    do {                                                                   \
 9465|   597k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   597k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   597k|        }                                                                  \
 9468|   597k|        else {                                                             \
 9469|   597k|            return vis(monostate_val);                                     \
 9470|   597k|        }                                                                  \
 9471|   597k|    } while (false)
 9472|       |
 9473|   597k|    monostate monostate_val{};
 9474|       |
 9475|   597k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 597k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 597k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 597k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 597k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 597k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 597k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 597k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 597k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 597k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 597k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 597k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 597k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 597k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 597k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 597k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 597k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 597k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 597k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 597k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 597k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 597k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 597k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 597k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 597k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 597k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 597k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|   298k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 298k, False: 298k]
  ------------------
 9557|   298k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|   298k|    do {                                                                   \
  |  | 9465|   298k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   298k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   298k|        }                                                                  \
  |  | 9468|   298k|        else {                                                             \
  |  | 9469|   298k|            return vis(monostate_val);                                     \
  |  | 9470|   298k|        }                                                                  \
  |  | 9471|   298k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   597k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 298k, False: 298k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|   597k|            else {
 9563|   597k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|   597k|    do {                                                                   \
  |  | 9465|   597k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   597k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   597k|        }                                                                  \
  |  | 9468|   597k|        else {                                                             \
  |  | 9469|   597k|            return vis(monostate_val);                                     \
  |  | 9470|   597k|        }                                                                  \
  |  | 9471|   597k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|   597k|            }
 9565|   597k|        }
 9566|       |
 9567|   597k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 597k]
  ------------------
 9568|   597k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   597k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   597k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 597k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 597k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   597k|            SCN_CLANG_POP
 9585|   597k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9605|   437k|{
 9606|   437k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   437k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   437k|{
 9463|   437k|#define SCN_VISIT(Type)                                                    \
 9464|   437k|    do {                                                                   \
 9465|   437k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   437k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   437k|        }                                                                  \
 9468|   437k|        else {                                                             \
 9469|   437k|            return vis(monostate_val);                                     \
 9470|   437k|        }                                                                  \
 9471|   437k|    } while (false)
 9472|       |
 9473|   437k|    monostate monostate_val{};
 9474|       |
 9475|   437k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 437k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 437k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 437k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 437k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 437k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 437k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 437k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 437k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 437k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 437k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 437k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 437k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 437k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 437k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 437k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 437k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 437k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 437k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 437k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 437k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 437k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 437k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 437k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 437k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 437k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 437k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|   437k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 437k, False: 0]
  ------------------
 9557|   437k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|   437k|    do {                                                                   \
  |  | 9465|   437k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   437k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   437k|        }                                                                  \
  |  | 9468|   437k|        else {                                                             \
  |  | 9469|   437k|            return vis(monostate_val);                                     \
  |  | 9470|   437k|        }                                                                  \
  |  | 9471|   437k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   437k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 437k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|   437k|            else {
 9563|   437k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|   437k|    do {                                                                   \
  |  | 9465|   437k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   437k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   437k|        }                                                                  \
  |  | 9468|   437k|        else {                                                             \
  |  | 9469|   437k|            return vis(monostate_val);                                     \
  |  | 9470|   437k|        }                                                                  \
  |  | 9471|   437k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|   437k|            }
 9565|   437k|        }
 9566|       |
 9567|   437k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 437k]
  ------------------
 9568|   437k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   437k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   437k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 437k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 437k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   437k|            SCN_CLANG_POP
 9585|   437k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6444|   305k|        : m_format{format},
 6445|   305k|          m_next_arg_id{next_arg_id},
 6446|   305k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6446:27): [Folded - Ignored]
  ------------------
 6447|   305k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6447:27): [Folded - Ignored]
  ------------------
 6448|       |          m_is_borrowed(
 6449|   305k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6449:16): [Folded - Ignored]
  |  Branch (6449:41): [Folded - Ignored]
  ------------------
 6450|   305k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6450:15): [Folded - Ignored]
  ------------------
 6451|   305k|    {
 6452|   305k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7970|   305k|{
 7971|   305k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7972|   305k|    handler.check_args_exhausted();
 7973|   305k|    return handler.get_error();
 7974|   305k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7935|   305k|{
 7936|       |    // TODO: memchr fast path with a larger (> 32) format string
 7937|       |
 7938|   305k|    auto begin = format.data();
 7939|   305k|    auto it = begin;
 7940|   305k|    const auto end = format.data() + format.size();
 7941|       |
 7942|   593k|    while (it != end) {
  ------------------
  |  Branch (7942:12): [True: 305k, False: 287k]
  ------------------
 7943|   305k|        const auto ch = *it++;
 7944|   305k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7944:13): [True: 305k, False: 0]
  ------------------
 7945|   305k|            handler.on_literal_text(begin, it - 1);
 7946|       |
 7947|   305k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7948|   305k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7948:17): [True: 17.9k, False: 287k]
  ------------------
 7949|  17.9k|                return;
 7950|  17.9k|            }
 7951|   305k|        }
 7952|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7952:18): [True: 0, False: 0]
  ------------------
 7953|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  |  Branch (1014:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7954|      0|                handler.on_error("Unmatched '}' in format string");
 7955|      0|                return;
 7956|      0|            }
 7957|       |
 7958|      0|            handler.on_literal_text(begin, it);
 7959|      0|            begin = ++it;
 7960|      0|        }
 7961|   305k|    }
 7962|       |
 7963|   287k|    handler.on_literal_text(begin, end);
 7964|   287k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9165|   287k|    {
 9166|   287k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   287k|    static_cast<    \
  |  | 1084|   287k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9167|   287k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7867|   305k|{
 7868|   305k|    struct id_adapter {
 7869|   305k|        constexpr void operator()()
 7870|   305k|        {
 7871|   305k|            arg_id = handler.on_arg_id();
 7872|   305k|        }
 7873|   305k|        constexpr void operator()(std::size_t id)
 7874|   305k|        {
 7875|   305k|            arg_id = handler.on_arg_id(id);
 7876|   305k|        }
 7877|       |
 7878|   305k|        constexpr void on_error(const char* msg)
 7879|   305k|        {
 7880|   305k|            SCN_UNLIKELY_ATTR
 7881|   305k|            handler.on_error(msg);
 7882|   305k|        }
 7883|       |
 7884|   305k|        Handler& handler;
 7885|   305k|        std::size_t arg_id;
 7886|   305k|    };
 7887|       |
 7888|   305k|    ++begin;
 7889|   305k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 305k]
  |  |  ------------------
  ------------------
 7890|      0|        handler.on_error("Unexpected end of replacement field");
 7891|      0|        return begin;
 7892|      0|    }
 7893|       |
 7894|   305k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7894:9): [True: 0, False: 305k]
  ------------------
 7895|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7896|      0|    }
 7897|   305k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7897:14): [True: 0, False: 305k]
  ------------------
 7898|      0|        handler.on_literal_text(begin, begin + 1);
 7899|      0|    }
 7900|   305k|    else {
 7901|   305k|        auto adapter = id_adapter{handler, 0};
 7902|   305k|        begin = parse_arg_id(begin, end, adapter);
 7903|       |
 7904|   305k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 305k]
  |  |  ------------------
  ------------------
 7905|      0|            handler.on_error("Missing '}' in format string");
 7906|      0|            return begin;
 7907|      0|        }
 7908|       |
 7909|   305k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7909:13): [True: 0, False: 305k]
  ------------------
 7910|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7911|      0|        }
 7912|   305k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7912:18): [True: 305k, False: 0]
  ------------------
 7913|   305k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1014|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 305k]
  |  |  ------------------
  ------------------
 7914|      0|                handler.on_error("Unexpected end of replacement field");
 7915|      0|                return begin;
 7916|      0|            }
 7917|   305k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7918|   305k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1014|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.17k, False: 298k]
  |  |  |  Branch (1014:45): [True: 0, False: 305k]
  |  |  |  Branch (1014:45): [True: 7.17k, False: 298k]
  |  |  ------------------
  ------------------
 7919|  7.17k|                handler.on_error("Unknown format specifier");
 7920|  7.17k|                return begin;
 7921|  7.17k|            }
 7922|   305k|        }
 7923|      0|        else {
 7924|      0|            SCN_UNLIKELY_ATTR
 7925|      0|            handler.on_error("Missing '}' in format string");
 7926|      0|            return begin;
 7927|      0|        }
 7928|   305k|    }
 7929|   298k|    return begin + 1;
 7930|   305k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7366|   305k|{
 7367|   305k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7368|   305k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7368:9): [True: 305k, False: 0]
  |  Branch (7368:26): [True: 0, False: 305k]
  ------------------
 7369|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7370|      0|    }
 7371|       |
 7372|   305k|    handler();
 7373|   305k|    return begin;
 7374|   305k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7870|   305k|        {
 7871|   305k|            arg_id = handler.on_arg_id();
 7872|   305k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 8053|   305k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1085|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8054|   305k|    {
 8055|   305k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1079|   305k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   305k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8056|   305k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7783|   305k|{
 7784|   305k|    auto do_presentation = [&]() -> const CharT* {
 7785|   305k|        if (*begin == CharT{'['}) {
 7786|   305k|            auto set = parse_presentation_set(begin, end, handler);
 7787|   305k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7788|       |                // clang-format off
 7789|   305k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|   305k|                return begin;
 7792|   305k|            }
 7793|   305k|            handler.on_character_set_string(set);
 7794|   305k|            return begin;
 7795|   305k|        }
 7796|   305k|        if (*begin == CharT{'/'}) {
 7797|   305k|            return parse_presentation_regex(begin, end, handler);
 7798|   305k|        }
 7799|   305k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   305k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7801|   305k|            handler.on_error("Invalid type specifier in format string");
 7802|   305k|            return begin;
 7803|   305k|        }
 7804|   305k|        handler.on_type(type);
 7805|   305k|        return begin;
 7806|   305k|    };
 7807|       |
 7808|   305k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7808:9): [True: 305k, False: 0]
  |  Branch (7808:28): [True: 294k, False: 10.8k]
  ------------------
 7809|   305k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7809:9): [True: 294k, False: 0]
  |  Branch (7809:36): [True: 291k, False: 3.58k]
  ------------------
 7810|   291k|        return do_presentation();
 7811|   291k|    }
 7812|       |
 7813|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7814|      0|        handler.on_error("Unexpected end of format string");
 7815|      0|        return begin;
 7816|      0|    }
 7817|       |
 7818|  14.4k|    begin = parse_align(begin, end, handler);
 7819|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7820|      0|        handler.on_error("Unexpected end of format string");
 7821|      0|        return begin;
 7822|      0|    }
 7823|       |
 7824|  14.4k|    begin = parse_width(begin, end, handler);
 7825|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7826|      0|        handler.on_error("Unexpected end of format string");
 7827|      0|        return begin;
 7828|      0|    }
 7829|       |
 7830|  14.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7830:9): [True: 0, False: 14.4k]
  ------------------
 7831|      0|        ++begin;
 7832|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7833|      0|            handler.on_error("Unexpected end of format string");
 7834|      0|            return begin;
 7835|      0|        }
 7836|      0|        begin = parse_precision(begin, end, handler);
 7837|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7838|      0|            handler.on_error("Unexpected end of format string");
 7839|      0|            return begin;
 7840|      0|        }
 7841|      0|    }
 7842|       |
 7843|  14.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7843:9): [True: 3.58k, False: 10.8k]
  ------------------
 7844|  3.58k|        handler.on_localized();
 7845|  3.58k|        ++begin;
 7846|  3.58k|    }
 7847|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7848|      0|        handler.on_error("Unexpected end of format string");
 7849|      0|        return begin;
 7850|      0|    }
 7851|       |
 7852|  14.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7852:9): [True: 14.4k, False: 0]
  |  Branch (7852:25): [True: 10.8k, False: 3.58k]
  ------------------
 7853|  10.8k|        do_presentation();
 7854|  10.8k|    }
 7855|  14.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7856|      0|        handler.on_error("Unexpected end of format string");
 7857|      0|        return begin;
 7858|      0|    }
 7859|       |
 7860|  14.4k|    return begin;
 7861|  14.4k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7784|   302k|    auto do_presentation = [&]() -> const CharT* {
 7785|   302k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7785:13): [True: 3.72k, False: 298k]
  ------------------
 7786|  3.72k|            auto set = parse_presentation_set(begin, end, handler);
 7787|  3.72k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.72k]
  |  |  ------------------
  ------------------
 7788|       |                // clang-format off
 7789|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7790|       |                // clang-format on
 7791|      0|                return begin;
 7792|      0|            }
 7793|  3.72k|            handler.on_character_set_string(set);
 7794|  3.72k|            return begin;
 7795|  3.72k|        }
 7796|   298k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7796:13): [True: 0, False: 298k]
  ------------------
 7797|      0|            return parse_presentation_regex(begin, end, handler);
 7798|      0|        }
 7799|   298k|        presentation_type type = parse_presentation_type(*begin++);
 7800|   298k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1014|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.58k, False: 294k]
  |  |  ------------------
  ------------------
 7801|  3.58k|            handler.on_error("Invalid type specifier in format string");
 7802|  3.58k|            return begin;
 7803|  3.58k|        }
 7804|   294k|        handler.on_type(type);
 7805|   294k|        return begin;
 7806|   298k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7620|  3.72k|{
 7621|  3.72k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  3.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7622|  3.72k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1079|  3.72k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  3.72k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7623|       |
 7624|  3.72k|    auto start = begin;
 7625|  3.72k|    ++begin;
 7626|       |
 7627|  3.72k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 3.72k]
  |  |  ------------------
  ------------------
 7628|       |        // clang-format off
 7629|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7630|       |        // clang-format on
 7631|      0|        return {};
 7632|      0|    }
 7633|  3.72k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7633:9): [True: 0, False: 3.72k]
  ------------------
 7634|      0|        handler.on_charset_inverted();
 7635|      0|        ++begin;
 7636|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7637|       |            // clang-format off
 7638|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7639|       |            // clang-format on
 7640|      0|            return {};
 7641|      0|        }
 7642|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7642:13): [True: 0, False: 0]
  ------------------
 7643|      0|            handler.on_charset_single(char32_t{']'});
 7644|      0|            ++begin;
 7645|      0|        }
 7646|      0|    }
 7647|  3.72k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7647:14): [True: 0, False: 3.72k]
  ------------------
 7648|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7649|      0|    }
 7650|       |
 7651|  11.1k|    while (begin != end) {
  ------------------
  |  Branch (7651:12): [True: 11.1k, False: 0]
  ------------------
 7652|  11.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  11.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 11.1k]
  |  |  ------------------
  ------------------
 7653|      0|            break;
 7654|      0|        }
 7655|       |
 7656|  11.1k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7656:13): [True: 3.72k, False: 7.44k]
  ------------------
 7657|  3.72k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7658|  3.72k|        }
 7659|       |
 7660|  7.44k|        parse_presentation_set_literal(begin, end, handler);
 7661|  7.44k|    }
 7662|       |
 7663|      0|    SCN_UNLIKELY_ATTR
 7664|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7665|      0|    return {};
 7666|  3.72k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7584|  7.44k|{
 7585|  7.44k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  7.44k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  7.44k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7586|       |
 7587|  7.44k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7588|  7.44k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7589|      0|        return;
 7590|      0|    }
 7591|       |
 7592|  7.44k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7592:9): [True: 7.44k, False: 0]
  |  Branch (7592:25): [True: 7.44k, False: 0]
  |  Branch (7592:49): [True: 7.44k, False: 0]
  ------------------
 7593|  7.44k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7593:9): [True: 7.44k, False: 0]
  ------------------
 7594|  7.44k|        ++begin;
 7595|       |
 7596|  7.44k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7597|  7.44k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7598|      0|            return;
 7599|      0|        }
 7600|       |
 7601|  7.44k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  ------------------
  ------------------
 7602|       |            // clang-format off
 7603|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7604|       |            // clang-format on
 7605|      0|            return;
 7606|      0|        }
 7607|       |
 7608|  7.44k|        handler.on_charset_range(cp_first, cp_second + 1);
 7609|  7.44k|        return;
 7610|  7.44k|    }
 7611|       |
 7612|      0|    handler.on_charset_single(cp_first);
 7613|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7560|  14.8k|{
 7561|  14.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  14.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7562|       |
 7563|  14.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7564|  14.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1014|  29.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  |  Branch (1014:45): [True: 0, False: 14.8k]
  |  |  |  Branch (1014:45): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7565|      0|        handler.on_error("Invalid encoding in format string");
 7566|      0|        return invalid_code_point;
 7567|      0|    }
 7568|       |
 7569|  14.8k|    const auto cp =
 7570|  14.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7571|  14.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1014|  14.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.8k]
  |  |  ------------------
  ------------------
 7572|      0|        handler.on_error("Invalid encoding in format string");
 7573|      0|        return invalid_code_point;
 7574|      0|    }
 7575|       |
 7576|  14.8k|    begin += len;
 7577|  14.8k|    return cp;
 7578|  14.8k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7455|  14.4k|{
 7456|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7457|       |
 7458|  14.4k|    auto check_align = [](wchar_t ch) {
 7459|  14.4k|        switch (ch) {
 7460|  14.4k|            case L'<':
 7461|  14.4k|                return align_type::left;
 7462|  14.4k|            case L'>':
 7463|  14.4k|                return align_type::right;
 7464|  14.4k|            case L'^':
 7465|  14.4k|                return align_type::center;
 7466|  14.4k|            default:
 7467|  14.4k|                return align_type::none;
 7468|  14.4k|        }
 7469|  14.4k|    };
 7470|       |
 7471|  14.4k|    auto potential_fill_len = code_point_length(begin, end);
 7472|  14.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1014|  28.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 14.4k]
  |  |  |  Branch (1014:45): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7473|  14.4k|                     std::distance(begin, end) < potential_fill_len)) {
 7474|      0|        handler.on_error("Invalid encoding in fill character");
 7475|      0|        return begin;
 7476|      0|    }
 7477|       |
 7478|  14.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7479|       |
 7480|  14.4k|    auto potential_fill = std::basic_string_view<CharT>{
 7481|  14.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7482|  14.4k|    const auto begin_before_fill = begin;
 7483|  14.4k|    begin += potential_fill_len;
 7484|       |
 7485|  14.4k|    if (begin == end) {
  ------------------
  |  Branch (7485:9): [True: 0, False: 14.4k]
  ------------------
 7486|      0|        return begin_before_fill;
 7487|      0|    }
 7488|       |
 7489|  14.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7490|  14.4k|    const auto begin_after_fill = begin;
 7491|  14.4k|    ++begin;
 7492|       |
 7493|  14.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7493:9): [True: 14.4k, False: 0]
  ------------------
 7494|  14.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1014|  14.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 14.4k]
  |  |  ------------------
  ------------------
 7495|      0|            handler.on_error("Invalid fill character '{' in format string");
 7496|      0|            return begin;
 7497|      0|        }
 7498|  14.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7498:13): [True: 3.72k, False: 10.7k]
  ------------------
 7499|  3.72k|            return begin_before_fill;
 7500|  3.72k|        }
 7501|  14.4k|    }
 7502|       |
 7503|  10.7k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7503:9): [True: 10.7k, False: 0]
  ------------------
 7504|  10.7k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7504:13): [True: 0, False: 10.7k]
  ------------------
 7505|      0|            handler.on_align(potential_align_on_fill);
 7506|      0|            return begin_after_fill;
 7507|      0|        }
 7508|  10.7k|        return begin_before_fill;
 7509|  10.7k|    }
 7510|       |
 7511|      0|    handler.on_fill(potential_fill);
 7512|      0|    handler.on_align(potential_align_after_fill);
 7513|      0|    return begin;
 7514|  10.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7458|  28.9k|    auto check_align = [](wchar_t ch) {
 7459|  28.9k|        switch (ch) {
 7460|      0|            case L'<':
  ------------------
  |  Branch (7460:13): [True: 0, False: 28.9k]
  ------------------
 7461|      0|                return align_type::left;
 7462|      0|            case L'>':
  ------------------
  |  Branch (7462:13): [True: 0, False: 28.9k]
  ------------------
 7463|      0|                return align_type::right;
 7464|      0|            case L'^':
  ------------------
  |  Branch (7464:13): [True: 0, False: 28.9k]
  ------------------
 7465|      0|                return align_type::center;
 7466|  28.9k|            default:
  ------------------
  |  Branch (7466:13): [True: 28.9k, False: 0]
  ------------------
 7467|  28.9k|                return align_type::none;
 7468|  28.9k|        }
 7469|  28.9k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7520|  14.4k|{
 7521|  14.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1079|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7522|       |
 7523|  14.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7523:9): [True: 14.4k, False: 0]
  |  Branch (7523:33): [True: 7.17k, False: 7.30k]
  ------------------
 7524|  7.17k|        int width = parse_simple_int(begin, end);
 7525|  7.17k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1013|  7.17k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 7.17k, False: 0]
  |  |  ------------------
  ------------------
 7526|  7.17k|            handler.on_width(width);
 7527|  7.17k|        }
 7528|      0|        else {
 7529|      0|            handler.on_error("Invalid field width");
 7530|      0|            return begin;
 7531|      0|        }
 7532|  7.17k|    }
 7533|  14.4k|    return begin;
 7534|  14.4k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 8059|  3.58k|    {
 8060|  3.58k|        const auto cat = get_category_for_arg_type(m_arg_type);
 8061|  3.58k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (8061:13): [True: 3.58k, False: 0]
  ------------------
 8062|  3.58k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (8062:13): [True: 3.58k, False: 0]
  ------------------
 8063|  3.58k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (8063:13): [True: 3.58k, False: 0]
  ------------------
 8064|  3.58k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (8064:13): [True: 3.58k, False: 0]
  ------------------
 8065|  3.58k|            SCN_UNLIKELY_ATTR
 8066|       |            // clang-format off
 8067|  3.58k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 8068|       |            // clang-format on
 8069|  3.58k|        }
 8070|       |
 8071|      0|        Handler::on_localized();
 8072|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9605|   298k|{
 9606|   298k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9607|   298k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9462|   298k|{
 9463|   298k|#define SCN_VISIT(Type)                                                    \
 9464|   298k|    do {                                                                   \
 9465|   298k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
 9466|   298k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9467|   298k|        }                                                                  \
 9468|   298k|        else {                                                             \
 9469|   298k|            return vis(monostate_val);                                     \
 9470|   298k|        }                                                                  \
 9471|   298k|    } while (false)
 9472|       |
 9473|   298k|    monostate monostate_val{};
 9474|       |
 9475|   298k|    switch (get_arg_type(arg)) {
 9476|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9476:9): [True: 0, False: 298k]
  ------------------
 9477|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9478|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9478:9): [True: 0, False: 298k]
  ------------------
 9479|      0|            SCN_VISIT(short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9480|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9480:9): [True: 0, False: 298k]
  ------------------
 9481|      0|            SCN_VISIT(int);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9482|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9482:9): [True: 0, False: 298k]
  ------------------
 9483|      0|            SCN_VISIT(long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9484|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9484:9): [True: 0, False: 298k]
  ------------------
 9485|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9486|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9486:9): [True: 0, False: 298k]
  ------------------
 9487|      0|#if SCN_HAS_INT128
 9488|      0|            SCN_VISIT(int128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9489|       |#else
 9490|       |            return vis(monostate_val);
 9491|       |#endif
 9492|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9492:9): [True: 0, False: 298k]
  ------------------
 9493|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9494|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9494:9): [True: 0, False: 298k]
  ------------------
 9495|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9496|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9496:9): [True: 0, False: 298k]
  ------------------
 9497|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9498|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9498:9): [True: 0, False: 298k]
  ------------------
 9499|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9500|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9500:9): [True: 0, False: 298k]
  ------------------
 9501|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9502|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9502:9): [True: 0, False: 298k]
  ------------------
 9503|      0|#if SCN_HAS_INT128
 9504|      0|            SCN_VISIT(uint128);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9505|       |#else
 9506|       |            return vis(monostate_val);
 9507|       |#endif
 9508|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9508:9): [True: 0, False: 298k]
  ------------------
 9509|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9510|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9510:9): [True: 0, False: 298k]
  ------------------
 9511|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9512|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9512:9): [True: 0, False: 298k]
  ------------------
 9513|      0|            SCN_VISIT(char);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9514|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9514:9): [True: 0, False: 298k]
  ------------------
 9515|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9516|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9516:9): [True: 0, False: 298k]
  ------------------
 9517|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9518|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9518:9): [True: 0, False: 298k]
  ------------------
 9519|      0|            SCN_VISIT(float);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9520|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9520:9): [True: 0, False: 298k]
  ------------------
 9521|      0|            SCN_VISIT(double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9522|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9522:9): [True: 0, False: 298k]
  ------------------
 9523|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9524|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9524:9): [True: 0, False: 298k]
  ------------------
 9525|       |#if SCN_HAS_STD_F16
 9526|       |            SCN_VISIT(std::float16_t);
 9527|       |#else
 9528|      0|            return vis(monostate_val);
 9529|      0|#endif
 9530|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9530:9): [True: 0, False: 298k]
  ------------------
 9531|       |#if SCN_HAS_STD_F32
 9532|       |            SCN_VISIT(std::float32_t);
 9533|       |#else
 9534|      0|            return vis(monostate_val);
 9535|      0|#endif
 9536|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9536:9): [True: 0, False: 298k]
  ------------------
 9537|       |#if SCN_HAS_STD_F64
 9538|       |            SCN_VISIT(std::float64_t);
 9539|       |#else
 9540|      0|            return vis(monostate_val);
 9541|      0|#endif
 9542|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9542:9): [True: 0, False: 298k]
  ------------------
 9543|       |#if SCN_HAS_STD_F64
 9544|       |            SCN_VISIT(std::float128_t);
 9545|       |#else
 9546|      0|            return vis(monostate_val);
 9547|      0|#endif
 9548|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9548:9): [True: 0, False: 298k]
  ------------------
 9549|       |#if SCN_HAS_STD_BF16
 9550|       |            SCN_VISIT(std::bfloat16_t);
 9551|       |#else
 9552|      0|            return vis(monostate_val);
 9553|      0|#endif
 9554|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9554:9): [True: 0, False: 298k]
  ------------------
 9555|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9464|      0|    do {                                                                   \
  |  | 9465|      0|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|      0|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|      0|        }                                                                  \
  |  | 9468|      0|        else {                                                             \
  |  | 9469|      0|            return vis(monostate_val);                                     \
  |  | 9470|      0|        }                                                                  \
  |  | 9471|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9556|   298k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9556:9): [True: 298k, False: 0]
  ------------------
 9557|   298k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9464|   298k|    do {                                                                   \
  |  | 9465|   298k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   298k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   298k|        }                                                                  \
  |  | 9468|   298k|        else {                                                             \
  |  | 9469|   298k|            return vis(monostate_val);                                     \
  |  | 9470|   298k|        }                                                                  \
  |  | 9471|   298k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9558|   298k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9558:9): [True: 0, False: 298k]
  ------------------
 9559|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9560|       |                SCN_VISIT(std::string_view);
 9561|       |            }
 9562|   298k|            else {
 9563|   298k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9464|   298k|    do {                                                                   \
  |  | 9465|   298k|        if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9466|   298k|            return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9467|   298k|        }                                                                  \
  |  | 9468|   298k|        else {                                                             \
  |  | 9469|   298k|            return vis(monostate_val);                                     \
  |  | 9470|   298k|        }                                                                  \
  |  | 9471|   298k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (9471:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 9564|   298k|            }
 9565|   298k|        }
 9566|       |
 9567|   298k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9567:9): [True: 0, False: 298k]
  ------------------
 9568|   298k|#if !SCN_DISABLE_TYPE_CUSTOM
 9569|   298k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9570|   298k|                get_arg_value(arg).custom_value));
 9571|       |#else
 9572|       |            return vis(monostate_val);
 9573|       |#endif
 9574|       |
 9575|      0|            SCN_CLANG_PUSH
 9576|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9577|       |
 9578|      0|            SCN_UNLIKELY_ATTR
 9579|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9579:9): [True: 0, False: 298k]
  ------------------
 9580|      0|        default: {
  ------------------
  |  Branch (9580:9): [True: 0, False: 298k]
  ------------------
 9581|      0|            return vis(monostate_val);
 9582|      0|        }
 9583|       |
 9584|   298k|            SCN_CLANG_POP
 9585|   298k|    }
 9586|       |
 9587|      0|#undef SCN_VISIT
 9588|       |
 9589|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9590|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9591|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4407|  23.3k|    {
 4408|  23.3k|        return sync(0);
 4409|  23.3k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6295|  63.4k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6295|   437k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   298k|{
   89|   298k|    auto result = make_scan_result<Source, Args...>();
   90|   298k|    fill_scan_result(result,
   91|   298k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   298k|                           make_scan_args<wscan_context>(result->values())));
   93|   298k|    return result;
   94|   298k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   597k|{
   44|   597k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   597k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   298k|{
  131|   298k|    auto result = make_scan_result<Source, Args...>();
  132|   298k|    fill_scan_result(result,
  133|   298k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   298k|                           make_scan_args<wscan_context>(result->values())));
  135|   298k|    return result;
  136|   298k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   597k|{
   60|   597k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   597k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   145k|{
  171|   145k|    auto result = make_scan_result<Source, T>();
  172|   145k|    fill_scan_result(
  173|   145k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   145k|                            detail::make_arg<wscan_context>(result->value())));
  175|   145k|    return result;
  176|   145k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   291k|{
   72|   291k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   291k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   298k|{
   89|   298k|    auto result = make_scan_result<Source, Args...>();
   90|   298k|    fill_scan_result(result,
   91|   298k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   298k|                           make_scan_args<wscan_context>(result->values())));
   93|   298k|    return result;
   94|   298k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   298k|{
  131|   298k|    auto result = make_scan_result<Source, Args...>();
  132|   298k|    fill_scan_result(result,
  133|   298k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   298k|                           make_scan_args<wscan_context>(result->values())));
  135|   298k|    return result;
  136|   298k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   145k|{
  171|   145k|    auto result = make_scan_result<Source, T>();
  172|   145k|    fill_scan_result(
  173|   145k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   145k|                            detail::make_arg<wscan_context>(result->value())));
  175|   145k|    return result;
  176|   145k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   298k|{
   89|   298k|    auto result = make_scan_result<Source, Args...>();
   90|   298k|    fill_scan_result(result,
   91|   298k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   298k|                           make_scan_args<wscan_context>(result->values())));
   93|   298k|    return result;
   94|   298k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   298k|{
   44|   298k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   298k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   298k|{
  131|   298k|    auto result = make_scan_result<Source, Args...>();
  132|   298k|    fill_scan_result(result,
  133|   298k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   298k|                           make_scan_args<wscan_context>(result->values())));
  135|   298k|    return result;
  136|   298k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   298k|{
   60|   298k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   298k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   145k|{
  171|   145k|    auto result = make_scan_result<Source, T>();
  172|   145k|    fill_scan_result(
  173|   145k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1085|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   145k|                            detail::make_arg<wscan_context>(result->value())));
  175|   145k|    return result;
  176|   145k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   145k|{
   72|   145k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1085|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   145k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.03M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.03M|{
  309|  1.03M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.03M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2983|  85.7k|{
 2984|  85.7k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2985|  85.7k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2991|  53.0k|{
 2992|  53.0k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2993|  53.0k|    return sync_after_vscan(source, n);
 2994|  53.0k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3001|   597k|{
 3002|   597k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 3003|   597k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3009|   298k|{
 3010|   298k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 3011|   298k|    return sync_after_vscan(source, n);
 3012|   298k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   311k|{
  207|   311k|    return find_classic_impl(
  208|   311k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   311k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   311k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   315k|{
  215|   315k|    return find_classic_impl(
  216|   315k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   315k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   315k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2952|  85.7k|{
 2953|  85.7k|    return vscan_internal(source, format, args);
 2954|  85.7k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2958|  53.0k|{
 2959|  53.0k|    auto n = vscan_internal(source, format, args);
 2960|  53.0k|    return sync_after_vscan(source, n);
 2961|  53.0k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2966|   597k|{
 2967|   597k|    return vscan_internal(source, format, args);
 2968|   597k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2972|   298k|{
 2973|   298k|    auto n = vscan_internal(source, format, args);
 2974|   298k|    return sync_after_vscan(source, n);
 2975|   298k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3038|  38.9k|{
 3039|  38.9k|    return vscan_value_internal(source, arg);
 3040|  38.9k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3043|  24.5k|{
 3044|  24.5k|    auto n = vscan_value_internal(source, arg);
 3045|  24.5k|    return sync_after_vscan(source, n);
 3046|  24.5k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3051|   291k|{
 3052|   291k|    return vscan_value_internal(source, arg);
 3053|   291k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3057|   145k|{
 3058|   145k|    auto n = vscan_value_internal(source, arg);
 3059|   145k|    return sync_after_vscan(source, n);
 3060|   145k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   311k|{
  130|   311k|    auto it = source.begin();
  131|       |
  132|   566k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 441k, False: 125k]
  ------------------
  133|   441k|        auto sv =
  134|   441k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|   441k|                .substr(0, 8);
  136|       |
  137|   441k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 308k, False: 132k]
  ------------------
  138|   308k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|   308k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|   308k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 125k, False: 183k]
  ------------------
  141|   125k|                break;
  142|   125k|            }
  143|   183k|            continue;
  144|   308k|        }
  145|       |
  146|   396k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 325k, False: 71.0k]
  ------------------
  147|   325k|            auto tmp =
  148|   325k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   325k|            auto res = get_next_code_point(tmp);
  150|   325k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 61.4k, False: 264k]
  ------------------
  151|  61.4k|                return it;
  152|  61.4k|            }
  153|   264k|            i += static_cast<std::size_t>(
  154|   264k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|   264k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   264k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|   264k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|   264k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   264k|        }
  158|   132k|    }
  159|       |
  160|   250k|    return detail::make_string_view_iterator(source, it);
  161|   311k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  116|   722k|{
  117|   722k|    static_assert(sizeof(*source.data()) == 1);
  118|   722k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1079|   722k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   722k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  119|   722k|    uint64_t word{};
  120|   722k|    std::memcpy(&word, source.data(), source.size());
  121|       |
  122|   722k|    return has_byte_greater(word, 127) != 0;
  123|   722k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  1.16M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   325k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  129|   315k|{
  130|   315k|    auto it = source.begin();
  131|       |
  132|   392k|    while (it != source.end()) {
  ------------------
  |  Branch (132:12): [True: 281k, False: 111k]
  ------------------
  133|   281k|        auto sv =
  134|   281k|            detail::make_string_view_from_iterators<char>(it, source.end())
  135|   281k|                .substr(0, 8);
  136|       |
  137|   281k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (137:13): [True: 202k, False: 78.7k]
  ------------------
  138|   202k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  139|   202k|            it = detail::make_string_view_iterator(source, tmp_it);
  140|   202k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (140:17): [True: 128k, False: 73.7k]
  ------------------
  141|   128k|                break;
  142|   128k|            }
  143|  73.7k|            continue;
  144|   202k|        }
  145|       |
  146|   152k|        for (std::size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (146:33): [True: 148k, False: 3.20k]
  ------------------
  147|   148k|            auto tmp =
  148|   148k|                detail::make_string_view_from_iterators<char>(it, source.end());
  149|   148k|            auto res = get_next_code_point(tmp);
  150|   148k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (150:17): [True: 75.5k, False: 73.3k]
  ------------------
  151|  75.5k|                return it;
  152|  75.5k|            }
  153|  73.3k|            i += static_cast<std::size_t>(
  154|  73.3k|                ranges::distance(tmp.data(), detail::to_address(res.iterator)));
  155|  73.3k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  73.3k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1080|  73.3k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|  73.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  73.3k|        }
  158|  78.7k|    }
  159|       |
  160|   239k|    return detail::make_string_view_iterator(source, it);
  161|   315k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   446k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   148k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   106k|{
 2850|   106k|    const auto argcount = args.size();
 2851|   106k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 49.1k, False: 56.9k]
  |  Branch (2851:60): [True: 49.1k, False: 0]
  ------------------
 2852|  49.1k|        auto arg = args.get(0);
 2853|  49.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  49.1k|    static_cast<    \
  |  | 1084|  49.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|  49.1k|    }
 2855|       |
 2856|  56.9k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 56.9k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|  56.9k|    SCN_UNLIKELY_ATTR
 2864|  56.9k|    {
 2865|  56.9k|        auto handler = format_handler<false, CharT>{
 2866|  56.9k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  56.9k|    static_cast<    \
  |  | 1084|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  56.9k|    static_cast<    \
  |  | 1084|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|  56.9k|        return vscan_parse_format_string(format, handler);
 2868|  56.9k|    }
 2869|  56.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|   277k|{
 2398|   277k|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 150k, False: 126k]
  ------------------
 2399|   150k|        return false;
 2400|   150k|    }
 2401|   126k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 126k, False: 0]
  |  Branch (2401:39): [True: 126k, False: 0]
  ------------------
 2402|   277k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|  73.7k|{
 2431|  73.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 73.7k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|  73.7k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|  73.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 73.7k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|  73.7k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|  73.7k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|  73.7k|    static_cast<    \
  |  | 1084|  73.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|  73.7k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|  73.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  73.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  73.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 2.69k, False: 71.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  2.69k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  2.69k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  2.69k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  2.69k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  2.69k|    }                                                  \
  |  |  |  | 3995|  73.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|  71.0k|    return it.position();
 2448|  73.7k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2673|  93.5k|        : format_handler_base{argcount},
 2674|  93.5k|          parse_ctx{source_tag<Source&&>, format},
 2675|  93.5k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|  93.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  93.5k|    static_cast<    \
  |  | 1084|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  93.5k|    static_cast<    \
  |  | 1084|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|  93.5k|    {
 2677|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2491|  1.06M|    format_handler_base(size_t argcount) : args_count(argcount)
 2492|  1.06M|    {
 2493|  1.06M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1014|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 2494|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2495|      0|        }
 2496|  1.06M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2624|  93.5k|        : contiguous_ctx(source, args, loc)
 2625|  93.5k|    {
 2626|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|  93.5k|{
 2815|  93.5k|    const auto beg = handler.get_ctx().begin();
 2816|  93.5k|    detail::parse_format_string<false>(format, handler);
 2817|  93.5k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 17.9k, False: 75.6k]
  |  |  ------------------
  ------------------
 2818|  17.9k|        return unexpected(err.error());
 2819|  17.9k|    }
 2820|  75.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2798|   604k|    {
 2799|   604k|        return ctx.get();
 2800|   604k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2629|   604k|    {
 2630|   604k|        return contiguous_ctx;
 2631|   604k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2680|   169k|    {
 2681|   169k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 169k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   169k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2540|  48.4k|    {
 2541|  48.4k|        error = unexpected(err);
 2542|  48.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2452|  93.5k|{
 2453|  93.5k|    auto arg = ctx.arg(id);
 2454|  93.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 93.5k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|  93.5k|    return arg;
 2458|  93.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2566|  1.06M|    {
 2567|  1.06M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 2568|      0|            on_error({scan_error::invalid_format_string,
 2569|      0|                      "Argument ID out-of-range"});
 2570|      0|            return;
 2571|      0|        }
 2572|       |
 2573|  1.06M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1014|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 2574|      0|            on_error({scan_error::invalid_format_string,
 2575|      0|                      "Argument with this ID has already been scanned"});
 2576|      0|        }
 2577|       |
 2578|  1.06M|        if (SCN_LIKELY(id < 64u)) {
  ------------------
  |  | 1013|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.06M, False: 0]
  |  |  ------------------
  ------------------
 2579|  1.06M|            visited_args_lower64 |= (1ull << id);
 2580|  1.06M|            return;
 2581|  1.06M|        }
 2582|       |
 2583|      0|        id -= 64u;
 2584|      0|        visited_args_upper[id / 8u] |= static_cast<uint8_t>(1u << (id % 8u));
 2585|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2550|  1.06M|    {
 2551|  1.06M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1014|  1.06M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 1.06M]
  |  |  ------------------
  ------------------
 2552|      0|            on_error({scan_error::invalid_format_string,
 2553|      0|                      "Argument ID out-of-range"});
 2554|      0|            return false;
 2555|      0|        }
 2556|       |
 2557|  1.06M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1013|  1.06M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.06M, False: 0]
  |  |  ------------------
  ------------------
 2558|  1.06M|            return (visited_args_lower64 >> id) & 1ull;
 2559|  1.06M|        }
 2560|       |
 2561|      0|        id -= 64;
 2562|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2563|  1.06M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2720|  93.5k|    {
 2721|  93.5k|        return parse_ctx.next_arg_id();
 2722|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2760|  93.5k|    {
 2761|  93.5k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  93.5k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  93.5k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 93.5k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|  93.5k|        auto specs = detail::format_specs{};
 2774|  93.5k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|  93.5k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|  93.5k|            detail::get_arg_type(arg)};
 2777|       |
 2778|  93.5k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|  93.5k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 93.5k]
  |  Branch (2779:29): [True: 0, False: 93.5k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|  93.5k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  93.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.17k, False: 86.4k]
  |  |  ------------------
  ------------------
 2786|  7.17k|            return parse_ctx.begin();
 2787|  7.17k|        }
 2788|  86.4k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|  86.4k|        on_visit_scan_arg(
 2791|  86.4k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|  86.4k|                                           get_ctx().locale()},
 2793|  86.4k|            arg);
 2794|  86.4k|        return parse_ctx.begin();
 2795|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2470|  93.5k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|  93.5k|    {
 2472|  93.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2731|  86.4k|    {
 2732|  86.4k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 86.4k]
  |  Branch (2732:13): [True: 0, False: 86.4k]
  |  Branch (2732:29): [True: 0, False: 86.4k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|  86.4k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  86.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  86.4k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  86.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.7k, False: 75.6k]
  |  |  ------------------
  ------------------
 2739|  10.7k|            on_error(r.error());
 2740|  10.7k|        }
 2741|  75.6k|        else {
 2742|  75.6k|            get_ctx().advance_to(*r);
 2743|  75.6k|        }
 2744|  86.4k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 2534|  32.2k|    {
 2535|  32.2k|        SCN_UNLIKELY_ATTR
 2536|  32.2k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 2537|  32.2k|                                              msg);
 2538|  32.2k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2499|  1.06M|    {
 2500|  1.06M|        {
 2501|  1.06M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2501:45): [True: 0, False: 1.06M]
  ------------------
 2502|  1.06M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2502:35): [True: 0, False: 1.06M]
  ------------------
 2503|  1.06M|                                      ? std::numeric_limits<uint64_t>::max()
 2504|  1.06M|                                      : (1ull << args_count_lower64) - 1;
 2505|       |
 2506|  1.06M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2506:17): [True: 0, False: 1.06M]
  ------------------
 2507|      0|                return on_error({scan_error::invalid_format_string,
 2508|      0|                                 "Argument list not exhausted"});
 2509|      0|            }
 2510|  1.06M|        }
 2511|       |
 2512|  1.06M|        if (args_count < 64) {
  ------------------
  |  Branch (2512:13): [True: 1.06M, False: 0]
  ------------------
 2513|  1.06M|            return;
 2514|  1.06M|        }
 2515|       |
 2516|      0|        auto last_args_count = args_count - 64;
 2517|      0|        for (auto it = visited_args_upper.begin();
 2518|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2518:14): [True: 0, False: 0]
  ------------------
 2519|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2519:17): [True: 0, False: 0]
  ------------------
 2520|      0|                return on_error({scan_error::invalid_format_string,
 2521|      0|                                 "Argument list not exhausted"});
 2522|      0|            }
 2523|      0|            last_args_count -= 8;
 2524|      0|        }
 2525|       |
 2526|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2527|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2527:13): [True: 0, False: 0]
  ------------------
 2528|      0|            return on_error({scan_error::invalid_format_string,
 2529|      0|                             "Argument list not exhausted"});
 2530|      0|        }
 2531|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2545|  4.24M|    {
 2546|  4.24M|        return error;
 2547|  4.24M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2673|  56.9k|        : format_handler_base{argcount},
 2674|  56.9k|          parse_ctx{source_tag<Source&&>, format},
 2675|  56.9k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|  56.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  56.9k|    static_cast<    \
  |  | 1084|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|  56.9k|    static_cast<    \
  |  | 1084|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|  56.9k|    {
 2677|  56.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2600|  56.9k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|  56.9k|    static_cast<    \
  |  | 1084|  56.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|  56.9k|    {
 2602|  56.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|  56.9k|{
 2815|  56.9k|    const auto beg = handler.get_ctx().begin();
 2816|  56.9k|    detail::parse_format_string<false>(format, handler);
 2817|  56.9k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 8.97k, False: 47.9k]
  |  |  ------------------
  ------------------
 2818|  8.97k|        return unexpected(err.error());
 2819|  8.97k|    }
 2820|  47.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|  56.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2798|   373k|    {
 2799|   373k|        return ctx.get();
 2800|   373k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2605|   373k|    {
 2606|   373k|        return ctx;
 2607|   373k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2680|   104k|    {
 2681|   104k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 104k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   104k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2452|  56.9k|{
 2453|  56.9k|    auto arg = ctx.arg(id);
 2454|  56.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 56.9k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|  56.9k|    return arg;
 2458|  56.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2720|  56.9k|    {
 2721|  56.9k|        return parse_ctx.next_arg_id();
 2722|  56.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2760|  56.9k|    {
 2761|  56.9k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|  56.9k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|  56.9k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 56.9k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|  56.9k|        auto specs = detail::format_specs{};
 2774|  56.9k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|  56.9k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|  56.9k|            detail::get_arg_type(arg)};
 2777|       |
 2778|  56.9k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|  56.9k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 56.9k]
  |  Branch (2779:29): [True: 0, False: 56.9k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|  56.9k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.58k, False: 53.3k]
  |  |  ------------------
  ------------------
 2786|  3.58k|            return parse_ctx.begin();
 2787|  3.58k|        }
 2788|  53.3k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|  53.3k|        on_visit_scan_arg(
 2791|  53.3k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|  53.3k|                                           get_ctx().locale()},
 2793|  53.3k|            arg);
 2794|  53.3k|        return parse_ctx.begin();
 2795|  56.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2470|  56.9k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|  56.9k|    {
 2472|  56.9k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|  53.3k|    {
 2732|  53.3k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 53.3k]
  |  Branch (2732:13): [True: 0, False: 53.3k]
  |  Branch (2732:29): [True: 0, False: 53.3k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|  53.3k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|  53.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|  53.3k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.38k, False: 47.9k]
  |  |  ------------------
  ------------------
 2739|  5.38k|            on_error(r.error());
 2740|  5.38k|        }
 2741|  47.9k|        else {
 2742|  47.9k|            get_ctx().advance_to(*r);
 2743|  47.9k|        }
 2744|  53.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|   171k|{
 2830|   171k|    const auto argcount = args.size();
 2831|   171k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 77.8k, False: 93.5k]
  |  Branch (2831:60): [True: 77.8k, False: 0]
  ------------------
 2832|  77.8k|        auto arg = args.get(0);
 2833|  77.8k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|  77.8k|    static_cast<    \
  |  | 1084|  77.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|  77.8k|    }
 2835|       |
 2836|  93.5k|    auto handler = format_handler<true, CharT>{
 2837|  93.5k|        ranges::subrange<const CharT*>{source.data(),
 2838|  93.5k|                                       source.data() + source.size()},
 2839|  93.5k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  93.5k|    static_cast<    \
  |  | 1084|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|  93.5k|    static_cast<    \
  |  | 1084|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|  93.5k|    return vscan_parse_format_string(format, handler);
 2841|   171k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|   116k|{
 2411|   116k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 116k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|   116k|    auto reader =
 2417|   116k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|   116k|            ranges::subrange<const CharT*>{source.data(),
 2419|   116k|                                           source.data() + source.size()},
 2420|   116k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   116k|    static_cast<    \
  |  | 1084|   116k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|   116k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   116k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   116k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   116k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.38k, False: 111k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.38k|    }                                                  \
  |  |  |  | 3995|   116k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   116k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|   111k|    return ranges::distance(source.data(), it);
 2423|   116k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   130k|{
 2930|   130k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   130k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 118k, False: 11.6k]
  |  |  ------------------
  ------------------
 2931|   118k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|   118k|    }
 2937|  11.6k|    else {
 2938|  11.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|  11.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 11.6k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|  11.6k|    }
 2944|   130k|    return result;
 2945|   130k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2829|  1.19M|{
 2830|  1.19M|    const auto argcount = args.size();
 2831|  1.19M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2831:9): [True: 582k, False: 611k]
  |  Branch (2831:60): [True: 582k, False: 0]
  ------------------
 2832|   582k|        auto arg = args.get(0);
 2833|   582k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|   582k|    static_cast<    \
  |  | 1084|   582k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2834|   582k|    }
 2835|       |
 2836|   611k|    auto handler = format_handler<true, CharT>{
 2837|   611k|        ranges::subrange<const CharT*>{source.data(),
 2838|   611k|                                       source.data() + source.size()},
 2839|   611k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   611k|    static_cast<    \
  |  | 1084|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   611k|    static_cast<    \
  |  | 1084|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2840|   611k|    return vscan_parse_format_string(format, handler);
 2841|  1.19M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2397|  1.79M|{
 2398|  1.79M|    if (format.size() != 2) {
  ------------------
  |  Branch (2398:9): [True: 917k, False: 874k]
  ------------------
 2399|   917k|        return false;
 2400|   917k|    }
 2401|   874k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2401:12): [True: 874k, False: 0]
  |  Branch (2401:39): [True: 874k, False: 0]
  ------------------
 2402|  1.79M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2410|   874k|{
 2411|   874k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   874k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 874k]
  |  |  ------------------
  ------------------
 2412|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2413|      0|                                             "Argument #0 not found");
 2414|      0|    }
 2415|       |
 2416|   874k|    auto reader =
 2417|   874k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2418|   874k|            ranges::subrange<const CharT*>{source.data(),
 2419|   874k|                                           source.data() + source.size()},
 2420|   874k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   874k|    static_cast<    \
  |  | 1084|   874k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2421|   874k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   874k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   874k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   874k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   874k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 10.7k, False: 863k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  10.7k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  10.7k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  10.7k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  10.7k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  10.7k|    }                                                  \
  |  |  |  | 3995|   874k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   874k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2422|   863k|    return ranges::distance(source.data(), it);
 2423|   874k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2673|   611k|        : format_handler_base{argcount},
 2674|   611k|          parse_ctx{source_tag<Source&&>, format},
 2675|   611k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   611k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   611k|    static_cast<    \
  |  | 1084|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   611k|    static_cast<    \
  |  | 1084|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   611k|    {
 2677|   611k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2624|   611k|        : contiguous_ctx(source, args, loc)
 2625|   611k|    {
 2626|   611k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   611k|{
 2815|   611k|    const auto beg = handler.get_ctx().begin();
 2816|   611k|    detail::parse_format_string<false>(format, handler);
 2817|   611k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 35.8k, False: 575k]
  |  |  ------------------
  ------------------
 2818|  35.8k|        return unexpected(err.error());
 2819|  35.8k|    }
 2820|   575k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   611k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2798|  4.18M|    {
 2799|  4.18M|        return ctx.get();
 2800|  4.18M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2629|  4.18M|    {
 2630|  4.18M|        return contiguous_ctx;
 2631|  4.18M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2680|  1.18M|    {
 2681|  1.18M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 1.18M]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|  1.18M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2452|   611k|{
 2453|   611k|    auto arg = ctx.arg(id);
 2454|   611k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 611k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   611k|    return arg;
 2458|   611k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2720|   611k|    {
 2721|   611k|        return parse_ctx.next_arg_id();
 2722|   611k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2760|   611k|    {
 2761|   611k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   611k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   611k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 611k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   611k|        auto specs = detail::format_specs{};
 2774|   611k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   611k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   611k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   611k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   611k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 611k]
  |  Branch (2779:29): [True: 0, False: 611k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   611k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   611k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 14.3k, False: 597k]
  |  |  ------------------
  ------------------
 2786|  14.3k|            return parse_ctx.begin();
 2787|  14.3k|        }
 2788|   597k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   597k|        on_visit_scan_arg(
 2791|   597k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   597k|                                           get_ctx().locale()},
 2793|   597k|            arg);
 2794|   597k|        return parse_ctx.begin();
 2795|   611k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2470|   611k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   611k|    {
 2472|   611k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2731|   597k|    {
 2732|   597k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 597k]
  |  Branch (2732:13): [True: 0, False: 597k]
  |  Branch (2732:29): [True: 0, False: 597k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   597k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   597k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   597k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   597k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 21.5k, False: 575k]
  |  |  ------------------
  ------------------
 2739|  21.5k|            on_error(r.error());
 2740|  21.5k|        }
 2741|   575k|        else {
 2742|   575k|            get_ctx().advance_to(*r);
 2743|   575k|        }
 2744|   597k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2849|   597k|{
 2850|   597k|    const auto argcount = args.size();
 2851|   597k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2851:9): [True: 291k, False: 305k]
  |  Branch (2851:60): [True: 291k, False: 0]
  ------------------
 2852|   291k|        auto arg = args.get(0);
 2853|   291k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1083|   291k|    static_cast<    \
  |  | 1084|   291k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2854|   291k|    }
 2855|       |
 2856|   305k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2856:9): [True: 0, False: 305k]
  ------------------
 2857|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2858|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2859|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2860|      0|        return vscan_parse_format_string(format, handler);
 2861|      0|    }
 2862|       |
 2863|   305k|    SCN_UNLIKELY_ATTR
 2864|   305k|    {
 2865|   305k|        auto handler = format_handler<false, CharT>{
 2866|   305k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   305k|    static_cast<    \
  |  | 1084|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1083|   305k|    static_cast<    \
  |  | 1084|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2867|   305k|        return vscan_parse_format_string(format, handler);
 2868|   305k|    }
 2869|   305k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2430|   437k|{
 2431|   437k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 437k]
  |  |  ------------------
  ------------------
 2432|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2433|      0|                                             "Argument #0 not found");
 2434|      0|    }
 2435|       |
 2436|   437k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1013|   437k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 0, False: 437k]
  |  |  ------------------
  ------------------
 2437|      0|        auto reader = impl::default_arg_reader<
 2438|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2439|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1083|      0|    static_cast<    \
  |  | 1084|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2440|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2441|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2442|      0|    }
 2443|       |
 2444|   437k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2445|   437k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1083|   437k|    static_cast<    \
  |  | 1084|   437k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2446|   437k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3996|   437k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   437k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   437k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 5.38k, False: 431k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  5.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  5.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  5.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  5.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  5.38k|    }                                                  \
  |  |  |  | 3995|   437k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2447|   431k|    return it.position();
 2448|   437k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2673|   305k|        : format_handler_base{argcount},
 2674|   305k|          parse_ctx{source_tag<Source&&>, format},
 2675|   305k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1085|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   305k|    static_cast<    \
  |  | 1084|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1083|   305k|    static_cast<    \
  |  | 1084|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2676|   305k|    {
 2677|   305k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2600|   305k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1083|   305k|    static_cast<    \
  |  | 1084|   305k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2601|   305k|    {
 2602|   305k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2814|   305k|{
 2815|   305k|    const auto beg = handler.get_ctx().begin();
 2816|   305k|    detail::parse_format_string<false>(format, handler);
 2817|   305k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1014|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 17.9k, False: 287k]
  |  |  ------------------
  ------------------
 2818|  17.9k|        return unexpected(err.error());
 2819|  17.9k|    }
 2820|   287k|    return ranges::distance(beg, handler.get_ctx().begin());
 2821|   305k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2798|  2.09M|    {
 2799|  2.09M|        return ctx.get();
 2800|  2.09M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2605|  2.09M|    {
 2606|  2.09M|        return ctx;
 2607|  2.09M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2680|   593k|    {
 2681|   593k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2681:16): [True: 0, False: 593k]
  ------------------
 2682|      0|            auto it = get_ctx().begin();
 2683|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2683:17): [True: 0, False: 0]
  ------------------
 2684|      0|                SCN_UNLIKELY_ATTR
 2685|      0|                return on_error(
 2686|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2687|      0|            }
 2688|       |
 2689|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2690|      0|                    detail::make_string_view_from_pointers(begin, end));
 2691|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2691:17): [True: 0, False: 0]
  ------------------
 2692|      0|                SCN_UNLIKELY_ATTR
 2693|      0|                return on_error({scan_error::invalid_format_string,
 2694|      0|                                 "Invalid encoding in format string"});
 2695|      0|            }
 2696|      0|            else if (is_space) {
  ------------------
  |  Branch (2696:22): [True: 0, False: 0]
  ------------------
 2697|       |                // Skip all whitespace in input
 2698|      0|                get_ctx().advance_to(
 2699|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2700|       |                // And, skip all whitespace in the format string
 2701|      0|                auto begin_it = impl::read_while_classic_space(
 2702|      0|                    detail::make_string_view_from_pointers(
 2703|      0|                        detail::to_address(after_space_it),
 2704|      0|                        detail::to_address(end)));
 2705|       |                // (-1 because of the for loop ++begin)
 2706|      0|                begin = detail::to_address(begin_it) - 1;
 2707|      0|                continue;
 2708|      0|            }
 2709|       |
 2710|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2710:17): [True: 0, False: 0]
  ------------------
 2711|      0|                SCN_UNLIKELY_ATTR
 2712|      0|                return on_error({scan_error::invalid_literal,
 2713|      0|                                 "Unexpected literal character in source"});
 2714|      0|            }
 2715|      0|            get_ctx().advance_to(ranges::next(it));
 2716|      0|        }
 2717|   593k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2452|   305k|{
 2453|   305k|    auto arg = ctx.arg(id);
 2454|   305k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1014|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 305k]
  |  |  ------------------
  ------------------
 2455|      0|        handler.on_error("Failed to find argument with ID");
 2456|      0|    }
 2457|   305k|    return arg;
 2458|   305k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2720|   305k|    {
 2721|   305k|        return parse_ctx.next_arg_id();
 2722|   305k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2760|   305k|    {
 2761|   305k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2762|   305k|        set_arg_as_visited(arg_id);
 2763|       |
 2764|   305k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2764:13): [True: 0, False: 305k]
  ------------------
 2765|      0|            parse_ctx.advance_to(begin);
 2766|      0|            on_visit_scan_arg(
 2767|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2768|      0|                    parse_ctx, get_custom_ctx()},
 2769|      0|                arg);
 2770|      0|            return parse_ctx.begin();
 2771|      0|        }
 2772|       |
 2773|   305k|        auto specs = detail::format_specs{};
 2774|   305k|        detail::specs_checker<specs_handler<context_type>> handler{
 2775|   305k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2776|   305k|            detail::get_arg_type(arg)};
 2777|       |
 2778|   305k|        begin = detail::parse_format_specs(begin, end, handler);
 2779|   305k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2779:13): [True: 0, False: 305k]
  |  Branch (2779:29): [True: 0, False: 305k]
  ------------------
 2780|      0|            SCN_UNLIKELY_ATTR
 2781|      0|            on_error({scan_error::invalid_format_string,
 2782|      0|                      "Missing '}' in format string"});
 2783|      0|            return parse_ctx.begin();
 2784|      0|        }
 2785|   305k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1014|   305k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 7.17k, False: 298k]
  |  |  ------------------
  ------------------
 2786|  7.17k|            return parse_ctx.begin();
 2787|  7.17k|        }
 2788|   298k|        parse_ctx.advance_to(begin);
 2789|       |
 2790|   298k|        on_visit_scan_arg(
 2791|   298k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2792|   298k|                                           get_ctx().locale()},
 2793|   298k|            arg);
 2794|   298k|        return parse_ctx.begin();
 2795|   305k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2470|   305k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2471|   305k|    {
 2472|   305k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2731|   298k|    {
 2732|   298k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 298k]
  |  Branch (2732:13): [True: 0, False: 298k]
  |  Branch (2732:29): [True: 0, False: 298k]
  ------------------
 2733|      0|            SCN_UNLIKELY_ATTR
 2734|      0|            return;
 2735|      0|        }
 2736|       |
 2737|   298k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1085|   298k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2738|   298k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1014|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.7k, False: 287k]
  |  |  ------------------
  ------------------
 2739|  10.7k|            on_error(r.error());
 2740|  10.7k|        }
 2741|   287k|        else {
 2742|   287k|            get_ctx().advance_to(*r);
 2743|   287k|        }
 2744|   298k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2929|   743k|{
 2930|   743k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1013|   743k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 719k, False: 23.3k]
  |  |  ------------------
  ------------------
 2931|   719k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1014|   719k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 719k]
  |  |  ------------------
  ------------------
 2932|      0|            return detail::unexpected_scan_error(
 2933|      0|                scan_error::invalid_source_state,
 2934|      0|                "Failed to sync with underlying source");
 2935|      0|        }
 2936|   719k|    }
 2937|  23.3k|    else {
 2938|  23.3k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1014|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 23.3k]
  |  |  ------------------
  ------------------
 2939|      0|            return detail::unexpected_scan_error(
 2940|      0|                scan_error::invalid_source_state,
 2941|      0|                "Failed to sync with underlying source");
 2942|      0|        }
 2943|  23.3k|    }
 2944|   743k|    return result;
 2945|   743k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|  38.9k|{
 2876|  38.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  38.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  38.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|  24.5k|{
 2876|  24.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|  24.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|  24.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2875|   291k|{
 2876|   291k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   291k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2875|   145k|{
 2876|   145k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1085|   145k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2877|   145k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1486|    897|{
 1487|    897|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1488|       |
 1489|    897|    if constexpr (sizeof(SourceCharT) == 1) {
 1490|       |        if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            std::u32string tmp;
 1492|       |            transcode_to_string_impl_to32(src, tmp);
 1493|       |            return transcode_to_string_impl_32to16<false>(
 1494|       |                std::u32string_view{tmp}, dest);
 1495|       |        }
 1496|    897|        else if constexpr (sizeof(DestCharT) == 4) {
 1497|    897|            return transcode_to_string_impl_to32(src, dest);
 1498|    897|        }
 1499|       |    }
 1500|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1501|       |        if constexpr (sizeof(DestCharT) == 1) {
 1502|       |            std::u32string tmp;
 1503|       |            transcode_to_string_impl_to32(src, tmp);
 1504|       |            return transcode_to_string_impl_32to8<false>(
 1505|       |                std::u32string_view{tmp}, dest);
 1506|       |        }
 1507|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1508|       |            return trasncode_to_string_impl_to32(src, dest);
 1509|       |        }
 1510|       |    }
 1511|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1512|       |        if constexpr (sizeof(DestCharT) == 1) {
 1513|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1514|       |        }
 1515|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1516|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1517|       |        }
 1518|       |    }
 1519|       |
 1520|    897|    SCN_EXPECT(false);
  ------------------
  |  | 1079|    897|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    897|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1521|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1522|    897|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1378|    897|{
 1379|    897|    static_assert(sizeof(DestCharT) == 4);
 1380|       |
 1381|    897|    auto it = src.begin();
 1382|   282k|    while (it != src.end()) {
  ------------------
  |  Branch (1382:12): [True: 281k, False: 897]
  ------------------
 1383|   281k|        auto res = get_next_code_point(
 1384|   281k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1385|   281k|                                                                 src.end()));
 1386|   281k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1014|   281k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.87k, False: 278k]
  |  |  ------------------
  ------------------
 1387|  2.87k|            dest.push_back(DestCharT{0xfffd});
 1388|  2.87k|        }
 1389|   278k|        else {
 1390|   278k|            dest.push_back(static_cast<DestCharT>(res.value));
 1391|   278k|        }
 1392|   281k|        it = detail::make_string_view_iterator(src, res.iterator);
 1393|   281k|    }
 1394|    897|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1302|   756k|{
 1303|   756k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1079|   756k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   756k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1304|       |
 1305|   756k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1306|   756k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|   756k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 13.1k, False: 743k]
  |  |  ------------------
  ------------------
 1307|  13.1k|        return {get_start_for_next_code_point(input),
 1308|  13.1k|                detail::invalid_code_point};
 1309|  13.1k|    }
 1310|   743k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1014|   743k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 23.9k, False: 719k]
  |  |  ------------------
  ------------------
 1311|  23.9k|        return {input.end(), detail::invalid_code_point};
 1312|  23.9k|    }
 1313|       |
 1314|   719k|    return {input.begin() + len,
 1315|   719k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1316|   743k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1288|  13.1k|{
 1289|  13.1k|    auto it = input.begin();
 1290|  55.0k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 53.0k, False: 2.06k]
  ------------------
 1291|  53.0k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 11.0k, False: 41.9k]
  ------------------
 1292|  11.0k|            break;
 1293|  11.0k|        }
 1294|  53.0k|    }
 1295|  13.1k|    return it;
 1296|  13.1k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3108|  16.1k|    {
 3109|  16.1k|        SCN_UNLIKELY_ATTR
 3110|  16.1k|        m_msg = msg;
 3111|  16.1k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3113|  1.03M|    {
 3114|  1.03M|        return m_msg == nullptr;
 3115|  1.03M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.60M|{
  458|  1.60M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.60M|        static_cast<unsigned char>(ch))];
  460|  1.60M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  40.3k|{
  469|  40.3k|    return static_cast<unsigned char>(ch) <= 127;
  470|  40.3k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  14.7k|{
  474|  14.7k|#if WCHAR_MIN < 0
  475|  14.7k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 13.4k, False: 1.27k]
  |  Branch (475:23): [True: 9.56k, False: 3.92k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  14.7k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  537|   722k|{
  538|   722k|    SCN_GCC_PUSH
  539|   722k|    SCN_GCC_IGNORE("-Wsign-conversion")
  540|   722k|    return ((word + ~0ull / 255 * (127 - n)) | word) & ~0ull / 255 * 128;
  541|   722k|    SCN_GCC_POP
  542|   722k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  793|  3.99M|{
  794|  3.99M|    return e != eof_error::good;
  795|  3.99M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  807|  12.6k|{
  808|  12.6k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1079|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  809|  12.6k|    return scan_error{scan_error::end_of_input, "EOF"};
  810|  12.6k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6145|   987k|{
 6146|   987k|    if (specs.width != 0) {
  ------------------
  |  Branch (6146:9): [True: 0, False: 987k]
  ------------------
 6147|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6147:13): [True: 0, False: 0]
  ------------------
 6148|      0|            return detail::unexpected_scan_error(
 6149|      0|                scan_error::length_too_short,
 6150|      0|                "Scanned value too narrow, width did not exceed what "
 6151|      0|                "was specified in the format string");
 6152|      0|        }
 6153|      0|    }
 6154|   987k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6154:9): [True: 0, False: 987k]
  ------------------
 6155|       |        // Ensured by take_width_view
 6156|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6157|      0|                   specs.precision);
 6158|      0|    }
 6159|   987k|    return {};
 6160|   987k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   384k|    {
  304|   384k|        ranges::advance(x, n);
  305|   384k|        return x;
  306|   384k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   384k|    {
  268|   384k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   384k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   384k|    {
  151|   384k|        i += n;
  152|   384k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   922k|    {
  108|   922k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   922k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   922k|    {
   87|   922k|        return s - i;
   88|   922k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.43M|    {
  108|  1.43M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.43M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.43M|    {
   87|  1.43M|        return s - i;
   88|  1.43M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3054|   255k|    {
 3055|   255k|        return m_current;
 3056|   255k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3054|  1.78M|    {
 3055|  1.78M|        return m_current;
 3056|  1.78M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   125k|{
  993|   125k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   125k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   125k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   125k|        auto beg = r.begin();
 1004|   125k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 125k, False: 0]
  ------------------
 1005|   125k|            return false;
 1006|   125k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   125k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  772|  32.3k|    {
  773|  32.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  32.3k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  7.48k|        : m_fptr([](storage fn,
  753|  7.48k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  7.48k|              cvref<T> obj = *get<T>(fn);
  755|  7.48k|              if constexpr (std::is_void_v<R>) {
  756|  7.48k|                  obj(static_cast<decltype(args)>(args)...);
  757|  7.48k|              }
  758|  7.48k|              else {
  759|  7.48k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  7.48k|              }
  761|  7.48k|          }),
  762|  7.48k|          m_storage(std::addressof(f))
  763|  7.48k|    {
  764|  7.48k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  753|  16.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  16.1k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  16.1k|              else {
  759|  16.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  16.1k|              }
  761|  16.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  689|  16.1k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  16.1k|        else if constexpr (std::is_object_v<T>) {
  694|  16.1k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  16.1k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  7.48k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  7.48k|        {
  668|  7.48k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  772|  76.2M|    {
  773|  76.2M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  76.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  76.2M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  2.29M|        : m_fptr([](storage fn,
  753|  2.29M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.29M|              cvref<T> obj = *get<T>(fn);
  755|  2.29M|              if constexpr (std::is_void_v<R>) {
  756|  2.29M|                  obj(static_cast<decltype(args)>(args)...);
  757|  2.29M|              }
  758|  2.29M|              else {
  759|  2.29M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.29M|              }
  761|  2.29M|          }),
  762|  2.29M|          m_storage(std::addressof(f))
  763|  2.29M|    {
  764|  2.29M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  753|  5.62M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  5.62M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  5.62M|              else {
  759|  5.62M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  5.62M|              }
  761|  5.62M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  689|  5.62M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  5.62M|        else if constexpr (std::is_object_v<T>) {
  694|  5.62M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  5.62M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  2.29M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  2.29M|        {
  668|  2.29M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|  51.5k|    {
 6174|  51.5k|        const bool need_skipped_width =
 6175|  51.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 51.5k]
  |  Branch (6175:33): [True: 0, False: 51.5k]
  ------------------
 6176|  51.5k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|  51.5k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 51.5k]
  ------------------
 6180|  51.5k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 51.5k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|  51.5k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 51.5k, False: 0]
  |  Branch (6184:56): [True: 49.0k, False: 2.49k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|  49.0k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 49.0k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|  97.1k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|  49.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  49.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  49.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  49.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 970, False: 48.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    970|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    970|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    970|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    970|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    970|    }                                                  \
  |  |  |  | 3995|  49.0k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  49.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|  97.1k|                            make_eof_scan_error));
 6195|       |
 6196|  97.1k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 48.1k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|  48.1k|            return result_type{it, 0};
 6204|  97.1k|        }
 6205|       |
 6206|  2.49k|        return result_type{rng.begin(), 0};
 6207|  51.5k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|  2.49k|{
 2134|  2.49k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  2.49k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|  2.49k|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|  2.49k|    else {
 2105|  2.49k|        auto first = range.begin();
 2106|  5.46k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 5.39k, False: 72]
  ------------------
 2107|  5.39k|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 2.42k, False: 2.97k]
  ------------------
 2108|  2.42k|                return first;
 2109|  2.42k|            }
 2110|  5.39k|        }
 2111|     72|        return first;
 2112|  2.49k|    }
 2113|  2.49k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  47.9k|    {
  108|  47.9k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  47.9k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  47.9k|    {
   94|  47.9k|        iter_difference_t<I> counter{0};
   95|   510k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 462k, False: 47.9k]
  ------------------
   96|   462k|            ++i;
   97|   462k|            ++counter;
   98|   462k|        }
   99|  47.9k|        return counter;
  100|  47.9k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|   195k|{
  961|   195k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|   195k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.25k, False: 193k]
  |  |  ------------------
  ------------------
  962|  2.25k|        return eof_error::eof;
  963|  2.25k|    }
  964|   193k|    return eof_error::good;
  965|   195k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|  1.42M|{
  955|  1.42M|    return is_range_eof(r.begin(), r.end());
  956|  1.42M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|  1.42M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  1.42M|    {
  948|  1.42M|        return begin == end;
  949|  1.42M|    }
  950|  1.42M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1807|   121k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|       |                  ranges::sized_range<Range>) {
 1811|       |        return string_view_wrapper{SCN_FWD(range)};
 1812|       |    }
 1813|   121k|    else {
 1814|   121k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1085|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1815|   121k|    }
 1816|   121k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1660|   121k|    {
 1661|   121k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   121k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1662|   121k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1744|   121k|    {
 1745|   121k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|   121k|                           ranges::common_range<Range>) {
 1762|   121k|            auto beg_seg = range.begin().contiguous_segment();
 1763|   121k|            auto end_seg = range.end().contiguous_segment();
 1764|   121k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.16k, False: 118k]
  |  |  ------------------
  ------------------
 1765|   121k|                             detail::to_address(end_seg.end()))) {
 1766|  3.16k|                auto& str = m_storage.emplace();
 1767|  3.16k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|  3.16k|                                                     range.begin().position()));
 1769|  3.16k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|  3.16k|                m_view = string_view_type{str.data(), str.size()};
 1771|  3.16k|                return;
 1772|  3.16k|            }
 1773|       |
 1774|   118k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|   118k|                                                            end_seg.data());
 1776|   118k|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   121k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1705|   238k|    {
 1706|   238k|        return m_view;
 1707|   238k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1695|   121k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|  47.4k|    {
 6216|  47.4k|        const bool need_skipped_width =
 6217|  47.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 47.4k]
  |  Branch (6217:33): [True: 0, False: 47.4k]
  ------------------
 6218|  47.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|  47.4k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 47.4k]
  ------------------
 6221|  47.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 47.4k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|  47.4k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 47.4k, False: 0]
  ------------------
 6230|  47.4k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 664, False: 46.7k]
  ------------------
 6231|  47.4k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 664]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|    664|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 664]
  ------------------
 6233|    664|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|  47.4k|        return result_type{rng.begin(), 0};
 6255|  47.4k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  960|   310k|{
  961|   310k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|   310k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.41k, False: 306k]
  |  |  ------------------
  ------------------
  962|  3.41k|        return eof_error::eof;
  963|  3.41k|    }
  964|   306k|    return eof_error::good;
  965|   310k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  954|   310k|{
  955|   310k|    return is_range_eof(r.begin(), r.end());
  956|   310k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  938|   310k|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|   310k|    {
  948|   310k|        return begin == end;
  949|   310k|    }
  950|   310k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|   192k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   192k|                  ranges::sized_range<Range>) {
 1811|   192k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   192k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   192k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|   192k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   192k|    {
 1614|   192k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1626|  1.05M|    {
 1627|  1.05M|        return sv;
 1628|  1.05M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|  4.98k|{
 2134|  4.98k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  4.98k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|  4.98k|{
 2101|  4.98k|    if constexpr (ranges::common_range<Range>) {
 2102|  4.98k|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|  4.98k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|   193k|{
 3129|   193k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 193k, False: 0]
  ------------------
 3130|   193k|        auto it = read_while_classic_space(range);
 3131|   193k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   193k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   193k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.21k, False: 191k]
  |  |  ------------------
  ------------------
 3133|  2.21k|            return unexpected(e);
 3134|  2.21k|        }
 3135|       |
 3136|   191k|        return it;
 3137|   193k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   193k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|   193k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|   193k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|   193k|        auto buf = make_contiguous_buffer(range);
 2281|   193k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|   193k|        return ranges::next(range.begin(),
 2283|   193k|                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|       |    else {
 2286|       |        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|       |        SCN_UNUSED(it);
 2298|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|       |            return detail::is_cp_space(cp);
 2300|       |        });
 2301|       |    }
 2302|   193k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1807|   384k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|   384k|                  ranges::sized_range<Range>) {
 1811|   384k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|   384k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|   384k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1612|   384k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|   384k|    {
 1614|   384k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  13.1k|    {
  304|  13.1k|        ranges::advance(x, n);
  305|  13.1k|        return x;
  306|  13.1k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   242k|    {
  268|   242k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   242k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   242k|    {
  181|   439k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 197k, False: 242k]
  ------------------
  182|   197k|            ++i;
  183|   197k|        }
  184|   242k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1710|   120k|    {
 1711|   120k|        return m_storage.has_value();
 1712|   120k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1715|  1.96k|    {
 1716|  1.96k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|  1.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|  1.96k|        return *m_storage;
 1718|  1.96k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6325|  53.3k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|  53.3k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|  53.3k|            auto rd = make_reader<T, char_type>();
 6336|  53.3k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  53.3k|    do {                                                            \
  |  | 3985|  53.3k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  53.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.79k, False: 51.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.79k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.79k|        }                                                           \
  |  | 3988|  53.3k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|  51.5k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 51.5k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|  51.5k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|  51.5k|                return impl(rd, range, value);
 6341|  51.5k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  53.3k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5935|   228k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|       |                       std::is_same_v<T, std::wstring_view>) {
 5950|       |        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|   228k|                       std::is_same_v<T, std::wstring>) {
 5954|   228k|        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|   228k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5328|   330k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3218|   139k|    {
 3219|   139k|        reader_error_handler eh{};
 3220|   139k|        get_derived().check_specs_impl(specs, eh);
 3221|   139k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   139k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 5.38k, False: 134k]
  |  |  ------------------
  ------------------
 3222|  5.38k|            return detail::unexpected_scan_error(
 3223|  5.38k|                scan_error::invalid_format_string, eh.m_msg);
 3224|  5.38k|        }
 3225|   134k|        return {};
 3226|   139k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3230|   139k|    {
 3231|   139k|        return static_cast<Derived&>(*this);
 3232|   139k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5332|   139k|    {
 5333|   139k|        detail::check_string_type_specs(specs, eh);
 5334|       |
 5335|   139k|        SCN_GCC_COMPAT_PUSH
 5336|   139k|        SCN_GCC_COMPAT_IGNORE("-Wswitch")
 5337|   139k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-default")
 5338|       |
 5339|   139k|        switch (specs.type) {
  ------------------
  |  Branch (5339:17): [True: 0, False: 139k]
  ------------------
 5340|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5340:13): [True: 0, False: 139k]
  ------------------
 5341|      0|                m_type = reader_type::word;
 5342|      0|                break;
 5343|       |
 5344|   126k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5344:13): [True: 126k, False: 12.8k]
  ------------------
 5345|   126k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5345:21): [True: 0, False: 126k]
  ------------------
 5346|   126k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5346:21): [True: 0, False: 126k]
  ------------------
 5347|      0|                    m_type = reader_type::custom_word;
 5348|      0|                }
 5349|   126k|                else {
 5350|   126k|                    m_type = reader_type::word;
 5351|   126k|                }
 5352|   126k|                break;
 5353|      0|            }
 5354|       |
 5355|  5.38k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5355:13): [True: 5.38k, False: 134k]
  ------------------
 5356|  5.38k|                m_type = reader_type::character;
 5357|  5.38k|                break;
 5358|       |
 5359|  7.48k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5359:13): [True: 7.48k, False: 132k]
  ------------------
 5360|  7.48k|                m_type = reader_type::character_set;
 5361|  7.48k|                break;
 5362|       |
 5363|      0|#if !SCN_DISABLE_REGEX
 5364|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5364:13): [True: 0, False: 139k]
  ------------------
 5365|      0|                m_type = reader_type::regex;
 5366|      0|                break;
 5367|       |
 5368|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5368:13): [True: 0, False: 139k]
  ------------------
 5369|      0|                m_type = reader_type::regex_escaped;
 5370|      0|                break;
 5371|   139k|#endif
 5372|   139k|        }
 5373|       |
 5374|   139k|        SCN_GCC_COMPAT_POP
 5375|   139k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6260|  51.5k|    {
 6261|  51.5k|        const bool need_skipped_width =
 6262|  51.5k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 51.5k]
  |  Branch (6262:33): [True: 0, False: 51.5k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  51.5k|        auto it = rng.begin();
 6266|  51.5k|        std::ptrdiff_t prefix_width = 0;
 6267|  51.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 51.5k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  51.5k|        else {
 6275|  51.5k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  51.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  51.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  51.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  51.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 970, False: 50.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    970|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    970|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    970|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    970|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    970|    }                                                  \
  |  |  |  | 3995|  51.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  51.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  50.5k|            std::tie(it, prefix_width) = prefix_result;
 6277|  50.5k|        }
 6278|  50.5k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  50.5k|        std::ptrdiff_t value_width = 0;
 6282|  50.5k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 50.5k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  50.5k|        else {
 6298|  50.5k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.61k, False: 47.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  2.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  2.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  2.61k|    }                                                  \
  |  | 3995|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  50.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  47.9k|                                             specs, value, loc));
 6300|       |
 6301|  47.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 47.9k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  47.9k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  47.9k|        std::ptrdiff_t postfix_width = 0;
 6310|  47.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 47.4k, False: 538]
  ------------------
 6311|  47.4k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  47.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  47.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  47.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  47.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 47.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  47.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  47.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  47.4k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  47.4k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  47.4k|                                 value_width));
 6315|  47.4k|            std::tie(it, postfix_width) = postfix_result;
 6316|  47.4k|        }
 6317|       |
 6318|  47.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  47.9k|    do {                                                            \
  |  | 3985|  47.9k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  47.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 47.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  47.9k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  47.9k|            specs, prefix_width, value_width, postfix_width));
 6320|  47.9k|        return it;
 6321|  47.9k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5378|   447k|    {
 5379|   447k|        return m_type == reader_type::word;
 5380|   447k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1263|   313k|{
 1264|   313k|    auto it = src.begin();
 1265|  2.16M|    while (it != src.end()) {
  ------------------
  |  Branch (1265:12): [True: 1.85M, False: 306k]
  ------------------
 1266|  1.85M|        const auto len = static_cast<std::ptrdiff_t>(
 1267|  1.85M|            detail::code_point_length_by_starting_code_unit(*it));
 1268|  1.85M|        SCN_EXPECT(len >= 0);
  ------------------
  |  | 1079|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1269|  1.85M|        if (len == 0) {
  ------------------
  |  Branch (1269:13): [True: 4.81k, False: 1.85M]
  ------------------
 1270|  4.81k|            return false;
 1271|  4.81k|        }
 1272|  1.85M|        if (std::distance(it, src.end()) < len) {
  ------------------
  |  Branch (1272:13): [True: 683, False: 1.85M]
  ------------------
 1273|    683|            return false;
 1274|    683|        }
 1275|  1.85M|        const auto cp = detail::decode_code_point_exhaustive(
 1276|  1.85M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1277|  1.85M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1277:13): [True: 2.29k, False: 1.84M]
  ------------------
 1278|  2.29k|            return false;
 1279|  2.29k|        }
 1280|  1.84M|        it += len;
 1281|  1.84M|    }
 1282|   306k|    return true;
 1283|   313k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3170|   118k|{
 3171|   118k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3172|   118k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3172:13): [True: 1.96k, False: 117k]
  ------------------
 3173|  1.96k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1083|  1.96k|    static_cast<    \
  |  | 1084|  1.96k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3174|  1.96k|        }
 3175|   117k|        else {
 3176|   117k|            dest.assign(source.view());
 3177|   117k|        }
 3178|       |    }
 3179|       |    else {
 3180|       |        return transcode_impl(source.view(), dest);
 3181|       |    }
 3182|       |
 3183|   118k|    return {};
 3184|   118k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5229|  7.48k|        {
 5230|  7.48k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5230:17): [True: 7.48k, False: 0]
  ------------------
 5231|  7.48k|                return {};
 5232|  7.48k|            }
 5233|       |
 5234|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5235|      0|            auto it = detail::to_address(charset_string.begin());
 5236|      0|            auto set = detail::parse_presentation_set(
 5237|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5238|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3984|      0|    do {                                                            \
  |  | 3985|      0|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5239|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5240|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5241|       |
 5242|      0|            std::sort(nonascii.extra_ranges.begin(),
 5243|      0|                      nonascii.extra_ranges.end());
 5244|      0|            return {};
 5245|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5202|  14.5k|        {
 5203|  14.5k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1079|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|  14.5k|            const auto val =
 5205|  14.5k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5206|  14.5k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5207|  14.5k|                    (val % 8)) &
 5208|  14.5k|                   1u;
 5209|  14.5k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5253|  16.1k|        {
 5254|  16.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5254:17): [True: 1.59k, False: 14.5k]
  ------------------
 5255|  1.59k|                return false;
 5256|  1.59k|            }
 5257|       |
 5258|  14.5k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5259|  16.1k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5199|  7.48k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5396|  50.5k|    {
 5397|  50.5k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  50.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|  50.5k|        return read_impl(range, specs, value);
 5399|  50.5k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5416|  50.5k|    {
 5417|  50.5k|        SCN_CLANG_PUSH
 5418|  50.5k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|  50.5k|        switch (m_type) {
 5421|  48.1k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 48.1k, False: 2.49k]
  ------------------
 5422|  48.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 50.5k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 50.5k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  2.49k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 2.49k, False: 48.1k]
  ------------------
 5432|  2.49k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  2.49k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 50.5k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 50.5k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 50.5k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|  50.5k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|  50.5k|        }
 5453|       |
 5454|  50.5k|        SCN_CLANG_POP
 5455|  50.5k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4950|   120k|    {
 4951|   120k|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|   120k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4884|   120k|{
 4885|   120k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|   120k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|   120k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 2.22k, False: 118k]
  ------------------
 4889|  2.22k|        return detail::unexpected_scan_error(
 4890|  2.22k|            scan_error::invalid_scanned_value,
 4891|  2.22k|            "Invalid encoding in scanned string");
 4892|  2.22k|    }
 4893|       |
 4894|   118k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|   118k|    do {                                                            \
  |  | 3985|   118k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 118k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   118k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|   118k|    return SCN_MOVE(result);
  ------------------
  |  | 1083|   118k|    static_cast<    \
  |  | 1084|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|   118k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2247|   120k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|   120k|    else {
 2257|   120k|        auto it = range.begin();
 2258|       |
 2259|   120k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|   120k|            auto seg = get_contiguous_beginning(range);
 2261|   120k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|   120k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2262:17): [True: 0, False: 120k]
  ------------------
 2263|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|      0|            }
 2265|   120k|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|   120k|        }
 2267|       |
 2268|      0|        return read_until_code_point(
 2269|   120k|            ranges::subrange{it, range.end()},
 2270|   120k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|   120k|    }
 2272|   120k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1054|   242k|{
 1055|   242k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   242k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 1056|       |
 1057|       |    if constexpr (ranges::contiguous_range<Range> &&
 1058|       |                  ranges::sized_range<Range>) {
 1059|       |        return r;
 1060|       |    }
 1061|       |    else if constexpr (std::is_same_v<
 1062|       |                           ranges::const_iterator_t<Range>,
 1063|       |                           typename detail::basic_scan_buffer<
 1064|   242k|                               detail::char_t<Range>>::forward_iterator>) {
 1065|       |        if constexpr (ranges::common_range<Range>) {
 1066|       |            auto seg = r.begin().contiguous_segment();
 1067|       |            auto dist =
 1068|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1069|       |            return seg.substr(0, std::min(seg.size(), dist));
 1070|       |        }
 1071|   242k|        else {
 1072|   242k|            return r.begin().contiguous_segment();
 1073|   242k|        }
 1074|       |    }
 1075|       |    else {
 1076|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1077|       |    }
 1078|   242k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|   229k|{
 2220|   229k|    auto it = range.begin();
 2221|  1.23M|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 1.23M, False: 4.00k]
  ------------------
 2222|  1.23M|        const auto val =
 2223|  1.23M|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  1.23M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  1.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 1.21M, False: 15.8k]
  |  |  ------------------
  ------------------
 2225|  1.21M|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  1.21M|                std::basic_string_view<detail::char_t<Range>>{
 2227|  1.21M|                    val.codepoint.data(), val.codepoint.size()});
 2228|  1.21M|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 225k, False: 990k]
  ------------------
 2229|   225k|                return it;
 2230|   225k|            }
 2231|  1.21M|        }
 2232|  1.00M|        it = val.iterator;
 2233|  1.00M|    }
 2234|       |
 2235|  4.00k|    return it;
 2236|   229k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|  1.23M|{
 2024|  1.23M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  1.23M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  1.23M|    auto it = range.begin();
 2028|  1.23M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  1.23M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 15.8k, False: 1.21M]
  |  |  ------------------
  ------------------
 2031|  15.8k|        ++it;
 2032|  15.8k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|  15.8k|        return {it, {}};
 2034|  15.8k|    }
 2035|       |
 2036|  1.21M|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 1.15M, False: 62.0k]
  ------------------
 2037|  1.15M|        ++it;
 2038|  1.15M|        return {it, string_type(1, *range.begin())};
 2039|  1.15M|    }
 2040|       |
 2041|  62.0k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|  62.0k|    return {it, string_type{range.begin(), it}};
 2043|  1.21M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1288|  15.8k|{
 1289|  15.8k|    auto it = input.begin();
 1290|  32.5k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1290:12): [True: 31.9k, False: 556]
  ------------------
 1291|  31.9k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1291:13): [True: 15.2k, False: 16.6k]
  ------------------
 1292|  15.2k|            break;
 1293|  15.2k|        }
 1294|  31.9k|    }
 1295|  15.8k|    return it;
 1296|  15.8k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  62.0k|    {
  283|  62.0k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  62.0k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  62.0k|    {
  252|  62.0k|        constexpr iter_difference_t<I> zero{0};
  253|  62.0k|        iter_difference_t<I> counter{0};
  254|       |
  255|   228k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 167k, False: 61.5k]
  |  Branch (255:30): [True: 166k, False: 485]
  ------------------
  256|   166k|            ++i;
  257|   166k|            ++counter;
  258|   166k|        }
  259|       |
  260|  62.0k|        return counter;
  261|  62.0k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 2014|  1.23M|    {
 2015|  1.23M|        return !codepoint.empty();
 2016|  1.23M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   120k|        : m_fptr([](storage fn,
  753|   120k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   120k|              cvref<T> obj = *get<T>(fn);
  755|   120k|              if constexpr (std::is_void_v<R>) {
  756|   120k|                  obj(static_cast<decltype(args)>(args)...);
  757|   120k|              }
  758|   120k|              else {
  759|   120k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   120k|              }
  761|   120k|          }),
  762|   120k|          m_storage(std::addressof(f))
  763|   120k|    {
  764|   120k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   746k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   746k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   746k|              else {
  759|   746k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   746k|              }
  761|   746k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   746k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   746k|        else if constexpr (std::is_object_v<T>) {
  694|   746k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   746k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2270|   746k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   120k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   120k|        {
  668|   120k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5174|  2.49k|    {
 5175|  2.49k|        auto it = read_source_impl(range, {specs});
 5176|  2.49k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.79k, False: 700]
  |  |  ------------------
  ------------------
 5177|  1.79k|            return unexpected(it.error());
 5178|  1.79k|        }
 5179|       |
 5180|    700|        return read_string_impl(range, *it, value);
 5181|  2.49k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5277|  2.49k|    {
 5278|  2.49k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|  2.49k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|  2.49k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|  2.49k|    do {                                                            \
  |  | 3985|  2.49k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 2.49k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  2.49k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|  2.49k|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|  2.49k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 0, False: 2.49k]
  ------------------
 5286|      0|            const auto cb = [&](char32_t cp) {
 5287|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|      0|            };
 5289|       |
 5290|      0|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 0, False: 0]
  ------------------
 5291|      0|                auto it = read_until_code_point(range, cb);
 5292|      0|                return check_nonempty(it, range);
 5293|      0|            }
 5294|      0|            auto it = read_while_code_point(range, cb);
 5295|      0|            return check_nonempty(it, range);
 5296|      0|        }
 5297|       |
 5298|  2.49k|        const auto cb = [&](SourceCharT ch) {
 5299|  2.49k|            return cb_wrapper.on_ascii_only(ch);
 5300|  2.49k|        };
 5301|       |
 5302|  2.49k|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 0, False: 2.49k]
  ------------------
 5303|      0|            auto it = read_until_code_unit(range, cb);
 5304|      0|            return check_nonempty(it, range);
 5305|      0|        }
 5306|  2.49k|        auto it = read_while_code_unit(range, cb);
 5307|  2.49k|        return check_nonempty(it, range);
 5308|  2.49k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5313|  2.49k|    {
 5314|  2.49k|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 1.79k, False: 700]
  ------------------
 5315|  1.79k|            return detail::unexpected_scan_error(
 5316|  1.79k|                scan_error::invalid_scanned_value,
 5317|  1.79k|                "No characters matched in [character set]");
 5318|  1.79k|        }
 5319|       |
 5320|    700|        return it;
 5321|  2.49k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   108k|{
 2242|   108k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   108k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  752|  2.49k|        : m_fptr([](storage fn,
  753|  2.49k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  2.49k|              cvref<T> obj = *get<T>(fn);
  755|  2.49k|              if constexpr (std::is_void_v<R>) {
  756|  2.49k|                  obj(static_cast<decltype(args)>(args)...);
  757|  2.49k|              }
  758|  2.49k|              else {
  759|  2.49k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  2.49k|              }
  761|  2.49k|          }),
  762|  2.49k|          m_storage(std::addressof(f))
  763|  2.49k|    {
  764|  2.49k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  753|  5.39k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  5.39k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  5.39k|              else {
  759|  5.39k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  5.39k|              }
  761|  5.39k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  689|  5.39k|    {
  690|  5.39k|        if constexpr (std::is_const_v<T>) {
  691|  5.39k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  5.39k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5298|  5.39k|        const auto cb = [&](SourceCharT ch) {
 5299|  5.39k|            return cb_wrapper.on_ascii_only(ch);
 5300|  5.39k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  671|  2.49k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  2.49k|        {
  673|  2.49k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4884|    700|{
 4885|    700|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    700|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    700|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 0, False: 700]
  ------------------
 4889|      0|        return detail::unexpected_scan_error(
 4890|      0|            scan_error::invalid_scanned_value,
 4891|      0|            "Invalid encoding in scanned string");
 4892|      0|    }
 4893|       |
 4894|    700|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    700|    do {                                                            \
  |  | 3985|    700|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    700|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 700]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    700|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    700|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    700|    static_cast<    \
  |  | 1084|    700|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    700|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|  40.7k|    {
 5397|  40.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  40.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|  40.7k|        return read_impl(range, specs, value);
 5399|  40.7k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|  40.7k|    {
 5417|  40.7k|        SCN_CLANG_PUSH
 5418|  40.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|  40.7k|        switch (m_type) {
 5421|  38.2k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 38.2k, False: 2.49k]
  ------------------
 5422|  38.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 40.7k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 40.7k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  2.49k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 2.49k, False: 38.2k]
  ------------------
 5432|  2.49k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  2.49k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 40.7k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 40.7k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 40.7k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|  40.7k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|  40.7k|        }
 5453|       |
 5454|  40.7k|        SCN_CLANG_POP
 5455|  40.7k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4950|  95.5k|    {
 4951|  95.5k|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|  95.5k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4884|  95.5k|{
 4885|  95.5k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|  95.5k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|  95.5k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 2.78k, False: 92.8k]
  ------------------
 4889|  2.78k|        return detail::unexpected_scan_error(
 4890|  2.78k|            scan_error::invalid_scanned_value,
 4891|  2.78k|            "Invalid encoding in scanned string");
 4892|  2.78k|    }
 4893|       |
 4894|  92.8k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|  92.8k|    do {                                                            \
  |  | 3985|  92.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  92.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 92.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  92.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|  92.8k|    return SCN_MOVE(result);
  ------------------
  |  | 1083|  92.8k|    static_cast<    \
  |  | 1084|  92.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|  92.8k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3190|  93.5k|{
 3191|  93.5k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3192|  93.5k|        dest.assign(source.view());
 3193|       |    }
 3194|       |    else {
 3195|       |        return transcode_impl(source.view(), dest);
 3196|       |    }
 3197|       |
 3198|  93.5k|    return {};
 3199|  93.5k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2247|   191k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|   191k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|   191k|        auto buf = make_contiguous_buffer(range);
 2252|   191k|        auto it = find_classic_space_narrow_fast(buf.view());
 2253|   191k|        return ranges::next(range.begin(),
 2254|   191k|                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|       |    else {
 2257|       |        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|       |        return read_until_code_point(
 2269|       |            ranges::subrange{it, range.end()},
 2270|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|       |    }
 2272|   191k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5174|  2.49k|    {
 5175|  2.49k|        auto it = read_source_impl(range, {specs});
 5176|  2.49k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.79k, False: 700]
  |  |  ------------------
  ------------------
 5177|  1.79k|            return unexpected(it.error());
 5178|  1.79k|        }
 5179|       |
 5180|    700|        return read_string_impl(range, *it, value);
 5181|  2.49k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5277|  4.98k|    {
 5278|  4.98k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|  4.98k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|  4.98k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|  4.98k|    do {                                                            \
  |  | 3985|  4.98k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  4.98k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 4.98k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  4.98k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|  4.98k|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|  4.98k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 0, False: 4.98k]
  ------------------
 5286|      0|            const auto cb = [&](char32_t cp) {
 5287|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|      0|            };
 5289|       |
 5290|      0|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 0, False: 0]
  ------------------
 5291|      0|                auto it = read_until_code_point(range, cb);
 5292|      0|                return check_nonempty(it, range);
 5293|      0|            }
 5294|      0|            auto it = read_while_code_point(range, cb);
 5295|      0|            return check_nonempty(it, range);
 5296|      0|        }
 5297|       |
 5298|  4.98k|        const auto cb = [&](SourceCharT ch) {
 5299|  4.98k|            return cb_wrapper.on_ascii_only(ch);
 5300|  4.98k|        };
 5301|       |
 5302|  4.98k|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 0, False: 4.98k]
  ------------------
 5303|      0|            auto it = read_until_code_unit(range, cb);
 5304|      0|            return check_nonempty(it, range);
 5305|      0|        }
 5306|  4.98k|        auto it = read_while_code_unit(range, cb);
 5307|  4.98k|        return check_nonempty(it, range);
 5308|  4.98k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5313|  4.98k|    {
 5314|  4.98k|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 3.58k, False: 1.40k]
  ------------------
 5315|  3.58k|            return detail::unexpected_scan_error(
 5316|  3.58k|                scan_error::invalid_scanned_value,
 5317|  3.58k|                "No characters matched in [character set]");
 5318|  3.58k|        }
 5319|       |
 5320|  1.40k|        return it;
 5321|  4.98k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  752|  4.98k|        : m_fptr([](storage fn,
  753|  4.98k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  4.98k|              cvref<T> obj = *get<T>(fn);
  755|  4.98k|              if constexpr (std::is_void_v<R>) {
  756|  4.98k|                  obj(static_cast<decltype(args)>(args)...);
  757|  4.98k|              }
  758|  4.98k|              else {
  759|  4.98k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  4.98k|              }
  761|  4.98k|          }),
  762|  4.98k|          m_storage(std::addressof(f))
  763|  4.98k|    {
  764|  4.98k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  753|  10.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  10.7k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  10.7k|              else {
  759|  10.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  10.7k|              }
  761|  10.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  689|  10.7k|    {
  690|  10.7k|        if constexpr (std::is_const_v<T>) {
  691|  10.7k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  10.7k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5298|  10.7k|        const auto cb = [&](SourceCharT ch) {
 5299|  10.7k|            return cb_wrapper.on_ascii_only(ch);
 5300|  10.7k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|  4.98k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  4.98k|        {
  673|  4.98k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4884|    700|{
 4885|    700|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    700|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    700|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 0, False: 700]
  ------------------
 4889|      0|        return detail::unexpected_scan_error(
 4890|      0|            scan_error::invalid_scanned_value,
 4891|      0|            "Invalid encoding in scanned string");
 4892|      0|    }
 4893|       |
 4894|    700|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    700|    do {                                                            \
  |  | 3985|    700|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    700|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 700]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    700|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    700|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    700|    static_cast<    \
  |  | 1084|    700|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    700|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5935|   101k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|   101k|                       std::is_same_v<T, std::wstring_view>) {
 5950|   101k|        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|       |                       std::is_same_v<T, std::wstring>) {
 5954|       |        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|   101k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5396|  40.7k|    {
 5397|  40.7k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  40.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|  40.7k|        return read_impl(range, specs, value);
 5399|  40.7k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5416|  40.7k|    {
 5417|  40.7k|        SCN_CLANG_PUSH
 5418|  40.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|  40.7k|        switch (m_type) {
 5421|  38.2k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 38.2k, False: 2.49k]
  ------------------
 5422|  38.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 40.7k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 40.7k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  2.49k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 2.49k, False: 38.2k]
  ------------------
 5432|  2.49k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  2.49k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 40.7k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 40.7k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 40.7k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|  40.7k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|  40.7k|        }
 5453|       |
 5454|  40.7k|        SCN_CLANG_POP
 5455|  40.7k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4957|  95.5k|    {
 4958|  95.5k|        return read_string_view_impl(range, read_until_classic_space(range),
 4959|  95.5k|                                     value);
 4960|  95.5k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4903|  95.5k|{
 4904|  95.5k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|  95.5k|    auto src = [&]() {
 4907|  95.5k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|  95.5k|            return make_contiguous_buffer(
 4909|  95.5k|                ranges::subrange{range.begin().base(), result.base()});
 4910|  95.5k|        }
 4911|  95.5k|        else {
 4912|  95.5k|            return make_contiguous_buffer(
 4913|  95.5k|                ranges::subrange{range.begin(), result});
 4914|  95.5k|        }
 4915|  95.5k|    }();
 4916|  95.5k|    using src_type = decltype(src);
 4917|       |
 4918|  95.5k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|  95.5k|    else {
 4931|  95.5k|        const auto view = src.view();
 4932|  95.5k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|  95.5k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 2.78k, False: 92.8k]
  ------------------
 4935|  2.78k|            return detail::unexpected_scan_error(
 4936|  2.78k|                scan_error::invalid_scanned_value,
 4937|  2.78k|                "Invalid encoding in scanned string_view");
 4938|  2.78k|        }
 4939|       |
 4940|  92.8k|        return SCN_MOVE(result);
  ------------------
  |  | 1083|  92.8k|    static_cast<    \
  |  | 1084|  92.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|  95.5k|    }
 4942|  95.5k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4906|  95.5k|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|  95.5k|        else {
 4912|  95.5k|            return make_contiguous_buffer(
 4913|  95.5k|                ranges::subrange{range.begin(), result});
 4914|  95.5k|        }
 4915|  95.5k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5188|  2.49k|    {
 5189|  2.49k|        auto it = read_source_impl(range, {specs});
 5190|  2.49k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  2.49k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.79k, False: 700]
  |  |  ------------------
  ------------------
 5191|  1.79k|            return unexpected(it.error());
 5192|  1.79k|        }
 5193|       |
 5194|    700|        return read_string_view_impl(range, *it, value);
 5195|  2.49k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4903|    700|{
 4904|    700|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    700|    auto src = [&]() {
 4907|    700|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    700|            return make_contiguous_buffer(
 4909|    700|                ranges::subrange{range.begin().base(), result.base()});
 4910|    700|        }
 4911|    700|        else {
 4912|    700|            return make_contiguous_buffer(
 4913|    700|                ranges::subrange{range.begin(), result});
 4914|    700|        }
 4915|    700|    }();
 4916|    700|    using src_type = decltype(src);
 4917|       |
 4918|    700|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    700|    else {
 4931|    700|        const auto view = src.view();
 4932|    700|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    700|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 0, False: 700]
  ------------------
 4935|      0|            return detail::unexpected_scan_error(
 4936|      0|                scan_error::invalid_scanned_value,
 4937|      0|                "Invalid encoding in scanned string_view");
 4938|      0|        }
 4939|       |
 4940|    700|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    700|    static_cast<    \
  |  | 1084|    700|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    700|    }
 4942|    700|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4906|    700|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|    700|        else {
 4912|    700|            return make_contiguous_buffer(
 4913|    700|                ranges::subrange{range.begin(), result});
 4914|    700|        }
 4915|    700|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   122k|{
 3129|   122k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 122k, False: 0]
  ------------------
 3130|   122k|        auto it = read_while_classic_space(range);
 3131|   122k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   122k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.48k, False: 120k]
  |  |  ------------------
  ------------------
 3133|  1.48k|            return unexpected(e);
 3134|  1.48k|        }
 3135|       |
 3136|   120k|        return it;
 3137|   122k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   122k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   122k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   122k|    else {
 2286|   122k|        auto it = range.begin();
 2287|       |
 2288|   122k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|   122k|            auto seg = get_contiguous_beginning(range);
 2290|   122k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|   122k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2291:17): [True: 13.1k, False: 108k]
  ------------------
 2292|  13.1k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|  13.1k|            }
 2294|   108k|            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|   108k|        }
 2296|       |
 2297|   122k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   122k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   122k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   122k|            return detail::is_cp_space(cp);
 2300|   122k|        });
 2301|   122k|    }
 2302|   122k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   108k|        : m_fptr([](storage fn,
  753|   108k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   108k|              cvref<T> obj = *get<T>(fn);
  755|   108k|              if constexpr (std::is_void_v<R>) {
  756|   108k|                  obj(static_cast<decltype(args)>(args)...);
  757|   108k|              }
  758|   108k|              else {
  759|   108k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   108k|              }
  761|   108k|          }),
  762|   108k|          m_storage(std::addressof(f))
  763|   108k|    {
  764|   108k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|   468k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   468k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|   468k|              else {
  759|   468k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   468k|              }
  761|   468k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|   468k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|   468k|        else if constexpr (std::is_object_v<T>) {
  694|   468k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|   468k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|   468k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   468k|            return detail::is_cp_space(cp);
 2300|   468k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   108k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   108k|        {
  668|   108k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  992|   732k|{
  993|   732k|    SCN_UNUSED(r);
  ------------------
  |  | 1064|   732k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  994|       |
  995|       |    if constexpr (ranges::contiguous_range<Range> &&
  996|       |                  ranges::sized_range<Range>) {
  997|       |        return true;
  998|       |    }
  999|       |    else if constexpr (std::is_same_v<
 1000|       |                           ranges::const_iterator_t<Range>,
 1001|       |                           typename detail::basic_scan_buffer<
 1002|   732k|                               detail::char_t<Range>>::forward_iterator>) {
 1003|   732k|        auto beg = r.begin();
 1004|   732k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (1004:13): [True: 732k, False: 0]
  ------------------
 1005|   732k|            return false;
 1006|   732k|        }
 1007|       |        if constexpr (ranges::common_range<Range>) {
 1008|       |            return beg.contiguous_segment().end() ==
 1009|       |                   ranges::end(r).contiguous_segment().end();
 1010|       |        }
 1011|      0|        else {
 1012|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (1012:17): [True: 0, False: 0]
  ------------------
 1013|      0|                return beg.contiguous_segment().end() ==
 1014|      0|                       beg.parent()->current_view().end();
 1015|      0|            }
 1016|      0|            return true;
 1017|      0|        }
 1018|       |    }
 1019|       |    else {
 1020|       |        return false;
 1021|       |    }
 1022|   732k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  772|  29.5k|    {
  773|  29.5k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1085|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  774|  29.5k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  752|  11.1k|        : m_fptr([](storage fn,
  753|  11.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  11.1k|              cvref<T> obj = *get<T>(fn);
  755|  11.1k|              if constexpr (std::is_void_v<R>) {
  756|  11.1k|                  obj(static_cast<decltype(args)>(args)...);
  757|  11.1k|              }
  758|  11.1k|              else {
  759|  11.1k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  11.1k|              }
  761|  11.1k|          }),
  762|  11.1k|          m_storage(std::addressof(f))
  763|  11.1k|    {
  764|  11.1k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  753|  14.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  14.7k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  14.7k|              else {
  759|  14.7k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  14.7k|              }
  761|  14.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  689|  14.7k|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  14.7k|        else if constexpr (std::is_object_v<T>) {
  694|  14.7k|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  14.7k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  666|  11.1k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  11.1k|        {
  668|  11.1k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6173|   295k|    {
 6174|   295k|        const bool need_skipped_width =
 6175|   295k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 295k]
  |  Branch (6175:33): [True: 0, False: 295k]
  ------------------
 6176|   295k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   295k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 295k]
  ------------------
 6180|   295k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 295k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   295k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 295k, False: 0]
  |  Branch (6184:56): [True: 291k, False: 3.72k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   291k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 291k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   581k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   291k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   291k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   291k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   291k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 934, False: 290k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    934|    }                                                  \
  |  |  |  | 3995|   291k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   291k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   581k|                            make_eof_scan_error));
 6195|       |
 6196|   581k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 290k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   290k|            return result_type{it, 0};
 6204|   581k|        }
 6205|       |
 6206|  3.72k|        return result_type{rng.begin(), 0};
 6207|   295k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2133|  3.72k|{
 2134|  3.72k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  3.72k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2100|  3.72k|{
 2101|       |    if constexpr (ranges::common_range<Range>) {
 2102|       |        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|  3.72k|    else {
 2105|  3.72k|        auto first = range.begin();
 2106|  4.97k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2106:16): [True: 4.92k, False: 52]
  ------------------
 2107|  4.92k|            if (pred(*first)) {
  ------------------
  |  Branch (2107:17): [True: 3.66k, False: 1.25k]
  ------------------
 2108|  3.66k|                return first;
 2109|  3.66k|            }
 2110|  4.92k|        }
 2111|     52|        return first;
 2112|  3.72k|    }
 2113|  3.72k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   287k|    {
  108|   287k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   287k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   287k|    {
   94|   287k|        iter_difference_t<I> counter{0};
   95|  8.85M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 8.56M, False: 287k]
  ------------------
   96|  8.56M|            ++i;
   97|  8.56M|            ++counter;
   98|  8.56M|        }
   99|   287k|        return counter;
  100|   287k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  960|  1.16M|{
  961|  1.16M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  1.16M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.33k, False: 1.16M]
  |  |  ------------------
  ------------------
  962|  2.33k|        return eof_error::eof;
  963|  2.33k|    }
  964|  1.16M|    return eof_error::good;
  965|  1.16M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  954|  24.3M|{
  955|  24.3M|    return is_range_eof(r.begin(), r.end());
  956|  24.3M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  938|  24.3M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  24.3M|    {
  948|  24.3M|        return begin == end;
  949|  24.3M|    }
  950|  24.3M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1807|   726k|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|       |                  ranges::sized_range<Range>) {
 1811|       |        return string_view_wrapper{SCN_FWD(range)};
 1812|       |    }
 1813|   726k|    else {
 1814|   726k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1085|   726k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1815|   726k|    }
 1816|   726k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1660|   726k|    {
 1661|   726k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1085|   726k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1662|   726k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1744|   726k|    {
 1745|   726k|        using value_t = ranges::range_value_t<Range>;
 1746|       |
 1747|       |        if constexpr (ranges::borrowed_range<Range> &&
 1748|       |                      ranges::contiguous_range<Range> &&
 1749|       |                      ranges::sized_range<Range>) {
 1750|       |            m_storage.reset();
 1751|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1752|       |        }
 1753|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1754|       |                                          std::basic_string<CharT>>) {
 1755|       |            m_storage.emplace(SCN_FWD(range));
 1756|       |            m_view = string_view_type{m_storage->data(), m_storage->size()};
 1757|       |        }
 1758|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1759|       |                                          typename detail::basic_scan_buffer<
 1760|       |                                              value_t>::forward_iterator> &&
 1761|   726k|                           ranges::common_range<Range>) {
 1762|   726k|            auto beg_seg = range.begin().contiguous_segment();
 1763|   726k|            auto end_seg = range.end().contiguous_segment();
 1764|   726k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1014|   726k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.58k, False: 722k]
  |  |  ------------------
  ------------------
 1765|   726k|                             detail::to_address(end_seg.end()))) {
 1766|  3.58k|                auto& str = m_storage.emplace();
 1767|  3.58k|                str.reserve(static_cast<std::size_t>(range.end().position() -
 1768|  3.58k|                                                     range.begin().position()));
 1769|  3.58k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1770|  3.58k|                m_view = string_view_type{str.data(), str.size()};
 1771|  3.58k|                return;
 1772|  3.58k|            }
 1773|       |
 1774|   722k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1775|   722k|                                                            end_seg.data());
 1776|   722k|            m_storage.reset();
 1777|       |        }
 1778|       |        else {
 1779|       |            auto& str = m_storage.emplace();
 1780|       |            if constexpr (ranges::sized_range<Range>) {
 1781|       |                str.reserve(range.size());
 1782|       |            }
 1783|       |            if constexpr (ranges::common_range<Range>) {
 1784|       |                std::copy(ranges::begin(range), ranges::end(range),
 1785|       |                          std::back_inserter(str));
 1786|       |            }
 1787|       |            else {
 1788|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1789|       |                     ++it) {
 1790|       |                    str.push_back(*it);
 1791|       |                }
 1792|       |            }
 1793|       |            m_view = string_view_type{str.data(), str.size()};
 1794|       |        }
 1795|   726k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1705|  1.44M|    {
 1706|  1.44M|        return m_view;
 1707|  1.44M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1695|   726k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6215|   287k|    {
 6216|   287k|        const bool need_skipped_width =
 6217|   287k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 287k]
  |  Branch (6217:33): [True: 0, False: 287k]
  ------------------
 6218|   287k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   287k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 287k]
  ------------------
 6221|   287k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 287k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   287k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 287k, False: 0]
  ------------------
 6230|   287k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 106, False: 287k]
  ------------------
 6231|   287k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 106]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|    106|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 106]
  ------------------
 6233|    106|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   287k|        return result_type{rng.begin(), 0};
 6255|   287k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 2023|  46.2M|{
 2024|  46.2M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  46.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  46.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  46.2M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  46.2M|    auto it = range.begin();
 2028|  46.2M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  46.2M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  46.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 46.2M]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  46.2M|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 46.2M, False: 0]
  ------------------
 2037|  46.2M|        ++it;
 2038|  46.2M|        return {it, string_type(1, *range.begin())};
 2039|  46.2M|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|  46.2M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  954|  48.6M|{
  955|  48.6M|    return is_range_eof(r.begin(), r.end());
  956|  48.6M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  938|  48.6M|{
  939|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  940|       |    if constexpr (ranges::contiguous_iterator<I> ||
  941|       |                  (ranges::random_access_iterator<I> &&
  942|       |                   detail::can_make_address_from_iterator<I>)) {
  943|       |        return detail::to_address(begin) == detail::to_address(end);
  944|       |    }
  945|       |    else
  946|       |#endif
  947|  48.6M|    {
  948|  48.6M|        return begin == end;
  949|  48.6M|    }
  950|  48.6M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 2014|  46.2M|    {
 2015|  46.2M|        return !codepoint.empty();
 2016|  46.2M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  960|  2.32M|{
  961|  2.32M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1014|  2.32M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 4.67k, False: 2.32M]
  |  |  ------------------
  ------------------
  962|  4.67k|        return eof_error::eof;
  963|  4.67k|    }
  964|  2.32M|    return eof_error::good;
  965|  2.32M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1807|  1.45M|{
 1808|       |    if constexpr (ranges::borrowed_range<Range> &&
 1809|       |                  ranges::contiguous_range<Range> &&
 1810|  1.45M|                  ranges::sized_range<Range>) {
 1811|  1.45M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1085|  1.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1812|       |    }
 1813|       |    else {
 1814|       |        return contiguous_range_factory{SCN_FWD(range)};
 1815|       |    }
 1816|  1.45M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1612|  1.45M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1613|  1.45M|    {
 1614|  1.45M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1626|  2.17M|    {
 1627|  2.17M|        return sv;
 1628|  2.17M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2133|  7.44k|{
 2134|  7.44k|    return read_until_code_unit(range, std::not_fn(pred));
 2135|  7.44k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2100|  7.44k|{
 2101|  7.44k|    if constexpr (ranges::common_range<Range>) {
 2102|  7.44k|        return std::find_if(range.begin(), range.end(), pred);
 2103|       |    }
 2104|       |    else {
 2105|       |        auto first = range.begin();
 2106|       |        for (; first != range.end(); ++first) {
 2107|       |            if (pred(*first)) {
 2108|       |                return first;
 2109|       |            }
 2110|       |        }
 2111|       |        return first;
 2112|       |    }
 2113|  7.44k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3128|  1.45M|{
 3129|  1.45M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 1.45M, False: 0]
  ------------------
 3130|  1.45M|        auto it = read_while_classic_space(range);
 3131|  1.45M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|  1.45M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  1.45M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.39k, False: 1.45M]
  |  |  ------------------
  ------------------
 3133|  2.39k|            return unexpected(e);
 3134|  2.39k|        }
 3135|       |
 3136|  1.45M|        return it;
 3137|  1.45M|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|  1.45M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2276|  1.45M|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|  1.45M|    else {
 2286|  1.45M|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|  1.45M|        SCN_UNUSED(it);
  ------------------
  |  | 1064|  1.45M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|  1.45M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  1.45M|            return detail::is_cp_space(cp);
 2300|  1.45M|        });
 2301|  1.45M|    }
 2302|  1.45M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2241|  1.45M|{
 2242|  1.45M|    return read_until_code_point(range, std::not_fn(pred));
 2243|  1.45M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2219|  2.90M|{
 2220|  2.90M|    auto it = range.begin();
 2221|  46.2M|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 46.2M, False: 12.7k]
  ------------------
 2222|  46.2M|        const auto val =
 2223|  46.2M|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  46.2M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  46.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 46.2M, False: 0]
  |  |  ------------------
  ------------------
 2225|  46.2M|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  46.2M|                std::basic_string_view<detail::char_t<Range>>{
 2227|  46.2M|                    val.codepoint.data(), val.codepoint.size()});
 2228|  46.2M|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 2.89M, False: 43.3M]
  ------------------
 2229|  2.89M|                return it;
 2230|  2.89M|            }
 2231|  46.2M|        }
 2232|  43.3M|        it = val.iterator;
 2233|  43.3M|    }
 2234|       |
 2235|  12.7k|    return it;
 2236|  2.90M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|  1.45M|        : m_fptr([](storage fn,
  753|  1.45M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.45M|              cvref<T> obj = *get<T>(fn);
  755|  1.45M|              if constexpr (std::is_void_v<R>) {
  756|  1.45M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.45M|              }
  758|  1.45M|              else {
  759|  1.45M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.45M|              }
  761|  1.45M|          }),
  762|  1.45M|          m_storage(std::addressof(f))
  763|  1.45M|    {
  764|  1.45M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|  3.43M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  3.43M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  3.43M|              else {
  759|  3.43M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  3.43M|              }
  761|  3.43M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|  3.43M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  3.43M|        else if constexpr (std::is_object_v<T>) {
  694|  3.43M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  3.43M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2298|  3.43M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  3.43M|            return detail::is_cp_space(cp);
 2300|  3.43M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|  1.45M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.45M|        {
  668|  1.45M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1710|   720k|    {
 1711|   720k|        return m_storage.has_value();
 1712|   720k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1715|  1.15k|    {
 1716|  1.15k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1079|  1.15k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  1.15k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1717|  1.15k|        return *m_storage;
 1718|  1.15k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5328|  2.20M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3218|   896k|    {
 3219|   896k|        reader_error_handler eh{};
 3220|   896k|        get_derived().check_specs_impl(specs, eh);
 3221|   896k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1014|   896k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 10.7k, False: 885k]
  |  |  ------------------
  ------------------
 3222|  10.7k|            return detail::unexpected_scan_error(
 3223|  10.7k|                scan_error::invalid_format_string, eh.m_msg);
 3224|  10.7k|        }
 3225|   885k|        return {};
 3226|   896k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3230|   896k|    {
 3231|   896k|        return static_cast<Derived&>(*this);
 3232|   896k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5332|   896k|    {
 5333|   896k|        detail::check_string_type_specs(specs, eh);
 5334|       |
 5335|   896k|        SCN_GCC_COMPAT_PUSH
 5336|   896k|        SCN_GCC_COMPAT_IGNORE("-Wswitch")
 5337|   896k|        SCN_GCC_COMPAT_IGNORE("-Wswitch-default")
 5338|       |
 5339|   896k|        switch (specs.type) {
  ------------------
  |  Branch (5339:17): [True: 0, False: 896k]
  ------------------
 5340|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5340:13): [True: 0, False: 896k]
  ------------------
 5341|      0|                m_type = reader_type::word;
 5342|      0|                break;
 5343|       |
 5344|   874k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5344:13): [True: 874k, False: 21.9k]
  ------------------
 5345|   874k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5345:21): [True: 0, False: 874k]
  ------------------
 5346|   874k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5346:21): [True: 0, False: 874k]
  ------------------
 5347|      0|                    m_type = reader_type::custom_word;
 5348|      0|                }
 5349|   874k|                else {
 5350|   874k|                    m_type = reader_type::word;
 5351|   874k|                }
 5352|   874k|                break;
 5353|      0|            }
 5354|       |
 5355|  10.7k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5355:13): [True: 10.7k, False: 885k]
  ------------------
 5356|  10.7k|                m_type = reader_type::character;
 5357|  10.7k|                break;
 5358|       |
 5359|  11.1k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5359:13): [True: 11.1k, False: 884k]
  ------------------
 5360|  11.1k|                m_type = reader_type::character_set;
 5361|  11.1k|                break;
 5362|       |
 5363|      0|#if !SCN_DISABLE_REGEX
 5364|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5364:13): [True: 0, False: 896k]
  ------------------
 5365|      0|                m_type = reader_type::regex;
 5366|      0|                break;
 5367|       |
 5368|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5368:13): [True: 0, False: 896k]
  ------------------
 5369|      0|                m_type = reader_type::regex_escaped;
 5370|      0|                break;
 5371|   896k|#endif
 5372|   896k|        }
 5373|       |
 5374|   896k|        SCN_GCC_COMPAT_POP
 5375|   896k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5378|  3.05M|    {
 5379|  3.05M|        return m_type == reader_type::word;
 5380|  3.05M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1263|  2.17M|{
 1264|  2.17M|    auto it = src.begin();
 1265|  63.4M|    while (it != src.end()) {
  ------------------
  |  Branch (1265:12): [True: 61.2M, False: 2.15M]
  ------------------
 1266|  61.2M|        const auto len = static_cast<std::ptrdiff_t>(
 1267|  61.2M|            detail::code_point_length_by_starting_code_unit(*it));
 1268|  61.2M|        SCN_EXPECT(len >= 0);
  ------------------
  |  | 1079|  61.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  61.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1269|  61.2M|        if (len == 0) {
  ------------------
  |  Branch (1269:13): [True: 0, False: 61.2M]
  ------------------
 1270|      0|            return false;
 1271|      0|        }
 1272|  61.2M|        if (std::distance(it, src.end()) < len) {
  ------------------
  |  Branch (1272:13): [True: 0, False: 61.2M]
  ------------------
 1273|      0|            return false;
 1274|      0|        }
 1275|  61.2M|        const auto cp = detail::decode_code_point_exhaustive(
 1276|  61.2M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1277|  61.2M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1277:13): [True: 19.9k, False: 61.2M]
  ------------------
 1278|  19.9k|            return false;
 1279|  19.9k|        }
 1280|  61.2M|        it += len;
 1281|  61.2M|    }
 1282|  2.15M|    return true;
 1283|  2.17M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5229|  11.1k|        {
 5230|  11.1k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5230:17): [True: 11.1k, False: 0]
  ------------------
 5231|  11.1k|                return {};
 5232|  11.1k|            }
 5233|       |
 5234|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5235|      0|            auto it = detail::to_address(charset_string.begin());
 5236|      0|            auto set = detail::parse_presentation_set(
 5237|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5238|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3984|      0|    do {                                                            \
  |  | 3985|      0|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|      0|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5239|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5240|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1080|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5241|       |
 5242|      0|            std::sort(nonascii.extra_ranges.begin(),
 5243|      0|                      nonascii.extra_ranges.end());
 5244|      0|            return {};
 5245|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5202|  9.56k|        {
 5203|  9.56k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1079|  9.56k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  9.56k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5204|  9.56k|            const auto val =
 5205|  9.56k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5206|  9.56k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5207|  9.56k|                    (val % 8)) &
 5208|  9.56k|                   1u;
 5209|  9.56k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5253|  14.7k|        {
 5254|  14.7k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5254:17): [True: 5.20k, False: 9.56k]
  ------------------
 5255|  5.20k|                return false;
 5256|  5.20k|            }
 5257|       |
 5258|  9.56k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5259|  14.7k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5199|  11.1k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2247|   726k|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|   726k|    else {
 2257|   726k|        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|   726k|        return read_until_code_point(
 2269|   726k|            ranges::subrange{it, range.end()},
 2270|   726k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|   726k|    }
 2272|   726k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2219|  1.45M|{
 2220|  1.45M|    auto it = range.begin();
 2221|  23.1M|    while (it != range.end()) {
  ------------------
  |  Branch (2221:12): [True: 23.1M, False: 6.35k]
  ------------------
 2222|  23.1M|        const auto val =
 2223|  23.1M|            read_code_point_into(ranges::subrange{it, range.end()});
 2224|  23.1M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1013|  23.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1013:25): [True: 23.1M, False: 0]
  |  |  ------------------
  ------------------
 2225|  23.1M|            const auto cp = detail::decode_code_point_exhaustive(
 2226|  23.1M|                std::basic_string_view<detail::char_t<Range>>{
 2227|  23.1M|                    val.codepoint.data(), val.codepoint.size()});
 2228|  23.1M|            if (pred(cp)) {
  ------------------
  |  Branch (2228:17): [True: 1.44M, False: 21.6M]
  ------------------
 2229|  1.44M|                return it;
 2230|  1.44M|            }
 2231|  23.1M|        }
 2232|  21.6M|        it = val.iterator;
 2233|  21.6M|    }
 2234|       |
 2235|  6.35k|    return it;
 2236|  1.45M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 2023|  23.1M|{
 2024|  23.1M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1079|  23.1M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  23.1M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2025|  23.1M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2026|       |
 2027|  23.1M|    auto it = range.begin();
 2028|  23.1M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2029|       |
 2030|  23.1M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1014|  23.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 0, False: 23.1M]
  |  |  ------------------
  ------------------
 2031|      0|        ++it;
 2032|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2033|      0|        return {it, {}};
 2034|      0|    }
 2035|       |
 2036|  23.1M|    if (len == 1) {
  ------------------
  |  Branch (2036:9): [True: 23.1M, False: 0]
  ------------------
 2037|  23.1M|        ++it;
 2038|  23.1M|        return {it, string_type(1, *range.begin())};
 2039|  23.1M|    }
 2040|       |
 2041|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2042|      0|    return {it, string_type{range.begin(), it}};
 2043|  23.1M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 2014|  23.1M|    {
 2015|  23.1M|        return !codepoint.empty();
 2016|  23.1M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   726k|        : m_fptr([](storage fn,
  753|   726k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   726k|              cvref<T> obj = *get<T>(fn);
  755|   726k|              if constexpr (std::is_void_v<R>) {
  756|   726k|                  obj(static_cast<decltype(args)>(args)...);
  757|   726k|              }
  758|   726k|              else {
  759|   726k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   726k|              }
  761|   726k|          }),
  762|   726k|          m_storage(std::addressof(f))
  763|   726k|    {
  764|   726k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|  21.4M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  21.4M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  21.4M|              else {
  759|  21.4M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  21.4M|              }
  761|  21.4M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|  21.4M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  21.4M|        else if constexpr (std::is_object_v<T>) {
  694|  21.4M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  21.4M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2270|  21.4M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   726k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   726k|        {
  668|   726k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5277|  3.72k|    {
 5278|  3.72k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|  3.72k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|  3.72k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|  3.72k|    do {                                                            \
  |  | 3985|  3.72k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 3.72k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  3.72k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|  3.72k|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|  3.72k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 0, False: 3.72k]
  ------------------
 5286|      0|            const auto cb = [&](char32_t cp) {
 5287|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|      0|            };
 5289|       |
 5290|      0|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 0, False: 0]
  ------------------
 5291|      0|                auto it = read_until_code_point(range, cb);
 5292|      0|                return check_nonempty(it, range);
 5293|      0|            }
 5294|      0|            auto it = read_while_code_point(range, cb);
 5295|      0|            return check_nonempty(it, range);
 5296|      0|        }
 5297|       |
 5298|  3.72k|        const auto cb = [&](SourceCharT ch) {
 5299|  3.72k|            return cb_wrapper.on_ascii_only(ch);
 5300|  3.72k|        };
 5301|       |
 5302|  3.72k|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 0, False: 3.72k]
  ------------------
 5303|      0|            auto it = read_until_code_unit(range, cb);
 5304|      0|            return check_nonempty(it, range);
 5305|      0|        }
 5306|  3.72k|        auto it = read_while_code_unit(range, cb);
 5307|  3.72k|        return check_nonempty(it, range);
 5308|  3.72k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5313|  3.72k|    {
 5314|  3.72k|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 3.58k, False: 132]
  ------------------
 5315|  3.58k|            return detail::unexpected_scan_error(
 5316|  3.58k|                scan_error::invalid_scanned_value,
 5317|  3.58k|                "No characters matched in [character set]");
 5318|  3.58k|        }
 5319|       |
 5320|    132|        return it;
 5321|  3.72k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2241|   727k|{
 2242|   727k|    return read_until_code_point(range, std::not_fn(pred));
 2243|   727k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  752|  3.72k|        : m_fptr([](storage fn,
  753|  3.72k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  3.72k|              cvref<T> obj = *get<T>(fn);
  755|  3.72k|              if constexpr (std::is_void_v<R>) {
  756|  3.72k|                  obj(static_cast<decltype(args)>(args)...);
  757|  3.72k|              }
  758|  3.72k|              else {
  759|  3.72k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  3.72k|              }
  761|  3.72k|          }),
  762|  3.72k|          m_storage(std::addressof(f))
  763|  3.72k|    {
  764|  3.72k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  753|  4.92k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  4.92k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  4.92k|              else {
  759|  4.92k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  4.92k|              }
  761|  4.92k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  689|  4.92k|    {
  690|  4.92k|        if constexpr (std::is_const_v<T>) {
  691|  4.92k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  4.92k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5298|  4.92k|        const auto cb = [&](SourceCharT ch) {
 5299|  4.92k|            return cb_wrapper.on_ascii_only(ch);
 5300|  4.92k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  671|  3.72k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  3.72k|        {
  673|  3.72k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2247|  1.45M|{
 2248|       |    if constexpr (ranges::contiguous_range<Range> &&
 2249|       |                  ranges::sized_range<Range> &&
 2250|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2251|       |        auto buf = make_contiguous_buffer(range);
 2252|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2253|       |        return ranges::next(range.begin(),
 2254|       |                            ranges::distance(buf.view().begin(), it));
 2255|       |    }
 2256|  1.45M|    else {
 2257|  1.45M|        auto it = range.begin();
 2258|       |
 2259|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2260|       |            auto seg = get_contiguous_beginning(range);
 2261|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2262|       |                seg_it != seg.end()) {
 2263|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2264|       |            }
 2265|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2266|       |        }
 2267|       |
 2268|  1.45M|        return read_until_code_point(
 2269|  1.45M|            ranges::subrange{it, range.end()},
 2270|  1.45M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2271|  1.45M|    }
 2272|  1.45M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  752|  1.45M|        : m_fptr([](storage fn,
  753|  1.45M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.45M|              cvref<T> obj = *get<T>(fn);
  755|  1.45M|              if constexpr (std::is_void_v<R>) {
  756|  1.45M|                  obj(static_cast<decltype(args)>(args)...);
  757|  1.45M|              }
  758|  1.45M|              else {
  759|  1.45M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.45M|              }
  761|  1.45M|          }),
  762|  1.45M|          m_storage(std::addressof(f))
  763|  1.45M|    {
  764|  1.45M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  753|  42.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  42.8M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  42.8M|              else {
  759|  42.8M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  42.8M|              }
  761|  42.8M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  689|  42.8M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  42.8M|        else if constexpr (std::is_object_v<T>) {
  694|  42.8M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  42.8M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2270|  42.8M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  666|  1.45M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|  1.45M|        {
  668|  1.45M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5277|  7.44k|    {
 5278|  7.44k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5279|  7.44k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5280|       |
 5281|  7.44k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3984|  7.44k|    do {                                                            \
  |  | 3985|  7.44k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  7.44k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 7.44k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  7.44k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 5282|       |
 5283|  7.44k|        read_source_callback cb_wrapper{helper};
 5284|       |
 5285|  7.44k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5285:13): [True: 0, False: 7.44k]
  ------------------
 5286|      0|            const auto cb = [&](char32_t cp) {
 5287|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5288|      0|            };
 5289|       |
 5290|      0|            if (is_inverted) {
  ------------------
  |  Branch (5290:17): [True: 0, False: 0]
  ------------------
 5291|      0|                auto it = read_until_code_point(range, cb);
 5292|      0|                return check_nonempty(it, range);
 5293|      0|            }
 5294|      0|            auto it = read_while_code_point(range, cb);
 5295|      0|            return check_nonempty(it, range);
 5296|      0|        }
 5297|       |
 5298|  7.44k|        const auto cb = [&](SourceCharT ch) {
 5299|  7.44k|            return cb_wrapper.on_ascii_only(ch);
 5300|  7.44k|        };
 5301|       |
 5302|  7.44k|        if (is_inverted) {
  ------------------
  |  Branch (5302:13): [True: 0, False: 7.44k]
  ------------------
 5303|      0|            auto it = read_until_code_unit(range, cb);
 5304|      0|            return check_nonempty(it, range);
 5305|      0|        }
 5306|  7.44k|        auto it = read_while_code_unit(range, cb);
 5307|  7.44k|        return check_nonempty(it, range);
 5308|  7.44k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5313|  7.44k|    {
 5314|  7.44k|        if (it == range.begin()) {
  ------------------
  |  Branch (5314:13): [True: 7.17k, False: 264]
  ------------------
 5315|  7.17k|            return detail::unexpected_scan_error(
 5316|  7.17k|                scan_error::invalid_scanned_value,
 5317|  7.17k|                "No characters matched in [character set]");
 5318|  7.17k|        }
 5319|       |
 5320|    264|        return it;
 5321|  7.44k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  752|  7.44k|        : m_fptr([](storage fn,
  753|  7.44k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  7.44k|              cvref<T> obj = *get<T>(fn);
  755|  7.44k|              if constexpr (std::is_void_v<R>) {
  756|  7.44k|                  obj(static_cast<decltype(args)>(args)...);
  757|  7.44k|              }
  758|  7.44k|              else {
  759|  7.44k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  7.44k|              }
  761|  7.44k|          }),
  762|  7.44k|          m_storage(std::addressof(f))
  763|  7.44k|    {
  764|  7.44k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  753|  9.84k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  9.84k|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  9.84k|              else {
  759|  9.84k|                  return obj(static_cast<decltype(args)>(args)...);
  760|  9.84k|              }
  761|  9.84k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  689|  9.84k|    {
  690|  9.84k|        if constexpr (std::is_const_v<T>) {
  691|  9.84k|            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|       |        else if constexpr (std::is_object_v<T>) {
  694|       |            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  9.84k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5298|  9.84k|        const auto cb = [&](SourceCharT ch) {
 5299|  9.84k|            return cb_wrapper.on_ascii_only(ch);
 5300|  9.84k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  671|  7.44k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  672|  7.44k|        {
  673|  7.44k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6325|   298k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|       |                          basic_contiguous_scan_context<char_type>>) {
 6330|       |            auto rd = make_reader<T, char_type>();
 6331|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6332|       |            return impl(rd, range, value);
 6333|       |        }
 6334|   298k|        else if constexpr (!detail::is_type_disabled<T>) {
 6335|   298k|            auto rd = make_reader<T, char_type>();
 6336|   298k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   298k|    do {                                                            \
  |  | 3985|   298k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.58k, False: 295k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.58k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.58k|        }                                                           \
  |  | 3988|   298k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6337|       |
 6338|   295k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6338:17): [True: 295k, False: 0]
  |  Branch (6338:50): [True: 0, False: 0]
  ------------------
 6339|   295k|                specs.width != 0) {
  ------------------
  |  Branch (6339:17): [True: 0, False: 0]
  ------------------
 6340|   295k|                return impl(rd, range, value);
 6341|   295k|            }
 6342|       |
 6343|      0|            auto crange = get_as_contiguous(range);
 6344|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6345|      0|            return ranges::next(range.begin(),
 6346|      0|                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   298k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5935|  1.47M|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|       |                       std::is_same_v<T, std::wstring_view>) {
 5950|       |        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|  1.47M|                       std::is_same_v<T, std::wstring>) {
 5954|  1.47M|        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|  1.47M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6260|   295k|    {
 6261|   295k|        const bool need_skipped_width =
 6262|   295k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 295k]
  |  Branch (6262:33): [True: 0, False: 295k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   295k|        auto it = rng.begin();
 6266|   295k|        std::ptrdiff_t prefix_width = 0;
 6267|   295k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 295k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   295k|        else {
 6275|   295k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 934, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    934|    }                                                  \
  |  |  |  | 3995|   295k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   294k|            std::tie(it, prefix_width) = prefix_result;
 6277|   294k|        }
 6278|   294k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   294k|        std::ptrdiff_t value_width = 0;
 6282|   294k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 294k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   294k|        else {
 6298|   294k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.24k, False: 287k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.24k|    }                                                  \
  |  | 3995|   294k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   287k|                                             specs, value, loc));
 6300|       |
 6301|   287k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 287k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   287k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   287k|        std::ptrdiff_t postfix_width = 0;
 6310|   287k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 287k, False: 786]
  ------------------
 6311|   287k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   287k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   287k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   287k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   287k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   287k|                                 value_width));
 6315|   287k|            std::tie(it, postfix_width) = postfix_result;
 6316|   287k|        }
 6317|       |
 6318|   287k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   287k|    do {                                                            \
  |  | 3985|   287k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 287k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   287k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   287k|            specs, prefix_width, value_width, postfix_width));
 6320|   287k|        return it;
 6321|   287k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3170|   719k|{
 3171|   719k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3172|   719k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3172:13): [True: 1.15k, False: 718k]
  ------------------
 3173|  1.15k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1083|  1.15k|    static_cast<    \
  |  | 1084|  1.15k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3174|  1.15k|        }
 3175|   718k|        else {
 3176|   718k|            dest.assign(source.view());
 3177|   718k|        }
 3178|       |    }
 3179|       |    else {
 3180|       |        return transcode_impl(source.view(), dest);
 3181|       |    }
 3182|       |
 3183|   719k|    return {};
 3184|   719k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5396|   294k|    {
 5397|   294k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   294k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|   294k|        return read_impl(range, specs, value);
 5399|   294k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5416|   294k|    {
 5417|   294k|        SCN_CLANG_PUSH
 5418|   294k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|   294k|        switch (m_type) {
 5421|   290k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 290k, False: 3.72k]
  ------------------
 5422|   290k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 294k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 294k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  3.72k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 3.72k, False: 290k]
  ------------------
 5432|  3.72k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  3.72k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 294k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 294k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 294k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|   294k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|   294k|        }
 5453|       |
 5454|   294k|        SCN_CLANG_POP
 5455|   294k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4950|   726k|    {
 4951|   726k|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|   726k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4884|   726k|{
 4885|   726k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|   726k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|   726k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 6.63k, False: 719k]
  ------------------
 4889|  6.63k|        return detail::unexpected_scan_error(
 4890|  6.63k|            scan_error::invalid_scanned_value,
 4891|  6.63k|            "Invalid encoding in scanned string");
 4892|  6.63k|    }
 4893|       |
 4894|   719k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|   719k|    do {                                                            \
  |  | 3985|   719k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   719k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 719k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   719k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|   719k|    return SCN_MOVE(result);
  ------------------
  |  | 1083|   719k|    static_cast<    \
  |  | 1084|   719k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|   719k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5174|  3.72k|    {
 5175|  3.72k|        auto it = read_source_impl(range, {specs});
 5176|  3.72k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.58k, False: 132]
  |  |  ------------------
  ------------------
 5177|  3.58k|            return unexpected(it.error());
 5178|  3.58k|        }
 5179|       |
 5180|    132|        return read_string_impl(range, *it, value);
 5181|  3.72k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4884|    132|{
 4885|    132|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    132|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    132|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 0, False: 132]
  ------------------
 4889|      0|        return detail::unexpected_scan_error(
 4890|      0|            scan_error::invalid_scanned_value,
 4891|      0|            "Invalid encoding in scanned string");
 4892|      0|    }
 4893|       |
 4894|    132|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    132|    do {                                                            \
  |  | 3985|    132|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 132]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    132|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    132|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    132|    static_cast<    \
  |  | 1084|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    132|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5396|   294k|    {
 5397|   294k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   294k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|   294k|        return read_impl(range, specs, value);
 5399|   294k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5416|   294k|    {
 5417|   294k|        SCN_CLANG_PUSH
 5418|   294k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|   294k|        switch (m_type) {
 5421|   290k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 290k, False: 3.72k]
  ------------------
 5422|   290k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 294k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 294k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  3.72k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 3.72k, False: 290k]
  ------------------
 5432|  3.72k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  3.72k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 294k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 294k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 294k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|   294k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|   294k|        }
 5453|       |
 5454|   294k|        SCN_CLANG_POP
 5455|   294k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4950|   726k|    {
 4951|   726k|        return read_string_impl(range, read_until_classic_space(range), value);
 4952|   726k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4884|   726k|{
 4885|   726k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|   726k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|   726k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 6.63k, False: 719k]
  ------------------
 4889|  6.63k|        return detail::unexpected_scan_error(
 4890|  6.63k|            scan_error::invalid_scanned_value,
 4891|  6.63k|            "Invalid encoding in scanned string");
 4892|  6.63k|    }
 4893|       |
 4894|   719k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|   719k|    do {                                                            \
  |  | 3985|   719k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   719k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 719k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   719k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|   719k|    return SCN_MOVE(result);
  ------------------
  |  | 1083|   719k|    static_cast<    \
  |  | 1084|   719k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|   719k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3190|   719k|{
 3191|   719k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3192|   719k|        dest.assign(source.view());
 3193|       |    }
 3194|       |    else {
 3195|       |        return transcode_impl(source.view(), dest);
 3196|       |    }
 3197|       |
 3198|   719k|    return {};
 3199|   719k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5174|  3.72k|    {
 5175|  3.72k|        auto it = read_source_impl(range, {specs});
 5176|  3.72k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.58k, False: 132]
  |  |  ------------------
  ------------------
 5177|  3.58k|            return unexpected(it.error());
 5178|  3.58k|        }
 5179|       |
 5180|    132|        return read_string_impl(range, *it, value);
 5181|  3.72k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4884|    132|{
 4885|    132|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4886|       |
 4887|    132|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4888|    132|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4888:9): [True: 0, False: 132]
  ------------------
 4889|      0|        return detail::unexpected_scan_error(
 4890|      0|            scan_error::invalid_scanned_value,
 4891|      0|            "Invalid encoding in scanned string");
 4892|      0|    }
 4893|       |
 4894|    132|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3984|    132|    do {                                                            \
  |  | 3985|    132|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|    132|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 132]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|    132|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 4895|    132|    return SCN_MOVE(result);
  ------------------
  |  | 1083|    132|    static_cast<    \
  |  | 1084|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4896|    132|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5935|   735k|{
 5936|       |    if constexpr (std::is_same_v<T, bool>) {
 5937|       |        return reader_impl_for_bool<CharT>{};
 5938|       |    }
 5939|       |    else if constexpr (std::is_same_v<T, char>) {
 5940|       |        return reader_impl_for_char<CharT>{};
 5941|       |    }
 5942|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5943|       |        return reader_impl_for_wchar<CharT>{};
 5944|       |    }
 5945|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5946|       |        return reader_impl_for_code_point<CharT>{};
 5947|       |    }
 5948|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5949|   735k|                       std::is_same_v<T, std::wstring_view>) {
 5950|   735k|        return reader_impl_for_string<CharT>{};
 5951|       |    }
 5952|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5953|       |                       std::is_same_v<T, std::wstring>) {
 5954|       |        return reader_impl_for_string<CharT>{};
 5955|       |    }
 5956|       |#if !SCN_DISABLE_REGEX
 5957|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5958|       |                       std::is_same_v<T, wregex_matches>) {
 5959|       |        return reader_impl_for_regex_matches<CharT>{};
 5960|       |    }
 5961|       |#endif
 5962|       |    else if constexpr (std::is_same_v<T, void*>) {
 5963|       |        return reader_impl_for_voidptr<CharT>{};
 5964|       |    }
 5965|       |    else if constexpr (std::is_floating_point_v<T>) {
 5966|       |        return reader_impl_for_float<CharT>{};
 5967|       |    }
 5968|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5969|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5970|       |                       std::is_same_v<T, long> ||
 5971|       |                       std::is_same_v<T, long long> ||
 5972|       |                       std::is_same_v<T, unsigned char> ||
 5973|       |                       std::is_same_v<T, unsigned short> ||
 5974|       |                       std::is_same_v<T, unsigned int> ||
 5975|       |                       std::is_same_v<T, unsigned long> ||
 5976|       |                       std::is_same_v<T, unsigned long long>
 5977|       |#if SCN_HAS_INT128
 5978|       |                       || std::is_same_v<T, int128> ||
 5979|       |                       std::is_same_v<T, uint128>
 5980|       |#endif
 5981|       |    ) {
 5982|       |        return reader_impl_for_int<CharT>{};
 5983|       |    }
 5984|       |    else {
 5985|       |        return reader_impl_for_monostate<CharT>{};
 5986|       |    }
 5987|   735k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5396|   294k|    {
 5397|   294k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   294k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5398|   294k|        return read_impl(range, specs, value);
 5399|   294k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5416|   294k|    {
 5417|   294k|        SCN_CLANG_PUSH
 5418|   294k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5419|       |
 5420|   294k|        switch (m_type) {
 5421|   290k|            case reader_type::word:
  ------------------
  |  Branch (5421:13): [True: 290k, False: 3.72k]
  ------------------
 5422|   290k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5423|       |
 5424|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5424:13): [True: 0, False: 294k]
  ------------------
 5425|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5426|      0|                                                                   value);
 5427|       |
 5428|      0|            case reader_type::character:
  ------------------
  |  Branch (5428:13): [True: 0, False: 294k]
  ------------------
 5429|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5430|       |
 5431|  3.72k|            case reader_type::character_set:
  ------------------
  |  Branch (5431:13): [True: 3.72k, False: 290k]
  ------------------
 5432|  3.72k|                return character_set_reader_impl<SourceCharT>{}.read(
 5433|  3.72k|                    range, specs, value);
 5434|       |
 5435|      0|#if !SCN_DISABLE_REGEX
 5436|      0|            case reader_type::regex:
  ------------------
  |  Branch (5436:13): [True: 0, False: 294k]
  ------------------
 5437|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5438|      0|                    range, specs.charset_string<SourceCharT>(),
 5439|      0|                    specs.regexp_flags, value);
 5440|       |
 5441|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5441:13): [True: 0, False: 294k]
  ------------------
 5442|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5443|      0|                    range,
 5444|      0|                    get_unescaped_regex_pattern(
 5445|      0|                        specs.charset_string<SourceCharT>()),
 5446|      0|                    specs.regexp_flags, value);
 5447|      0|#endif
 5448|       |
 5449|      0|            default:
  ------------------
  |  Branch (5449:13): [True: 0, False: 294k]
  ------------------
 5450|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1079|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5451|   294k|                SCN_UNREACHABLE;
  ------------------
  |  | 1042|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5452|   294k|        }
 5453|       |
 5454|   294k|        SCN_CLANG_POP
 5455|   294k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4957|   726k|    {
 4958|   726k|        return read_string_view_impl(range, read_until_classic_space(range),
 4959|   726k|                                     value);
 4960|   726k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4903|   726k|{
 4904|   726k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|   726k|    auto src = [&]() {
 4907|   726k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|   726k|            return make_contiguous_buffer(
 4909|   726k|                ranges::subrange{range.begin().base(), result.base()});
 4910|   726k|        }
 4911|   726k|        else {
 4912|   726k|            return make_contiguous_buffer(
 4913|   726k|                ranges::subrange{range.begin(), result});
 4914|   726k|        }
 4915|   726k|    }();
 4916|   726k|    using src_type = decltype(src);
 4917|       |
 4918|   726k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|   726k|    else {
 4931|   726k|        const auto view = src.view();
 4932|   726k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|   726k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 6.63k, False: 719k]
  ------------------
 4935|  6.63k|            return detail::unexpected_scan_error(
 4936|  6.63k|                scan_error::invalid_scanned_value,
 4937|  6.63k|                "Invalid encoding in scanned string_view");
 4938|  6.63k|        }
 4939|       |
 4940|   719k|        return SCN_MOVE(result);
  ------------------
  |  | 1083|   719k|    static_cast<    \
  |  | 1084|   719k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|   726k|    }
 4942|   726k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4906|   726k|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|   726k|        else {
 4912|   726k|            return make_contiguous_buffer(
 4913|   726k|                ranges::subrange{range.begin(), result});
 4914|   726k|        }
 4915|   726k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5188|  3.72k|    {
 5189|  3.72k|        auto it = read_source_impl(range, {specs});
 5190|  3.72k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1014|  3.72k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 3.58k, False: 132]
  |  |  ------------------
  ------------------
 5191|  3.58k|            return unexpected(it.error());
 5192|  3.58k|        }
 5193|       |
 5194|    132|        return read_string_view_impl(range, *it, value);
 5195|  3.72k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4903|    132|{
 4904|    132|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4905|       |
 4906|    132|    auto src = [&]() {
 4907|    132|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|    132|            return make_contiguous_buffer(
 4909|    132|                ranges::subrange{range.begin().base(), result.base()});
 4910|    132|        }
 4911|    132|        else {
 4912|    132|            return make_contiguous_buffer(
 4913|    132|                ranges::subrange{range.begin(), result});
 4914|    132|        }
 4915|    132|    }();
 4916|    132|    using src_type = decltype(src);
 4917|       |
 4918|    132|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4918:9): [Folded - Ignored]
  ------------------
 4919|      0|        return detail::unexpected_scan_error(
 4920|      0|            scan_error::invalid_format_string,
 4921|      0|            "Cannot read a string_view from this source range (not "
 4922|      0|            "contiguous)");
 4923|      0|    }
 4924|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4925|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4926|       |                                             "Cannot read a string_view from "
 4927|       |                                             "this source range (would require "
 4928|       |                                             "transcoding)");
 4929|       |    }
 4930|    132|    else {
 4931|    132|        const auto view = src.view();
 4932|    132|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4933|       |
 4934|    132|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4934:13): [True: 0, False: 132]
  ------------------
 4935|      0|            return detail::unexpected_scan_error(
 4936|      0|                scan_error::invalid_scanned_value,
 4937|      0|                "Invalid encoding in scanned string_view");
 4938|      0|        }
 4939|       |
 4940|    132|        return SCN_MOVE(result);
  ------------------
  |  | 1083|    132|    static_cast<    \
  |  | 1084|    132|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4941|    132|    }
 4942|    132|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4906|    132|    auto src = [&]() {
 4907|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4908|       |            return make_contiguous_buffer(
 4909|       |                ranges::subrange{range.begin().base(), result.base()});
 4910|       |        }
 4911|    132|        else {
 4912|    132|            return make_contiguous_buffer(
 4913|    132|                ranges::subrange{range.begin(), result});
 4914|    132|        }
 4915|    132|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3128|   727k|{
 3129|   727k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3129:9): [True: 727k, False: 0]
  ------------------
 3130|   727k|        auto it = read_while_classic_space(range);
 3131|   727k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3132|   727k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   727k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.19k, False: 726k]
  |  |  ------------------
  ------------------
 3133|  1.19k|            return unexpected(e);
 3134|  1.19k|        }
 3135|       |
 3136|   726k|        return it;
 3137|   727k|    }
 3138|       |
 3139|      0|    return read_while_classic_space(range);
 3140|   727k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2276|   727k|{
 2277|       |    if constexpr (ranges::contiguous_range<Range> &&
 2278|       |                  ranges::sized_range<Range> &&
 2279|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2280|       |        auto buf = make_contiguous_buffer(range);
 2281|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2282|       |        return ranges::next(range.begin(),
 2283|       |                            ranges::distance(buf.view().begin(), it));
 2284|       |    }
 2285|   727k|    else {
 2286|   727k|        auto it = range.begin();
 2287|       |
 2288|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2289|       |            auto seg = get_contiguous_beginning(range);
 2290|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2291|       |                seg_it != seg.end()) {
 2292|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2293|       |            }
 2294|       |            ranges::advance(it, static_cast<std::ptrdiff_t>(seg.size()));
 2295|       |        }
 2296|       |
 2297|   727k|        SCN_UNUSED(it);
  ------------------
  |  | 1064|   727k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 2298|   727k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|   727k|            return detail::is_cp_space(cp);
 2300|   727k|        });
 2301|   727k|    }
 2302|   727k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  752|   727k|        : m_fptr([](storage fn,
  753|   727k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|   727k|              cvref<T> obj = *get<T>(fn);
  755|   727k|              if constexpr (std::is_void_v<R>) {
  756|   727k|                  obj(static_cast<decltype(args)>(args)...);
  757|   727k|              }
  758|   727k|              else {
  759|   727k|                  return obj(static_cast<decltype(args)>(args)...);
  760|   727k|              }
  761|   727k|          }),
  762|   727k|          m_storage(std::addressof(f))
  763|   727k|    {
  764|   727k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  753|  1.71M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  754|  1.71M|              cvref<T> obj = *get<T>(fn);
  755|       |              if constexpr (std::is_void_v<R>) {
  756|       |                  obj(static_cast<decltype(args)>(args)...);
  757|       |              }
  758|  1.71M|              else {
  759|  1.71M|                  return obj(static_cast<decltype(args)>(args)...);
  760|  1.71M|              }
  761|  1.71M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  689|  1.71M|    {
  690|       |        if constexpr (std::is_const_v<T>) {
  691|       |            return static_cast<T*>(s.m_cp);
  692|       |        }
  693|  1.71M|        else if constexpr (std::is_object_v<T>) {
  694|  1.71M|            return static_cast<T*>(s.m_p);
  695|       |        }
  696|       |        else {
  697|       |            return reinterpret_cast<T*>(s.m_fp);
  698|       |        }
  699|  1.71M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2298|  1.71M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2299|  1.71M|            return detail::is_cp_space(cp);
 2300|  1.71M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  666|   727k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  667|   727k|        {
  668|   727k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|   116k|{
 5922|   116k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.19k, False: 115k]
  |  |  ------------------
  ------------------
 5923|  1.19k|        return unexpected(e);
 5924|  1.19k|    }
 5925|       |
 5926|   115k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 115k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   115k|    return skip_classic_whitespace(range);
 5931|   115k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|  58.3k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  58.3k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  58.3k|            auto rd = make_reader<T, char_type>();
 6015|  58.3k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  58.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6001|  58.3k|    {
 6002|  58.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  58.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  58.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  58.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.02k, False: 57.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.02k|    }                                                  \
  |  |  |  | 3995|  58.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  57.3k|                        .transform_error(make_eof_scan_error));
 6004|  57.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  58.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5385|  57.3k|    {
 5386|  57.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  57.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|  57.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|  57.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|  58.3k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|  58.3k|                          basic_contiguous_scan_context<char_type>>) {
 6014|  58.3k|            auto rd = make_reader<T, char_type>();
 6015|  58.3k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  58.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6001|  58.3k|    {
 6002|  58.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  58.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  58.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  58.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.02k, False: 57.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.02k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.02k|    }                                                  \
  |  |  |  | 3995|  58.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  57.3k|                        .transform_error(make_eof_scan_error));
 6004|  57.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  58.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5385|  57.3k|    {
 5386|  57.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  57.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|  57.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|  57.3k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|  73.7k|{
 5922|  73.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 774, False: 72.9k]
  |  |  ------------------
  ------------------
 5923|    774|        return unexpected(e);
 5924|    774|    }
 5925|       |
 5926|  72.9k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 72.9k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|  72.9k|    return skip_classic_whitespace(range);
 5931|  72.9k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6009|  73.7k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|  73.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|  73.7k|            auto rd = make_reader<T, char_type>();
 6019|  73.7k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 73.7k, False: 0]
  ------------------
 6020|  73.7k|                return impl(rd, range, value);
 6021|  73.7k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|  73.7k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6001|  73.7k|    {
 6002|  73.7k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|  73.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  73.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  73.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  73.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.28k, False: 72.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.28k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.28k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.28k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.28k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.28k|    }                                                  \
  |  |  |  | 3995|  73.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  73.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|  72.4k|                        .transform_error(make_eof_scan_error));
 6004|  72.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|  73.7k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5385|  72.4k|    {
 5386|  72.4k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|  72.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|  72.4k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|  72.4k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3047|  93.5k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|  93.5k|    static_cast<    \
  |  | 1084|  93.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|  93.5k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|  93.5k|          m_current(m_range.begin())
 3050|  93.5k|    {
 3051|  93.5k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3059|   162k|    {
 3060|   162k|        return m_range.end();
 3061|   162k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3074|  75.6k|    {
 3075|  75.6k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|  75.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  75.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|  75.6k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|  75.6k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 75.6k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|  75.6k|        }
 3081|  75.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|  75.6k|    static_cast<    \
  |  | 1084|  75.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|  75.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3064|  86.4k|    {
 3065|  86.4k|        return ranges::subrange{begin(), end()};
 3066|  86.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|  82.8k|    {
 6174|  82.8k|        const bool need_skipped_width =
 6175|  82.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 82.8k]
  |  Branch (6175:33): [True: 0, False: 82.8k]
  ------------------
 6176|  82.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|  82.8k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 82.8k]
  ------------------
 6180|  82.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 82.8k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|  82.8k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 82.8k, False: 0]
  |  Branch (6184:56): [True: 77.8k, False: 4.98k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|  77.8k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 77.8k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|   154k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|  77.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  77.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  77.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  77.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.36k, False: 76.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.36k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.36k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.36k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.36k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.36k|    }                                                  \
  |  |  |  | 3995|  77.8k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|   154k|                            make_eof_scan_error));
 6195|       |
 6196|   154k|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 76.4k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|  76.4k|            return result_type{it, 0};
 6204|   154k|        }
 6205|       |
 6206|  4.98k|        return result_type{rng.begin(), 0};
 6207|  82.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|  74.7k|    {
 6216|  74.7k|        const bool need_skipped_width =
 6217|  74.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 74.7k]
  |  Branch (6217:33): [True: 0, False: 74.7k]
  ------------------
 6218|  74.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|  74.7k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 74.7k]
  ------------------
 6221|  74.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 74.7k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|  74.7k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 74.7k, False: 0]
  ------------------
 6230|  74.7k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 1.32k, False: 73.4k]
  ------------------
 6231|  74.7k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 1.32k]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|  1.32k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 1.32k]
  ------------------
 6233|  1.32k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|  74.7k|        return result_type{rng.begin(), 0};
 6255|  74.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  43.2k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  43.2k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  43.2k|            auto rd = make_reader<T, char_type>();
 6331|  43.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  43.2k|    do {                                                            \
  |  | 3985|  43.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.79k, False: 41.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.79k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.79k|        }                                                           \
  |  | 3988|  43.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  41.4k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  43.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6260|  41.4k|    {
 6261|  41.4k|        const bool need_skipped_width =
 6262|  41.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 41.4k]
  |  Branch (6262:33): [True: 0, False: 41.4k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  41.4k|        auto it = rng.begin();
 6266|  41.4k|        std::ptrdiff_t prefix_width = 0;
 6267|  41.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 41.4k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  41.4k|        else {
 6275|  41.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  41.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  41.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  41.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 682, False: 40.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    682|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    682|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    682|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    682|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    682|    }                                                  \
  |  |  |  | 3995|  41.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  40.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  40.7k|        }
 6278|  40.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  40.7k|        std::ptrdiff_t value_width = 0;
 6282|  40.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 40.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  40.7k|        else {
 6298|  40.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  40.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  40.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.90k, False: 37.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  2.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  2.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  2.90k|    }                                                  \
  |  | 3995|  40.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  37.8k|                                             specs, value, loc));
 6300|       |
 6301|  37.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 37.8k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  37.8k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  37.8k|        std::ptrdiff_t postfix_width = 0;
 6310|  37.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 37.3k, False: 434]
  ------------------
 6311|  37.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  37.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  37.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  37.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 37.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  37.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  37.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  37.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  37.3k|                                 value_width));
 6315|  37.3k|            std::tie(it, postfix_width) = postfix_result;
 6316|  37.3k|        }
 6317|       |
 6318|  37.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  37.8k|    do {                                                            \
  |  | 3985|  37.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 37.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  37.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  37.8k|            specs, prefix_width, value_width, postfix_width));
 6320|  37.8k|        return it;
 6321|  37.8k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|  43.2k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|  43.2k|                          basic_contiguous_scan_context<char_type>>) {
 6330|  43.2k|            auto rd = make_reader<T, char_type>();
 6331|  43.2k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|  43.2k|    do {                                                            \
  |  | 3985|  43.2k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  43.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 1.79k, False: 41.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  1.79k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  1.79k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  1.79k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  1.79k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  1.79k|        }                                                           \
  |  | 3988|  43.2k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|  41.4k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|  43.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6260|  41.4k|    {
 6261|  41.4k|        const bool need_skipped_width =
 6262|  41.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 41.4k]
  |  Branch (6262:33): [True: 0, False: 41.4k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|  41.4k|        auto it = rng.begin();
 6266|  41.4k|        std::ptrdiff_t prefix_width = 0;
 6267|  41.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 41.4k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|  41.4k|        else {
 6275|  41.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|  41.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  41.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  41.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  41.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 682, False: 40.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    682|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    682|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    682|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    682|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    682|    }                                                  \
  |  |  |  | 3995|  41.4k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  41.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|  40.7k|            std::tie(it, prefix_width) = prefix_result;
 6277|  40.7k|        }
 6278|  40.7k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|  40.7k|        std::ptrdiff_t value_width = 0;
 6282|  40.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 40.7k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|  40.7k|        else {
 6298|  40.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|  40.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|  40.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|  40.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 2.90k, False: 37.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  2.90k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  2.90k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  2.90k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  2.90k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  2.90k|    }                                                  \
  |  | 3995|  40.7k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|  37.8k|                                             specs, value, loc));
 6300|       |
 6301|  37.8k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 37.8k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|  37.8k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|  37.8k|        std::ptrdiff_t postfix_width = 0;
 6310|  37.8k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 37.3k, False: 434]
  ------------------
 6311|  37.3k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|  37.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|  37.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|  37.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|  37.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 37.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|  37.3k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|  37.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|  37.3k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|  37.3k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|  37.3k|                                 value_width));
 6315|  37.3k|            std::tie(it, postfix_width) = postfix_result;
 6316|  37.3k|        }
 6317|       |
 6318|  37.8k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|  37.8k|    do {                                                            \
  |  | 3985|  37.8k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|  37.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 37.8k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|  37.8k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|  37.8k|            specs, prefix_width, value_width, postfix_width));
 6320|  37.8k|        return it;
 6321|  37.8k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5921|   874k|{
 5922|   874k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   874k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 2.28k, False: 871k]
  |  |  ------------------
  ------------------
 5923|  2.28k|        return unexpected(e);
 5924|  2.28k|    }
 5925|       |
 5926|   871k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 871k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   871k|    return skip_classic_whitespace(range);
 5931|   871k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|   437k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|   437k|                          basic_contiguous_scan_context<char_type>>) {
 6014|   437k|            auto rd = make_reader<T, char_type>();
 6015|   437k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|   437k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6001|   437k|    {
 6002|   437k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|   437k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   437k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   437k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.40k, False: 435k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.40k|    }                                                  \
  |  |  |  | 3995|   437k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|   435k|                        .transform_error(make_eof_scan_error));
 6004|   435k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|   437k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5385|   435k|    {
 5386|   435k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   435k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|   435k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|   435k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6009|   437k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|   437k|                          basic_contiguous_scan_context<char_type>>) {
 6014|   437k|            auto rd = make_reader<T, char_type>();
 6015|   437k|            return impl(rd, range, value);
 6016|       |        }
 6017|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6018|       |            auto rd = make_reader<T, char_type>();
 6019|       |            if (!is_segment_contiguous(range)) {
 6020|       |                return impl(rd, range, value);
 6021|       |            }
 6022|       |            auto crange = get_as_contiguous(range);
 6023|       |            SCN_TRY(it, impl(rd, crange, value));
 6024|       |            return ranges::next(range.begin(),
 6025|       |                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|   437k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6001|   437k|    {
 6002|   437k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|   437k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   437k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   437k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.40k, False: 435k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.40k|    }                                                  \
  |  |  |  | 3995|   437k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|   435k|                        .transform_error(make_eof_scan_error));
 6004|   435k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|   437k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5385|   435k|    {
 5386|   435k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   435k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|   435k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|   435k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3047|   611k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1083|   611k|    static_cast<    \
  |  | 1084|   611k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3048|   611k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3049|   611k|          m_current(m_range.begin())
 3050|   611k|    {
 3051|   611k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3059|  1.17M|    {
 3060|  1.17M|        return m_range.end();
 3061|  1.17M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3074|   575k|    {
 3075|   575k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1079|   575k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   575k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3076|   575k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3077|   575k|            if (it == nullptr) {
  ------------------
  |  Branch (3077:17): [True: 0, False: 575k]
  ------------------
 3078|      0|                it = end();
 3079|      0|            }
 3080|   575k|        }
 3081|   575k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1083|   575k|    static_cast<    \
  |  | 1084|   575k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3082|   575k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3064|   597k|    {
 3065|   597k|        return ranges::subrange{begin(), end()};
 3066|   597k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6173|   590k|    {
 6174|   590k|        const bool need_skipped_width =
 6175|   590k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6175:13): [True: 0, False: 590k]
  |  Branch (6175:33): [True: 0, False: 590k]
  ------------------
 6176|   590k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6177|       |
 6178|       |        // Read prefix
 6179|   590k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6179:13): [True: 0, False: 590k]
  ------------------
 6180|   590k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6180:13): [True: 0, False: 590k]
  ------------------
 6181|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6182|      0|                             need_skipped_width);
 6183|      0|        }
 6184|   590k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6184:13): [True: 590k, False: 0]
  |  Branch (6184:56): [True: 582k, False: 7.44k]
  ------------------
 6185|       |            // Default alignment:
 6186|       |            // Skip preceding whitespace, if required by the reader
 6187|   582k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6187:17): [True: 0, False: 582k]
  ------------------
 6188|      0|                auto max_width_view = take_width(rng, specs.precision);
 6189|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6190|      0|                                  .transform_error(make_eof_scan_error));
 6191|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6192|      0|            }
 6193|  1.16M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3996|   582k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   582k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   582k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   582k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.86k, False: 580k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.86k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.86k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.86k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.86k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.86k|    }                                                  \
  |  |  |  | 3995|   582k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   582k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6194|  1.16M|                            make_eof_scan_error));
 6195|       |
 6196|  1.16M|            if (need_skipped_width) {
  ------------------
  |  Branch (6196:17): [True: 0, False: 580k]
  ------------------
 6197|      0|                return result_type{
 6198|      0|                    it,
 6199|      0|                    calculate_text_width(make_contiguous_buffer(
 6200|      0|                                             ranges::subrange{rng.begin(), it})
 6201|      0|                                             .view())};
 6202|      0|            }
 6203|   580k|            return result_type{it, 0};
 6204|  1.16M|        }
 6205|       |
 6206|  7.44k|        return result_type{rng.begin(), 0};
 6207|   590k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6215|   574k|    {
 6216|   574k|        const bool need_skipped_width =
 6217|   574k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6217:13): [True: 0, False: 574k]
  |  Branch (6217:33): [True: 0, False: 574k]
  ------------------
 6218|   574k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6219|       |
 6220|   574k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6220:13): [True: 0, False: 574k]
  ------------------
 6221|   574k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6221:13): [True: 0, False: 574k]
  ------------------
 6222|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6222:17): [True: 0, False: 0]
  ------------------
 6223|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6223:17): [True: 0, False: 0]
  ------------------
 6224|      0|                return result_type{rng.begin(), 0};
 6225|      0|            }
 6226|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6227|      0|                             specs.fill, need_skipped_width);
 6228|      0|        }
 6229|   574k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6229:13): [True: 574k, False: 0]
  ------------------
 6230|   574k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6230:13): [True: 212, False: 574k]
  ------------------
 6231|   574k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6231:15): [True: 0, False: 212]
  |  Branch (6231:35): [True: 0, False: 0]
  ------------------
 6232|    212|             (specs.precision != 0 &&
  ------------------
  |  Branch (6232:15): [True: 0, False: 212]
  ------------------
 6233|    212|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6233:15): [True: 0, False: 0]
  ------------------
 6234|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6234:17): [True: 0, False: 0]
  ------------------
 6235|      0|                const auto initial_width =
 6236|      0|                    specs.precision - prefix_width - value_width;
 6237|      0|                auto max_width_view = take_width(rng, initial_width);
 6238|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6239|      0|                                  .transform_error(make_eof_scan_error));
 6240|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6241|      0|            }
 6242|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6243|      0|                            make_eof_scan_error));
 6244|       |
 6245|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6245:17): [True: 0, False: 0]
  ------------------
 6246|      0|                return result_type{
 6247|      0|                    it,
 6248|      0|                    calculate_text_width(make_contiguous_buffer(
 6249|      0|                                             ranges::subrange{rng.begin(), it})
 6250|      0|                                             .view())};
 6251|      0|            }
 6252|      0|            return result_type{it, 0};
 6253|      0|        }
 6254|   574k|        return result_type{rng.begin(), 0};
 6255|   574k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|   298k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   298k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   298k|            auto rd = make_reader<T, char_type>();
 6331|   298k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   298k|    do {                                                            \
  |  | 3985|   298k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.58k, False: 295k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.58k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.58k|        }                                                           \
  |  | 3988|   298k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   295k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   298k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6260|   295k|    {
 6261|   295k|        const bool need_skipped_width =
 6262|   295k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 295k]
  |  Branch (6262:33): [True: 0, False: 295k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   295k|        auto it = rng.begin();
 6266|   295k|        std::ptrdiff_t prefix_width = 0;
 6267|   295k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 295k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   295k|        else {
 6275|   295k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 934, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    934|    }                                                  \
  |  |  |  | 3995|   295k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   294k|            std::tie(it, prefix_width) = prefix_result;
 6277|   294k|        }
 6278|   294k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   294k|        std::ptrdiff_t value_width = 0;
 6282|   294k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 294k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   294k|        else {
 6298|   294k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.24k, False: 287k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.24k|    }                                                  \
  |  | 3995|   294k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   287k|                                             specs, value, loc));
 6300|       |
 6301|   287k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 287k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   287k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   287k|        std::ptrdiff_t postfix_width = 0;
 6310|   287k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 287k, False: 786]
  ------------------
 6311|   287k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   287k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   287k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   287k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   287k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   287k|                                 value_width));
 6315|   287k|            std::tie(it, postfix_width) = postfix_result;
 6316|   287k|        }
 6317|       |
 6318|   287k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   287k|    do {                                                            \
  |  | 3985|   287k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 287k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   287k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   287k|            specs, prefix_width, value_width, postfix_width));
 6320|   287k|        return it;
 6321|   287k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6325|   298k|    {
 6326|       |        if constexpr (!detail::is_type_disabled<T> &&
 6327|       |                      std::is_same_v<
 6328|       |                          context_type,
 6329|   298k|                          basic_contiguous_scan_context<char_type>>) {
 6330|   298k|            auto rd = make_reader<T, char_type>();
 6331|   298k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3984|   298k|    do {                                                            \
  |  | 3985|   298k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 3.58k, False: 295k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|  3.58k|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|  3.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  3.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  3.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|  3.58k|        }                                                           \
  |  | 3988|   298k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6332|   295k|            return impl(rd, range, value);
 6333|       |        }
 6334|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6335|       |            auto rd = make_reader<T, char_type>();
 6336|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6337|       |
 6338|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6339|       |                specs.width != 0) {
 6340|       |                return impl(rd, range, value);
 6341|       |            }
 6342|       |
 6343|       |            auto crange = get_as_contiguous(range);
 6344|       |            SCN_TRY(it, impl(rd, crange, value));
 6345|       |            return ranges::next(range.begin(),
 6346|       |                                ranges::distance(crange.begin(), it));
 6347|       |        }
 6348|       |        else {
 6349|       |            SCN_EXPECT(false);
 6350|       |            SCN_UNREACHABLE;
 6351|       |        }
 6352|   298k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6260|   295k|    {
 6261|   295k|        const bool need_skipped_width =
 6262|   295k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6262:13): [True: 0, False: 295k]
  |  Branch (6262:33): [True: 0, False: 295k]
  ------------------
 6263|       |
 6264|       |        // Read prefix
 6265|   295k|        auto it = rng.begin();
 6266|   295k|        std::ptrdiff_t prefix_width = 0;
 6267|   295k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6267:13): [True: 0, False: 295k]
  ------------------
 6268|      0|            auto max_width_view = take_width(rng, specs.precision);
 6269|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6270|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6271|      0|            it = prefix_result.first.base();
 6272|      0|            prefix_width = prefix_result.second;
 6273|      0|        }
 6274|   295k|        else {
 6275|   295k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3996|   295k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   295k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   295k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   295k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 934, False: 294k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|    934|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|    934|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|    934|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|    934|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|    934|    }                                                  \
  |  |  |  | 3995|   295k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   295k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6276|   294k|            std::tie(it, prefix_width) = prefix_result;
 6277|   294k|        }
 6278|   294k|        auto prefix_end_it = it;
 6279|       |
 6280|       |        // Read value
 6281|   294k|        std::ptrdiff_t value_width = 0;
 6282|   294k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 294k]
  ------------------
 6283|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6283:17): [True: 0, False: 0]
  ------------------
 6284|      0|                return detail::unexpected_scan_error(
 6285|      0|                    scan_error::invalid_fill,
 6286|      0|                    "Too many fill characters before value, "
 6287|      0|                    "precision exceeded before reading value");
 6288|      0|            }
 6289|       |
 6290|      0|            const auto initial_width = specs.precision - prefix_width;
 6291|      0|            auto max_width_view =
 6292|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6293|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6294|      0|            it = w_it.base();
 6295|      0|            value_width = initial_width - w_it.count();
 6296|      0|        }
 6297|   294k|        else {
 6298|   294k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3991|   294k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3992|   294k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1014|   294k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 6.24k, False: 287k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3993|  6.24k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3981|  6.24k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|  6.24k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|  6.24k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3994|  6.24k|    }                                                  \
  |  | 3995|   294k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  ------------------
  |  |  |  | 1085|   294k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6299|   287k|                                             specs, value, loc));
 6300|       |
 6301|   287k|            if (need_skipped_width) {
  ------------------
  |  Branch (6301:17): [True: 0, False: 287k]
  ------------------
 6302|      0|                value_width = static_cast<std::ptrdiff_t>(calculate_text_width(
 6303|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6304|      0|                        .view()));
 6305|      0|            }
 6306|   287k|        }
 6307|       |
 6308|       |        // Read postfix
 6309|   287k|        std::ptrdiff_t postfix_width = 0;
 6310|   287k|        if (it != rng.end()) {
  ------------------
  |  Branch (6310:13): [True: 287k, False: 786]
  ------------------
 6311|   287k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3996|   287k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   287k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   287k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 287k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|   287k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   287k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6312|   287k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6313|   287k|                                 rd.skip_ws_before_read(), prefix_width,
 6314|   287k|                                 value_width));
 6315|   287k|            std::tie(it, postfix_width) = postfix_result;
 6316|   287k|        }
 6317|       |
 6318|   287k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3984|   287k|    do {                                                            \
  |  | 3985|   287k|        if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1014|   287k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1014:25): [True: 0, False: 287k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3986|      0|            return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3987|      0|        }                                                           \
  |  | 3988|   287k|    } while (false)
  |  |  ------------------
  |  |  |  Branch (3988:14): [Folded - Ignored]
  |  |  ------------------
  ------------------
 6319|   287k|            specs, prefix_width, value_width, postfix_width));
 6320|   287k|        return it;
 6321|   287k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5921|   437k|{
 5922|   437k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1014|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1014:25): [True: 1.14k, False: 435k]
  |  |  ------------------
  ------------------
 5923|  1.14k|        return unexpected(e);
 5924|  1.14k|    }
 5925|       |
 5926|   435k|    if (!is_required) {
  ------------------
  |  Branch (5926:9): [True: 0, False: 435k]
  ------------------
 5927|      0|        return range.begin();
 5928|      0|    }
 5929|       |
 5930|   435k|    return skip_classic_whitespace(range);
 5931|   435k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6009|   437k|    {
 6010|       |        if constexpr (!detail::is_type_disabled<T> &&
 6011|       |                      std::is_same_v<
 6012|       |                          context_type,
 6013|       |                          basic_contiguous_scan_context<char_type>>) {
 6014|       |            auto rd = make_reader<T, char_type>();
 6015|       |            return impl(rd, range, value);
 6016|       |        }
 6017|   437k|        else if constexpr (!detail::is_type_disabled<T>) {
 6018|   437k|            auto rd = make_reader<T, char_type>();
 6019|   437k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (6019:17): [True: 437k, False: 0]
  ------------------
 6020|   437k|                return impl(rd, range, value);
 6021|   437k|            }
 6022|      0|            auto crange = get_as_contiguous(range);
 6023|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3996|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|      0|    }                                                  \
  |  |  |  | 3995|      0|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6024|      0|            return ranges::next(range.begin(),
 6025|      0|                                ranges::distance(crange.begin(), it));
 6026|       |        }
 6027|       |        else {
 6028|       |            SCN_EXPECT(false);
 6029|       |            SCN_UNREACHABLE;
 6030|       |        }
 6031|   437k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6001|   437k|    {
 6002|   437k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3996|   437k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3991|   437k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3992|   437k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1014|   437k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1014:25): [True: 1.40k, False: 435k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3993|  1.40k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3981|  1.40k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3980|  1.40k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3979|  1.40k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3994|  1.40k|    }                                                  \
  |  |  |  | 3995|   437k|    init = *SCN_FWD(SCN_TRY_TMP)
  |  |  |  |  ------------------
  |  |  |  |  |  | 1085|   437k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6003|   435k|                        .transform_error(make_eof_scan_error));
 6004|   435k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 6005|   437k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5385|   435k|    {
 5386|   435k|        SCN_UNUSED(loc);
  ------------------
  |  | 1064|   435k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5387|   435k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5388|   435k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    897|{
   53|    897|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1079|    897|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|    897|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    897|    string_buffer.resize(size);
   57|    897|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    897|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    897|    const auto wsv_reinterpret_size =
   62|    897|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 161, False: 736]
  ------------------
   63|    897|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    897|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    897|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    897|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    897|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    897|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    897|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    897|{
  123|    897|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    897|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    897|    buf.resize(sizeof...(Args));
  126|    897|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    897|    return buf;
  128|    897|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    897|{
  109|    897|    if constexpr (std::is_same_v<CharT, char>) {
  110|    897|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    897|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    897|{
  186|    897|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    897|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    897|                                   format_strings);
  189|    897|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|    897|{
  134|       |    // Regular scan
  135|  5.38k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.38k, False: 897]
  ------------------
  136|  5.38k|        auto it = scn::ranges::begin(source);
  137|  42.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  42.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  42.8k|            auto result = scn::scan<T>(
  140|  42.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  42.8k|                scn::runtime_format(f));
  142|  42.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.38k, False: 37.4k]
  ------------------
  143|  5.38k|                break;
  144|  5.38k|            }
  145|  37.4k|            it = result->begin();
  146|  37.4k|        }
  147|  5.38k|    }
  148|       |
  149|       |    // scan localized
  150|  5.38k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.38k, False: 897]
  ------------------
  151|  5.38k|        auto it = scn::ranges::begin(source);
  152|  42.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  42.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  42.8k|            auto result = scn::scan<T>(
  155|  42.8k|                global_locale,
  156|  42.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  42.8k|                scn::runtime_format(f));
  158|  42.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.38k, False: 37.4k]
  ------------------
  159|  5.38k|                break;
  160|  5.38k|            }
  161|  37.4k|            it = result->begin();
  162|  37.4k|        }
  163|  5.38k|    }
  164|       |
  165|       |    // scan_value
  166|    897|    {
  167|    897|        auto it = scn::ranges::begin(source);
  168|  19.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.4k|            auto result = scn::scan_value<T>(
  171|  19.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 897, False: 18.5k]
  ------------------
  173|    897|                break;
  174|    897|            }
  175|  18.5k|            it = result->begin();
  176|  18.5k|        }
  177|    897|    }
  178|    897|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    897|{
  134|       |    // Regular scan
  135|  5.38k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.38k, False: 897]
  ------------------
  136|  5.38k|        auto it = scn::ranges::begin(source);
  137|  42.8k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  42.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  42.8k|            auto result = scn::scan<T>(
  140|  42.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  42.8k|                scn::runtime_format(f));
  142|  42.8k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.38k, False: 37.4k]
  ------------------
  143|  5.38k|                break;
  144|  5.38k|            }
  145|  37.4k|            it = result->begin();
  146|  37.4k|        }
  147|  5.38k|    }
  148|       |
  149|       |    // scan localized
  150|  5.38k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.38k, False: 897]
  ------------------
  151|  5.38k|        auto it = scn::ranges::begin(source);
  152|  42.8k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  42.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  42.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  42.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  42.8k|            auto result = scn::scan<T>(
  155|  42.8k|                global_locale,
  156|  42.8k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  42.8k|                scn::runtime_format(f));
  158|  42.8k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.38k, False: 37.4k]
  ------------------
  159|  5.38k|                break;
  160|  5.38k|            }
  161|  37.4k|            it = result->begin();
  162|  37.4k|        }
  163|  5.38k|    }
  164|       |
  165|       |    // scan_value
  166|    897|    {
  167|    897|        auto it = scn::ranges::begin(source);
  168|  19.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  19.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  19.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.4k|            auto result = scn::scan_value<T>(
  171|  19.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 897, False: 18.5k]
  ------------------
  173|    897|                break;
  174|    897|            }
  175|  18.5k|            it = result->begin();
  176|  18.5k|        }
  177|    897|    }
  178|    897|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|    897|{
  134|       |    // Regular scan
  135|  5.38k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.38k, False: 897]
  ------------------
  136|  5.38k|        auto it = scn::ranges::begin(source);
  137|  53.0k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  53.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  53.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  53.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  53.0k|            auto result = scn::scan<T>(
  140|  53.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  53.0k|                scn::runtime_format(f));
  142|  53.0k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.38k, False: 47.6k]
  ------------------
  143|  5.38k|                break;
  144|  5.38k|            }
  145|  47.6k|            it = result->begin();
  146|  47.6k|        }
  147|  5.38k|    }
  148|       |
  149|       |    // scan localized
  150|  5.38k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.38k, False: 897]
  ------------------
  151|  5.38k|        auto it = scn::ranges::begin(source);
  152|  53.0k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  53.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  53.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  53.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  53.0k|            auto result = scn::scan<T>(
  155|  53.0k|                global_locale,
  156|  53.0k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  53.0k|                scn::runtime_format(f));
  158|  53.0k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.38k, False: 47.6k]
  ------------------
  159|  5.38k|                break;
  160|  5.38k|            }
  161|  47.6k|            it = result->begin();
  162|  47.6k|        }
  163|  5.38k|    }
  164|       |
  165|       |    // scan_value
  166|    897|    {
  167|    897|        auto it = scn::ranges::begin(source);
  168|  24.5k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  24.5k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|  24.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|  24.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  24.5k|            auto result = scn::scan_value<T>(
  171|  24.5k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  24.5k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 897, False: 23.6k]
  ------------------
  173|    897|                break;
  174|    897|            }
  175|  23.6k|            it = result->begin();
  176|  23.6k|        }
  177|    897|    }
  178|    897|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    897|{
   91|    897|    using char_type = ranges::range_value_t<Source>;
   92|    897|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    897|    deque.clear();
   94|    897|    std::copy(ranges::begin(source), ranges::end(source),
   95|    897|              std::back_inserter(deque));
   96|    897|    return deque;
   97|    897|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    897|{
   80|    897|    if constexpr (std::is_same_v<CharT, char>) {
   81|    897|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    897|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    897|{
  123|    897|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    897|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    897|    buf.resize(sizeof...(Args));
  126|    897|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    897|    return buf;
  128|    897|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    897|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    897|    else {
  113|    897|        return wformat_string_view_buffer;
  114|    897|    }
  115|    897|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.79k|{
  186|  1.79k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.79k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.79k|                                   format_strings);
  189|  1.79k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.79k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.79k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   298k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   298k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   298k|            auto result = scn::scan<T>(
  140|   298k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   298k|                scn::runtime_format(f));
  142|   298k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 287k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   287k|            it = result->begin();
  146|   287k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.79k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   298k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   298k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   298k|            auto result = scn::scan<T>(
  155|   298k|                global_locale,
  156|   298k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   298k|                scn::runtime_format(f));
  158|   298k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 287k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   287k|            it = result->begin();
  162|   287k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.79k|    {
  167|  1.79k|        auto it = scn::ranges::begin(source);
  168|   145k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   145k|            auto result = scn::scan_value<T>(
  171|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   145k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.79k, False: 143k]
  ------------------
  173|  1.79k|                break;
  174|  1.79k|            }
  175|   143k|            it = result->begin();
  176|   143k|        }
  177|  1.79k|    }
  178|  1.79k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.79k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.79k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   298k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   298k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   298k|            auto result = scn::scan<T>(
  140|   298k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   298k|                scn::runtime_format(f));
  142|   298k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 287k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   287k|            it = result->begin();
  146|   287k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.79k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   298k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   298k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   298k|            auto result = scn::scan<T>(
  155|   298k|                global_locale,
  156|   298k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   298k|                scn::runtime_format(f));
  158|   298k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 287k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   287k|            it = result->begin();
  162|   287k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.79k|    {
  167|  1.79k|        auto it = scn::ranges::begin(source);
  168|   145k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   145k|            auto result = scn::scan_value<T>(
  171|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   145k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.79k, False: 143k]
  ------------------
  173|  1.79k|                break;
  174|  1.79k|            }
  175|   143k|            it = result->begin();
  176|   143k|        }
  177|  1.79k|    }
  178|  1.79k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.79k|{
  134|       |    // Regular scan
  135|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.7k, False: 1.79k]
  ------------------
  136|  10.7k|        auto it = scn::ranges::begin(source);
  137|   298k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   298k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   298k|            auto result = scn::scan<T>(
  140|   298k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   298k|                scn::runtime_format(f));
  142|   298k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.7k, False: 287k]
  ------------------
  143|  10.7k|                break;
  144|  10.7k|            }
  145|   287k|            it = result->begin();
  146|   287k|        }
  147|  10.7k|    }
  148|       |
  149|       |    // scan localized
  150|  10.7k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.7k, False: 1.79k]
  ------------------
  151|  10.7k|        auto it = scn::ranges::begin(source);
  152|   298k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   298k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   298k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   298k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   298k|            auto result = scn::scan<T>(
  155|   298k|                global_locale,
  156|   298k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   298k|                scn::runtime_format(f));
  158|   298k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.7k, False: 287k]
  ------------------
  159|  10.7k|                break;
  160|  10.7k|            }
  161|   287k|            it = result->begin();
  162|   287k|        }
  163|  10.7k|    }
  164|       |
  165|       |    // scan_value
  166|  1.79k|    {
  167|  1.79k|        auto it = scn::ranges::begin(source);
  168|   145k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   145k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1079|   145k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1076|   145k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   145k|            auto result = scn::scan_value<T>(
  171|   145k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   145k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.79k, False: 143k]
  ------------------
  173|  1.79k|                break;
  174|  1.79k|            }
  175|   143k|            it = result->begin();
  176|   143k|        }
  177|  1.79k|    }
  178|  1.79k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.79k|{
   91|  1.79k|    using char_type = ranges::range_value_t<Source>;
   92|  1.79k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.79k|    deque.clear();
   94|  1.79k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.79k|              std::back_inserter(deque));
   96|  1.79k|    return deque;
   97|  1.79k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.79k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.79k|    else {
   84|  1.79k|        return wnoncontiguous_buffer;
   85|  1.79k|    }
   86|  1.79k|}

LLVMFuzzerTestOneInput:
   57|    898|{
   58|    898|    scn::fuzz::run(data, size);
   59|    898|    return 0;
   60|    898|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    898|{
   36|    898|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 897]
  |  Branch (36:35): [True: 0, False: 897]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    897|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    897|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    897|                                             "{:64U}", "{:[A-Za-z]}");
   44|    897|    do_basic_run(sv, f);
   45|       |
   46|    897|    const auto& wf = get_format_strings<wchar_t>(
   47|    897|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    897|    do_basic_run(wsv_reinterpret, wf);
   49|    897|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 897, False: 0]
  ------------------
   50|    897|        do_basic_run(wsv_transcode, wf);
   51|    897|    }
   52|    897|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    897|{
   25|    897|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    897|                                                           format_strings);
   27|    897|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    897|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    897|            source, format_strings);
   30|    897|    }
   31|    897|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    897|{
   25|    897|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    897|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    897|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.79k|{
   25|  1.79k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.79k|                                                           format_strings);
   27|  1.79k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.79k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.79k|            source, format_strings);
   30|  1.79k|    }
   31|  1.79k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.79k|{
   25|  1.79k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.79k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.79k|}

