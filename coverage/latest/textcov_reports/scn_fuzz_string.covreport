_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3806|  6.27M|{
 3807|  6.27M|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  6.27M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  6.27M|    }
 3810|  6.27M|    else if constexpr (sizeof(U) == 2) {
 3811|  6.27M|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  6.27M|    }
 3813|  6.27M|    else {
 3814|       |        // utf-32
 3815|  6.27M|        static_assert(sizeof(U) == 4);
 3816|  6.27M|        SCN_UNUSED(ch);
 3817|  6.27M|        return 1;
 3818|  6.27M|    }
 3819|  6.27M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3770|  6.27M|{
 3771|  6.27M|    static_assert(sizeof(U8) == 1);
 3772|       |
 3773|  6.27M|    SCN_GCC_COMPAT_PUSH
 3774|  6.27M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3775|  6.27M|    constexpr char lengths[] =
 3776|  6.27M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3777|  6.27M|        "\1\1\1\1\1\1\1\1"
 3778|  6.27M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3779|       |                            // byte
 3780|  6.27M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3781|  6.27M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3782|  6.27M|        "\4";               // highest bits 11110 -> 4-byte cp
 3783|  6.27M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3784|  6.27M|    SCN_GCC_COMPAT_POP
 3785|  6.27M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  6.14M|{
 4013|  6.14M|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  6.14M|        return decode_utf8_code_point_exhaustive(input);
 4015|  6.14M|    }
 4016|  6.14M|    else if constexpr (sizeof(CharT) == 2) {
 4017|  6.14M|        return decode_utf16_code_point_exhaustive(input);
 4018|  6.14M|    }
 4019|  6.14M|    else {
 4020|  6.14M|        SCN_EXPECT(input.size() == 1);
 4021|  6.14M|        auto cp = static_cast<char32_t>(input.front());
 4022|  6.14M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4023|  6.14M|            return invalid_code_point;
 4024|  6.14M|        }
 4025|  6.14M|        return cp;
 4026|  6.14M|    }
 4027|  6.14M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3825|  6.14M|{
 3826|  6.14M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  6.14M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.14M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3827|       |
 3828|  6.14M|    const auto is_trailing_code_unit = [](char ch) {
 3829|  6.14M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|  6.14M|    };
 3831|       |
 3832|  6.14M|    if (input.size() == 1) {
  ------------------
  |  Branch (3832:9): [True: 5.56M, False: 582k]
  ------------------
 3833|  5.56M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3833:13): [True: 144, False: 5.56M]
  ------------------
 3834|    144|            SCN_UNLIKELY_ATTR
 3835|    144|            return invalid_code_point;
 3836|    144|        }
 3837|  5.56M|        return static_cast<char32_t>(input[0]);
 3838|  5.56M|    }
 3839|       |
 3840|   582k|    if (input.size() == 2) {
  ------------------
  |  Branch (3840:9): [True: 242k, False: 340k]
  ------------------
 3841|   242k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3841:13): [True: 102, False: 242k]
  ------------------
 3842|    102|            SCN_UNLIKELY_ATTR
 3843|    102|            return invalid_code_point;
 3844|    102|        }
 3845|   242k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3845:13): [True: 15.1k, False: 226k]
  ------------------
 3846|  15.1k|            SCN_UNLIKELY_ATTR
 3847|  15.1k|            return invalid_code_point;
 3848|  15.1k|        }
 3849|       |
 3850|   226k|        char32_t cp{};
 3851|   226k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3852|   226k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3853|   226k|        return cp;
 3854|   242k|    }
 3855|       |
 3856|   340k|    if (input.size() == 3) {
  ------------------
  |  Branch (3856:9): [True: 303k, False: 36.7k]
  ------------------
 3857|   303k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3857:13): [True: 20, False: 303k]
  ------------------
 3858|     20|            SCN_UNLIKELY_ATTR
 3859|     20|            return invalid_code_point;
 3860|     20|        }
 3861|   303k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3861:13): [True: 20.7k, False: 283k]
  ------------------
 3862|   303k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3862:13): [True: 1.52k, False: 281k]
  ------------------
 3863|  22.2k|            SCN_UNLIKELY_ATTR
 3864|  22.2k|            return invalid_code_point;
 3865|  22.2k|        }
 3866|       |
 3867|   281k|        char32_t cp{};
 3868|   281k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3869|   281k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3870|   281k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3871|   281k|        return cp;
 3872|   303k|    }
 3873|       |
 3874|  36.7k|    if (input.size() == 4) {
  ------------------
  |  Branch (3874:9): [True: 36.7k, False: 0]
  ------------------
 3875|  36.7k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3875:13): [True: 0, False: 36.7k]
  ------------------
 3876|      0|            SCN_UNLIKELY_ATTR
 3877|      0|            return invalid_code_point;
 3878|      0|        }
 3879|  36.7k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3879:13): [True: 7.95k, False: 28.7k]
  ------------------
 3880|  7.95k|            SCN_UNLIKELY_ATTR
 3881|  7.95k|            return invalid_code_point;
 3882|  7.95k|        }
 3883|  28.7k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3883:13): [True: 2.99k, False: 25.8k]
  ------------------
 3884|  28.7k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3884:13): [True: 289, False: 25.5k]
  ------------------
 3885|  28.7k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3885:13): [True: 242, False: 25.2k]
  ------------------
 3886|  3.52k|            SCN_UNLIKELY_ATTR
 3887|  3.52k|            return invalid_code_point;
 3888|  3.52k|        }
 3889|       |
 3890|  25.2k|        char32_t cp{};
 3891|  25.2k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3892|  25.2k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3893|  25.2k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3894|  25.2k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3895|  25.2k|        return cp;
 3896|  28.7k|    }
 3897|       |
 3898|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3899|       |    // gcc 7 thinks we'll get here, even when we won't
 3900|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3901|      0|#endif
 3902|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3903|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3828|   909k|    const auto is_trailing_code_unit = [](char ch) {
 3829|   909k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3830|   909k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|  5.50M|{
 3699|  5.50M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|  5.50M|                                          decltype(first), decltype(last)> &&
 3701|  5.50M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|  5.50M|        return {first, last};
 3703|  5.50M|    }
 3704|  5.50M|    else {
 3705|  5.50M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|  5.50M|                                       to_address(first), to_address(last)))};
 3707|  5.50M|    }
 3708|  5.50M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  16.9M|{
  326|  16.9M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  16.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  16.9M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  17.2M|{
  304|  17.2M|    return p;
  305|  17.2M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3729|  2.65M|{
 3730|  2.65M|    if constexpr (std::is_constructible_v<
  ------------------
  |  Branch (3730:19): [Folded - Ignored]
  |  Branch (3730:19): [Folded - Ignored]
  ------------------
 3731|  2.65M|                      typename std::basic_string_view<CharT>::iterator,
 3732|  2.65M|                      decltype(it)> &&
 3733|  2.65M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3733:19): [Folded - Ignored]
  ------------------
 3734|  2.65M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.65M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3735|  2.65M|        return it;
 3736|  2.65M|    }
 3737|  2.65M|    else {
 3738|  2.65M|        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3739|  2.65M|    }
 3740|  2.65M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  23.2k|    {
 2724|  23.2k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  23.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  23.2k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  23.2k|    {
 2705|  23.2k|        return decay_copy(t.begin());
 2706|  23.2k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  3.04M|{
 1949|  3.04M|    return SCN_FWD(t);
  ------------------
  |  |  930|  3.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  3.04M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   700k|    {
 2781|   700k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   700k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   700k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   700k|    {
 2763|   700k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   700k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   700k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8866|  70.7k|{
 8867|  70.7k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  70.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  70.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  70.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  70.7k|    static_cast<    \
  |  |  929|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  70.7k|    static_cast<    \
  |  |  929|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  70.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5395|   286k|{
 5396|   286k|    detail::check_scan_arg_types<Args...>();
 5397|   286k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   286k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5134|   353k|{
 5135|   353k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   353k|                  "Scan argument types must be default constructible");
 5137|   353k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   353k|                  "Scan argument types must be Destructible");
 5139|   353k|    static_assert(
 5140|   353k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   353k|        "Scan argument types must not be references");
 5142|   353k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5348|   286k|    {
 5349|   286k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   286k|    {
 5360|   286k|        return {detail::make_arg<
 5361|   286k|            kind, Context,
 5362|   286k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   286k|                                 typename Context::char_type>::value>(args)...};
 5364|   286k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5169|   286k|{
 5170|   286k|    return make_value<Context>(value).ref_value;
 5171|   286k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5119|   353k|{
 5120|   353k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   353k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   353k|                                  needs_context_tag>) {
 5124|   353k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   353k|    }
 5126|   353k|    else {
 5127|   353k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   353k|            value, context_tag<Context>{}));
 5129|   353k|    }
 5130|   353k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4958|   353k|    {                                                                        \
 4959|   353k|        return val;                                                          \
 4960|   353k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5088|   353k|{
 5089|   353k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   353k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   353k|    constexpr bool scannable_char =
 5093|   353k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   353k|    static_assert(scannable_char,
 5095|   353k|                  "Cannot scan an argument of an unsupported character "
 5096|   353k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   353k|    constexpr bool scannable_const =
 5099|   353k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   353k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   353k|    constexpr bool scannable_disabled =
 5103|   353k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   353k|    static_assert(scannable_disabled,
 5105|   353k|                  "Cannot scan an argument that has been disabled by "
 5106|   353k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   353k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   353k|    static_assert(
 5110|   353k|        scannable,
 5111|   353k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   353k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   353k|    return arg_value{arg};
 5115|   353k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4901|   353k|    {
 4902|   353k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|   141k|{
 8654|   141k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|   141k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|   141k|{
 8591|   141k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|   141k|    auto result = vscan_impl(buffer, format, args);
 8594|   141k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 131k]
  |  |  ------------------
  ------------------
 8595|  10.3k|        return unexpected(result.error());
 8596|  10.3k|    }
 8597|   131k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|   141k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4719|   349k|{
 4720|   349k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   349k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   349k|                  "\n"
 4724|   349k|                  "Unsupported range type given as input to a scanning "
 4725|   349k|                  "function.\n"
 4726|   349k|                  "A range needs to have a character type (value type) "
 4727|   349k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   349k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   349k|                  "to be included.\n"
 4730|   349k|                  "See the scnlib documentation for more details.");
 4731|   349k|    static_assert(
 4732|   349k|        !std::is_same_v<T, custom_char_traits>,
 4733|   349k|        "\n"
 4734|   349k|        "Unsupported range type given as input to a scanning "
 4735|   349k|        "function.\n"
 4736|   349k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   349k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   349k|        "not supported.");
 4739|   349k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   349k|                  "\n"
 4741|   349k|                  "Unsupported range type given as input to a scanning "
 4742|   349k|                  "function.\n"
 4743|   349k|                  "file_marker_found cannot be used as an "
 4744|   349k|                  "source range type to scn::scan.\n"
 4745|   349k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   349k|                  "and do not provide an explicit source range, "
 4747|   349k|                  "or use scn::scan with a FILE* directly.");
 4748|   349k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   349k|                  "\n"
 4750|   349k|                  "Unsupported range type given as input to a scanning "
 4751|   349k|                  "function.\n"
 4752|   349k|                  "In order to be scannable, a range needs to satisfy "
 4753|   349k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   349k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   349k|                  "\n"
 4756|   349k|                  "Unsupported range type given as input to a scanning "
 4757|   349k|                  "function.\n"
 4758|   349k|                  "A range needs to model forward_range and have a valid "
 4759|   349k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   349k|                  "Examples of scannable ranges are std::string, "
 4761|   349k|                  "std::string_view, "
 4762|   349k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   349k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   349k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   349k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|   349k|{
 4659|   349k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|   349k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|   349k|    }
 4662|   349k|    else {
 4663|   349k|        return invalid_char_type{};
 4664|   349k|    }
 4665|   349k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   349k|    {
 2855|   349k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   349k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   349k|    {
 2836|   349k|        return t.data();
 2837|   349k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3230|   349k|    {
 3231|   349k|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 1.99k, False: 347k]
  ------------------
 3232|   349k|                   ? nullptr
 3233|   349k|                   : std::addressof(*ranges::begin(derived()));
 3234|   349k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   349k|    {
 3005|   349k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   349k|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   349k|    {
 2978|   349k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   349k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5emptyEv:
 3338|  1.34M|    {
 3339|  1.34M|        return m_iterator == m_sentinel;
 3340|  1.34M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   697k|    {
 3185|   697k|        return static_cast<const D&>(*this);
 3186|   697k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   675k|    {
 2724|   675k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   675k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   675k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   675k|    {
 2705|   675k|        return decay_copy(t.begin());
 2706|   675k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3329|  3.95M|    {
 3330|  3.95M|        return m_iterator;
 3331|  3.95M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   349k|    {
 2930|   349k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   349k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   349k|    {
 2896|   349k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   349k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  50.2M|{
 1949|  50.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  50.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  50.2M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_LPv0EEEmv:
 3345|  1.34M|    {
 3346|  1.34M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  1.34M|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|   100M|    {
 1598|   100M|        return has_value();
 1599|   100M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|   201M|    {
  485|   201M|        return m_has_value;
  486|   201M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   100k|    {
 1604|   100k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   100k|        return this->get_unexpected().error();
 1606|   100k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   100k|    {
  468|   100k|        return m_unexpected;
  469|   100k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|   758k|    {
  361|   758k|        return m_unexpected;
  362|   758k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  346|   386k|    {
  347|   386k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   386k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   386k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  22.3k|    {
 1476|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  22.3k|    {
  447|  22.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  355|   440k|    {
  356|   440k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   440k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   440k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   349k|    {
 1177|   349k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|   327k|{
 5923|   327k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   327k|                      ranges::iterator_t<SourceRange>>) {
 5925|   327k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   327k|    }
 5927|   327k|    else {
 5928|   327k|        auto it = ranges::begin(source);
 5929|   327k|        while (n > 0) {
 5930|   327k|            --n;
 5931|   327k|            ++it;
 5932|   327k|        }
 5933|   327k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   327k|    }
 5935|   327k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.31M|    {
 2724|  1.31M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.31M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.31M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.31M|    {
 2705|  1.31M|        return decay_copy(t.begin());
 2706|  1.31M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5909|   327k|{
 5910|   327k|    return ranges::end(source);
 5911|   327k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   327k|    {
 2781|   327k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   327k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   327k|    {
 2763|   327k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   327k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   327k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3333|  2.07M|    {
 3334|  2.07M|        return m_sentinel;
 3335|  2.07M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlLPv0EEERT_v:
 1652|   100M|    {
 1653|   100M|        return value();
 1654|   100M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlLPv0EEERT_v:
 1626|   100M|    {
 1627|   100M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   100M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   100M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   100M|        return this->get_value();
 1629|   100M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|   100M|    {
  451|   100M|        return m_value;
  452|   100M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   327k|    {
 1430|   327k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|   327k|    {
  437|   327k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7974|   141k|    {
 7975|   141k|        return m_str;
 7976|   141k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   286k|    {
 5426|   286k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5378|   286k|    {
 5379|   286k|        return m_argptrs;
 5380|   286k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5477|   427k|    {
 5478|   427k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|   141k|{
 8820|   141k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 131k]
  |  |  ------------------
  ------------------
 8821|  10.3k|        return unexpected(result.error());
 8822|  10.3k|    }
 8823|   131k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   131k|    static_cast<    \
  |  |  929|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   131k|    static_cast<    \
  |  |  929|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   141k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   349k|    {
 1598|   349k|        return has_value();
 1599|   349k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   699k|    {
  485|   699k|        return m_has_value;
  486|   699k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  22.3k|    {
 1604|  22.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  22.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  22.3k|        return this->get_unexpected().error();
 1606|  22.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  22.3k|    {
  468|  22.3k|        return m_unexpected;
  469|  22.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  11.1k|    {
 1476|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  11.1k|    {
  626|  11.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  11.1k|    {
  689|  11.1k|        scn::detail::construct_at(unexpected_ptr(),
  690|  11.1k|                                  std::forward<Args>(args)...);
  691|  11.1k|        m_has_value = false;
  692|  11.1k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  67.1k|{
  392|  67.1k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  67.1k|        T(std::forward<Args>(args)...);
  394|  67.1k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  22.3k|    {
  718|  22.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  22.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  22.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  22.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   174k|    {
 1177|   174k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|   262k|    {
 1653|   262k|        return value();
 1654|   262k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   327k|    {
 1627|   327k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   327k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   327k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   327k|        return this->get_value();
 1629|   327k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   327k|    {
  451|   327k|        return m_value;
  452|   327k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|   163k|    {
 5830|   163k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5680|   327k|    {
 5681|   327k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|   331k|    {
 5616|   331k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|   163k|    {
 1430|   163k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|   163k|    {
  616|   163k|        construct(std::forward<Args>(args)...);
  617|   163k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   163k|    {
  682|   163k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   163k|        m_has_value = true;
  684|   163k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   163k|{
  392|   163k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   163k|        T(std::forward<Args>(args)...);
  394|   163k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5821|   163k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   491k|    {
  706|   491k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   491k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   491k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5825|   327k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5373|   286k|    {
 5374|   286k|        return m_args;
 5375|   286k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5370|   286k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_LPv0EEET_S6_:
 3315|  2.29M|    {
 3316|  2.29M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7690|   427k|{
 7691|   427k|    return s;
 7692|   427k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7667|   427k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   141k|    {
 7971|   141k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   174k|    {
 1598|   174k|        return has_value();
 1599|   174k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   513k|    {
  675|   513k|        return m_has_value;
  676|   513k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   163k|    {
 1673|   163k|        return &value();
 1674|   163k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|   163k|    {
 1627|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   163k|        return this->get_value();
 1629|   163k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   163k|    {
  641|   163k|        return *value_ptr();
  642|   163k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5697|   327k|    {
 5698|   327k|        return ranges::begin(m_range);
 5699|   327k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   174k|    {
  631|   174k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 163k, False: 11.1k]
  ------------------
  632|   163k|            destroy_value();
  633|   163k|        }
  634|  11.1k|        else {
  635|  11.1k|            destroy_unexpected();
  636|  11.1k|        }
  637|   174k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   163k|    {
  696|   163k|        scn::detail::destroy_at(value_ptr());
  697|   163k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   163k|{
  398|   163k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   163k|        for (auto& elem : *p) {
  400|   163k|            scn::detail::destroy_at(&elem);
  401|   163k|        }
  402|   163k|    }
  403|   163k|    else {
  404|   163k|        p->~T();
  405|   163k|    }
  406|   163k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  11.1k|    {
  700|  11.1k|        scn::detail::destroy_at(unexpected_ptr());
  701|  11.1k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  67.1k|{
  398|  67.1k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  67.1k|        for (auto& elem : *p) {
  400|  67.1k|            scn::detail::destroy_at(&elem);
  401|  67.1k|        }
  402|  67.1k|    }
  403|  67.1k|    else {
  404|  67.1k|        p->~T();
  405|  67.1k|    }
  406|  67.1k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8933|  70.7k|{
 8934|  70.7k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  70.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  70.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  70.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  70.7k|    static_cast<    \
  |  |  929|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  70.7k|    static_cast<    \
  |  |  929|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  70.7k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|   141k|{
 8672|   141k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   141k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|   141k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|   141k|{
 8607|   141k|#if !SCN_DISABLE_LOCALE
 8608|   141k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|   141k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|   141k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|   141k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|   141k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 131k]
  |  |  ------------------
  ------------------
 8615|  10.3k|        return unexpected(result.error());
 8616|  10.3k|    }
 8617|   131k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|   141k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8972|  33.4k|{
 8973|  33.4k|    T value;
 8974|  33.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  33.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  33.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 861, False: 32.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    861|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    861|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    861|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    861|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    861|    }                                                  \
  |  |  |  | 3671|  33.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  32.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.5k|    static_cast<    \
  |  |  929|  32.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.5k|    static_cast<    \
  |  |  929|  32.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  33.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  67.6k|{
 5155|  67.6k|    check_scan_arg_types<T>();
 5156|       |
 5157|  67.6k|    basic_scan_arg<Context> arg;
 5158|  67.6k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  67.6k|    arg.m_value = make_value<Context>(value);
 5160|  67.6k|    return arg;
 5161|  67.6k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5240|   528k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4897|  75.3M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  66.8k|{
 8685|  66.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  66.8k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  66.8k|{
 8631|  66.8k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  66.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  66.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 65.1k]
  |  |  ------------------
  ------------------
 8635|  1.72k|        return unexpected(result.error());
 8636|  1.72k|    }
 8637|  65.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  65.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  66.8k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  65.1k|    {
 1663|  65.1k|        return std::move(value());
 1664|  65.1k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8866|  70.7k|{
 8867|  70.7k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  70.7k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  70.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  70.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  70.7k|    static_cast<    \
  |  |  929|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  70.7k|    static_cast<    \
  |  |  929|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  70.7k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5395|   141k|{
 5396|   141k|    detail::check_scan_arg_types<Args...>();
 5397|   141k|    return detail::scan_arg_store<Context, Args...>{};
 5398|   141k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5134|   174k|{
 5135|   174k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|   174k|                  "Scan argument types must be default constructible");
 5137|   174k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|   174k|                  "Scan argument types must be Destructible");
 5139|   174k|    static_assert(
 5140|   174k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|   174k|        "Scan argument types must not be references");
 5142|   174k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5348|   141k|    {
 5349|   141k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|   141k|    {
 5360|   141k|        return {detail::make_arg<
 5361|   141k|            kind, Context,
 5362|   141k|            mapped_type_constant<remove_cvref_t<A>,
 5363|   141k|                                 typename Context::char_type>::value>(args)...};
 5364|   141k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5169|   141k|{
 5170|   141k|    return make_value<Context>(value).ref_value;
 5171|   141k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5119|   174k|{
 5120|   174k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|   174k|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|   174k|                                  needs_context_tag>) {
 5124|   174k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|   174k|    }
 5126|   174k|    else {
 5127|   174k|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|   174k|            value, context_tag<Context>{}));
 5129|   174k|    }
 5130|   174k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4958|   174k|    {                                                                        \
 4959|   174k|        return val;                                                          \
 4960|   174k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5088|   174k|{
 5089|   174k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|   174k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|   174k|    constexpr bool scannable_char =
 5093|   174k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|   174k|    static_assert(scannable_char,
 5095|   174k|                  "Cannot scan an argument of an unsupported character "
 5096|   174k|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|   174k|    constexpr bool scannable_const =
 5099|   174k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|   174k|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|   174k|    constexpr bool scannable_disabled =
 5103|   174k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|   174k|    static_assert(scannable_disabled,
 5105|   174k|                  "Cannot scan an argument that has been disabled by "
 5106|   174k|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|   174k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|   174k|    static_assert(
 5110|   174k|        scannable,
 5111|   174k|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|   174k|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|   174k|    return arg_value{arg};
 5115|   174k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4901|   174k|    {
 4902|   174k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7974|   141k|    {
 7975|   141k|        return m_str;
 7976|   141k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|   141k|    {
 5426|   141k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5378|   141k|    {
 5379|   141k|        return m_argptrs;
 5380|   141k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|   141k|{
 8820|   141k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   141k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 131k]
  |  |  ------------------
  ------------------
 8821|  10.3k|        return unexpected(result.error());
 8822|  10.3k|    }
 8823|   131k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   131k|    static_cast<    \
  |  |  929|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   131k|    static_cast<    \
  |  |  929|   131k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   141k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  11.1k|    {
 1476|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  11.1k|    {
  447|  11.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   174k|    {
 1177|   174k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|   163k|    {
 5830|   163k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|   163k|    {
 5616|   163k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|   163k|    {
 1430|   163k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|   163k|    {
  437|   163k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5373|   141k|    {
 5374|   141k|        return m_args;
 5375|   141k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   141k|    {
 7971|   141k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   174k|    {
 1598|   174k|        return has_value();
 1599|   174k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   338k|    {
  485|   338k|        return m_has_value;
  486|   338k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   163k|    {
 1673|   163k|        return &value();
 1674|   163k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|   163k|    {
 1627|   163k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   163k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   163k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   163k|        return this->get_value();
 1629|   163k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   163k|    {
  451|   163k|        return m_value;
  452|   163k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8933|  70.7k|{
 8934|  70.7k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  70.7k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  70.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  70.7k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  70.7k|    static_cast<    \
  |  |  929|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  70.7k|    static_cast<    \
  |  |  929|  70.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  70.7k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8972|  33.4k|{
 8973|  33.4k|    T value;
 8974|  33.4k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  33.4k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  33.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  33.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  33.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  33.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 861, False: 32.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    861|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    861|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    861|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    861|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    861|    }                                                  \
  |  |  |  | 3671|  33.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  32.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  32.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.5k|    static_cast<    \
  |  |  929|  32.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  32.5k|    static_cast<    \
  |  |  929|  32.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  33.4k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  33.4k|{
 5155|  33.4k|    check_scan_arg_types<T>();
 5156|       |
 5157|  33.4k|    basic_scan_arg<Context> arg;
 5158|  33.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  33.4k|    arg.m_value = make_value<Context>(value);
 5160|  33.4k|    return arg;
 5161|  33.4k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  11.1k|    {
 2724|  11.1k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  11.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  11.1k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  11.1k|    {
 2705|  11.1k|        return decay_copy(t.begin());
 2706|  11.1k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  7.68M|{
 1949|  7.68M|    return SCN_FWD(t);
  ------------------
  |  |  930|  7.68M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  7.68M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   357k|    {
 2781|   357k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   357k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   357k|    {
 2763|   357k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   357k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   357k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8866|  72.2k|{
 8867|  72.2k|    auto args = make_scan_args<scan_context, Args...>();
 8868|  72.2k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8869|  72.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  72.2k|    static_cast<    \
  |  |  929|  72.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  72.2k|    static_cast<    \
  |  |  929|  72.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8870|  72.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8653|  72.2k|{
 8654|  72.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8655|  72.2k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  72.2k|{
 8591|  72.2k|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  72.2k|    auto result = vscan_impl(buffer, format, args);
 8594|  72.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.16k, False: 67.0k]
  |  |  ------------------
  ------------------
 8595|  5.16k|        return unexpected(result.error());
 8596|  5.16k|    }
 8597|  67.0k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  67.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  72.2k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4719|   178k|{
 4720|   178k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|   178k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|   178k|                  "\n"
 4724|   178k|                  "Unsupported range type given as input to a scanning "
 4725|   178k|                  "function.\n"
 4726|   178k|                  "A range needs to have a character type (value type) "
 4727|   178k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|   178k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|   178k|                  "to be included.\n"
 4730|   178k|                  "See the scnlib documentation for more details.");
 4731|   178k|    static_assert(
 4732|   178k|        !std::is_same_v<T, custom_char_traits>,
 4733|   178k|        "\n"
 4734|   178k|        "Unsupported range type given as input to a scanning "
 4735|   178k|        "function.\n"
 4736|   178k|        "String types (std::basic_string, and std::basic_string_view) "
 4737|   178k|        "need to use std::char_traits. Strings with custom Traits are "
 4738|   178k|        "not supported.");
 4739|   178k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|   178k|                  "\n"
 4741|   178k|                  "Unsupported range type given as input to a scanning "
 4742|   178k|                  "function.\n"
 4743|   178k|                  "file_marker_found cannot be used as an "
 4744|   178k|                  "source range type to scn::scan.\n"
 4745|   178k|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|   178k|                  "and do not provide an explicit source range, "
 4747|   178k|                  "or use scn::scan with a FILE* directly.");
 4748|   178k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|   178k|                  "\n"
 4750|   178k|                  "Unsupported range type given as input to a scanning "
 4751|   178k|                  "function.\n"
 4752|   178k|                  "In order to be scannable, a range needs to satisfy "
 4753|   178k|                  "`forward_range`. `input_range` is not sufficient.");
 4754|   178k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|   178k|                  "\n"
 4756|   178k|                  "Unsupported range type given as input to a scanning "
 4757|   178k|                  "function.\n"
 4758|   178k|                  "A range needs to model forward_range and have a valid "
 4759|   178k|                  "character type (char or wchar_t) to be scannable.\n"
 4760|   178k|                  "Examples of scannable ranges are std::string, "
 4761|   178k|                  "std::string_view, "
 4762|   178k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|   178k|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|   178k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|   178k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|   178k|{
 4690|   178k|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|   178k|        return file_marker_found{};
 4692|   178k|    }
 4693|   178k|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|   178k|        if constexpr (ranges::range<Range>) {
 4695|   178k|            return insufficient_range{};
 4696|   178k|        }
 4697|   178k|        else {
 4698|   178k|            return invalid_input_range{};
 4699|   178k|        }
 4700|   178k|    }
 4701|   178k|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|   178k|        return invalid_char_type{};
 4703|   178k|    }
 4704|   178k|    else {
 4705|   178k|        return make_forward_scan_buffer(r);
 4706|   178k|    }
 4707|   178k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4523|   178k|{
 4524|   178k|    return basic_scan_forward_buffer_impl(range);
 4525|   178k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|   178k|    {
 4411|   178k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4381|   178k|    {
 4382|   178k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4150|   178k|    {
 4151|   178k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4065|   178k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   346k|    {
 2724|   346k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   346k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   346k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   346k|    {
 2705|   346k|        return decay_copy(t.begin());
 2706|   346k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3329|   513k|    {
 3330|   513k|        return m_iterator;
 3331|   513k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4414|  2.22M|    {
 4415|  2.22M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 16.9k, False: 2.20M]
  ------------------
 4416|  16.9k|            return false;
 4417|  16.9k|        }
 4418|  2.20M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|  2.20M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|  2.20M|        }
 4421|  2.20M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 2.03M, False: 172k]
  ------------------
 4422|  2.03M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|  2.03M|                                          this->m_current_view.begin(),
 4424|  2.03M|                                          this->m_current_view.end());
 4425|  2.03M|        }
 4426|  2.20M|        m_latest = *m_cursor;
 4427|  2.20M|        ++m_cursor;
 4428|  2.20M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|  2.20M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|  2.20M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  2.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|  2.20M|        }
 4432|  2.20M|        return true;
 4433|  2.20M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  6.63M|    {
 2781|  6.63M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  6.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  6.63M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  6.63M|    {
 2763|  6.63M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  6.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  6.63M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3333|  6.79M|    {
 3334|  6.79M|        return m_sentinel;
 3335|  6.79M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4070|   178k|    {
 4071|   178k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   178k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|   178k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  11.1k|    {
 1476|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  11.1k|    {
  447|  11.1k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   178k|    {
 1177|   178k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|   167k|{
 5923|   167k|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|   167k|                      ranges::iterator_t<SourceRange>>) {
 5925|   167k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|   167k|    }
 5927|   167k|    else {
 5928|   167k|        auto it = ranges::begin(source);
 5929|   167k|        while (n > 0) {
 5930|   167k|            --n;
 5931|   167k|            ++it;
 5932|   167k|        }
 5933|   167k|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|   167k|    }
 5935|   167k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   167k|    {
 2724|   167k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   167k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   167k|    {
 2705|   167k|        return decay_copy(t.begin());
 2706|   167k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5909|   167k|{
 5910|   167k|    return ranges::end(source);
 5911|   167k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   167k|    {
 2781|   167k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   167k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   167k|    {
 2763|   167k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   167k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|   167k|    {
 1430|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|   167k|    {
  437|   167k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7974|   144k|    {
 7975|   144k|        return m_str;
 7976|   144k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|   144k|{
 8820|   144k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   144k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 134k]
  |  |  ------------------
  ------------------
 8821|  10.3k|        return unexpected(result.error());
 8822|  10.3k|    }
 8823|   134k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   134k|    static_cast<    \
  |  |  929|   134k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|   144k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   178k|    {
 1598|   178k|        return has_value();
 1599|   178k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   357k|    {
  485|   357k|        return m_has_value;
  486|   357k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  11.1k|    {
 1604|  11.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  11.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  11.1k|        return this->get_unexpected().error();
 1606|  11.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  11.1k|    {
  468|  11.1k|        return m_unexpected;
  469|  11.1k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  11.1k|    {
 1476|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  11.1k|    {
  626|  11.1k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  11.1k|    {
  689|  11.1k|        scn::detail::construct_at(unexpected_ptr(),
  690|  11.1k|                                  std::forward<Args>(args)...);
  691|  11.1k|        m_has_value = false;
  692|  11.1k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  22.3k|    {
  718|  22.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  22.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  22.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  22.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   178k|    {
 1177|   178k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|   134k|    {
 1653|   134k|        return value();
 1654|   134k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|   167k|    {
 1627|   167k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   167k|        return this->get_value();
 1629|   167k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   167k|    {
  451|   167k|        return m_value;
  452|   167k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|   167k|    {
 5830|   167k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5680|   167k|    {
 5681|   167k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|   167k|    {
 1430|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|   167k|    {
  616|   167k|        construct(std::forward<Args>(args)...);
  617|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   167k|    {
  682|   167k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   167k|        m_has_value = true;
  684|   167k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   167k|{
  392|   167k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   167k|        T(std::forward<Args>(args)...);
  394|   167k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5821|   167k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   502k|    {
  706|   502k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   502k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   502k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5825|   335k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_LPv0EEET_SC_:
 3315|   346k|    {
 3316|   346k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7970|   144k|    {
 7971|   144k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   178k|    {
 1598|   178k|        return has_value();
 1599|   178k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   525k|    {
  675|   525k|        return m_has_value;
  676|   525k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   167k|    {
 1673|   167k|        return &value();
 1674|   167k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|   167k|    {
 1627|   167k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   167k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   167k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   167k|        return this->get_value();
 1629|   167k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   167k|    {
  641|   167k|        return *value_ptr();
  642|   167k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5697|   167k|    {
 5698|   167k|        return ranges::begin(m_range);
 5699|   167k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   178k|    {
  631|   178k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 167k, False: 11.1k]
  ------------------
  632|   167k|            destroy_value();
  633|   167k|        }
  634|  11.1k|        else {
  635|  11.1k|            destroy_unexpected();
  636|  11.1k|        }
  637|   178k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   167k|    {
  696|   167k|        scn::detail::destroy_at(value_ptr());
  697|   167k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   167k|{
  398|   167k|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|   167k|        for (auto& elem : *p) {
  400|   167k|            scn::detail::destroy_at(&elem);
  401|   167k|        }
  402|   167k|    }
  403|   167k|    else {
  404|   167k|        p->~T();
  405|   167k|    }
  406|   167k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  11.1k|    {
  700|  11.1k|        scn::detail::destroy_at(unexpected_ptr());
  701|  11.1k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8933|  72.2k|{
 8934|  72.2k|    auto args = make_scan_args<scan_context, Args...>();
 8935|  72.2k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8936|  72.2k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  72.2k|    static_cast<    \
  |  |  929|  72.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  72.2k|    static_cast<    \
  |  |  929|  72.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8937|  72.2k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8671|  72.2k|{
 8672|  72.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  72.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8673|  72.2k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  72.2k|{
 8607|  72.2k|#if !SCN_DISABLE_LOCALE
 8608|  72.2k|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  72.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  72.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  72.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  72.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  72.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.16k, False: 67.0k]
  |  |  ------------------
  ------------------
 8615|  5.16k|        return unexpected(result.error());
 8616|  5.16k|    }
 8617|  67.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  67.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  72.2k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8972|  34.2k|{
 8973|  34.2k|    T value;
 8974|  34.2k|    auto arg = detail::make_arg<scan_context>(value);
 8975|  34.2k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  34.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  34.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  34.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 861, False: 33.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|    861|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|    861|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|    861|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|    861|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|    861|    }                                                  \
  |  |  |  | 3671|  34.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8976|  33.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  33.3k|    static_cast<    \
  |  |  929|  33.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8977|  34.2k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8684|  34.2k|{
 8685|  34.2k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8686|  34.2k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  34.2k|{
 8631|  34.2k|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  34.2k|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  34.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  34.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 861, False: 33.3k]
  |  |  ------------------
  ------------------
 8635|    861|        return unexpected(result.error());
 8636|    861|    }
 8637|  33.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  33.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  34.2k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  33.3k|    {
 1663|  33.3k|        return std::move(value());
 1664|  33.3k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  46.4k|    {
 2724|  46.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  46.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  46.4k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  46.4k|    {
 2705|  46.4k|        return decay_copy(t.begin());
 2706|  46.4k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|   349M|{
 1949|   349M|    return SCN_FWD(t);
  ------------------
  |  |  930|   349M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|   349M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  99.8M|    {
 2781|  99.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  99.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  99.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  99.8M|    {
 2763|  99.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  99.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  99.8M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5395|  39.9M|{
 5396|  39.9M|    detail::check_scan_arg_types<Args...>();
 5397|  39.9M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  39.9M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5134|  49.9M|{
 5135|  49.9M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  49.9M|                  "Scan argument types must be default constructible");
 5137|  49.9M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  49.9M|                  "Scan argument types must be Destructible");
 5139|  49.9M|    static_assert(
 5140|  49.9M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  49.9M|        "Scan argument types must not be references");
 5142|  49.9M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5348|  39.9M|    {
 5349|  39.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  39.9M|    {
 5360|  39.9M|        return {detail::make_arg<
 5361|  39.9M|            kind, Context,
 5362|  39.9M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  39.9M|                                 typename Context::char_type>::value>(args)...};
 5364|  39.9M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5169|  39.9M|{
 5170|  39.9M|    return make_value<Context>(value).ref_value;
 5171|  39.9M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5119|  49.9M|{
 5120|  49.9M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  49.9M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  49.9M|                                  needs_context_tag>) {
 5124|  49.9M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  49.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  49.9M|    }
 5126|  49.9M|    else {
 5127|  49.9M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  49.9M|            value, context_tag<Context>{}));
 5129|  49.9M|    }
 5130|  49.9M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4958|  49.9M|    {                                                                        \
 4959|  49.9M|        return val;                                                          \
 4960|  49.9M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5088|  49.9M|{
 5089|  49.9M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  49.9M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  49.9M|    constexpr bool scannable_char =
 5093|  49.9M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  49.9M|    static_assert(scannable_char,
 5095|  49.9M|                  "Cannot scan an argument of an unsupported character "
 5096|  49.9M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  49.9M|    constexpr bool scannable_const =
 5099|  49.9M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  49.9M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  49.9M|    constexpr bool scannable_disabled =
 5103|  49.9M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  49.9M|    static_assert(scannable_disabled,
 5105|  49.9M|                  "Cannot scan an argument that has been disabled by "
 5106|  49.9M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  49.9M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  49.9M|    static_assert(
 5110|  49.9M|        scannable,
 5111|  49.9M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  49.9M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  49.9M|    return arg_value{arg};
 5115|  49.9M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4901|  49.9M|    {
 4902|  49.9M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8590|  19.9M|{
 8591|  19.9M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  19.9M|    auto result = vscan_impl(buffer, format, args);
 8594|  19.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 19.9M]
  |  |  ------------------
  ------------------
 8595|  20.6k|        return unexpected(result.error());
 8596|  20.6k|    }
 8597|  19.9M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  19.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  19.9M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4719|  49.9M|{
 4720|  49.9M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  49.9M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  49.9M|                  "\n"
 4724|  49.9M|                  "Unsupported range type given as input to a scanning "
 4725|  49.9M|                  "function.\n"
 4726|  49.9M|                  "A range needs to have a character type (value type) "
 4727|  49.9M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  49.9M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  49.9M|                  "to be included.\n"
 4730|  49.9M|                  "See the scnlib documentation for more details.");
 4731|  49.9M|    static_assert(
 4732|  49.9M|        !std::is_same_v<T, custom_char_traits>,
 4733|  49.9M|        "\n"
 4734|  49.9M|        "Unsupported range type given as input to a scanning "
 4735|  49.9M|        "function.\n"
 4736|  49.9M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  49.9M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  49.9M|        "not supported.");
 4739|  49.9M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  49.9M|                  "\n"
 4741|  49.9M|                  "Unsupported range type given as input to a scanning "
 4742|  49.9M|                  "function.\n"
 4743|  49.9M|                  "file_marker_found cannot be used as an "
 4744|  49.9M|                  "source range type to scn::scan.\n"
 4745|  49.9M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  49.9M|                  "and do not provide an explicit source range, "
 4747|  49.9M|                  "or use scn::scan with a FILE* directly.");
 4748|  49.9M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  49.9M|                  "\n"
 4750|  49.9M|                  "Unsupported range type given as input to a scanning "
 4751|  49.9M|                  "function.\n"
 4752|  49.9M|                  "In order to be scannable, a range needs to satisfy "
 4753|  49.9M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  49.9M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  49.9M|                  "\n"
 4756|  49.9M|                  "Unsupported range type given as input to a scanning "
 4757|  49.9M|                  "function.\n"
 4758|  49.9M|                  "A range needs to model forward_range and have a valid "
 4759|  49.9M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  49.9M|                  "Examples of scannable ranges are std::string, "
 4761|  49.9M|                  "std::string_view, "
 4762|  49.9M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  49.9M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  49.9M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  49.9M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EELPv0EEEDaRKT_NS1_12priority_tagILm2EEE:
 4658|  49.9M|{
 4659|  49.9M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4659:19): [Folded - Ignored]
  ------------------
 4660|  49.9M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4661|  49.9M|    }
 4662|  49.9M|    else {
 4663|  49.9M|        return invalid_char_type{};
 4664|  49.9M|    }
 4665|  49.9M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  49.9M|    {
 2855|  49.9M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  49.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  49.9M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  49.9M|    {
 2836|  49.9M|        return t.data();
 2837|  49.9M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3230|  49.9M|    {
 3231|  49.9M|        return ranges::empty(derived())
  ------------------
  |  Branch (3231:16): [True: 5.01k, False: 49.9M]
  ------------------
 3232|  49.9M|                   ? nullptr
 3233|  49.9M|                   : std::addressof(*ranges::begin(derived()));
 3234|  49.9M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  49.9M|    {
 3005|  49.9M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  49.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  49.9M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  49.9M|    {
 2978|  49.9M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  49.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  49.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5emptyEv:
 3338|  99.7M|    {
 3339|  99.7M|        return m_iterator == m_sentinel;
 3340|  99.7M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  99.8M|    {
 3185|  99.8M|        return static_cast<const D&>(*this);
 3186|  99.8M|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  99.7M|    {
 2724|  99.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  99.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  99.7M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  99.7M|    {
 2705|  99.7M|        return decay_copy(t.begin());
 2706|  99.7M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3329|  2.29G|    {
 3330|  2.29G|        return m_iterator;
 3331|  2.29G|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  49.9M|    {
 2930|  49.9M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  49.9M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  49.9M|    {
 2896|  49.9M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  49.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  49.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_LPv0EEEmv:
 3345|  99.7M|    {
 3346|  99.7M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3347|  99.7M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  44.7k|    {
 1476|  44.7k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  446|  44.7k|    {
  447|  44.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  49.9M|    {
 1177|  49.9M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5922|  49.8M|{
 5923|  49.8M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  49.8M|                      ranges::iterator_t<SourceRange>>) {
 5925|  49.8M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  49.8M|    }
 5927|  49.8M|    else {
 5928|  49.8M|        auto it = ranges::begin(source);
 5929|  49.8M|        while (n > 0) {
 5930|  49.8M|            --n;
 5931|  49.8M|            ++it;
 5932|  49.8M|        }
 5933|  49.8M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  49.8M|    }
 5935|  49.8M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  99.7M|    {
 2724|  99.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  99.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  99.7M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  99.7M|    {
 2705|  99.7M|        return decay_copy(t.begin());
 2706|  99.7M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5909|  49.8M|{
 5910|  49.8M|    return ranges::end(source);
 5911|  49.8M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  49.8M|    {
 2781|  49.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  49.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  49.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  49.8M|    {
 2763|  49.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  49.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  49.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3333|  2.06G|    {
 3334|  2.06G|        return m_sentinel;
 3335|  2.06G|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  49.8M|    {
 1430|  49.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  436|  49.8M|    {
  437|  49.8M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7974|  19.9M|    {
 7975|  19.9M|        return m_str;
 7976|  19.9M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  39.9M|    {
 5426|  39.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5378|  39.9M|    {
 5379|  39.9M|        return m_argptrs;
 5380|  39.9M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5477|  59.8M|    {
 5478|  59.8M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8819|  19.9M|{
 8820|  19.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 19.9M]
  |  |  ------------------
  ------------------
 8821|  20.6k|        return unexpected(result.error());
 8822|  20.6k|    }
 8823|  19.9M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.9M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  49.9M|    {
 1598|  49.9M|        return has_value();
 1599|  49.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  99.8M|    {
  485|  99.8M|        return m_has_value;
  486|  99.8M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  44.7k|    {
 1604|  44.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  44.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  44.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  44.7k|        return this->get_unexpected().error();
 1606|  44.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  44.7k|    {
  468|  44.7k|        return m_unexpected;
  469|  44.7k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_LPv0ELSL_0EEEONS0_10unexpectedIT_EE:
 1475|  22.3k|    {
 1476|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  625|  22.3k|    {
  626|  22.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  22.3k|    {
  689|  22.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  22.3k|                                  std::forward<Args>(args)...);
  691|  22.3k|        m_has_value = false;
  692|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  44.7k|    {
  718|  44.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  44.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  44.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  44.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.9M|    {
 1177|  24.9M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEERT_v:
 1652|  39.8M|    {
 1653|  39.8M|        return value();
 1654|  39.8M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  49.8M|    {
 1627|  49.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  49.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  49.8M|        return this->get_value();
 1629|  49.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  49.8M|    {
  451|  49.8M|        return m_value;
  452|  49.8M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5829|  24.9M|    {
 5830|  24.9M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5680|  49.8M|    {
 5681|  49.8M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5615|  49.8M|    {
 5616|  49.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1429|  24.9M|    {
 1430|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  615|  24.9M|    {
  616|  24.9M|        construct(std::forward<Args>(args)...);
  617|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|  24.9M|    {
  682|  24.9M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  24.9M|        m_has_value = true;
  684|  24.9M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|  24.9M|{
  392|  24.9M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  24.9M|        T(std::forward<Args>(args)...);
  394|  24.9M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5821|  24.9M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  74.7M|    {
  706|  74.7M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  74.7M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  74.7M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5825|  49.8M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5373|  39.9M|    {
 5374|  39.9M|        return m_args;
 5375|  39.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5370|  39.9M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_LPv0EEET_S6_:
 3315|   956M|    {
 3316|   956M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7695|  59.8M|{
 7696|  59.8M|    return s;
 7697|  59.8M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7667|  59.8M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.9M|    {
 7971|  19.9M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  24.9M|    {
 1598|  24.9M|        return has_value();
 1599|  24.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  74.8M|    {
  675|  74.8M|        return m_has_value;
  676|  74.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  24.9M|    {
 1673|  24.9M|        return &value();
 1674|  24.9M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_LPv0EEERT_v:
 1626|  24.9M|    {
 1627|  24.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  24.9M|        return this->get_value();
 1629|  24.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  24.9M|    {
  641|  24.9M|        return *value_ptr();
  642|  24.9M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5697|  49.8M|    {
 5698|  49.8M|        return ranges::begin(m_range);
 5699|  49.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  24.9M|    {
  631|  24.9M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 24.9M, False: 22.3k]
  ------------------
  632|  24.9M|            destroy_value();
  633|  24.9M|        }
  634|  22.3k|        else {
  635|  22.3k|            destroy_unexpected();
  636|  22.3k|        }
  637|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  24.9M|    {
  696|  24.9M|        scn::detail::destroy_at(value_ptr());
  697|  24.9M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|  24.9M|{
  398|  24.9M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  24.9M|        for (auto& elem : *p) {
  400|  24.9M|            scn::detail::destroy_at(&elem);
  401|  24.9M|        }
  402|  24.9M|    }
  403|  24.9M|    else {
  404|  24.9M|        p->~T();
  405|  24.9M|    }
  406|  24.9M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  22.3k|    {
  700|  22.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  22.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8606|  19.9M|{
 8607|  19.9M|#if !SCN_DISABLE_LOCALE
 8608|  19.9M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  19.9M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  19.9M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  19.9M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  19.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 19.9M]
  |  |  ------------------
  ------------------
 8615|  20.6k|        return unexpected(result.error());
 8616|  20.6k|    }
 8617|  19.9M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  19.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  19.9M|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  9.97M|{
 5155|  9.97M|    check_scan_arg_types<T>();
 5156|       |
 5157|  9.97M|    basic_scan_arg<Context> arg;
 5158|  9.97M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  9.97M|    arg.m_value = make_value<Context>(value);
 5160|  9.97M|    return arg;
 5161|  9.97M|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5240|  74.8M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  9.97M|{
 8631|  9.97M|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  9.97M|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  9.97M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 9.97M]
  |  |  ------------------
  ------------------
 8635|  3.44k|        return unexpected(result.error());
 8636|  3.44k|    }
 8637|  9.97M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  9.97M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  9.97M|    {
 1663|  9.97M|        return std::move(value());
 1664|  9.97M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5395|  19.9M|{
 5396|  19.9M|    detail::check_scan_arg_types<Args...>();
 5397|  19.9M|    return detail::scan_arg_store<Context, Args...>{};
 5398|  19.9M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5134|  24.9M|{
 5135|  24.9M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5136|  24.9M|                  "Scan argument types must be default constructible");
 5137|  24.9M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5138|  24.9M|                  "Scan argument types must be Destructible");
 5139|  24.9M|    static_assert(
 5140|  24.9M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5141|  24.9M|        "Scan argument types must not be references");
 5142|  24.9M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5348|  19.9M|    {
 5349|  19.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5359|  19.9M|    {
 5360|  19.9M|        return {detail::make_arg<
 5361|  19.9M|            kind, Context,
 5362|  19.9M|            mapped_type_constant<remove_cvref_t<A>,
 5363|  19.9M|                                 typename Context::char_type>::value>(args)...};
 5364|  19.9M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5169|  19.9M|{
 5170|  19.9M|    return make_value<Context>(value).ref_value;
 5171|  19.9M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5119|  24.9M|{
 5120|  24.9M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5121|       |
 5122|  24.9M|    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
  ------------------
  |  Branch (5122:19): [Folded - Ignored]
  ------------------
 5123|  24.9M|                                  needs_context_tag>) {
 5124|  24.9M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  24.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5125|  24.9M|    }
 5126|  24.9M|    else {
 5127|  24.9M|        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5128|  24.9M|            value, context_tag<Context>{}));
 5129|  24.9M|    }
 5130|  24.9M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4958|  24.9M|    {                                                                        \
 4959|  24.9M|        return val;                                                          \
 4960|  24.9M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5088|  24.9M|{
 5089|  24.9M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5090|  24.9M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5091|       |
 5092|  24.9M|    constexpr bool scannable_char =
 5093|  24.9M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5094|  24.9M|    static_assert(scannable_char,
 5095|  24.9M|                  "Cannot scan an argument of an unsupported character "
 5096|  24.9M|                  "type (i.e. char from a wchar_t source)");
 5097|       |
 5098|  24.9M|    constexpr bool scannable_const =
 5099|  24.9M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5100|  24.9M|    static_assert(scannable_const, "Cannot scan a const argument");
 5101|       |
 5102|  24.9M|    constexpr bool scannable_disabled =
 5103|  24.9M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5104|  24.9M|    static_assert(scannable_disabled,
 5105|  24.9M|                  "Cannot scan an argument that has been disabled by "
 5106|  24.9M|                  "flag (SCN_DISABLE_TYPE_*)");
 5107|       |
 5108|  24.9M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5109|  24.9M|    static_assert(
 5110|  24.9M|        scannable,
 5111|  24.9M|        "Cannot scan an argument. To make a type T scannable, provide "
 5112|  24.9M|        "a scn::scanner<T, CharT> specialization.");
 5113|       |
 5114|  24.9M|    return arg_value{arg};
 5115|  24.9M|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4901|  24.9M|    {
 4902|  24.9M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7974|  19.9M|    {
 7975|  19.9M|        return m_str;
 7976|  19.9M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5425|  19.9M|    {
 5426|  19.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5378|  19.9M|    {
 5379|  19.9M|        return m_argptrs;
 5380|  19.9M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8819|  19.9M|{
 8820|  19.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 19.9M]
  |  |  ------------------
  ------------------
 8821|  20.6k|        return unexpected(result.error());
 8822|  20.6k|    }
 8823|  19.9M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.9M|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_LPv0ELSJ_0EEEONS0_10unexpectedIT_EE:
 1475|  22.3k|    {
 1476|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  446|  22.3k|    {
  447|  22.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.9M|    {
 1177|  24.9M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5829|  24.9M|    {
 5830|  24.9M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5615|  24.9M|    {
 5616|  24.9M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1429|  24.9M|    {
 1430|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  436|  24.9M|    {
  437|  24.9M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5373|  19.9M|    {
 5374|  19.9M|        return m_args;
 5375|  19.9M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.9M|    {
 7971|  19.9M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  24.9M|    {
 1598|  24.9M|        return has_value();
 1599|  24.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  49.8M|    {
  485|  49.8M|        return m_has_value;
  486|  49.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  24.9M|    {
 1673|  24.9M|        return &value();
 1674|  24.9M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_LPv0EEERT_v:
 1626|  24.9M|    {
 1627|  24.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  24.9M|        return this->get_value();
 1629|  24.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|  24.9M|    {
  451|  24.9M|        return m_value;
  452|  24.9M|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5154|  4.98M|{
 5155|  4.98M|    check_scan_arg_types<T>();
 5156|       |
 5157|  4.98M|    basic_scan_arg<Context> arg;
 5158|  4.98M|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5159|  4.98M|    arg.m_value = make_value<Context>(value);
 5160|  4.98M|    return arg;
 5161|  4.98M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  22.3k|    {
 2724|  22.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  22.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  22.3k|    {
 2705|  22.3k|        return decay_copy(t.begin());
 2706|  22.3k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  1.00G|{
 1949|  1.00G|    return SCN_FWD(t);
  ------------------
  |  |  930|  1.00G|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  1.00G|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  49.9M|    {
 2781|  49.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  49.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  49.9M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  49.9M|    {
 2763|  49.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  49.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  49.9M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8590|  9.98M|{
 8591|  9.98M|    auto buffer = make_scan_buffer(range);
 8592|       |
 8593|  9.98M|    auto result = vscan_impl(buffer, format, args);
 8594|  9.98M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 9.97M]
  |  |  ------------------
  ------------------
 8595|  10.3k|        return unexpected(result.error());
 8596|  10.3k|    }
 8597|  9.97M|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8598|  9.98M|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4719|  24.9M|{
 4720|  24.9M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4721|       |
 4722|  24.9M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4723|  24.9M|                  "\n"
 4724|  24.9M|                  "Unsupported range type given as input to a scanning "
 4725|  24.9M|                  "function.\n"
 4726|  24.9M|                  "A range needs to have a character type (value type) "
 4727|  24.9M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4728|  24.9M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4729|  24.9M|                  "to be included.\n"
 4730|  24.9M|                  "See the scnlib documentation for more details.");
 4731|  24.9M|    static_assert(
 4732|  24.9M|        !std::is_same_v<T, custom_char_traits>,
 4733|  24.9M|        "\n"
 4734|  24.9M|        "Unsupported range type given as input to a scanning "
 4735|  24.9M|        "function.\n"
 4736|  24.9M|        "String types (std::basic_string, and std::basic_string_view) "
 4737|  24.9M|        "need to use std::char_traits. Strings with custom Traits are "
 4738|  24.9M|        "not supported.");
 4739|  24.9M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4740|  24.9M|                  "\n"
 4741|  24.9M|                  "Unsupported range type given as input to a scanning "
 4742|  24.9M|                  "function.\n"
 4743|  24.9M|                  "file_marker_found cannot be used as an "
 4744|  24.9M|                  "source range type to scn::scan.\n"
 4745|  24.9M|                  "To read from stdin, use scn::input or scn::prompt, "
 4746|  24.9M|                  "and do not provide an explicit source range, "
 4747|  24.9M|                  "or use scn::scan with a FILE* directly.");
 4748|  24.9M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4749|  24.9M|                  "\n"
 4750|  24.9M|                  "Unsupported range type given as input to a scanning "
 4751|  24.9M|                  "function.\n"
 4752|  24.9M|                  "In order to be scannable, a range needs to satisfy "
 4753|  24.9M|                  "`forward_range`. `input_range` is not sufficient.");
 4754|  24.9M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4755|  24.9M|                  "\n"
 4756|  24.9M|                  "Unsupported range type given as input to a scanning "
 4757|  24.9M|                  "function.\n"
 4758|  24.9M|                  "A range needs to model forward_range and have a valid "
 4759|  24.9M|                  "character type (char or wchar_t) to be scannable.\n"
 4760|  24.9M|                  "Examples of scannable ranges are std::string, "
 4761|  24.9M|                  "std::string_view, "
 4762|  24.9M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4763|  24.9M|                  "See the scnlib documentation for more details.");
 4764|       |
 4765|  24.9M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4766|  24.9M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4689|  24.9M|{
 4690|  24.9M|    if constexpr (std::is_same_v<Range, file_marker>) {
  ------------------
  |  Branch (4690:19): [Folded - Ignored]
  ------------------
 4691|  24.9M|        return file_marker_found{};
 4692|  24.9M|    }
 4693|  24.9M|    else if constexpr (!ranges::forward_range<Range>) {
  ------------------
  |  Branch (4693:24): [Folded - Ignored]
  ------------------
 4694|  24.9M|        if constexpr (ranges::range<Range>) {
 4695|  24.9M|            return insufficient_range{};
 4696|  24.9M|        }
 4697|  24.9M|        else {
 4698|  24.9M|            return invalid_input_range{};
 4699|  24.9M|        }
 4700|  24.9M|    }
 4701|  24.9M|    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
  ------------------
  |  Branch (4701:24): [Folded - Ignored]
  ------------------
 4702|  24.9M|        return invalid_char_type{};
 4703|  24.9M|    }
 4704|  24.9M|    else {
 4705|  24.9M|        return make_forward_scan_buffer(r);
 4706|  24.9M|    }
 4707|  24.9M|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4523|  24.9M|{
 4524|  24.9M|    return basic_scan_forward_buffer_impl(range);
 4525|  24.9M|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_LPv0EEEOT_:
 4410|  24.9M|    {
 4411|  24.9M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4381|  24.9M|    {
 4382|  24.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4150|  24.9M|    {
 4151|  24.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4065|  24.9M|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  49.8M|    {
 2724|  49.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  49.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  49.8M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  49.8M|    {
 2705|  49.8M|        return decay_copy(t.begin());
 2706|  49.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3329|  74.8M|    {
 3330|  74.8M|        return m_iterator;
 3331|  74.8M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4414|   283M|    {
 4415|   283M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4415:13): [True: 32.3k, False: 283M]
  ------------------
 4416|  32.3k|            return false;
 4417|  32.3k|        }
 4418|   283M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4418:23): [Folded - Ignored]
  ------------------
 4419|   283M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|   283M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4420|   283M|        }
 4421|   283M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4421:13): [True: 258M, False: 24.9M]
  ------------------
 4422|   258M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4423|   258M|                                          this->m_current_view.begin(),
 4424|   258M|                                          this->m_current_view.end());
 4425|   258M|        }
 4426|   283M|        m_latest = *m_cursor;
 4427|   283M|        ++m_cursor;
 4428|   283M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4429|   283M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
  ------------------
  |  Branch (4429:23): [Folded - Ignored]
  ------------------
 4430|   283M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|   283M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4431|   283M|        }
 4432|   283M|        return true;
 4433|   283M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   850M|    {
 2781|   850M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   850M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   850M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   850M|    {
 2763|   850M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   850M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   850M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3333|   875M|    {
 3334|   875M|        return m_sentinel;
 3335|   875M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4070|  24.9M|    {
 4071|  24.9M|        SCN_UNUSED(position);
  ------------------
  |  |  909|  24.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4072|  24.9M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_LPv0ELSI_0EEEONS0_10unexpectedIT_EE:
 1475|  22.3k|    {
 1476|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  446|  22.3k|    {
  447|  22.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.9M|    {
 1177|  24.9M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5922|  24.9M|{
 5923|  24.9M|    if constexpr (ranges::random_access_iterator<
  ------------------
  |  Branch (5923:19): [Folded - Ignored]
  ------------------
 5924|  24.9M|                      ranges::iterator_t<SourceRange>>) {
 5925|  24.9M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5926|  24.9M|    }
 5927|  24.9M|    else {
 5928|  24.9M|        auto it = ranges::begin(source);
 5929|  24.9M|        while (n > 0) {
 5930|  24.9M|            --n;
 5931|  24.9M|            ++it;
 5932|  24.9M|        }
 5933|  24.9M|        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5934|  24.9M|    }
 5935|  24.9M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  24.9M|    {
 2724|  24.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  24.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  24.9M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  24.9M|    {
 2705|  24.9M|        return decay_copy(t.begin());
 2706|  24.9M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5909|  24.9M|{
 5910|  24.9M|    return ranges::end(source);
 5911|  24.9M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  24.9M|    {
 2781|  24.9M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  24.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  24.9M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  24.9M|    {
 2763|  24.9M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  24.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  24.9M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1429|  24.9M|    {
 1430|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  436|  24.9M|    {
  437|  24.9M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7974|  19.9M|    {
 7975|  19.9M|        return m_str;
 7976|  19.9M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8819|  19.9M|{
 8820|  19.9M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 19.9M]
  |  |  ------------------
  ------------------
 8821|  20.6k|        return unexpected(result.error());
 8822|  20.6k|    }
 8823|  19.9M|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8824|  19.9M|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|  24.9M|    {
 1598|  24.9M|        return has_value();
 1599|  24.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  49.9M|    {
  485|  49.9M|        return m_has_value;
  486|  49.9M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  22.3k|    {
 1604|  22.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  22.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  22.3k|        return this->get_unexpected().error();
 1606|  22.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  22.3k|    {
  468|  22.3k|        return m_unexpected;
  469|  22.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_LPv0ELSQ_0EEEONS0_10unexpectedIT_EE:
 1475|  22.3k|    {
 1476|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  625|  22.3k|    {
  626|  22.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  22.3k|    {
  689|  22.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  22.3k|                                  std::forward<Args>(args)...);
  691|  22.3k|        m_has_value = false;
  692|  22.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  44.7k|    {
  718|  44.7k|        return reinterpret_cast<unexpected<E>*>(
  719|  44.7k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  44.7k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  44.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.9M|    {
 1177|  24.9M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEERT_v:
 1652|  19.9M|    {
 1653|  19.9M|        return value();
 1654|  19.9M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_LPv0EEERT_v:
 1626|  24.9M|    {
 1627|  24.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  24.9M|        return this->get_value();
 1629|  24.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  24.9M|    {
  451|  24.9M|        return m_value;
  452|  24.9M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5829|  24.9M|    {
 5830|  24.9M|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5680|  24.9M|    {
 5681|  24.9M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1429|  24.9M|    {
 1430|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  615|  24.9M|    {
  616|  24.9M|        construct(std::forward<Args>(args)...);
  617|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|  24.9M|    {
  682|  24.9M|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|  24.9M|        m_has_value = true;
  684|  24.9M|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|  24.9M|{
  392|  24.9M|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  24.9M|        T(std::forward<Args>(args)...);
  394|  24.9M|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5821|  24.9M|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  74.7M|    {
  706|  74.7M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  74.7M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  74.7M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5825|  49.8M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_LPv0EEET_SC_:
 3315|  49.8M|    {
 3316|  49.8M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7970|  19.9M|    {
 7971|  19.9M|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|  24.9M|    {
 1598|  24.9M|        return has_value();
 1599|  24.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  74.8M|    {
  675|  74.8M|        return m_has_value;
  676|  74.8M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|  24.9M|    {
 1673|  24.9M|        return &value();
 1674|  24.9M|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_LPv0EEERT_v:
 1626|  24.9M|    {
 1627|  24.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  24.9M|        return this->get_value();
 1629|  24.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|  24.9M|    {
  641|  24.9M|        return *value_ptr();
  642|  24.9M|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5697|  24.9M|    {
 5698|  24.9M|        return ranges::begin(m_range);
 5699|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|  24.9M|    {
  631|  24.9M|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 24.9M, False: 22.3k]
  ------------------
  632|  24.9M|            destroy_value();
  633|  24.9M|        }
  634|  22.3k|        else {
  635|  22.3k|            destroy_unexpected();
  636|  22.3k|        }
  637|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|  24.9M|    {
  696|  24.9M|        scn::detail::destroy_at(value_ptr());
  697|  24.9M|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|  24.9M|{
  398|  24.9M|    if constexpr (std::is_array_v<T>) {
  ------------------
  |  Branch (398:19): [Folded - Ignored]
  ------------------
  399|  24.9M|        for (auto& elem : *p) {
  400|  24.9M|            scn::detail::destroy_at(&elem);
  401|  24.9M|        }
  402|  24.9M|    }
  403|  24.9M|    else {
  404|  24.9M|        p->~T();
  405|  24.9M|    }
  406|  24.9M|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  22.3k|    {
  700|  22.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  22.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8606|  9.98M|{
 8607|  9.98M|#if !SCN_DISABLE_LOCALE
 8608|  9.98M|    auto buffer = detail::make_scan_buffer(range);
 8609|       |
 8610|  9.98M|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8611|  9.98M|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8612|  9.98M|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8613|       |
 8614|  9.98M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 9.97M]
  |  |  ------------------
  ------------------
 8615|  10.3k|        return unexpected(result.error());
 8616|  10.3k|    }
 8617|  9.97M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8618|       |#else
 8619|       |    static_assert(dependent_false<Locale>::value,
 8620|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8621|       |
 8622|       |    return {};
 8623|       |#endif
 8624|  9.98M|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8630|  4.98M|{
 8631|  4.98M|    auto buffer = detail::make_scan_buffer(range);
 8632|       |
 8633|  4.98M|    auto result = detail::vscan_value_impl(buffer, arg);
 8634|  4.98M|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  4.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 4.98M]
  |  |  ------------------
  ------------------
 8635|  1.72k|        return unexpected(result.error());
 8636|  1.72k|    }
 8637|  4.98M|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8638|  4.98M|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_LPv0EEEOT_v:
 1662|  4.98M|    {
 1663|  4.98M|        return std::move(value());
 1664|  4.98M|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3567|   131k|    {
 3568|   131k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   131k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3569|   131k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3573|   231M|    {
 3574|   231M|        return m_code == good;
 3575|   231M|    }
_ZNK3scn2v310scan_error4codeEv:
 3584|  46.4k|    {
 3585|  46.4k|        return m_code;
 3586|  46.4k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  7.42M|    {
 3330|  7.42M|        return m_iterator;
 3331|  7.42M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3329|  1.07G|    {
 3330|  1.07G|        return m_iterator;
 3331|  1.07G|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6259|  30.1M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6281|  30.9k|    {
 6282|  30.9k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6282:13): [True: 0, False: 30.9k]
  |  Branch (6282:39): [True: 0, False: 0]
  ------------------
 6283|       |            // clang-format off
 6284|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6285|       |            // clang-format on
 6286|      0|        }
 6287|       |
 6288|  30.9k|        m_specs.width = width;
 6289|  30.9k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6302|  30.1M|    {
 6303|  30.1M|        m_specs.type = type;
 6304|  30.1M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6319|  36.6k|    {
 6320|  36.6k|        const auto begin_value = static_cast<unsigned>(begin);
 6321|  36.6k|        const auto end_value = static_cast<unsigned>(end);
 6322|  36.6k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  36.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  36.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6323|       |
 6324|  36.6k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  36.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 36.6k, False: 0]
  |  |  ------------------
  ------------------
 6325|       |            // No need to bit-twiddle with a mask, because with the
 6326|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6327|  36.6k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  36.6k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6328|   990k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6328:40): [True: 953k, False: 36.6k]
  ------------------
 6329|   953k|                m_specs.charset_literals[v / 8] |=
 6330|   953k|                    static_cast<unsigned char>(1ul << (v % 8));
 6331|   953k|            }
 6332|  36.6k|        }
 6333|      0|        else {
 6334|      0|            m_specs.charset_has_nonascii = true;
 6335|      0|        }
 6336|  36.6k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6364|  30.9k|    {
 6365|  30.9k|        SCN_UNLIKELY_ATTR
 6366|  30.9k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6367|  30.9k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6375|  30.2M|    {
 6376|  30.2M|        return static_cast<bool>(m_error);
 6377|  30.2M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3608|  46.4k|{
 3609|  46.4k|    return a.code() == b;
 3610|  46.4k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3612|  46.4k|{
 3613|  46.4k|    return !(a == b);
 3614|  46.4k|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7062|  15.4k|{
 7063|  15.4k|    switch (type) {
 7064|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7064:9): [True: 0, False: 15.4k]
  ------------------
 7065|      0|            return arg_type_category::none;
 7066|       |
 7067|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7067:9): [True: 0, False: 15.4k]
  ------------------
 7068|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7068:9): [True: 0, False: 15.4k]
  ------------------
 7069|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7069:9): [True: 0, False: 15.4k]
  ------------------
 7070|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7070:9): [True: 0, False: 15.4k]
  ------------------
 7071|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7071:9): [True: 0, False: 15.4k]
  ------------------
 7072|      0|            return arg_type_category::integer;
 7073|       |
 7074|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7074:9): [True: 0, False: 15.4k]
  ------------------
 7075|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 15.4k]
  ------------------
 7076|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7076:9): [True: 0, False: 15.4k]
  ------------------
 7077|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7077:9): [True: 0, False: 15.4k]
  ------------------
 7078|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 15.4k]
  ------------------
 7079|      0|            return arg_type_category::unsigned_integer;
 7080|       |
 7081|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 15.4k]
  ------------------
 7082|      0|            return arg_type_category::pointer;
 7083|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7083:9): [True: 0, False: 15.4k]
  ------------------
 7084|      0|            return arg_type_category::boolean;
 7085|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 15.4k]
  ------------------
 7086|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 15.4k]
  ------------------
 7087|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 15.4k]
  ------------------
 7088|      0|            return arg_type_category::character;
 7089|       |
 7090|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7090:9): [True: 0, False: 15.4k]
  ------------------
 7091|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7091:9): [True: 0, False: 15.4k]
  ------------------
 7092|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 15.4k]
  ------------------
 7093|      0|            return arg_type_category::floating;
 7094|       |
 7095|  1.72k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7095:9): [True: 1.72k, False: 13.7k]
  ------------------
 7096|  5.16k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7096:9): [True: 3.44k, False: 12.0k]
  ------------------
 7097|  8.61k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7097:9): [True: 3.44k, False: 12.0k]
  ------------------
 7098|  15.4k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7098:9): [True: 6.88k, False: 8.61k]
  ------------------
 7099|  15.4k|            return arg_type_category::string;
 7100|       |
 7101|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 15.4k]
  ------------------
 7102|      0|            return arg_type_category::custom;
 7103|       |
 7104|      0|            SCN_CLANG_PUSH
 7105|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7106|      0|        default:
  ------------------
  |  Branch (7106:9): [True: 0, False: 15.4k]
  ------------------
 7107|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7108|  15.4k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7109|  15.4k|            SCN_CLANG_POP
 7110|  15.4k|    }
 7111|       |
 7112|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7113|  15.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3653|  15.4k|{
 3654|  15.4k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  15.4k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3653|  10.8k|{
 3654|  10.8k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  10.8k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3653|  5.47k|{
 3654|  5.47k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  5.47k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3655|  5.47k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7204|  30.1M|{
 7205|  30.1M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7205:9): [True: 0, False: 30.1M]
  ------------------
 7206|  30.1M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7206:9): [True: 30.1M, False: 33.8k]
  ------------------
 7207|  30.1M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7207:9): [True: 18.3k, False: 15.4k]
  ------------------
 7208|  30.1M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7208:9): [True: 0, False: 15.4k]
  ------------------
 7209|  30.1M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7209:9): [True: 0, False: 15.4k]
  ------------------
 7210|  30.1M|        return;
 7211|  30.1M|    }
 7212|  15.4k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7212:9): [True: 15.4k, False: 0]
  ------------------
 7213|  15.4k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  15.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 15.4k, False: 0]
  |  |  ------------------
  ------------------
 7214|       |            // clang-format off
 7215|  15.4k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7216|       |            // clang-format on
 7217|  15.4k|        }
 7218|      0|        return;
 7219|  15.4k|    }
 7220|      0|    SCN_UNLIKELY_ATTR
 7221|      0|    handler.on_error("Invalid type specifier for string");
 7222|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4194|  40.3M|    {
 4195|  40.3M|        return m_end == nullptr;
 4196|  40.3M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|   165k|{
 3715|   165k|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|   165k|                                          const CharT*, const CharT*>) {
 3717|   165k|        return {first, last};
 3718|   165k|    }
 3719|   165k|    else {
 3720|   165k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|   165k|    }
 3722|   165k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4210|   850k|    {
 4211|   850k|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 850k]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|   850k|        return parent()->get_segment_starting_at(position());
 4217|   850k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4204|  23.4M|    {
 4205|  23.4M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  23.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  23.4M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  23.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4100|   850k|    {
 4101|   850k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   850k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 497k, False: 352k]
  |  |  ------------------
  ------------------
 4102|   850k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|   497k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|   497k|        }
 4105|   352k|        const auto start = pos - m_putback_buffer.size();
 4106|   352k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   352k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   352k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|   352k|        return m_current_view.substr(start);
 4108|   352k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4189|   958k|    {
 4190|   958k|        return m_position;
 4191|   958k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4122|   536k|    {
 4123|   536k|        return m_is_contiguous;
 4124|   536k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4194|  5.26G|    {
 4195|  5.26G|        return m_end == nullptr;
 4196|  5.26G|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3714|  24.9M|{
 3715|  24.9M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3715:19): [Folded - Ignored]
  ------------------
 3716|  24.9M|                                          const CharT*, const CharT*>) {
 3717|  24.9M|        return {first, last};
 3718|  24.9M|    }
 3719|  24.9M|    else {
 3720|  24.9M|        return {first, static_cast<size_t>(std::distance(first, last))};
 3721|  24.9M|    }
 3722|  24.9M|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4210|  74.8M|    {
 4211|  74.8M|        if (!stores_parent()) {
  ------------------
  |  Branch (4211:13): [True: 0, False: 74.8M]
  ------------------
 4212|      0|            return make_string_view_from_pointers(
 4213|      0|                static_cast<const CharT*>(m_begin) + position(),
 4214|      0|                static_cast<const CharT*>(m_end));
 4215|      0|        }
 4216|  74.8M|        return parent()->get_segment_starting_at(position());
 4217|  74.8M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4204|  3.05G|    {
 4205|  3.05G|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  3.05G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.05G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4206|  3.05G|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4207|  3.05G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4100|  74.8M|    {
 4101|  74.8M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  74.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 49.8M, False: 24.9M]
  |  |  ------------------
  ------------------
 4102|  74.8M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4103|  49.8M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4104|  49.8M|        }
 4105|  24.9M|        const auto start = pos - m_putback_buffer.size();
 4106|  24.9M|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|  24.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4107|  24.9M|        return m_current_view.substr(start);
 4108|  24.9M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4189|  89.7M|    {
 4190|  89.7M|        return m_position;
 4191|  89.7M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4122|  74.8M|    {
 4123|  74.8M|        return m_is_contiguous;
 4124|  74.8M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|  1.98M|    {
 3180|  1.98M|        return static_cast<D&>(*this);
 3181|  1.98M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|   992k|    {
 2978|   992k|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|   992k|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|   992k|    {
 3005|   992k|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|   992k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|   992k|    {
 3221|   992k|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 784, False: 992k]
  ------------------
 3222|   992k|                   ? nullptr
 3223|   992k|                   : std::addressof(*ranges::begin(derived()));
 3224|   992k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  99.7M|    {
 3180|  99.7M|        return static_cast<D&>(*this);
 3181|  99.7M|    }
_ZN3scn2v36ranges6detail6empty_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEEDTscbcldtscDtfp_Efp_5emptyEEOT_NS0_6detail12priority_tagILm2EEE:
 2977|  49.8M|    {
 2978|  49.8M|        return static_cast<bool>(SCN_FWD(t).empty());
  ------------------
  |  |  930|  49.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2979|  49.8M|    }
_ZNK3scn2v36ranges6detail6empty_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm2EEEEEEOT_:
 3004|  49.8M|    {
 3005|  49.8M|        return fn::impl(SCN_FWD(t), priority_tag<2>{});
  ------------------
  |  |  930|  49.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3006|  49.8M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  49.8M|    {
 3221|  49.8M|        return ranges::empty(derived())
  ------------------
  |  Branch (3221:16): [True: 0, False: 49.8M]
  ------------------
 3222|  49.8M|                   ? nullptr
 3223|  49.8M|                   : std::addressof(*ranges::begin(derived()));
 3224|  49.8M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8168|  72.5k|    {
 8169|  72.5k|        return ranges::subrange{begin(), end()};
 8170|  72.5k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8152|   215k|    {
 8153|   215k|        return m_current;
 8154|   215k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8160|  72.5k|    {
 8161|  72.5k|        return ranges::default_sentinel;
 8162|  72.5k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|  2.69M|    {
 3316|  2.69M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 7990|  75.3M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   170k|    {
 1837|   170k|        return detail::transform_error_impl(std::move(*this),
 1838|   170k|                                            std::forward<F>(f));
 1839|   170k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|   170k|{
 1323|   170k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   170k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   170k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   170k|            return result(*std::forward<Exp>(exp));
 1327|   170k|        }
 1328|       |
 1329|   170k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   170k|        return result(unexpect, monostate{});
 1331|   170k|    }
 1332|   170k|    else {
 1333|   170k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   170k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   170k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 168k, False: 2.71k]
  |  |  ------------------
  ------------------
 1335|   170k|                   ? result(*std::forward<Exp>(exp))
 1336|   170k|                   : result(unexpect,
 1337|  2.71k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.71k|                                           std::forward<Exp>(exp).error()));
 1339|   170k|    }
 1340|   170k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   341k|    {
  485|   341k|        return m_has_value;
  486|   341k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|   168k|    {
 1663|   168k|        return std::move(value());
 1664|   168k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|   168k|    {
 1627|   168k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   168k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   168k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   168k|        return this->get_value();
 1629|   168k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   168k|    {
  451|   168k|        return m_value;
  452|   168k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|   403k|    {
 1430|   403k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   403k|    {
  437|   403k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   418k|    {
 1177|   418k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  22.4k|{
 1211|  22.4k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  22.4k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.71k|    {
 1614|  2.71k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.71k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.71k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.71k|        return std::move(this->get_unexpected().error());
 1616|  2.71k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.71k|    {
  468|  2.71k|        return m_unexpected;
  469|  2.71k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  44.8k|    {
  361|  44.8k|        return m_unexpected;
  362|  44.8k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  2.71k|    {
 1486|  2.71k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  14.5k|    {
  447|  14.5k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8168|  9.98M|    {
 8169|  9.98M|        return ranges::subrange{begin(), end()};
 8170|  9.98M|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8152|  29.9M|    {
 8153|  29.9M|        return m_current;
 8154|  29.9M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8160|  9.98M|    {
 8161|  9.98M|        return ranges::default_sentinel;
 8162|  9.98M|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_LPv0EEET_S9_:
 3315|   403M|    {
 3316|   403M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|  24.9M|    {
 1837|  24.9M|        return detail::transform_error_impl(std::move(*this),
 1838|  24.9M|                                            std::forward<F>(f));
 1839|  24.9M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ELPv0ESA_EEDaOT_OT0_:
 1322|  24.9M|{
 1323|  24.9M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  24.9M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  24.9M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  24.9M|            return result(*std::forward<Exp>(exp));
 1327|  24.9M|        }
 1328|       |
 1329|  24.9M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  24.9M|        return result(unexpect, monostate{});
 1331|  24.9M|    }
 1332|  24.9M|    else {
 1333|  24.9M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  24.9M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  24.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 24.9M, False: 4.81k]
  |  |  ------------------
  ------------------
 1335|  24.9M|                   ? result(*std::forward<Exp>(exp))
 1336|  24.9M|                   : result(unexpect,
 1337|  4.81k|                            trivial_invoke(std::forward<F>(f),
 1338|  4.81k|                                           std::forward<Exp>(exp).error()));
 1339|  24.9M|    }
 1340|  24.9M|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  49.8M|    {
  485|  49.8M|        return m_has_value;
  486|  49.8M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_LPv0EEEOT_v:
 1662|  24.9M|    {
 1663|  24.9M|        return std::move(value());
 1664|  24.9M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_LPv0EEERT_v:
 1626|  24.9M|    {
 1627|  24.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  24.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  24.9M|        return this->get_value();
 1629|  24.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  24.9M|    {
  451|  24.9M|        return m_value;
  452|  24.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1429|  59.8M|    {
 1430|  59.8M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  59.8M|    {
  437|  59.8M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  59.8M|    {
 1177|  59.8M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  4.81k|    {
 1614|  4.81k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  4.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  4.81k|        return std::move(this->get_unexpected().error());
 1616|  4.81k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  4.81k|    {
  468|  4.81k|        return m_unexpected;
  469|  4.81k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1485|  4.81k|    {
 1486|  4.81k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  28.7k|    {
  447|  28.7k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  346|  31.8k|    {
  347|  31.8k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  31.8k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  31.8k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  23.7k|    {
 1476|  23.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  28.9k|    {
  447|  28.9k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   819k|    {
 1177|   819k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|   788k|    {
 1430|   788k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   788k|    {
  437|   788k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   819k|    {
 1598|   819k|        return has_value();
 1599|   819k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.63M|    {
  485|  1.63M|        return m_has_value;
  486|  1.63M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  28.9k|    {
 1604|  28.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  28.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  28.9k|        return this->get_unexpected().error();
 1606|  28.9k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  28.9k|    {
  468|  28.9k|        return m_unexpected;
  469|  28.9k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|   656k|    {
 1663|   656k|        return std::move(value());
 1664|   656k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   790k|    {
 1627|   790k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   790k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   790k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   790k|        return this->get_value();
 1629|   790k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   790k|    {
  451|   790k|        return m_value;
  452|   790k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_LPv0ELS7_0EEEONS0_10unexpectedIT_EE:
 1475|  47.8k|    {
 1476|  47.8k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  446|  57.4k|    {
  447|  57.4k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   119M|    {
 1177|   119M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1429|   119M|    {
 1430|   119M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   119M|    {
  437|   119M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|   119M|    {
 1598|   119M|        return has_value();
 1599|   119M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|   239M|    {
  485|   239M|        return m_has_value;
  486|   239M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  57.4k|    {
 1604|  57.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  57.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  57.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  57.4k|        return this->get_unexpected().error();
 1606|  57.4k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  57.4k|    {
  468|  57.4k|        return m_unexpected;
  469|  57.4k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEEOT_v:
 1662|  99.7M|    {
 1663|  99.7M|        return std::move(value());
 1664|  99.7M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_LPv0EEERT_v:
 1626|   119M|    {
 1627|   119M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   119M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   119M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   119M|        return this->get_value();
 1629|   119M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|   119M|    {
  451|   119M|        return m_value;
  452|   119M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   334k|    {
 1837|   334k|        return detail::transform_error_impl(std::move(*this),
 1838|   334k|                                            std::forward<F>(f));
 1839|   334k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|   334k|{
 1323|   334k|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|   334k|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|   334k|        if (SCN_LIKELY(exp.has_value())) {
 1326|   334k|            return result(*std::forward<Exp>(exp));
 1327|   334k|        }
 1328|       |
 1329|   334k|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|   334k|        return result(unexpect, monostate{});
 1331|   334k|    }
 1332|   334k|    else {
 1333|   334k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   334k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   334k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 329k, False: 5.27k]
  |  |  ------------------
  ------------------
 1335|   334k|                   ? result(*std::forward<Exp>(exp))
 1336|   334k|                   : result(unexpect,
 1337|  5.27k|                            trivial_invoke(std::forward<F>(f),
 1338|  5.27k|                                           std::forward<Exp>(exp).error()));
 1339|   334k|    }
 1340|   334k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   668k|    {
  485|   668k|        return m_has_value;
  486|   668k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|   329k|    {
 1663|   329k|        return std::move(value());
 1664|   329k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|   329k|    {
 1627|   329k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   329k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   329k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   329k|        return this->get_value();
 1629|   329k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   329k|    {
  451|   329k|        return m_value;
  452|   329k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  5.27k|    {
 1614|  5.27k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.27k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.27k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  5.27k|        return std::move(this->get_unexpected().error());
 1616|  5.27k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  5.27k|    {
  468|  5.27k|        return m_unexpected;
  469|  5.27k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  5.27k|    {
 1486|  5.27k|    }
_ZN3scn2v310scan_errorC2Ev:
 3562|   170M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  11.8k|    {
 1476|  11.8k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|  2.13M|    {
 4280|  2.13M|        return x.is_at_end();
 4281|  2.13M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4323|  4.33M|    {
 4324|  4.33M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 4.33M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|  4.33M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 4.33M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|  4.33M|        return !read_at_position();
 4331|  4.33M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4303|  11.9M|    {
 4304|  11.9M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  11.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  11.9M|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 11.9M]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  11.9M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  11.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.75M, False: 2.22M]
  |  |  ------------------
  ------------------
 4311|  9.75M|            return true;
 4312|  9.75M|        }
 4313|       |
 4314|  4.42M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 2.22M, False: 2.20M]
  ------------------
 4315|  2.22M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 16.9k, False: 2.20M]
  ------------------
 4316|  16.9k|                return false;
 4317|  16.9k|            }
 4318|  2.22M|        }
 4319|  2.20M|        return true;
 4320|  2.22M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4080|  16.4M|    {
 4081|  16.4M|        return m_putback_buffer.size() + m_current_view.size();
 4082|  16.4M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4238|  4.00M|    {
 4239|  4.00M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  4.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|  4.00M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 4.00M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|  4.00M|        auto res = read_at_position();
 4248|  4.00M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  4.00M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.00M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|  4.00M|        return parent()->get_character_at(m_position);
 4250|  4.00M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4111|  4.00M|    {
 4112|  4.00M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  4.00M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.20M, False: 1.80M]
  |  |  ------------------
  ------------------
 4113|  4.00M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|  2.20M|            return m_putback_buffer[pos];
 4115|  2.20M|        }
 4116|  1.80M|        const auto start = pos - m_putback_buffer.size();
 4117|  1.80M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.80M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.80M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|  1.80M|        return m_current_view[start];
 4119|  1.80M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|   168k|    {
 1430|   168k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|   168k|    {
  437|   168k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   170k|    {
 1177|   170k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.71k|    {
 1476|  2.71k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  2.71k|    {
  447|  2.71k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  355|  22.4k|    {
  356|  22.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  22.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  22.4k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4273|  1.55M|    {
 4274|  1.55M|        return !(lhs == rhs);
 4275|  1.55M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4268|  1.55M|    {
 4269|  1.55M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 1.55M, False: 0]
  |  Branch (4269:46): [True: 255k, False: 1.30M]
  ------------------
 4270|  1.55M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4224|  3.63M|    {
 4225|  3.63M|        ++m_position;
 4226|  3.63M|        (void)read_at_position();
 4227|  3.63M|        return *this;
 4228|  3.63M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  346|  22.4k|    {
  347|  22.4k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  22.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  22.4k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.10k|    {
 1476|  1.10k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.10k|    {
  447|  1.10k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   137k|    {
 1177|   137k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|   136k|    {
 1430|   136k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|   136k|    {
  437|   136k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   137k|    {
 1598|   137k|        return has_value();
 1599|   137k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   275k|    {
  485|   275k|        return m_has_value;
  486|   275k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.10k|    {
 1604|  1.10k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.10k|        return this->get_unexpected().error();
 1606|  1.10k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.10k|    {
  468|  1.10k|        return m_unexpected;
  469|  1.10k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|   136k|    {
 1663|   136k|        return std::move(value());
 1664|   136k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|   136k|    {
 1627|   136k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   136k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   136k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   136k|        return this->get_value();
 1629|   136k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   136k|    {
  451|   136k|        return m_value;
  452|   136k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|  6.63M|    {
 3334|  6.63M|        return m_sentinel;
 3335|  6.63M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3329|   177k|    {
 3330|   177k|        return m_iterator;
 3331|   177k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3333|   177k|    {
 3334|   177k|        return m_sentinel;
 3335|   177k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   418k|    {
 1598|   418k|        return has_value();
 1599|   418k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   837k|    {
  485|   837k|        return m_has_value;
  486|   837k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  14.5k|    {
 1604|  14.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  14.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  14.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  14.5k|        return this->get_unexpected().error();
 1606|  14.5k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  14.5k|    {
  468|  14.5k|        return m_unexpected;
  469|  14.5k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|   335k|    {
 1663|   335k|        return std::move(value());
 1664|   335k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|   404k|    {
 1627|   404k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   404k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   404k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   404k|        return this->get_value();
 1629|   404k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   404k|    {
  451|   404k|        return m_value;
  452|   404k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   338k|{
  326|   338k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   338k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   338k|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|   169k|    {
 3316|   169k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|  2.20M|    {
 4291|  2.20M|        return !x.is_at_end();
 4292|  2.20M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  5.27k|    {
 1476|  5.27k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  5.27k|    {
  447|  5.27k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   334k|    {
 1177|   334k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|   329k|    {
 1430|   329k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|   329k|    {
  437|   329k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  2.10k|    {
 1476|  2.10k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  2.10k|    {
  447|  2.10k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   270k|    {
 1177|   270k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|   268k|    {
 1430|   268k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|   268k|    {
  437|   268k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   270k|    {
 1598|   270k|        return has_value();
 1599|   270k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   540k|    {
  485|   540k|        return m_has_value;
  486|   540k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  2.10k|    {
 1604|  2.10k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.10k|        return this->get_unexpected().error();
 1606|  2.10k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.10k|    {
  468|  2.10k|        return m_unexpected;
  469|  2.10k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|   268k|    {
 1663|   268k|        return std::move(value());
 1664|   268k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|   268k|    {
 1627|   268k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   268k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   268k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   268k|        return this->get_value();
 1629|   268k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   268k|    {
  451|   268k|        return m_value;
  452|   268k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   992k|    {
 2855|   992k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   992k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   992k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   992k|    {
 2836|   992k|        return t.data();
 2837|   992k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_LPv0ELS5_0EEEONS0_10unexpectedIT_EE:
 1475|   100k|    {
 1476|   100k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  446|   100k|    {
  447|   100k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  75.3M|    {
 1177|  75.3M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1429|  75.2M|    {
 1430|  75.2M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  436|  75.2M|    {
  437|  75.2M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  68.3k|    {
 1653|  68.3k|        return value();
 1654|  68.3k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|   133k|    {
 1653|   133k|        return value();
 1654|   133k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|    906|    {
 1430|    906|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|    906|    {
  437|    906|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|  1.81k|    {
 1430|  1.81k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|  1.81k|    {
  437|  1.81k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_LPv0ELS9_0EEEONS0_10unexpectedIT_EE:
 1475|  23.9k|    {
 1476|  23.9k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4279|   323M|    {
 4280|   323M|        return x.is_at_end();
 4281|   323M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4323|   617M|    {
 4324|   617M|        if (m_end) {
  ------------------
  |  Branch (4324:13): [True: 0, False: 617M]
  ------------------
 4325|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4326|      0|        }
 4327|   617M|        if (!m_begin) {
  ------------------
  |  Branch (4327:13): [True: 0, False: 617M]
  ------------------
 4328|      0|            return true;
 4329|      0|        }
 4330|   617M|        return !read_at_position();
 4331|   617M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4303|  1.56G|    {
 4304|  1.56G|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  1.56G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.56G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4305|       |
 4306|  1.56G|        if (!stores_parent()) {
  ------------------
  |  Branch (4306:13): [True: 0, False: 1.56G]
  ------------------
 4307|      0|            return true;
 4308|      0|        }
 4309|       |
 4310|  1.56G|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  1.56G|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.27G, False: 283M]
  |  |  ------------------
  ------------------
 4311|  1.27G|            return true;
 4312|  1.27G|        }
 4313|       |
 4314|   567M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4314:16): [True: 283M, False: 283M]
  ------------------
 4315|   283M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4315:17): [True: 32.3k, False: 283M]
  ------------------
 4316|  32.3k|                return false;
 4317|  32.3k|            }
 4318|   283M|        }
 4319|   283M|        return true;
 4320|   283M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4080|  2.13G|    {
 4081|  2.13G|        return m_putback_buffer.size() + m_current_view.size();
 4082|  2.13G|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4238|   567M|    {
 4239|   567M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   567M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   567M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4240|       |
 4241|   567M|        if (!stores_parent()) {
  ------------------
  |  Branch (4241:13): [True: 0, False: 567M]
  ------------------
 4242|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4243|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4244|      0|            return *ptr;
 4245|      0|        }
 4246|       |
 4247|   567M|        auto res = read_at_position();
 4248|   567M|        SCN_EXPECT(res);
  ------------------
  |  |  924|   567M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   567M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|   567M|        return parent()->get_character_at(m_position);
 4250|   567M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4111|   567M|    {
 4112|   567M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   567M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 309M, False: 258M]
  |  |  ------------------
  ------------------
 4113|   567M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4114|   309M|            return m_putback_buffer[pos];
 4115|   309M|        }
 4116|   258M|        const auto start = pos - m_putback_buffer.size();
 4117|   258M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|   258M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   258M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4118|   258M|        return m_current_view[start];
 4119|   258M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3806|  1.40G|{
 3807|  1.40G|    if constexpr (sizeof(U) == 1) {
  ------------------
  |  Branch (3807:19): [Folded - Ignored]
  ------------------
 3808|  1.40G|        return utf8_code_point_length_by_starting_code_unit(ch);
 3809|  1.40G|    }
 3810|  1.40G|    else if constexpr (sizeof(U) == 2) {
  ------------------
  |  Branch (3810:24): [Folded - Ignored]
  ------------------
 3811|  1.40G|        return utf16_code_point_length_by_starting_code_unit(ch);
 3812|  1.40G|    }
 3813|  1.40G|    else {
 3814|       |        // utf-32
 3815|  1.40G|        static_assert(sizeof(U) == 4);
 3816|  1.40G|        SCN_UNUSED(ch);
  ------------------
  |  |  909|  1.40G|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3817|  1.40G|        return 1;
 3818|  1.40G|    }
 3819|  1.40G|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1429|  24.9M|    {
 1430|  24.9M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  436|  24.9M|    {
  437|  24.9M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  24.9M|    {
 1177|  24.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  4.81k|    {
 1476|  4.81k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  446|  4.81k|    {
  447|  4.81k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4273|   104M|    {
 4274|   104M|        return !(lhs == rhs);
 4275|   104M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4268|   104M|    {
 4269|   104M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4269:16): [True: 104M, False: 0]
  |  Branch (4269:46): [True: 9.98M, False: 94.0M]
  ------------------
 4270|   104M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4224|   377M|    {
 4225|   377M|        ++m_position;
 4226|   377M|        (void)read_at_position();
 4227|   377M|        return *this;
 4228|   377M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4012|  1.40G|{
 4013|  1.40G|    if constexpr (sizeof(CharT) == 1) {
  ------------------
  |  Branch (4013:19): [Folded - Ignored]
  ------------------
 4014|  1.40G|        return decode_utf8_code_point_exhaustive(input);
 4015|  1.40G|    }
 4016|  1.40G|    else if constexpr (sizeof(CharT) == 2) {
  ------------------
  |  Branch (4016:24): [Folded - Ignored]
  ------------------
 4017|  1.40G|        return decode_utf16_code_point_exhaustive(input);
 4018|  1.40G|    }
 4019|  1.40G|    else {
 4020|  1.40G|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|  1.40G|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.40G|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4021|  1.40G|        auto cp = static_cast<char32_t>(input.front());
 4022|  1.40G|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  1.40G|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.24M, False: 1.40G]
  |  |  ------------------
  ------------------
 4023|  1.24M|            return invalid_code_point;
 4024|  1.24M|        }
 4025|  1.40G|        return cp;
 4026|  1.40G|    }
 4027|  1.40G|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_LPv0ELSC_0EEEONS0_10unexpectedIT_EE:
 1475|  1.92k|    {
 1476|  1.92k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  446|  1.92k|    {
  447|  1.92k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  19.9M|    {
 1177|  19.9M|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1429|  19.9M|    {
 1430|  19.9M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  436|  19.9M|    {
  437|  19.9M|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|  19.9M|    {
 1598|  19.9M|        return has_value();
 1599|  19.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  39.9M|    {
  485|  39.9M|        return m_has_value;
  486|  39.9M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.92k|    {
 1604|  1.92k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.92k|        return this->get_unexpected().error();
 1606|  1.92k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.92k|    {
  468|  1.92k|        return m_unexpected;
  469|  1.92k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_LPv0EEEOT_v:
 1662|  19.9M|    {
 1663|  19.9M|        return std::move(value());
 1664|  19.9M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_LPv0EEERT_v:
 1626|  19.9M|    {
 1627|  19.9M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  19.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  19.9M|        return this->get_value();
 1629|  19.9M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|  19.9M|    {
  451|  19.9M|        return m_value;
  452|  19.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3333|   985M|    {
 3334|   985M|        return m_sentinel;
 3335|   985M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3329|  24.9M|    {
 3330|  24.9M|        return m_iterator;
 3331|  24.9M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3333|  24.9M|    {
 3334|  24.9M|        return m_sentinel;
 3335|  24.9M|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  59.8M|    {
 1598|  59.8M|        return has_value();
 1599|  59.8M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   119M|    {
  485|   119M|        return m_has_value;
  486|   119M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  28.7k|    {
 1604|  28.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  28.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  28.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  28.7k|        return this->get_unexpected().error();
 1606|  28.7k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  28.7k|    {
  468|  28.7k|        return m_unexpected;
  469|  28.7k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEEOT_v:
 1662|  49.8M|    {
 1663|  49.8M|        return std::move(value());
 1664|  49.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_LPv0EEERT_v:
 1626|  59.8M|    {
 1627|  59.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  59.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  59.8M|        return this->get_value();
 1629|  59.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  59.8M|    {
  451|  59.8M|        return m_value;
  452|  59.8M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3698|   557M|{
 3699|   557M|    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
  ------------------
  |  Branch (3699:19): [Folded - Ignored]
  |  Branch (3699:19): [Folded - Ignored]
  ------------------
 3700|   557M|                                          decltype(first), decltype(last)> &&
 3701|   557M|                  !SCN_MSVC_DEBUG_ITERATORS) {
  ------------------
  |  |  403|      0|#define SCN_MSVC_DEBUG_ITERATORS 0
  ------------------
  |  Branch (3701:19): [Folded - Ignored]
  ------------------
 3702|   557M|        return {first, last};
 3703|   557M|    }
 3704|   557M|    else {
 3705|   557M|        return {to_address(first), static_cast<size_t>(std::distance(
 3706|   557M|                                       to_address(first), to_address(last)))};
 3707|   557M|    }
 3708|   557M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.67G|{
  326|  1.67G|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.67G|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.67G|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  1.72G|{
  304|  1.72G|    return p;
  305|  1.72G|}
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  49.8M|{
  326|  49.8M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  49.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  49.8M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_LPv0EEET_S8_:
 3315|  24.9M|    {
 3316|  24.9M|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4290|   293M|    {
 4291|   293M|        return !x.is_at_end();
 4292|   293M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_LPv0ELS8_0EEEONS0_10unexpectedIT_EE:
 1475|  9.62k|    {
 1476|  9.62k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  446|  9.62k|    {
  447|  9.62k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  49.8M|    {
 1177|  49.8M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1429|  49.8M|    {
 1430|  49.8M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  436|  49.8M|    {
  437|  49.8M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  99.7M|    {
  485|  99.7M|        return m_has_value;
  486|  99.7M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_LPv0EEERT_v:
 1626|  49.8M|    {
 1627|  49.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  49.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  49.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  49.8M|        return this->get_value();
 1629|  49.8M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  49.8M|    {
  451|  49.8M|        return m_value;
  452|  49.8M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_LPv0ELSA_0EEEONS0_10unexpectedIT_EE:
 1475|  3.84k|    {
 1476|  3.84k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  446|  3.84k|    {
  447|  3.84k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  39.9M|    {
 1177|  39.9M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1429|  39.8M|    {
 1430|  39.8M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  436|  39.8M|    {
  437|  39.8M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  49.8M|    {
 1837|  49.8M|        return detail::transform_error_impl(std::move(*this),
 1838|  49.8M|                                            std::forward<F>(f));
 1839|  49.8M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ELPv0ES9_EEDaOT_OT0_:
 1322|  49.8M|{
 1323|  49.8M|    if constexpr (std::is_void_v<Ret>) {
  ------------------
  |  Branch (1323:19): [Folded - Ignored]
  ------------------
 1324|  49.8M|        using result = expected<expected_value_type<Exp>, monostate>;
 1325|  49.8M|        if (SCN_LIKELY(exp.has_value())) {
 1326|  49.8M|            return result(*std::forward<Exp>(exp));
 1327|  49.8M|        }
 1328|       |
 1329|  49.8M|        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|  49.8M|        return result(unexpect, monostate{});
 1331|  49.8M|    }
 1332|  49.8M|    else {
 1333|  49.8M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  49.8M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  49.8M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 49.8M, False: 9.62k]
  |  |  ------------------
  ------------------
 1335|  49.8M|                   ? result(*std::forward<Exp>(exp))
 1336|  49.8M|                   : result(unexpect,
 1337|  9.62k|                            trivial_invoke(std::forward<F>(f),
 1338|  9.62k|                                           std::forward<Exp>(exp).error()));
 1339|  49.8M|    }
 1340|  49.8M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_LPv0EEEOT_v:
 1662|  49.8M|    {
 1663|  49.8M|        return std::move(value());
 1664|  49.8M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  9.62k|    {
 1614|  9.62k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  9.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  9.62k|        return std::move(this->get_unexpected().error());
 1616|  9.62k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  9.62k|    {
  468|  9.62k|        return m_unexpected;
  469|  9.62k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1485|  9.62k|    {
 1486|  9.62k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  39.9M|    {
 1598|  39.9M|        return has_value();
 1599|  39.9M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  79.8M|    {
  485|  79.8M|        return m_has_value;
  486|  79.8M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  3.84k|    {
 1604|  3.84k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.84k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.84k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  3.84k|        return this->get_unexpected().error();
 1606|  3.84k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  3.84k|    {
  468|  3.84k|        return m_unexpected;
  469|  3.84k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_LPv0EEEOT_v:
 1662|  39.8M|    {
 1663|  39.8M|        return std::move(value());
 1664|  39.8M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_LPv0EEERT_v:
 1626|  39.8M|    {
 1627|  39.8M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  39.8M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  39.8M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  39.8M|        return this->get_value();
 1629|  39.8M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  39.8M|    {
  451|  39.8M|        return m_value;
  452|  39.8M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  49.8M|    {
 2855|  49.8M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  49.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  49.8M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  49.8M|    {
 2836|  49.8M|        return t.data();
 2837|  49.8M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_LPv0EEERT_v:
 1652|  9.97M|    {
 1653|  9.97M|        return value();
 1654|  9.97M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_LPv0EEERT_v:
 1652|  19.9M|    {
 1653|  19.9M|        return value();
 1654|  19.9M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1429|     42|    {
 1430|     42|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  436|     42|    {
  437|     42|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1429|     84|    {
 1430|     84|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  436|     84|    {
  437|     84|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5465|   427k|    {
 5466|   427k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 427k]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|   427k|        return static_cast<std::size_t>(m_desc &
 5471|   427k|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|   427k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5490|   855k|    {
 5491|   855k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   855k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5433|   427k|    {
 5434|   427k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 427k]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|   427k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 427k]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|   427k|        const auto t = type(id);
 5446|   427k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   427k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 427k]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|   427k|        basic_scan_arg<Context> arg;
 5451|   427k|        arg.m_type = t;
 5452|   427k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 427k, False: 0]
  ------------------
 5453|   427k|            arg.m_value.ref_value = m_builtin_values[id];
 5454|   427k|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|   427k|        return arg;
 5459|   427k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5499|   427k|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|   427k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|   427k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|   427k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|   427k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5494|   427k|    {
 5495|   427k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|   427k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5246|   743k|    {
 5247|   743k|        return m_type != detail::arg_type::none_type;
 5248|   743k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   200k|{
 8417|   200k|#define SCN_VISIT(Type)                                         \
 8418|   200k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   200k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   200k|    }                                                           \
 8421|   200k|    else {                                                      \
 8422|   200k|        return vis(monostate_val);                              \
 8423|   200k|    }
 8424|       |
 8425|   200k|    monostate monostate_val{};
 8426|       |
 8427|   200k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 200k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 200k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 200k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 200k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 200k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 200k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 200k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 200k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 200k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 200k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 200k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 200k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 200k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 200k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 200k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 200k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 200k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 200k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|   100k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 100k, False: 100k]
  ------------------
 8465|   100k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|   100k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   100k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   100k|    }                                                           \
  |  | 8421|   100k|    else {                                                      \
  |  | 8422|   100k|        return vis(monostate_val);                              \
  |  | 8423|   100k|    }
  ------------------
 8466|   100k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 100k, False: 100k]
  ------------------
 8467|   100k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   100k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   100k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   100k|    }                                                           \
  |  | 8421|   100k|    else {                                                      \
  |  | 8422|   100k|        return vis(monostate_val);                              \
  |  | 8423|   100k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 200k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 200k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 200k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 200k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 200k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 200k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 200k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   200k|            SCN_CLANG_POP
 8495|   200k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5544|   225k|    {
 5545|   225k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  76.0k|    {
 8138|  76.0k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8055|   225k|    {
 8056|   225k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4343|   178k|{
 4344|   178k|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 178k]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|   178k|    return ranges::subrange{forward_iterator{this, 0},
 4349|   178k|                            ranges::default_sentinel};
 4350|   178k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4176|   178k|    {
 4177|   178k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|   178k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   178k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   178k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|   178k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   102k|{
 8417|   102k|#define SCN_VISIT(Type)                                         \
 8418|   102k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   102k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   102k|    }                                                           \
 8421|   102k|    else {                                                      \
 8422|   102k|        return vis(monostate_val);                              \
 8423|   102k|    }
 8424|       |
 8425|   102k|    monostate monostate_val{};
 8426|       |
 8427|   102k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 102k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 102k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 102k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 102k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 102k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 102k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 102k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 102k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 102k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 102k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 102k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 102k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 102k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 102k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 102k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 102k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 102k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 102k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 102k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|   102k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 102k, False: 0]
  ------------------
 8467|   102k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|   102k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|   102k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|   102k|    }                                                           \
  |  | 8421|   102k|    else {                                                      \
  |  | 8422|   102k|        return vis(monostate_val);                              \
  |  | 8423|   102k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 102k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 102k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 102k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 102k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 102k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 102k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 102k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   102k|            SCN_CLANG_POP
 8495|   102k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|   149k|{
 7044|   149k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|   149k|    handler.check_args_exhausted();
 7046|   149k|    return handler.get_error();
 7047|   149k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|   149k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|   149k|    auto begin = format.data();
 7013|   149k|    auto it = begin;
 7014|   149k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   281k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 149k, False: 132k]
  ------------------
 7017|   149k|        const auto ch = *it++;
 7018|   149k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 149k, False: 0]
  ------------------
 7019|   149k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|   149k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|   149k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 17.2k, False: 132k]
  ------------------
 7023|  17.2k|                return;
 7024|  17.2k|            }
 7025|   149k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|   149k|    }
 7036|       |
 7037|   132k|    handler.on_literal_text(begin, end);
 7038|   132k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6941|   149k|{
 6942|   149k|    struct id_adapter {
 6943|   149k|        constexpr void operator()()
 6944|   149k|        {
 6945|   149k|            arg_id = handler.on_arg_id();
 6946|   149k|        }
 6947|   149k|        constexpr void operator()(std::size_t id)
 6948|   149k|        {
 6949|   149k|            arg_id = handler.on_arg_id(id);
 6950|   149k|        }
 6951|       |
 6952|   149k|        constexpr void on_error(const char* msg)
 6953|   149k|        {
 6954|   149k|            SCN_UNLIKELY_ATTR
 6955|   149k|            handler.on_error(msg);
 6956|   149k|        }
 6957|       |
 6958|   149k|        Handler& handler;
 6959|   149k|        std::size_t arg_id;
 6960|   149k|    };
 6961|       |
 6962|   149k|    ++begin;
 6963|   149k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|   149k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 149k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|   149k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 149k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|   149k|    else {
 6975|   149k|        auto adapter = id_adapter{handler, 0};
 6976|   149k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|   149k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|   149k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 149k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|   149k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 149k, False: 0]
  ------------------
 6987|   149k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|   149k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|   149k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   298k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.88k, False: 142k]
  |  |  |  Branch (859:45): [True: 0, False: 149k]
  |  |  |  Branch (859:45): [True: 6.88k, False: 142k]
  |  |  ------------------
  ------------------
 6993|  6.88k|                handler.on_error("Unknown format specifier");
 6994|  6.88k|                return begin;
 6995|  6.88k|            }
 6996|   149k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|   149k|    }
 7003|   142k|    return begin + 1;
 7004|   149k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8038|   225k|    {
 8039|   225k|        return m_args.get(id);
 8040|   225k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8048|   214k|    {
 8049|   214k|        return m_locale;
 8050|   214k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5565|   225k|    {
 5566|   225k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   225k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 225k]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|   225k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|   225k|        do_check_arg_id(id);
 5574|   225k|        return id;
 5575|   225k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6053|   225k|{
 6054|   225k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|   225k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|   225k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|   149k|{
 6443|   149k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|   149k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 149k, False: 0]
  |  Branch (6444:26): [True: 0, False: 149k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|   149k|    handler();
 6449|   149k|    return begin;
 6450|   149k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6391|  10.3k|{
 6392|  10.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  10.3k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  10.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  10.3k|    unsigned long long value = 0;
 6396|  20.6k|    do {
 6397|  20.6k|        value *= 10;
 6398|  20.6k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  20.6k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 20.6k]
  ------------------
 6400|  20.6k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  20.6k|        ++begin;
 6404|  20.6k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 20.6k, False: 0]
  |  Branch (6404:30): [True: 20.6k, False: 0]
  |  Branch (6404:47): [True: 10.3k, False: 10.3k]
  ------------------
 6405|  10.3k|    return static_cast<int>(value);
 6406|  10.3k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|   149k|        {
 6945|   149k|            arg_id = handler.on_arg_id();
 6946|   149k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5251|   450k|    {
 5252|   450k|        return m_type;
 5253|   450k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5560|   214k|    {
 5561|   214k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|   214k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5549|   440k|    {
 5550|   440k|        return m_format.data();
 5551|   440k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|   149k|    {
 7122|   149k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|   149k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6857|   149k|{
 6858|   149k|    auto do_presentation = [&]() -> const CharT* {
 6859|   149k|        if (*begin == CharT{'['}) {
 6860|   149k|            auto set = parse_presentation_set(begin, end, handler);
 6861|   149k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|   149k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|   149k|                return begin;
 6866|   149k|            }
 6867|   149k|            handler.on_character_set_string(set);
 6868|   149k|            return begin;
 6869|   149k|        }
 6870|   149k|        if (*begin == CharT{'/'}) {
 6871|   149k|            return parse_presentation_regex(begin, end, handler);
 6872|   149k|        }
 6873|   149k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   149k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|   149k|            handler.on_error("Invalid type specifier in format string");
 6876|   149k|            return begin;
 6877|   149k|        }
 6878|   149k|        handler.on_type(type);
 6879|   149k|        return begin;
 6880|   149k|    };
 6881|       |
 6882|   149k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 149k, False: 0]
  |  Branch (6882:28): [True: 137k, False: 12.1k]
  ------------------
 6883|   149k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 137k, False: 0]
  |  Branch (6883:36): [True: 133k, False: 3.44k]
  ------------------
 6884|   133k|        return do_presentation();
 6885|   133k|    }
 6886|       |
 6887|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  15.5k|    begin = parse_align(begin, end, handler);
 6893|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  15.5k|    begin = parse_width(begin, end, handler);
 6899|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  15.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 15.5k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  15.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 3.44k, False: 12.1k]
  ------------------
 6918|  3.44k|        handler.on_localized();
 6919|  3.44k|        ++begin;
 6920|  3.44k|    }
 6921|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  15.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 15.5k, False: 0]
  |  Branch (6926:25): [True: 12.1k, False: 3.44k]
  ------------------
 6927|  12.1k|        do_presentation();
 6928|  12.1k|    }
 6929|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  15.5k|    return begin;
 6935|  15.5k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6506|   207k|{
 6507|   207k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 201k, False: 5.16k]
  |  Branch (6507:33): [True: 201k, False: 0]
  ------------------
 6508|   207k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 5.16k, False: 0]
  |  Branch (6508:33): [True: 5.16k, False: 0]
  ------------------
 6509|   207k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|   145k|    auto do_presentation = [&]() -> const CharT* {
 6859|   145k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 5.25k, False: 140k]
  ------------------
 6860|  5.25k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  5.25k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.25k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  5.25k|            handler.on_character_set_string(set);
 6868|  5.25k|            return begin;
 6869|  5.25k|        }
 6870|   140k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 140k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|   140k|        presentation_type type = parse_presentation_type(*begin++);
 6874|   140k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 137k]
  |  |  ------------------
  ------------------
 6875|  3.44k|            handler.on_error("Invalid type specifier in format string");
 6876|  3.44k|            return begin;
 6877|  3.44k|        }
 6878|   137k|        handler.on_type(type);
 6879|   137k|        return begin;
 6880|   140k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  5.25k|{
 6697|  5.25k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  5.25k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  5.25k|    auto start = begin;
 6701|  5.25k|    ++begin;
 6702|       |
 6703|  5.25k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.25k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  5.25k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 5.25k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  5.25k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 5.25k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  15.7k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 15.7k, False: 0]
  ------------------
 6728|  15.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  15.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.7k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  15.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 5.25k, False: 10.5k]
  ------------------
 6733|  5.25k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  5.25k|        }
 6735|       |
 6736|  10.5k|        parse_presentation_set_literal(begin, end, handler);
 6737|  10.5k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  5.25k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6660|  10.5k|{
 6661|  10.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  10.5k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  10.5k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.5k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  10.5k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 10.5k, False: 0]
  |  Branch (6668:25): [True: 10.5k, False: 0]
  |  Branch (6668:49): [True: 10.5k, False: 0]
  ------------------
 6669|  10.5k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 10.5k, False: 0]
  ------------------
 6670|  10.5k|        ++begin;
 6671|       |
 6672|  10.5k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  10.5k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.5k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  10.5k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.5k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  10.5k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  10.5k|        return;
 6686|  10.5k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6636|  21.0k|{
 6637|  21.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  21.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  21.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  21.0k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  21.0k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.0k]
  |  |  |  Branch (859:45): [True: 0, False: 21.0k]
  |  |  |  Branch (859:45): [True: 0, False: 21.0k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  21.0k|    const auto cp =
 6646|  21.0k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  21.0k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 21.0k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  21.0k|    begin += len;
 6653|  21.0k|    return cp;
 6654|  21.0k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  7.88k|    {
 6346|  7.88k|        m_specs.charset_string_data = fmt.data();
 6347|  7.88k|        m_specs.charset_string_size = fmt.size();
 6348|  7.88k|        on_type(presentation_type::string_set);
 6349|  7.88k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6454|   212k|{
 6455|   212k|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 212k]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 212k]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 212k]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 212k]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 212k]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 212k]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 212k]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 212k]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 212k]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 212k]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 212k]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 212k]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 212k]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 212k]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 212k]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 212k]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 212k]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 212k]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|   201k|        case 's':
  ------------------
  |  Branch (6485:9): [True: 201k, False: 10.3k]
  ------------------
 6486|   201k|            return presentation_type::string;
 6487|  5.16k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 5.16k, False: 207k]
  ------------------
 6488|  5.16k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 212k]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 212k]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 212k]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 212k]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  5.16k|        default:
  ------------------
  |  Branch (6499:9): [True: 5.16k, False: 207k]
  ------------------
 6500|  5.16k|            return presentation_type::none;
 6501|   212k|    }
 6502|   212k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6531|  15.5k|{
 6532|  15.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  15.5k|    auto check_align = [](wchar_t ch) {
 6535|  15.5k|        switch (ch) {
 6536|  15.5k|            case L'<':
 6537|  15.5k|                return align_type::left;
 6538|  15.5k|            case L'>':
 6539|  15.5k|                return align_type::right;
 6540|  15.5k|            case L'^':
 6541|  15.5k|                return align_type::center;
 6542|  15.5k|            default:
 6543|  15.5k|                return align_type::none;
 6544|  15.5k|        }
 6545|  15.5k|    };
 6546|       |
 6547|  15.5k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  15.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  31.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  |  Branch (859:45): [True: 0, False: 15.5k]
  |  |  |  Branch (859:45): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 6549|  15.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  15.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  15.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  15.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  15.5k|    const auto begin_before_fill = begin;
 6559|  15.5k|    begin += potential_fill_len;
 6560|       |
 6561|  15.5k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 15.5k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  15.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  15.5k|    const auto begin_after_fill = begin;
 6567|  15.5k|    ++begin;
 6568|       |
 6569|  15.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 15.5k, False: 0]
  ------------------
 6570|  15.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  15.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 5.25k, False: 10.3k]
  ------------------
 6575|  5.25k|            return begin_before_fill;
 6576|  5.25k|        }
 6577|  15.5k|    }
 6578|       |
 6579|  10.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 10.3k, False: 0]
  ------------------
 6580|  10.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 10.3k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  10.3k|        return begin_before_fill;
 6585|  10.3k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  10.3k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6513|  23.3k|{
 6514|  23.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  23.3k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  23.3k|        return 1;
 6517|  23.3k|    }
 6518|  23.3k|    else {
 6519|  23.3k|        const auto lengths =
 6520|  23.3k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  23.3k|            "\3\4";
 6522|  23.3k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  23.3k|        return len;
 6524|  23.3k|    }
 6525|  23.3k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  31.1k|    auto check_align = [](wchar_t ch) {
 6535|  31.1k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 31.1k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 31.1k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 31.1k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  31.1k|            default:
  ------------------
  |  Branch (6542:13): [True: 31.1k, False: 0]
  ------------------
 6543|  31.1k|                return align_type::none;
 6544|  31.1k|        }
 6545|  31.1k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6596|  15.5k|{
 6597|  15.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  15.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 15.5k, False: 0]
  |  Branch (6599:33): [True: 6.88k, False: 8.70k]
  ------------------
 6600|  6.88k|        int width = parse_simple_int(begin, end);
 6601|  6.88k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  6.88k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.88k, False: 0]
  |  |  ------------------
  ------------------
 6602|  6.88k|            handler.on_width(width);
 6603|  6.88k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  6.88k|    }
 6609|  15.5k|    return begin;
 6610|  15.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7126|  3.44k|    {
 7127|  3.44k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  3.44k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 3.44k, False: 0]
  ------------------
 7129|  3.44k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 3.44k, False: 0]
  ------------------
 7130|  3.44k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 3.44k, False: 0]
  ------------------
 7131|  3.44k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 3.44k, False: 0]
  ------------------
 7132|  3.44k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  3.44k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  3.44k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|   142k|{
 8417|   142k|#define SCN_VISIT(Type)                                         \
 8418|   142k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|   142k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|   142k|    }                                                           \
 8421|   142k|    else {                                                      \
 8422|   142k|        return vis(monostate_val);                              \
 8423|   142k|    }
 8424|       |
 8425|   142k|    monostate monostate_val{};
 8426|       |
 8427|   142k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 142k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 142k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 142k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 142k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 142k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 142k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 142k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 142k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 142k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 142k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 142k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 142k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 142k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 142k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 142k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 142k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 142k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 142k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|  71.2k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 71.2k, False: 71.2k]
  ------------------
 8465|  71.2k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|  71.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  71.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  71.2k|    }                                                           \
  |  | 8421|  71.2k|    else {                                                      \
  |  | 8422|  71.2k|        return vis(monostate_val);                              \
  |  | 8423|  71.2k|    }
  ------------------
 8466|  71.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 71.2k, False: 71.2k]
  ------------------
 8467|  71.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  71.2k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  71.2k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  71.2k|    }                                                           \
  |  | 8421|  71.2k|    else {                                                      \
  |  | 8422|  71.2k|        return vis(monostate_val);                              \
  |  | 8423|  71.2k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 142k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 142k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 142k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 142k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 142k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 142k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 142k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|   142k|            SCN_CLANG_POP
 8495|   142k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  76.0k|{
 7044|  76.0k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  76.0k|    handler.check_args_exhausted();
 7046|  76.0k|    return handler.get_error();
 7047|  76.0k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  76.0k|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  76.0k|    auto begin = format.data();
 7013|  76.0k|    auto it = begin;
 7014|  76.0k|    const auto end = format.data() + format.size();
 7015|       |
 7016|   143k|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 76.0k, False: 67.4k]
  ------------------
 7017|  76.0k|        const auto ch = *it++;
 7018|  76.0k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 76.0k, False: 0]
  ------------------
 7019|  76.0k|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  76.0k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  76.0k|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 8.61k, False: 67.4k]
  ------------------
 7023|  8.61k|                return;
 7024|  8.61k|            }
 7025|  76.0k|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  76.0k|    }
 7036|       |
 7037|  67.4k|    handler.on_literal_text(begin, end);
 7038|  67.4k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8174|  67.4k|    {
 8175|  67.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  67.4k|    static_cast<    \
  |  |  929|  67.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  67.4k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6941|  76.0k|{
 6942|  76.0k|    struct id_adapter {
 6943|  76.0k|        constexpr void operator()()
 6944|  76.0k|        {
 6945|  76.0k|            arg_id = handler.on_arg_id();
 6946|  76.0k|        }
 6947|  76.0k|        constexpr void operator()(std::size_t id)
 6948|  76.0k|        {
 6949|  76.0k|            arg_id = handler.on_arg_id(id);
 6950|  76.0k|        }
 6951|       |
 6952|  76.0k|        constexpr void on_error(const char* msg)
 6953|  76.0k|        {
 6954|  76.0k|            SCN_UNLIKELY_ATTR
 6955|  76.0k|            handler.on_error(msg);
 6956|  76.0k|        }
 6957|       |
 6958|  76.0k|        Handler& handler;
 6959|  76.0k|        std::size_t arg_id;
 6960|  76.0k|    };
 6961|       |
 6962|  76.0k|    ++begin;
 6963|  76.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  76.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 76.0k]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  76.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 76.0k]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  76.0k|    else {
 6975|  76.0k|        auto adapter = id_adapter{handler, 0};
 6976|  76.0k|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  76.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  76.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 76.0k]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  76.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 76.0k, False: 0]
  ------------------
 6987|  76.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  76.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  76.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 72.5k]
  |  |  |  Branch (859:45): [True: 0, False: 76.0k]
  |  |  |  Branch (859:45): [True: 3.44k, False: 72.5k]
  |  |  ------------------
  ------------------
 6993|  3.44k|                handler.on_error("Unknown format specifier");
 6994|  3.44k|                return begin;
 6995|  3.44k|            }
 6996|  76.0k|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  76.0k|    }
 7003|  72.5k|    return begin + 1;
 7004|  76.0k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  76.0k|{
 6443|  76.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  76.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  76.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 76.0k, False: 0]
  |  Branch (6444:26): [True: 0, False: 76.0k]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  76.0k|    handler();
 6449|  76.0k|    return begin;
 6450|  76.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  76.0k|        {
 6945|  76.0k|            arg_id = handler.on_arg_id();
 6946|  76.0k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  76.0k|    {
 7122|  76.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  76.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  76.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  76.0k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6857|  76.0k|{
 6858|  76.0k|    auto do_presentation = [&]() -> const CharT* {
 6859|  76.0k|        if (*begin == CharT{'['}) {
 6860|  76.0k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  76.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  76.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  76.0k|                return begin;
 6866|  76.0k|            }
 6867|  76.0k|            handler.on_character_set_string(set);
 6868|  76.0k|            return begin;
 6869|  76.0k|        }
 6870|  76.0k|        if (*begin == CharT{'/'}) {
 6871|  76.0k|            return parse_presentation_regex(begin, end, handler);
 6872|  76.0k|        }
 6873|  76.0k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  76.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  76.0k|            handler.on_error("Invalid type specifier in format string");
 6876|  76.0k|            return begin;
 6877|  76.0k|        }
 6878|  76.0k|        handler.on_type(type);
 6879|  76.0k|        return begin;
 6880|  76.0k|    };
 6881|       |
 6882|  76.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 76.0k, False: 0]
  |  Branch (6882:28): [True: 69.9k, False: 6.07k]
  ------------------
 6883|  76.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 69.9k, False: 0]
  |  Branch (6883:36): [True: 68.2k, False: 1.72k]
  ------------------
 6884|  68.2k|        return do_presentation();
 6885|  68.2k|    }
 6886|       |
 6887|  7.79k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.79k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  7.79k|    begin = parse_align(begin, end, handler);
 6893|  7.79k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.79k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  7.79k|    begin = parse_width(begin, end, handler);
 6899|  7.79k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.79k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  7.79k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 7.79k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  7.79k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 1.72k, False: 6.07k]
  ------------------
 6918|  1.72k|        handler.on_localized();
 6919|  1.72k|        ++begin;
 6920|  1.72k|    }
 6921|  7.79k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.79k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  7.79k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 7.79k, False: 0]
  |  Branch (6926:25): [True: 6.07k, False: 1.72k]
  ------------------
 6927|  6.07k|        do_presentation();
 6928|  6.07k|    }
 6929|  7.79k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  7.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.79k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  7.79k|    return begin;
 6935|  7.79k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  74.2k|    auto do_presentation = [&]() -> const CharT* {
 6859|  74.2k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 2.62k, False: 71.6k]
  ------------------
 6860|  2.62k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  2.62k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.62k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  2.62k|            handler.on_character_set_string(set);
 6868|  2.62k|            return begin;
 6869|  2.62k|        }
 6870|  71.6k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 71.6k]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  71.6k|        presentation_type type = parse_presentation_type(*begin++);
 6874|  71.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  71.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 69.9k]
  |  |  ------------------
  ------------------
 6875|  1.72k|            handler.on_error("Invalid type specifier in format string");
 6876|  1.72k|            return begin;
 6877|  1.72k|        }
 6878|  69.9k|        handler.on_type(type);
 6879|  69.9k|        return begin;
 6880|  71.6k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  2.62k|{
 6697|  2.62k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  2.62k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.62k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.62k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  2.62k|    auto start = begin;
 6701|  2.62k|    ++begin;
 6702|       |
 6703|  2.62k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.62k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  2.62k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 2.62k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  2.62k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 2.62k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  7.88k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 7.88k, False: 0]
  ------------------
 6728|  7.88k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  7.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.88k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  7.88k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 2.62k, False: 5.25k]
  ------------------
 6733|  2.62k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  2.62k|        }
 6735|       |
 6736|  5.25k|        parse_presentation_set_literal(begin, end, handler);
 6737|  5.25k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  2.62k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6660|  5.25k|{
 6661|  5.25k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  5.25k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  5.25k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.25k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  5.25k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 5.25k, False: 0]
  |  Branch (6668:25): [True: 5.25k, False: 0]
  |  Branch (6668:49): [True: 5.25k, False: 0]
  ------------------
 6669|  5.25k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 5.25k, False: 0]
  ------------------
 6670|  5.25k|        ++begin;
 6671|       |
 6672|  5.25k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  5.25k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.25k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  5.25k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.25k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  5.25k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  5.25k|        return;
 6686|  5.25k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6636|  10.5k|{
 6637|  10.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  10.5k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  10.5k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  21.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.5k]
  |  |  |  Branch (859:45): [True: 0, False: 10.5k]
  |  |  |  Branch (859:45): [True: 0, False: 10.5k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  10.5k|    const auto cp =
 6646|  10.5k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  10.5k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  10.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.5k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  10.5k|    begin += len;
 6653|  10.5k|    return cp;
 6654|  10.5k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6531|  7.79k|{
 6532|  7.79k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  7.79k|    auto check_align = [](wchar_t ch) {
 6535|  7.79k|        switch (ch) {
 6536|  7.79k|            case L'<':
 6537|  7.79k|                return align_type::left;
 6538|  7.79k|            case L'>':
 6539|  7.79k|                return align_type::right;
 6540|  7.79k|            case L'^':
 6541|  7.79k|                return align_type::center;
 6542|  7.79k|            default:
 6543|  7.79k|                return align_type::none;
 6544|  7.79k|        }
 6545|  7.79k|    };
 6546|       |
 6547|  7.79k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  7.79k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.79k]
  |  |  |  Branch (859:45): [True: 0, False: 7.79k]
  |  |  |  Branch (859:45): [True: 0, False: 7.79k]
  |  |  ------------------
  ------------------
 6549|  7.79k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  7.79k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  7.79k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  7.79k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  7.79k|    const auto begin_before_fill = begin;
 6559|  7.79k|    begin += potential_fill_len;
 6560|       |
 6561|  7.79k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 7.79k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  7.79k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  7.79k|    const auto begin_after_fill = begin;
 6567|  7.79k|    ++begin;
 6568|       |
 6569|  7.79k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 7.79k, False: 0]
  ------------------
 6570|  7.79k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  7.79k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 7.79k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  7.79k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 2.62k, False: 5.16k]
  ------------------
 6575|  2.62k|            return begin_before_fill;
 6576|  2.62k|        }
 6577|  7.79k|    }
 6578|       |
 6579|  5.16k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 5.16k, False: 0]
  ------------------
 6580|  5.16k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 5.16k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  5.16k|        return begin_before_fill;
 6585|  5.16k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  5.16k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  15.5k|    auto check_align = [](wchar_t ch) {
 6535|  15.5k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 15.5k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 15.5k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 15.5k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  15.5k|            default:
  ------------------
  |  Branch (6542:13): [True: 15.5k, False: 0]
  ------------------
 6543|  15.5k|                return align_type::none;
 6544|  15.5k|        }
 6545|  15.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6596|  7.79k|{
 6597|  7.79k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  7.79k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.79k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  7.79k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 7.79k, False: 0]
  |  Branch (6599:33): [True: 3.44k, False: 4.35k]
  ------------------
 6600|  3.44k|        int width = parse_simple_int(begin, end);
 6601|  3.44k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  3.44k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 3.44k, False: 0]
  |  |  ------------------
  ------------------
 6602|  3.44k|            handler.on_width(width);
 6603|  3.44k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  3.44k|    }
 6609|  7.79k|    return begin;
 6610|  7.79k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7126|  1.72k|    {
 7127|  1.72k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  1.72k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 1.72k, False: 0]
  ------------------
 7129|  1.72k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 1.72k, False: 0]
  ------------------
 7130|  1.72k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 1.72k, False: 0]
  ------------------
 7131|  1.72k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 1.72k, False: 0]
  ------------------
 7132|  1.72k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  1.72k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  1.72k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  72.5k|{
 8417|  72.5k|#define SCN_VISIT(Type)                                         \
 8418|  72.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  72.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  72.5k|    }                                                           \
 8421|  72.5k|    else {                                                      \
 8422|  72.5k|        return vis(monostate_val);                              \
 8423|  72.5k|    }
 8424|       |
 8425|  72.5k|    monostate monostate_val{};
 8426|       |
 8427|  72.5k|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 72.5k]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 72.5k]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 72.5k]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 72.5k]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 72.5k]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 72.5k]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 72.5k]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 72.5k]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 72.5k]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 72.5k]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 72.5k]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 72.5k]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 72.5k]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 72.5k]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 72.5k]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 72.5k]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 72.5k]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 72.5k]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 72.5k]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|  72.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 72.5k, False: 0]
  ------------------
 8467|  72.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|  72.5k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  72.5k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  72.5k|    }                                                           \
  |  | 8421|  72.5k|    else {                                                      \
  |  | 8422|  72.5k|        return vis(monostate_val);                              \
  |  | 8423|  72.5k|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 72.5k]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|      0|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 0, False: 72.5k]
  ------------------
 8471|      0|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 72.5k]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 72.5k]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 72.5k]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 72.5k]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 72.5k]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  72.5k|            SCN_CLANG_POP
 8495|  72.5k|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4075|  11.1k|    {
 4076|  11.1k|        sync(0);
 4077|  11.1k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5465|  59.8M|    {
 5466|  59.8M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  59.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.8M]
  |  |  ------------------
  ------------------
 5467|      0|            return max_size();
 5468|      0|        }
 5469|       |
 5470|  59.8M|        return static_cast<std::size_t>(m_desc &
 5471|  59.8M|                                        ((1 << detail::packed_arg_bits) - 1));
 5472|  59.8M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5490|   119M|    {
 5491|   119M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5492|   119M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5433|  59.8M|    {
 5434|  59.8M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  59.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.8M]
  |  |  ------------------
  ------------------
 5435|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5436|      0|                return m_args[id];
 5437|      0|            }
 5438|      0|            return {};
 5439|      0|        }
 5440|       |
 5441|  59.8M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  59.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.8M]
  |  |  ------------------
  ------------------
 5442|      0|            return {};
 5443|      0|        }
 5444|       |
 5445|  59.8M|        const auto t = type(id);
 5446|  59.8M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  59.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 59.8M]
  |  |  ------------------
  ------------------
 5447|      0|            return {};
 5448|      0|        }
 5449|       |
 5450|  59.8M|        basic_scan_arg<Context> arg;
 5451|  59.8M|        arg.m_type = t;
 5452|  59.8M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5452:13): [True: 59.8M, False: 0]
  ------------------
 5453|  59.8M|            arg.m_value.ref_value = m_builtin_values[id];
 5454|  59.8M|        }
 5455|      0|        else {
 5456|      0|            arg.m_value = m_values[id];
 5457|      0|        }
 5458|  59.8M|        return arg;
 5459|  59.8M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5499|  59.8M|    {
 5500|       |        // First (0th) index is size, types start after that
 5501|  59.8M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5502|  59.8M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5503|  59.8M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5504|  59.8M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5494|  59.8M|    {
 5495|  59.8M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5496|  59.8M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5246|   104M|    {
 5247|   104M|        return m_type != detail::arg_type::none_type;
 5248|   104M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  29.9M|{
 8417|  29.9M|#define SCN_VISIT(Type)                                         \
 8418|  29.9M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  29.9M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  29.9M|    }                                                           \
 8421|  29.9M|    else {                                                      \
 8422|  29.9M|        return vis(monostate_val);                              \
 8423|  29.9M|    }
 8424|       |
 8425|  29.9M|    monostate monostate_val{};
 8426|       |
 8427|  29.9M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 29.9M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 29.9M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 29.9M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 29.9M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 29.9M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 29.9M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 29.9M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 29.9M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 29.9M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 29.9M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 29.9M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 29.9M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 29.9M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 29.9M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 29.9M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 29.9M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 29.9M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 29.9M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 29.9M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 29.9M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|  14.9M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 14.9M, False: 14.9M]
  ------------------
 8469|  14.9M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  14.9M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  14.9M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  14.9M|    }                                                           \
  |  | 8421|  14.9M|    else {                                                      \
  |  | 8422|  14.9M|        return vis(monostate_val);                              \
  |  | 8423|  14.9M|    }
  ------------------
 8470|  14.9M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 14.9M, False: 14.9M]
  ------------------
 8471|  14.9M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  14.9M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  14.9M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  14.9M|    }                                                           \
  |  | 8421|  14.9M|    else {                                                      \
  |  | 8422|  14.9M|        return vis(monostate_val);                              \
  |  | 8423|  14.9M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 29.9M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 29.9M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 29.9M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 29.9M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 29.9M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  29.9M|            SCN_CLANG_POP
 8495|  29.9M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5544|  29.9M|    {
 5545|  29.9M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8137|  9.98M|    {
 8138|  9.98M|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8055|  29.9M|    {
 8056|  29.9M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  19.9M|{
 7044|  19.9M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  19.9M|    handler.check_args_exhausted();
 7046|  19.9M|    return handler.get_error();
 7047|  19.9M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  19.9M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  19.9M|    auto begin = format.data();
 7013|  19.9M|    auto it = begin;
 7014|  19.9M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  39.9M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 19.9M, False: 19.9M]
  ------------------
 7017|  19.9M|        const auto ch = *it++;
 7018|  19.9M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 19.9M, False: 0]
  ------------------
 7019|  19.9M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  19.9M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  19.9M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 34.4k, False: 19.9M]
  ------------------
 7023|  34.4k|                return;
 7024|  34.4k|            }
 7025|  19.9M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  19.9M|    }
 7036|       |
 7037|  19.9M|    handler.on_literal_text(begin, end);
 7038|  19.9M|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6941|  19.9M|{
 6942|  19.9M|    struct id_adapter {
 6943|  19.9M|        constexpr void operator()()
 6944|  19.9M|        {
 6945|  19.9M|            arg_id = handler.on_arg_id();
 6946|  19.9M|        }
 6947|  19.9M|        constexpr void operator()(std::size_t id)
 6948|  19.9M|        {
 6949|  19.9M|            arg_id = handler.on_arg_id(id);
 6950|  19.9M|        }
 6951|       |
 6952|  19.9M|        constexpr void on_error(const char* msg)
 6953|  19.9M|        {
 6954|  19.9M|            SCN_UNLIKELY_ATTR
 6955|  19.9M|            handler.on_error(msg);
 6956|  19.9M|        }
 6957|       |
 6958|  19.9M|        Handler& handler;
 6959|  19.9M|        std::size_t arg_id;
 6960|  19.9M|    };
 6961|       |
 6962|  19.9M|    ++begin;
 6963|  19.9M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.9M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  19.9M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 19.9M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  19.9M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 19.9M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  19.9M|    else {
 6975|  19.9M|        auto adapter = id_adapter{handler, 0};
 6976|  19.9M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  19.9M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.9M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  19.9M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 19.9M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  19.9M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 19.9M, False: 0]
  ------------------
 6987|  19.9M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.9M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  19.9M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  19.9M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  39.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.7k, False: 19.9M]
  |  |  |  Branch (859:45): [True: 0, False: 19.9M]
  |  |  |  Branch (859:45): [True: 13.7k, False: 19.9M]
  |  |  ------------------
  ------------------
 6993|  13.7k|                handler.on_error("Unknown format specifier");
 6994|  13.7k|                return begin;
 6995|  13.7k|            }
 6996|  19.9M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  19.9M|    }
 7003|  19.9M|    return begin + 1;
 7004|  19.9M|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8038|  29.9M|    {
 8039|  29.9M|        return m_args.get(id);
 8040|  29.9M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8048|  29.9M|    {
 8049|  29.9M|        return m_locale;
 8050|  29.9M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5565|  29.9M|    {
 5566|  29.9M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  29.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.9M]
  |  |  ------------------
  ------------------
 5567|      0|            on_error(
 5568|      0|                "Cannot switch from manual to automatic argument indexing");
 5569|      0|            return 0;
 5570|      0|        }
 5571|       |
 5572|  29.9M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5573|  29.9M|        do_check_arg_id(id);
 5574|  29.9M|        return id;
 5575|  29.9M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6053|  29.9M|{
 6054|  29.9M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6054:9): [Folded - Ignored]
  ------------------
 6055|  29.9M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6055:10): [Folded - Ignored]
  |  Branch (6055:22): [Folded - Ignored]
  ------------------
 6056|       |        // The cast below will cause an error on gcc pre-12
 6057|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6058|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6058:13): [True: 0, False: 0]
  ------------------
 6059|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6060|      0|            SCN_UNLIKELY_ATTR
 6061|      0|            on_error("Argument not found");
 6062|      0|        }
 6063|      0|    }
 6064|  29.9M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  19.9M|{
 6443|  19.9M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  19.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  19.9M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 19.9M, False: 0]
  |  Branch (6444:26): [True: 0, False: 19.9M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  19.9M|    handler();
 6449|  19.9M|    return begin;
 6450|  19.9M|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6391|  20.6k|{
 6392|  20.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6393|  20.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6394|       |
 6395|  20.6k|    unsigned long long value = 0;
 6396|  41.3k|    do {
 6397|  41.3k|        value *= 10;
 6398|  41.3k|        value += static_cast<unsigned long long>(*begin - '0');
 6399|  41.3k|        if (value >
  ------------------
  |  Branch (6399:13): [True: 0, False: 41.3k]
  ------------------
 6400|  41.3k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6401|      0|            return -1;
 6402|      0|        }
 6403|  41.3k|        ++begin;
 6404|  41.3k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6404:14): [True: 41.3k, False: 0]
  |  Branch (6404:30): [True: 41.3k, False: 0]
  |  Branch (6404:47): [True: 20.6k, False: 20.6k]
  ------------------
 6405|  20.6k|    return static_cast<int>(value);
 6406|  20.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  19.9M|        {
 6945|  19.9M|            arg_id = handler.on_arg_id();
 6946|  19.9M|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5251|  59.9M|    {
 5252|  59.9M|        return m_type;
 5253|  59.9M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5560|  29.9M|    {
 5561|  29.9M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5562|  29.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4343|  24.9M|{
 4344|  24.9M|    if (is_contiguous()) {
  ------------------
  |  Branch (4344:9): [True: 0, False: 24.9M]
  ------------------
 4345|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4346|      0|                                ranges::default_sentinel};
 4347|      0|    }
 4348|  24.9M|    return ranges::subrange{forward_iterator{this, 0},
 4349|  24.9M|                            ranges::default_sentinel};
 4350|  24.9M|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4176|  24.9M|    {
 4177|  24.9M|        SCN_EXPECT(parent);
  ------------------
  |  |  924|  24.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4178|  24.9M|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|  24.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  24.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4179|  24.9M|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5549|  59.9M|    {
 5550|  59.9M|        return m_format.data();
 5551|  59.9M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7121|  19.9M|    {
 7122|  19.9M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  19.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  19.9M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6857|  19.9M|{
 6858|  19.9M|    auto do_presentation = [&]() -> const CharT* {
 6859|  19.9M|        if (*begin == CharT{'['}) {
 6860|  19.9M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  19.9M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  19.9M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  19.9M|                return begin;
 6866|  19.9M|            }
 6867|  19.9M|            handler.on_character_set_string(set);
 6868|  19.9M|            return begin;
 6869|  19.9M|        }
 6870|  19.9M|        if (*begin == CharT{'/'}) {
 6871|  19.9M|            return parse_presentation_regex(begin, end, handler);
 6872|  19.9M|        }
 6873|  19.9M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  19.9M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  19.9M|            handler.on_error("Invalid type specifier in format string");
 6876|  19.9M|            return begin;
 6877|  19.9M|        }
 6878|  19.9M|        handler.on_type(type);
 6879|  19.9M|        return begin;
 6880|  19.9M|    };
 6881|       |
 6882|  19.9M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 19.9M, False: 0]
  |  Branch (6882:28): [True: 19.9M, False: 20.7k]
  ------------------
 6883|  19.9M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 19.9M, False: 0]
  |  Branch (6883:36): [True: 19.9M, False: 6.88k]
  ------------------
 6884|  19.9M|        return do_presentation();
 6885|  19.9M|    }
 6886|       |
 6887|  27.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.6k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  27.6k|    begin = parse_align(begin, end, handler);
 6893|  27.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.6k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  27.6k|    begin = parse_width(begin, end, handler);
 6899|  27.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.6k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  27.6k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 27.6k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  27.6k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 6.88k, False: 20.7k]
  ------------------
 6918|  6.88k|        handler.on_localized();
 6919|  6.88k|        ++begin;
 6920|  6.88k|    }
 6921|  27.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.6k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  27.6k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 27.6k, False: 0]
  |  Branch (6926:25): [True: 20.7k, False: 6.88k]
  ------------------
 6927|  20.7k|        do_presentation();
 6928|  20.7k|    }
 6929|  27.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.6k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  27.6k|    return begin;
 6935|  27.6k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6506|  29.9M|{
 6507|  29.9M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6507:13): [True: 29.9M, False: 10.3k]
  |  Branch (6507:33): [True: 29.9M, False: 0]
  ------------------
 6508|  29.9M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6508:13): [True: 10.3k, False: 0]
  |  Branch (6508:33): [True: 10.3k, False: 0]
  ------------------
 6509|  29.9M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6858|  19.9M|    auto do_presentation = [&]() -> const CharT* {
 6859|  19.9M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 6.97k, False: 19.9M]
  ------------------
 6860|  6.97k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  6.97k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  6.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.97k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  6.97k|            handler.on_character_set_string(set);
 6868|  6.97k|            return begin;
 6869|  6.97k|        }
 6870|  19.9M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 19.9M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  19.9M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  19.9M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.88k, False: 19.9M]
  |  |  ------------------
  ------------------
 6875|  6.88k|            handler.on_error("Invalid type specifier in format string");
 6876|  6.88k|            return begin;
 6877|  6.88k|        }
 6878|  19.9M|        handler.on_type(type);
 6879|  19.9M|        return begin;
 6880|  19.9M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6696|  6.97k|{
 6697|  6.97k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  6.97k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  6.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  6.97k|    auto start = begin;
 6701|  6.97k|    ++begin;
 6702|       |
 6703|  6.97k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  6.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.97k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  6.97k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 6.97k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  6.97k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 6.97k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  20.9k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 20.9k, False: 0]
  ------------------
 6728|  20.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  20.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 20.9k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  20.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 6.97k, False: 13.9k]
  ------------------
 6733|  6.97k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  6.97k|        }
 6735|       |
 6736|  13.9k|        parse_presentation_set_literal(begin, end, handler);
 6737|  13.9k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  6.97k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6660|  13.9k|{
 6661|  13.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  13.9k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  13.9k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  13.9k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 13.9k, False: 0]
  |  Branch (6668:25): [True: 13.9k, False: 0]
  |  Branch (6668:49): [True: 13.9k, False: 0]
  ------------------
 6669|  13.9k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 13.9k, False: 0]
  ------------------
 6670|  13.9k|        ++begin;
 6671|       |
 6672|  13.9k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  13.9k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  13.9k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  13.9k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  13.9k|        return;
 6686|  13.9k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6636|  27.8k|{
 6637|  27.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  27.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  27.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  55.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.8k]
  |  |  |  Branch (859:45): [True: 0, False: 27.8k]
  |  |  |  Branch (859:45): [True: 0, False: 27.8k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  27.8k|    const auto cp =
 6646|  27.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  27.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.8k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  27.8k|    begin += len;
 6653|  27.8k|    return cp;
 6654|  27.8k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6345|  10.4k|    {
 6346|  10.4k|        m_specs.charset_string_data = fmt.data();
 6347|  10.4k|        m_specs.charset_string_size = fmt.size();
 6348|  10.4k|        on_type(presentation_type::string_set);
 6349|  10.4k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6454|  29.9M|{
 6455|  29.9M|    switch (type) {
 6456|      0|        case 'b':
  ------------------
  |  Branch (6456:9): [True: 0, False: 29.9M]
  ------------------
 6457|      0|        case 'B':
  ------------------
  |  Branch (6457:9): [True: 0, False: 29.9M]
  ------------------
 6458|      0|            return presentation_type::int_binary;
 6459|      0|        case 'd':
  ------------------
  |  Branch (6459:9): [True: 0, False: 29.9M]
  ------------------
 6460|      0|            return presentation_type::int_decimal;
 6461|      0|        case 'i':
  ------------------
  |  Branch (6461:9): [True: 0, False: 29.9M]
  ------------------
 6462|      0|            return presentation_type::int_generic;
 6463|      0|        case 'u':
  ------------------
  |  Branch (6463:9): [True: 0, False: 29.9M]
  ------------------
 6464|      0|            return presentation_type::int_unsigned_decimal;
 6465|      0|        case 'o':
  ------------------
  |  Branch (6465:9): [True: 0, False: 29.9M]
  ------------------
 6466|      0|            return presentation_type::int_octal;
 6467|      0|        case 'x':
  ------------------
  |  Branch (6467:9): [True: 0, False: 29.9M]
  ------------------
 6468|      0|        case 'X':
  ------------------
  |  Branch (6468:9): [True: 0, False: 29.9M]
  ------------------
 6469|      0|            return presentation_type::int_hex;
 6470|      0|        case 'r':
  ------------------
  |  Branch (6470:9): [True: 0, False: 29.9M]
  ------------------
 6471|      0|        case 'R':
  ------------------
  |  Branch (6471:9): [True: 0, False: 29.9M]
  ------------------
 6472|      0|            return presentation_type::int_arbitrary_base;
 6473|      0|        case 'a':
  ------------------
  |  Branch (6473:9): [True: 0, False: 29.9M]
  ------------------
 6474|      0|        case 'A':
  ------------------
  |  Branch (6474:9): [True: 0, False: 29.9M]
  ------------------
 6475|      0|            return presentation_type::float_hex;
 6476|      0|        case 'e':
  ------------------
  |  Branch (6476:9): [True: 0, False: 29.9M]
  ------------------
 6477|      0|        case 'E':
  ------------------
  |  Branch (6477:9): [True: 0, False: 29.9M]
  ------------------
 6478|      0|            return presentation_type::float_scientific;
 6479|      0|        case 'f':
  ------------------
  |  Branch (6479:9): [True: 0, False: 29.9M]
  ------------------
 6480|      0|        case 'F':
  ------------------
  |  Branch (6480:9): [True: 0, False: 29.9M]
  ------------------
 6481|      0|            return presentation_type::float_fixed;
 6482|      0|        case 'g':
  ------------------
  |  Branch (6482:9): [True: 0, False: 29.9M]
  ------------------
 6483|      0|        case 'G':
  ------------------
  |  Branch (6483:9): [True: 0, False: 29.9M]
  ------------------
 6484|      0|            return presentation_type::float_general;
 6485|  29.9M|        case 's':
  ------------------
  |  Branch (6485:9): [True: 29.9M, False: 20.6k]
  ------------------
 6486|  29.9M|            return presentation_type::string;
 6487|  10.3k|        case 'c':
  ------------------
  |  Branch (6487:9): [True: 10.3k, False: 29.9M]
  ------------------
 6488|  10.3k|            return presentation_type::character;
 6489|      0|        case '?':
  ------------------
  |  Branch (6489:9): [True: 0, False: 29.9M]
  ------------------
 6490|      0|            return presentation_type::escaped_character;
 6491|      0|        case 'p':
  ------------------
  |  Branch (6491:9): [True: 0, False: 29.9M]
  ------------------
 6492|      0|            return presentation_type::pointer;
 6493|      0|        case '[':
  ------------------
  |  Branch (6493:9): [True: 0, False: 29.9M]
  ------------------
 6494|      0|        case '/':
  ------------------
  |  Branch (6494:9): [True: 0, False: 29.9M]
  ------------------
 6495|       |            // Should be handled by parse_presentation_set and
 6496|       |            // parse_presentation_regex
 6497|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6498|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6499|  10.3k|        default:
  ------------------
  |  Branch (6499:9): [True: 10.3k, False: 29.9M]
  ------------------
 6500|  10.3k|            return presentation_type::none;
 6501|  29.9M|    }
 6502|  29.9M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6531|  27.6k|{
 6532|  27.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  27.6k|    auto check_align = [](wchar_t ch) {
 6535|  27.6k|        switch (ch) {
 6536|  27.6k|            case L'<':
 6537|  27.6k|                return align_type::left;
 6538|  27.6k|            case L'>':
 6539|  27.6k|                return align_type::right;
 6540|  27.6k|            case L'^':
 6541|  27.6k|                return align_type::center;
 6542|  27.6k|            default:
 6543|  27.6k|                return align_type::none;
 6544|  27.6k|        }
 6545|  27.6k|    };
 6546|       |
 6547|  27.6k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  27.6k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  55.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.6k]
  |  |  |  Branch (859:45): [True: 0, False: 27.6k]
  |  |  |  Branch (859:45): [True: 0, False: 27.6k]
  |  |  ------------------
  ------------------
 6549|  27.6k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  27.6k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  27.6k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  27.6k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  27.6k|    const auto begin_before_fill = begin;
 6559|  27.6k|    begin += potential_fill_len;
 6560|       |
 6561|  27.6k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 27.6k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  27.6k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  27.6k|    const auto begin_after_fill = begin;
 6567|  27.6k|    ++begin;
 6568|       |
 6569|  27.6k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 27.6k, False: 0]
  ------------------
 6570|  27.6k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.6k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  27.6k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 6.97k, False: 20.6k]
  ------------------
 6575|  6.97k|            return begin_before_fill;
 6576|  6.97k|        }
 6577|  27.6k|    }
 6578|       |
 6579|  20.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 20.6k, False: 0]
  ------------------
 6580|  20.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 20.6k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  20.6k|        return begin_before_fill;
 6585|  20.6k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  20.6k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6513|  41.4k|{
 6514|  41.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  41.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  41.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6515|  41.4k|    if constexpr (sizeof(CharT) != 1) {
  ------------------
  |  Branch (6515:19): [Folded - Ignored]
  ------------------
 6516|  41.4k|        return 1;
 6517|  41.4k|    }
 6518|  41.4k|    else {
 6519|  41.4k|        const auto lengths =
 6520|  41.4k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6521|  41.4k|            "\3\4";
 6522|  41.4k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6523|  41.4k|        return len;
 6524|  41.4k|    }
 6525|  41.4k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6534|  55.2k|    auto check_align = [](wchar_t ch) {
 6535|  55.2k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 55.2k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 55.2k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 55.2k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  55.2k|            default:
  ------------------
  |  Branch (6542:13): [True: 55.2k, False: 0]
  ------------------
 6543|  55.2k|                return align_type::none;
 6544|  55.2k|        }
 6545|  55.2k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6596|  27.6k|{
 6597|  27.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  27.6k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 27.6k, False: 0]
  |  Branch (6599:33): [True: 13.7k, False: 13.8k]
  ------------------
 6600|  13.7k|        int width = parse_simple_int(begin, end);
 6601|  13.7k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  13.7k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 13.7k, False: 0]
  |  |  ------------------
  ------------------
 6602|  13.7k|            handler.on_width(width);
 6603|  13.7k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  13.7k|    }
 6609|  27.6k|    return begin;
 6610|  27.6k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7126|  6.88k|    {
 7127|  6.88k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  6.88k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 6.88k, False: 0]
  ------------------
 7129|  6.88k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 6.88k, False: 0]
  ------------------
 7130|  6.88k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 6.88k, False: 0]
  ------------------
 7131|  6.88k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 6.88k, False: 0]
  ------------------
 7132|  6.88k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  6.88k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  6.88k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  19.9M|{
 8417|  19.9M|#define SCN_VISIT(Type)                                         \
 8418|  19.9M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  19.9M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  19.9M|    }                                                           \
 8421|  19.9M|    else {                                                      \
 8422|  19.9M|        return vis(monostate_val);                              \
 8423|  19.9M|    }
 8424|       |
 8425|  19.9M|    monostate monostate_val{};
 8426|       |
 8427|  19.9M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 19.9M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 19.9M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 19.9M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 19.9M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 19.9M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 19.9M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 19.9M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 19.9M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 19.9M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 19.9M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 19.9M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 19.9M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 19.9M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 19.9M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 19.9M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 19.9M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 19.9M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 19.9M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 19.9M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 19.9M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|  9.98M|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 9.98M, False: 9.98M]
  ------------------
 8469|  9.98M|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|  9.98M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.98M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.98M|    }                                                           \
  |  | 8421|  9.98M|    else {                                                      \
  |  | 8422|  9.98M|        return vis(monostate_val);                              \
  |  | 8423|  9.98M|    }
  ------------------
 8470|  9.98M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 9.98M, False: 9.98M]
  ------------------
 8471|  9.98M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  9.98M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.98M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.98M|    }                                                           \
  |  | 8421|  9.98M|    else {                                                      \
  |  | 8422|  9.98M|        return vis(monostate_val);                              \
  |  | 8423|  9.98M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 19.9M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 19.9M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 19.9M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 19.9M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 19.9M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  19.9M|            SCN_CLANG_POP
 8495|  19.9M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  14.9M|{
 8417|  14.9M|#define SCN_VISIT(Type)                                         \
 8418|  14.9M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  14.9M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  14.9M|    }                                                           \
 8421|  14.9M|    else {                                                      \
 8422|  14.9M|        return vis(monostate_val);                              \
 8423|  14.9M|    }
 8424|       |
 8425|  14.9M|    monostate monostate_val{};
 8426|       |
 8427|  14.9M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 14.9M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 14.9M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 14.9M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 14.9M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 14.9M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 14.9M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 14.9M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 14.9M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 14.9M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 14.9M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 14.9M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 14.9M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 14.9M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 14.9M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 14.9M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 14.9M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 14.9M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 14.9M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 14.9M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 14.9M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 14.9M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  14.9M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 14.9M, False: 0]
  ------------------
 8471|  14.9M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  14.9M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  14.9M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  14.9M|    }                                                           \
  |  | 8421|  14.9M|    else {                                                      \
  |  | 8422|  14.9M|        return vis(monostate_val);                              \
  |  | 8423|  14.9M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 14.9M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 14.9M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 14.9M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 14.9M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 14.9M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  14.9M|            SCN_CLANG_POP
 8495|  14.9M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7043|  9.98M|{
 7044|  9.98M|    parse_format_string_impl<IsConstexpr>(format, handler);
 7045|  9.98M|    handler.check_args_exhausted();
 7046|  9.98M|    return handler.get_error();
 7047|  9.98M|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7009|  9.98M|{
 7010|       |    // TODO: memchr fast path with a larger (> 32) format string
 7011|       |
 7012|  9.98M|    auto begin = format.data();
 7013|  9.98M|    auto it = begin;
 7014|  9.98M|    const auto end = format.data() + format.size();
 7015|       |
 7016|  19.9M|    while (it != end) {
  ------------------
  |  Branch (7016:12): [True: 9.98M, False: 9.97M]
  ------------------
 7017|  9.98M|        const auto ch = *it++;
 7018|  9.98M|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7018:13): [True: 9.98M, False: 0]
  ------------------
 7019|  9.98M|            handler.on_literal_text(begin, it - 1);
 7020|       |
 7021|  9.98M|            begin = it = parse_replacement_field(it - 1, end, handler);
 7022|  9.98M|            if (!handler) {
  ------------------
  |  Branch (7022:17): [True: 17.2k, False: 9.97M]
  ------------------
 7023|  17.2k|                return;
 7024|  17.2k|            }
 7025|  9.98M|        }
 7026|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7026:18): [True: 0, False: 0]
  ------------------
 7027|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7028|      0|                handler.on_error("Unmatched '}' in format string");
 7029|      0|                return;
 7030|      0|            }
 7031|       |
 7032|      0|            handler.on_literal_text(begin, it);
 7033|      0|            begin = ++it;
 7034|      0|        }
 7035|  9.98M|    }
 7036|       |
 7037|  9.97M|    handler.on_literal_text(begin, end);
 7038|  9.97M|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8174|  9.97M|    {
 8175|  9.97M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  9.97M|    static_cast<    \
  |  |  929|  9.97M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8176|  9.97M|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6941|  9.98M|{
 6942|  9.98M|    struct id_adapter {
 6943|  9.98M|        constexpr void operator()()
 6944|  9.98M|        {
 6945|  9.98M|            arg_id = handler.on_arg_id();
 6946|  9.98M|        }
 6947|  9.98M|        constexpr void operator()(std::size_t id)
 6948|  9.98M|        {
 6949|  9.98M|            arg_id = handler.on_arg_id(id);
 6950|  9.98M|        }
 6951|       |
 6952|  9.98M|        constexpr void on_error(const char* msg)
 6953|  9.98M|        {
 6954|  9.98M|            SCN_UNLIKELY_ATTR
 6955|  9.98M|            handler.on_error(msg);
 6956|  9.98M|        }
 6957|       |
 6958|  9.98M|        Handler& handler;
 6959|  9.98M|        std::size_t arg_id;
 6960|  9.98M|    };
 6961|       |
 6962|  9.98M|    ++begin;
 6963|  9.98M|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.98M]
  |  |  ------------------
  ------------------
 6964|      0|        handler.on_error("Unexpected end of replacement field");
 6965|      0|        return begin;
 6966|      0|    }
 6967|       |
 6968|  9.98M|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6968:9): [True: 0, False: 9.98M]
  ------------------
 6969|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6970|      0|    }
 6971|  9.98M|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6971:14): [True: 0, False: 9.98M]
  ------------------
 6972|      0|        handler.on_literal_text(begin, begin + 1);
 6973|      0|    }
 6974|  9.98M|    else {
 6975|  9.98M|        auto adapter = id_adapter{handler, 0};
 6976|  9.98M|        begin = parse_arg_id(begin, end, adapter);
 6977|       |
 6978|  9.98M|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.98M]
  |  |  ------------------
  ------------------
 6979|      0|            handler.on_error("Missing '}' in format string");
 6980|      0|            return begin;
 6981|      0|        }
 6982|       |
 6983|  9.98M|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6983:13): [True: 0, False: 9.98M]
  ------------------
 6984|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6985|      0|        }
 6986|  9.98M|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6986:18): [True: 9.98M, False: 0]
  ------------------
 6987|  9.98M|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.98M]
  |  |  ------------------
  ------------------
 6988|      0|                handler.on_error("Unexpected end of replacement field");
 6989|      0|                return begin;
 6990|      0|            }
 6991|  9.98M|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 6992|  9.98M|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.88k, False: 9.98M]
  |  |  |  Branch (859:45): [True: 0, False: 9.98M]
  |  |  |  Branch (859:45): [True: 6.88k, False: 9.98M]
  |  |  ------------------
  ------------------
 6993|  6.88k|                handler.on_error("Unknown format specifier");
 6994|  6.88k|                return begin;
 6995|  6.88k|            }
 6996|  9.98M|        }
 6997|      0|        else {
 6998|      0|            SCN_UNLIKELY_ATTR
 6999|      0|            handler.on_error("Missing '}' in format string");
 7000|      0|            return begin;
 7001|      0|        }
 7002|  9.98M|    }
 7003|  9.98M|    return begin + 1;
 7004|  9.98M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6442|  9.98M|{
 6443|  9.98M|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6444|  9.98M|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6444:9): [True: 9.98M, False: 0]
  |  Branch (6444:26): [True: 0, False: 9.98M]
  ------------------
 6445|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6446|      0|    }
 6447|       |
 6448|  9.98M|    handler();
 6449|  9.98M|    return begin;
 6450|  9.98M|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6944|  9.98M|        {
 6945|  9.98M|            arg_id = handler.on_arg_id();
 6946|  9.98M|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7121|  9.98M|    {
 7122|  9.98M|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  9.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7123|  9.98M|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6857|  9.98M|{
 6858|  9.98M|    auto do_presentation = [&]() -> const CharT* {
 6859|  9.98M|        if (*begin == CharT{'['}) {
 6860|  9.98M|            auto set = parse_presentation_set(begin, end, handler);
 6861|  9.98M|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6862|       |                // clang-format off
 6863|  9.98M|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|  9.98M|                return begin;
 6866|  9.98M|            }
 6867|  9.98M|            handler.on_character_set_string(set);
 6868|  9.98M|            return begin;
 6869|  9.98M|        }
 6870|  9.98M|        if (*begin == CharT{'/'}) {
 6871|  9.98M|            return parse_presentation_regex(begin, end, handler);
 6872|  9.98M|        }
 6873|  9.98M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  9.98M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6875|  9.98M|            handler.on_error("Invalid type specifier in format string");
 6876|  9.98M|            return begin;
 6877|  9.98M|        }
 6878|  9.98M|        handler.on_type(type);
 6879|  9.98M|        return begin;
 6880|  9.98M|    };
 6881|       |
 6882|  9.98M|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6882:9): [True: 9.98M, False: 0]
  |  Branch (6882:28): [True: 9.97M, False: 10.3k]
  ------------------
 6883|  9.98M|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6883:9): [True: 9.97M, False: 0]
  |  Branch (6883:36): [True: 9.97M, False: 3.44k]
  ------------------
 6884|  9.97M|        return do_presentation();
 6885|  9.97M|    }
 6886|       |
 6887|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 6888|      0|        handler.on_error("Unexpected end of format string");
 6889|      0|        return begin;
 6890|      0|    }
 6891|       |
 6892|  13.8k|    begin = parse_align(begin, end, handler);
 6893|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 6894|      0|        handler.on_error("Unexpected end of format string");
 6895|      0|        return begin;
 6896|      0|    }
 6897|       |
 6898|  13.8k|    begin = parse_width(begin, end, handler);
 6899|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 6900|      0|        handler.on_error("Unexpected end of format string");
 6901|      0|        return begin;
 6902|      0|    }
 6903|       |
 6904|  13.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6904:9): [True: 0, False: 13.8k]
  ------------------
 6905|      0|        ++begin;
 6906|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6907|      0|            handler.on_error("Unexpected end of format string");
 6908|      0|            return begin;
 6909|      0|        }
 6910|      0|        begin = parse_precision(begin, end, handler);
 6911|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6912|      0|            handler.on_error("Unexpected end of format string");
 6913|      0|            return begin;
 6914|      0|        }
 6915|      0|    }
 6916|       |
 6917|  13.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6917:9): [True: 3.44k, False: 10.3k]
  ------------------
 6918|  3.44k|        handler.on_localized();
 6919|  3.44k|        ++begin;
 6920|  3.44k|    }
 6921|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 6922|      0|        handler.on_error("Unexpected end of format string");
 6923|      0|        return begin;
 6924|      0|    }
 6925|       |
 6926|  13.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6926:9): [True: 13.8k, False: 0]
  |  Branch (6926:25): [True: 10.3k, False: 3.44k]
  ------------------
 6927|  10.3k|        do_presentation();
 6928|  10.3k|    }
 6929|  13.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 6930|      0|        handler.on_error("Unexpected end of format string");
 6931|      0|        return begin;
 6932|      0|    }
 6933|       |
 6934|  13.8k|    return begin;
 6935|  13.8k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6858|  9.98M|    auto do_presentation = [&]() -> const CharT* {
 6859|  9.98M|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6859:13): [True: 3.48k, False: 9.98M]
  ------------------
 6860|  3.48k|            auto set = parse_presentation_set(begin, end, handler);
 6861|  3.48k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.48k]
  |  |  ------------------
  ------------------
 6862|       |                // clang-format off
 6863|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6864|       |                // clang-format on
 6865|      0|                return begin;
 6866|      0|            }
 6867|  3.48k|            handler.on_character_set_string(set);
 6868|  3.48k|            return begin;
 6869|  3.48k|        }
 6870|  9.98M|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6870:13): [True: 0, False: 9.98M]
  ------------------
 6871|      0|            return parse_presentation_regex(begin, end, handler);
 6872|      0|        }
 6873|  9.98M|        presentation_type type = parse_presentation_type(*begin++);
 6874|  9.98M|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 9.97M]
  |  |  ------------------
  ------------------
 6875|  3.44k|            handler.on_error("Invalid type specifier in format string");
 6876|  3.44k|            return begin;
 6877|  3.44k|        }
 6878|  9.97M|        handler.on_type(type);
 6879|  9.97M|        return begin;
 6880|  9.98M|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6696|  3.48k|{
 6697|  3.48k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  3.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6698|  3.48k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  3.48k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6699|       |
 6700|  3.48k|    auto start = begin;
 6701|  3.48k|    ++begin;
 6702|       |
 6703|  3.48k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.48k]
  |  |  ------------------
  ------------------
 6704|       |        // clang-format off
 6705|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6706|       |        // clang-format on
 6707|      0|        return {};
 6708|      0|    }
 6709|  3.48k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6709:9): [True: 0, False: 3.48k]
  ------------------
 6710|      0|        handler.on_charset_inverted();
 6711|      0|        ++begin;
 6712|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6713|       |            // clang-format off
 6714|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6715|       |            // clang-format on
 6716|      0|            return {};
 6717|      0|        }
 6718|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6718:13): [True: 0, False: 0]
  ------------------
 6719|      0|            handler.on_charset_single(char32_t{']'});
 6720|      0|            ++begin;
 6721|      0|        }
 6722|      0|    }
 6723|  3.48k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6723:14): [True: 0, False: 3.48k]
  ------------------
 6724|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6725|      0|    }
 6726|       |
 6727|  10.4k|    while (begin != end) {
  ------------------
  |  Branch (6727:12): [True: 10.4k, False: 0]
  ------------------
 6728|  10.4k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  10.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 10.4k]
  |  |  ------------------
  ------------------
 6729|      0|            break;
 6730|      0|        }
 6731|       |
 6732|  10.4k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6732:13): [True: 3.48k, False: 6.97k]
  ------------------
 6733|  3.48k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6734|  3.48k|        }
 6735|       |
 6736|  6.97k|        parse_presentation_set_literal(begin, end, handler);
 6737|  6.97k|    }
 6738|       |
 6739|      0|    SCN_UNLIKELY_ATTR
 6740|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6741|      0|    return {};
 6742|  3.48k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6660|  6.97k|{
 6661|  6.97k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  6.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  6.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6662|       |
 6663|  6.97k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6664|  6.97k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  6.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.97k]
  |  |  ------------------
  ------------------
 6665|      0|        return;
 6666|      0|    }
 6667|       |
 6668|  6.97k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6668:9): [True: 6.97k, False: 0]
  |  Branch (6668:25): [True: 6.97k, False: 0]
  |  Branch (6668:49): [True: 6.97k, False: 0]
  ------------------
 6669|  6.97k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6669:9): [True: 6.97k, False: 0]
  ------------------
 6670|  6.97k|        ++begin;
 6671|       |
 6672|  6.97k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6673|  6.97k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  6.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.97k]
  |  |  ------------------
  ------------------
 6674|      0|            return;
 6675|      0|        }
 6676|       |
 6677|  6.97k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  6.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.97k]
  |  |  ------------------
  ------------------
 6678|       |            // clang-format off
 6679|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6680|       |            // clang-format on
 6681|      0|            return;
 6682|      0|        }
 6683|       |
 6684|  6.97k|        handler.on_charset_range(cp_first, cp_second + 1);
 6685|  6.97k|        return;
 6686|  6.97k|    }
 6687|       |
 6688|      0|    handler.on_charset_single(cp_first);
 6689|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6636|  13.9k|{
 6637|  13.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6638|       |
 6639|  13.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6640|  13.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  27.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.9k]
  |  |  |  Branch (859:45): [True: 0, False: 13.9k]
  |  |  |  Branch (859:45): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
 6641|      0|        handler.on_error("Invalid encoding in format string");
 6642|      0|        return invalid_code_point;
 6643|      0|    }
 6644|       |
 6645|  13.9k|    const auto cp =
 6646|  13.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6647|  13.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  13.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.9k]
  |  |  ------------------
  ------------------
 6648|      0|        handler.on_error("Invalid encoding in format string");
 6649|      0|        return invalid_code_point;
 6650|      0|    }
 6651|       |
 6652|  13.9k|    begin += len;
 6653|  13.9k|    return cp;
 6654|  13.9k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6531|  13.8k|{
 6532|  13.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6533|       |
 6534|  13.8k|    auto check_align = [](wchar_t ch) {
 6535|  13.8k|        switch (ch) {
 6536|  13.8k|            case L'<':
 6537|  13.8k|                return align_type::left;
 6538|  13.8k|            case L'>':
 6539|  13.8k|                return align_type::right;
 6540|  13.8k|            case L'^':
 6541|  13.8k|                return align_type::center;
 6542|  13.8k|            default:
 6543|  13.8k|                return align_type::none;
 6544|  13.8k|        }
 6545|  13.8k|    };
 6546|       |
 6547|  13.8k|    auto potential_fill_len = code_point_length(begin, end);
 6548|  13.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  27.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  |  Branch (859:45): [True: 0, False: 13.8k]
  |  |  |  Branch (859:45): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 6549|  13.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6550|      0|        handler.on_error("Invalid encoding in fill character");
 6551|      0|        return begin;
 6552|      0|    }
 6553|       |
 6554|  13.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6555|       |
 6556|  13.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6557|  13.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6558|  13.8k|    const auto begin_before_fill = begin;
 6559|  13.8k|    begin += potential_fill_len;
 6560|       |
 6561|  13.8k|    if (begin == end) {
  ------------------
  |  Branch (6561:9): [True: 0, False: 13.8k]
  ------------------
 6562|      0|        return begin_before_fill;
 6563|      0|    }
 6564|       |
 6565|  13.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6566|  13.8k|    const auto begin_after_fill = begin;
 6567|  13.8k|    ++begin;
 6568|       |
 6569|  13.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6569:9): [True: 13.8k, False: 0]
  ------------------
 6570|  13.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  13.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 13.8k]
  |  |  ------------------
  ------------------
 6571|      0|            handler.on_error("Invalid fill character '{' in format string");
 6572|      0|            return begin;
 6573|      0|        }
 6574|  13.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6574:13): [True: 3.48k, False: 10.3k]
  ------------------
 6575|  3.48k|            return begin_before_fill;
 6576|  3.48k|        }
 6577|  13.8k|    }
 6578|       |
 6579|  10.3k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6579:9): [True: 10.3k, False: 0]
  ------------------
 6580|  10.3k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6580:13): [True: 0, False: 10.3k]
  ------------------
 6581|      0|            handler.on_align(potential_align_on_fill);
 6582|      0|            return begin_after_fill;
 6583|      0|        }
 6584|  10.3k|        return begin_before_fill;
 6585|  10.3k|    }
 6586|       |
 6587|      0|    handler.on_fill(potential_fill);
 6588|      0|    handler.on_align(potential_align_after_fill);
 6589|      0|    return begin;
 6590|  10.3k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6534|  27.6k|    auto check_align = [](wchar_t ch) {
 6535|  27.6k|        switch (ch) {
 6536|      0|            case L'<':
  ------------------
  |  Branch (6536:13): [True: 0, False: 27.6k]
  ------------------
 6537|      0|                return align_type::left;
 6538|      0|            case L'>':
  ------------------
  |  Branch (6538:13): [True: 0, False: 27.6k]
  ------------------
 6539|      0|                return align_type::right;
 6540|      0|            case L'^':
  ------------------
  |  Branch (6540:13): [True: 0, False: 27.6k]
  ------------------
 6541|      0|                return align_type::center;
 6542|  27.6k|            default:
  ------------------
  |  Branch (6542:13): [True: 27.6k, False: 0]
  ------------------
 6543|  27.6k|                return align_type::none;
 6544|  27.6k|        }
 6545|  27.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6596|  13.8k|{
 6597|  13.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  13.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6598|       |
 6599|  13.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6599:9): [True: 13.8k, False: 0]
  |  Branch (6599:33): [True: 6.88k, False: 6.93k]
  ------------------
 6600|  6.88k|        int width = parse_simple_int(begin, end);
 6601|  6.88k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  6.88k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 6.88k, False: 0]
  |  |  ------------------
  ------------------
 6602|  6.88k|            handler.on_width(width);
 6603|  6.88k|        }
 6604|      0|        else {
 6605|      0|            handler.on_error("Invalid field width");
 6606|      0|            return begin;
 6607|      0|        }
 6608|  6.88k|    }
 6609|  13.8k|    return begin;
 6610|  13.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7126|  3.44k|    {
 7127|  3.44k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7128|  3.44k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7128:13): [True: 3.44k, False: 0]
  ------------------
 7129|  3.44k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7129:13): [True: 3.44k, False: 0]
  ------------------
 7130|  3.44k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7130:13): [True: 3.44k, False: 0]
  ------------------
 7131|  3.44k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7131:13): [True: 3.44k, False: 0]
  ------------------
 7132|  3.44k|            SCN_UNLIKELY_ATTR
 7133|       |            // clang-format off
 7134|  3.44k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7135|       |            // clang-format on
 7136|  3.44k|        }
 7137|       |
 7138|      0|        Handler::on_localized();
 7139|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8416|  9.98M|{
 8417|  9.98M|#define SCN_VISIT(Type)                                         \
 8418|  9.98M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8419|  9.98M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8420|  9.98M|    }                                                           \
 8421|  9.98M|    else {                                                      \
 8422|  9.98M|        return vis(monostate_val);                              \
 8423|  9.98M|    }
 8424|       |
 8425|  9.98M|    monostate monostate_val{};
 8426|       |
 8427|  9.98M|    switch (arg.m_type) {
 8428|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8428:9): [True: 0, False: 9.98M]
  ------------------
 8429|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8430|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8430:9): [True: 0, False: 9.98M]
  ------------------
 8431|      0|            SCN_VISIT(short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8432|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8432:9): [True: 0, False: 9.98M]
  ------------------
 8433|      0|            SCN_VISIT(int);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8434|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8434:9): [True: 0, False: 9.98M]
  ------------------
 8435|      0|            SCN_VISIT(long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8436|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8436:9): [True: 0, False: 9.98M]
  ------------------
 8437|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8438|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8438:9): [True: 0, False: 9.98M]
  ------------------
 8439|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8440|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8440:9): [True: 0, False: 9.98M]
  ------------------
 8441|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8442|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8442:9): [True: 0, False: 9.98M]
  ------------------
 8443|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8444|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8444:9): [True: 0, False: 9.98M]
  ------------------
 8445|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8446|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8446:9): [True: 0, False: 9.98M]
  ------------------
 8447|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8448|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8448:9): [True: 0, False: 9.98M]
  ------------------
 8449|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8450|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8450:9): [True: 0, False: 9.98M]
  ------------------
 8451|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8452|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8452:9): [True: 0, False: 9.98M]
  ------------------
 8453|      0|            SCN_VISIT(char);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8454|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8454:9): [True: 0, False: 9.98M]
  ------------------
 8455|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8456|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8456:9): [True: 0, False: 9.98M]
  ------------------
 8457|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8458|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8458:9): [True: 0, False: 9.98M]
  ------------------
 8459|      0|            SCN_VISIT(float);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8460|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8460:9): [True: 0, False: 9.98M]
  ------------------
 8461|      0|            SCN_VISIT(double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8462|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8462:9): [True: 0, False: 9.98M]
  ------------------
 8463|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8464|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8464:9): [True: 0, False: 9.98M]
  ------------------
 8465|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8466|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8466:9): [True: 0, False: 9.98M]
  ------------------
 8467|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8468|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8468:9): [True: 0, False: 9.98M]
  ------------------
 8469|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8470|  9.98M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8470:9): [True: 9.98M, False: 0]
  ------------------
 8471|  9.98M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8418|  9.98M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|  9.98M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|  9.98M|    }                                                           \
  |  | 8421|  9.98M|    else {                                                      \
  |  | 8422|  9.98M|        return vis(monostate_val);                              \
  |  | 8423|  9.98M|    }
  ------------------
 8472|      0|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8472:9): [True: 0, False: 9.98M]
  ------------------
 8473|      0|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8474|      0|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8474:9): [True: 0, False: 9.98M]
  ------------------
 8475|      0|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8418|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  |  ------------------
  |  |  |  Branch (8418:19): [Folded - Ignored]
  |  |  ------------------
  |  | 8419|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8420|      0|    }                                                           \
  |  | 8421|      0|    else {                                                      \
  |  | 8422|      0|        return vis(monostate_val);                              \
  |  | 8423|      0|    }
  ------------------
 8476|       |
 8477|      0|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 9.98M]
  ------------------
 8478|      0|#if !SCN_DISABLE_TYPE_CUSTOM
 8479|      0|            return vis(
 8480|      0|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8481|       |#else
 8482|       |            return vis(monostate_val);
 8483|       |#endif
 8484|       |
 8485|      0|            SCN_CLANG_PUSH
 8486|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8487|       |
 8488|      0|            SCN_UNLIKELY_ATTR
 8489|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8489:9): [True: 0, False: 9.98M]
  ------------------
 8490|      0|        default: {
  ------------------
  |  Branch (8490:9): [True: 0, False: 9.98M]
  ------------------
 8491|      0|            return vis(monostate_val);
 8492|      0|        }
 8493|       |
 8494|  9.98M|            SCN_CLANG_POP
 8495|  9.98M|    }
 8496|       |
 8497|      0|#undef SCN_VISIT
 8498|       |
 8499|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8500|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8501|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4075|  22.3k|    {
 4076|  22.3k|        sync(0);
 4077|  22.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5419|   101k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5419|  14.9M|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEEOSK_NS0_24basic_scan_format_stringIwNSP_13type_identityISK_E4typeEJDpNS11_ISV_E4typeEEEE:
   88|  9.98M|{
   89|  9.98M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.98M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.98M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.98M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  19.9M|{
   44|  19.9M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  19.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  19.9M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EELPv0ELSH_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESP_NS0_6detail22borrowed_tail_subrangeISL_Xsr6rangesE14borrowed_rangeISL_EEE4typeEE4typeEJDpT_EEEEERKT0_OSL_NS0_24basic_scan_format_stringIwNSQ_13type_identityISL_E4typeEJDpNS15_ISW_E4typeEEEE:
  126|  9.98M|{
  127|  9.98M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.98M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.98M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.98M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeELPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESI_NS0_6detail22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT0_OSE_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  19.9M|{
   60|  19.9M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  19.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  19.9M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJT_EEEEEOSK_:
  162|  4.98M|{
  163|  4.98M|    T value;
  164|  4.98M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.98M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.98M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.98M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.98M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 4.98M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.72k|    }                                                  \
  |  |  |  | 3671|  4.98M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.98M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.98M|    static_cast<    \
  |  |  929|  4.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.98M|    static_cast<    \
  |  |  929|  4.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.98M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  9.97M|{
   72|  9.97M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  9.97M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEEOSI_NS0_24basic_scan_format_stringIwNSN_13type_identityISI_E4typeEJDpNSZ_IST_E4typeEEEE:
   88|  9.98M|{
   89|  9.98M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.98M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.98M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.98M|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EELPv0ELSF_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSJ_NS0_24basic_scan_format_stringIwNSO_13type_identityISJ_E4typeEJDpNS13_ISU_E4typeEEEE:
  126|  9.98M|{
  127|  9.98M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.98M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.98M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.98M|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJT_EEEEEOSI_:
  162|  4.98M|{
  163|  4.98M|    T value;
  164|  4.98M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.98M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.98M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.98M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.98M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 4.98M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.72k|    }                                                  \
  |  |  |  | 3671|  4.98M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.98M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.98M|    static_cast<    \
  |  |  929|  4.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.98M|    static_cast<    \
  |  |  929|  4.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.98M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEEOSP_NS0_24basic_scan_format_stringIwNSU_13type_identityISP_E4typeEJDpNS16_IS10_E4typeEEEE:
   88|  9.98M|{
   89|  9.98M|    auto args = make_scan_args<wscan_context, Args...>();
   90|  9.98M|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|  9.98M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|  9.98M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|  9.98M|{
   44|  9.98M|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|  9.98M|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EELPv0ELSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISQ_Xsr6rangesE14borrowed_rangeISQ_EEE4typeEE4typeEJDpT_EEEEERKT0_OSQ_NS0_24basic_scan_format_stringIwNSV_13type_identityISQ_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|  9.98M|{
  127|  9.98M|    auto args = make_scan_args<wscan_context, Args...>();
  128|  9.98M|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|  9.98M|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|  9.98M|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeELPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT0_OSJ_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|  9.98M|{
   60|  9.98M|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|  9.98M|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJT_EEEEEOSP_:
  162|  4.98M|{
  163|  4.98M|    T value;
  164|  4.98M|    auto arg = detail::make_arg<wscan_context>(value);
  165|  4.98M|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3672|  4.98M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  4.98M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  4.98M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  4.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.72k, False: 4.98M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.72k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.72k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.72k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.72k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.72k|    }                                                  \
  |  |  |  | 3671|  4.98M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|  4.98M|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.98M|    static_cast<    \
  |  |  929|  4.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  4.98M|    static_cast<    \
  |  |  929|  4.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|  4.98M|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|  4.98M|{
   72|  4.98M|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|  4.98M|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  652|  30.1M|{
  653|  30.1M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  30.1M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   141k|{
 2184|   141k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   141k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  72.2k|{
 2192|  72.2k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  72.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  72.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 67.0k, False: 5.16k]
  |  |  ------------------
  ------------------
 2194|  67.0k|        source.sync(*n);
 2195|  67.0k|    }
 2196|  5.16k|    else {
 2197|  5.16k|        source.sync_all();
 2198|  5.16k|    }
 2199|  72.2k|    return n;
 2200|  72.2k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|  19.9M|{
 2208|  19.9M|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|  19.9M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|  9.98M|{
 2216|  9.98M|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|  9.98M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  9.98M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.97M, False: 10.3k]
  |  |  ------------------
  ------------------
 2218|  9.97M|        source.sync(*n);
 2219|  9.97M|    }
 2220|  10.3k|    else {
 2221|  10.3k|        source.sync_all();
 2222|  10.3k|    }
 2223|  9.98M|    return n;
 2224|  9.98M|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   497k|{
  194|   497k|    return find_classic_impl(
  195|   497k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   497k|        [](char32_t cp) { return is_cp_space(cp); });
  197|   497k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   503k|{
  202|   503k|    return find_classic_impl(
  203|   503k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   503k|        [](char32_t cp) { return !is_cp_space(cp); });
  205|   503k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   141k|{
 2141|   141k|    return vscan_internal(source, format, args);
 2142|   141k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  72.2k|{
 2147|  72.2k|    auto n = vscan_internal(source, format, args);
 2148|  72.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  72.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 67.0k, False: 5.16k]
  |  |  ------------------
  ------------------
 2149|  67.0k|        source.sync(*n);
 2150|  67.0k|    }
 2151|  5.16k|    else {
 2152|  5.16k|        source.sync_all();
 2153|  5.16k|    }
 2154|  72.2k|    return n;
 2155|  72.2k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|  19.9M|{
 2161|  19.9M|    return vscan_internal(source, format, args);
 2162|  19.9M|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|  9.98M|{
 2167|  9.98M|    auto n = vscan_internal(source, format, args);
 2168|  9.98M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  9.98M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 9.97M, False: 10.3k]
  |  |  ------------------
  ------------------
 2169|  9.97M|        source.sync(*n);
 2170|  9.97M|    }
 2171|  10.3k|    else {
 2172|  10.3k|        source.sync_all();
 2173|  10.3k|    }
 2174|  9.98M|    return n;
 2175|  9.98M|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  66.8k|{
 2251|  66.8k|    return vscan_value_internal(source, arg);
 2252|  66.8k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  34.2k|{
 2256|  34.2k|    auto n = vscan_value_internal(source, arg);
 2257|  34.2k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  34.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 33.3k, False: 861]
  |  |  ------------------
  ------------------
 2258|  33.3k|        source.sync(*n);
 2259|  33.3k|    }
 2260|    861|    else {
 2261|    861|        source.sync_all();
 2262|    861|    }
 2263|  34.2k|    return n;
 2264|  34.2k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|  9.97M|{
 2270|  9.97M|    return vscan_value_internal(source, arg);
 2271|  9.97M|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|  4.98M|{
 2276|  4.98M|    auto n = vscan_value_internal(source, arg);
 2277|  4.98M|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  4.98M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.98M, False: 1.72k]
  |  |  ------------------
  ------------------
 2278|  4.98M|        source.sync(*n);
 2279|  4.98M|    }
 2280|  1.72k|    else {
 2281|  1.72k|        source.sync_all();
 2282|  1.72k|    }
 2283|  4.98M|    return n;
 2284|  4.98M|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   497k|{
  118|   497k|    auto it = source.begin();
  119|       |
  120|   889k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 717k, False: 171k]
  ------------------
  121|   717k|        auto sv =
  122|   717k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   717k|                .substr(0, 8);
  124|       |
  125|   717k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 545k, False: 172k]
  ------------------
  126|   545k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   545k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   545k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 263k, False: 281k]
  ------------------
  129|   263k|                break;
  130|   263k|            }
  131|   281k|            continue;
  132|   545k|        }
  133|       |
  134|   520k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 409k, False: 110k]
  ------------------
  135|   409k|            auto tmp =
  136|   409k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   409k|            auto res = get_next_code_point(tmp);
  138|   409k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 61.5k, False: 348k]
  ------------------
  139|  61.5k|                return it;
  140|  61.5k|            }
  141|   348k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   348k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   348k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   348k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   348k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   348k|        }
  145|   172k|    }
  146|       |
  147|   435k|    return detail::make_string_view_iterator(source, it);
  148|   497k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|  1.22M|{
  105|  1.22M|    static_assert(sizeof(*source.data()) == 1);
  106|  1.22M|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|  1.22M|    uint64_t word{};
  108|  1.22M|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|  1.22M|    return has_byte_greater(word, 127) != 0;
  111|  1.22M|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  2.38M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   409k|        [](char32_t cp) { return is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   503k|{
  118|   503k|    auto it = source.begin();
  119|       |
  120|   678k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 507k, False: 170k]
  ------------------
  121|   507k|        auto sv =
  122|   507k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   507k|                .substr(0, 8);
  124|       |
  125|   507k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 438k, False: 69.2k]
  ------------------
  126|   438k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   438k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   438k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 265k, False: 172k]
  ------------------
  129|   265k|                break;
  130|   265k|            }
  131|   172k|            continue;
  132|   438k|        }
  133|       |
  134|   142k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 141k, False: 1.94k]
  ------------------
  135|   141k|            auto tmp =
  136|   141k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   141k|            auto res = get_next_code_point(tmp);
  138|   141k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 67.2k, False: 73.7k]
  ------------------
  139|  67.2k|                return it;
  140|  67.2k|            }
  141|  73.7k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  73.7k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  73.7k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  73.7k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  73.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  73.7k|        }
  145|  69.2k|    }
  146|       |
  147|   436k|    return detail::make_string_view_iterator(source, it);
  148|   503k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|  1.32M|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   141k|        [](char32_t cp) { return !is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   144k|{
 2073|   144k|    const auto argcount = args.size();
 2074|   144k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 68.4k, False: 76.0k]
  |  Branch (2074:60): [True: 68.4k, False: 0]
  ------------------
 2075|  68.4k|        auto arg = args.get(0);
 2076|  68.4k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  68.4k|    static_cast<    \
  |  |  929|  68.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  68.4k|    }
 2078|       |
 2079|  76.0k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 76.0k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  76.0k|    SCN_UNLIKELY_ATTR
 2087|  76.0k|    {
 2088|  76.0k|        auto handler = format_handler<false, CharT>{
 2089|  76.0k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  76.0k|    static_cast<    \
  |  |  929|  76.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  76.0k|    static_cast<    \
  |  |  929|  76.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  76.0k|        return vscan_parse_format_string(format, handler);
 2091|  76.0k|    }
 2092|  76.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   427k|{
 1625|   427k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 225k, False: 202k]
  ------------------
 1626|   225k|        return false;
 1627|   225k|    }
 1628|   202k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 202k, False: 0]
  |  Branch (1628:39): [True: 202k, False: 0]
  ------------------
 1629|   427k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   102k|{
 1658|   102k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   102k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   102k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 102k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   102k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   102k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   102k|    static_cast<    \
  |  |  929|   102k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   102k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.58k, False: 100k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.58k|    }                                                  \
  |  |  |  | 3671|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   100k|    return it.position();
 1675|   102k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1902|   149k|    {
 1903|   149k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1721|  30.1M|    {
 1722|  30.1M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  30.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30.1M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  30.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1852|   149k|    {
 1853|   149k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   149k|{
 2038|   149k|    const auto beg = handler.get_ctx().begin();
 2039|   149k|    detail::parse_format_string<false>(format, handler);
 2040|   149k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 132k]
  |  |  ------------------
  ------------------
 2041|  17.2k|        return unexpected(handler.error);
 2042|  17.2k|    }
 2043|   132k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   149k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   996k|    {
 2022|   996k|        return ctx.get();
 2023|   996k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   996k|    {
 1857|   996k|        return contiguous_ctx;
 1858|   996k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   281k|    {
 1907|   281k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 281k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   281k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   149k|{
 1681|   149k|    auto arg = ctx.arg(id);
 1682|   149k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 149k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   149k|    return arg;
 1686|   149k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  30.1M|    {
 1797|  30.1M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  30.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30.1M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  30.1M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  30.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30.1M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  30.1M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  30.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.1M, False: 0]
  |  |  ------------------
  ------------------
 1807|  30.1M|            visited_args_lower64 |= (1ull << id);
 1808|  30.1M|            return;
 1809|  30.1M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  30.1M|    {
 1782|  30.1M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  30.1M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 30.1M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  30.1M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  30.1M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 30.1M, False: 0]
  |  |  ------------------
  ------------------
 1788|  30.1M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  30.1M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  30.1M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  46.4k|    {
 1766|  46.4k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  46.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 46.4k, False: 0]
  |  |  ------------------
  ------------------
 1767|  46.4k|            error = err;
 1768|  46.4k|        }
 1769|  46.4k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   149k|    {
 1944|   149k|        return parse_ctx.next_arg_id();
 1945|   149k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   149k|    {
 1985|   149k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   149k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   149k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 149k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   149k|        auto specs = detail::format_specs{};
 1998|   149k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   149k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   149k|            arg.type()};
 2001|       |
 2002|   149k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   149k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 149k]
  |  Branch (2003:29): [True: 0, False: 149k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   149k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.88k, False: 142k]
  |  |  ------------------
  ------------------
 2009|  6.88k|            return parse_ctx.begin();
 2010|  6.88k|        }
 2011|   142k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   142k|        on_visit_scan_arg(
 2014|   142k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   142k|                                           get_ctx().locale()},
 2016|   142k|            arg);
 2017|   142k|        return parse_ctx.begin();
 2018|   149k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1700|   149k|    {
 1701|   149k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   142k|    {
 1956|   142k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 142k]
  |  Branch (1956:23): [True: 0, False: 142k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   142k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   142k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   142k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 132k]
  |  |  ------------------
  ------------------
 1963|  10.3k|            on_error(r.error());
 1964|  10.3k|        }
 1965|   132k|        else {
 1966|   132k|            get_ctx().advance_to(*r);
 1967|   132k|        }
 1968|   142k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  30.9k|    {
 1761|  30.9k|        SCN_UNLIKELY_ATTR
 1762|  30.9k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  30.9k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  30.1M|    {
 1729|  30.1M|        {
 1730|  30.1M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 30.1M]
  ------------------
 1731|  30.1M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 30.1M]
  ------------------
 1732|  30.1M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  30.1M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  30.1M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 30.1M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  30.1M|        }
 1739|       |
 1740|  30.1M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 30.1M, False: 0]
  ------------------
 1741|  30.1M|            return;
 1742|  30.1M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  30.1M|    {
 1777|  30.1M|        return error;
 1778|  30.1M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  90.5M|    {
 1773|  90.5M|        return static_cast<bool>(error);
 1774|  90.5M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1902|  76.0k|    {
 1903|  76.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1829|  76.0k|    {
 1830|  76.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  76.0k|{
 2038|  76.0k|    const auto beg = handler.get_ctx().begin();
 2039|  76.0k|    detail::parse_format_string<false>(format, handler);
 2040|  76.0k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.61k, False: 67.4k]
  |  |  ------------------
  ------------------
 2041|  8.61k|        return unexpected(handler.error);
 2042|  8.61k|    }
 2043|  67.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  76.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   507k|    {
 2022|   507k|        return ctx.get();
 2023|   507k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   507k|    {
 1834|   507k|        return ctx;
 1835|   507k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   143k|    {
 1907|   143k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 143k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   143k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  76.0k|{
 1681|  76.0k|    auto arg = ctx.arg(id);
 1682|  76.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 76.0k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  76.0k|    return arg;
 1686|  76.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  76.0k|    {
 1944|  76.0k|        return parse_ctx.next_arg_id();
 1945|  76.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  76.0k|    {
 1985|  76.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  76.0k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  76.0k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 76.0k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  76.0k|        auto specs = detail::format_specs{};
 1998|  76.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  76.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  76.0k|            arg.type()};
 2001|       |
 2002|  76.0k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  76.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 76.0k]
  |  Branch (2003:29): [True: 0, False: 76.0k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  76.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  76.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 72.5k]
  |  |  ------------------
  ------------------
 2009|  3.44k|            return parse_ctx.begin();
 2010|  3.44k|        }
 2011|  72.5k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  72.5k|        on_visit_scan_arg(
 2014|  72.5k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  72.5k|                                           get_ctx().locale()},
 2016|  72.5k|            arg);
 2017|  72.5k|        return parse_ctx.begin();
 2018|  76.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1700|  76.0k|    {
 1701|  76.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  72.5k|    {
 1956|  72.5k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 72.5k]
  |  Branch (1956:23): [True: 0, False: 72.5k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  72.5k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  72.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  72.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.16k, False: 67.4k]
  |  |  ------------------
  ------------------
 1963|  5.16k|            on_error(r.error());
 1964|  5.16k|        }
 1965|  67.4k|        else {
 1966|  67.4k|            get_ctx().advance_to(*r);
 1967|  67.4k|        }
 1968|  72.5k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   283k|{
 2053|   283k|    const auto argcount = args.size();
 2054|   283k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 133k, False: 149k]
  |  Branch (2054:60): [True: 133k, False: 0]
  ------------------
 2055|   133k|        auto arg = args.get(0);
 2056|   133k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   133k|    static_cast<    \
  |  |  929|   133k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   133k|    }
 2058|       |
 2059|   149k|    auto handler = format_handler<true, CharT>{
 2060|   149k|        ranges::subrange<const CharT*>{source.data(),
 2061|   149k|                                       source.data() + source.size()},
 2062|   149k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   149k|    return vscan_parse_format_string(format, handler);
 2064|   283k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   200k|{
 1638|   200k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 200k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   200k|    auto reader =
 1644|   200k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   200k|            ranges::subrange<const CharT*>{source.data(),
 1646|   200k|                                           source.data() + source.size()},
 1647|   200k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   200k|    static_cast<    \
  |  |  929|   200k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   200k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|   200k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   200k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   200k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.16k, False: 195k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.16k|    }                                                  \
  |  |  |  | 3671|   200k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   195k|    return ranges::distance(source.data(), it);
 1650|   200k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  39.9M|{
 2053|  39.9M|    const auto argcount = args.size();
 2054|  39.9M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 19.9M, False: 19.9M]
  |  Branch (2054:60): [True: 19.9M, False: 0]
  ------------------
 2055|  19.9M|        auto arg = args.get(0);
 2056|  19.9M|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  19.9M|    }
 2058|       |
 2059|  19.9M|    auto handler = format_handler<true, CharT>{
 2060|  19.9M|        ranges::subrange<const CharT*>{source.data(),
 2061|  19.9M|                                       source.data() + source.size()},
 2062|  19.9M|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|  19.9M|    return vscan_parse_format_string(format, handler);
 2064|  39.9M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  59.8M|{
 1625|  59.8M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 29.9M, False: 29.9M]
  ------------------
 1626|  29.9M|        return false;
 1627|  29.9M|    }
 1628|  29.9M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 29.9M, False: 0]
  |  Branch (1628:39): [True: 29.9M, False: 0]
  ------------------
 1629|  59.8M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  29.9M|{
 1638|  29.9M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  29.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 29.9M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  29.9M|    auto reader =
 1644|  29.9M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  29.9M|            ranges::subrange<const CharT*>{source.data(),
 1646|  29.9M|                                           source.data() + source.size()},
 1647|  29.9M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  29.9M|    static_cast<    \
  |  |  929|  29.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  29.9M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  29.9M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  29.9M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  29.9M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  29.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 10.3k, False: 29.9M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  10.3k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  10.3k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  10.3k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  10.3k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  10.3k|    }                                                  \
  |  |  |  | 3671|  29.9M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  29.9M|    return ranges::distance(source.data(), it);
 1650|  29.9M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1902|  19.9M|    {
 1903|  19.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1852|  19.9M|    {
 1853|  19.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  19.9M|{
 2038|  19.9M|    const auto beg = handler.get_ctx().begin();
 2039|  19.9M|    detail::parse_format_string<false>(format, handler);
 2040|  19.9M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 34.4k, False: 19.9M]
  |  |  ------------------
  ------------------
 2041|  34.4k|        return unexpected(handler.error);
 2042|  34.4k|    }
 2043|  19.9M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  19.9M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|   139M|    {
 2022|   139M|        return ctx.get();
 2023|   139M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|   139M|    {
 1857|   139M|        return contiguous_ctx;
 1858|   139M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  39.9M|    {
 1907|  39.9M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 39.9M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  39.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|  19.9M|{
 1681|  19.9M|    auto arg = ctx.arg(id);
 1682|  19.9M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 19.9M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  19.9M|    return arg;
 1686|  19.9M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|  19.9M|    {
 1944|  19.9M|        return parse_ctx.next_arg_id();
 1945|  19.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|  19.9M|    {
 1985|  19.9M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  19.9M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  19.9M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 19.9M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  19.9M|        auto specs = detail::format_specs{};
 1998|  19.9M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  19.9M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  19.9M|            arg.type()};
 2001|       |
 2002|  19.9M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  19.9M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 19.9M]
  |  Branch (2003:29): [True: 0, False: 19.9M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  19.9M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 13.7k, False: 19.9M]
  |  |  ------------------
  ------------------
 2009|  13.7k|            return parse_ctx.begin();
 2010|  13.7k|        }
 2011|  19.9M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  19.9M|        on_visit_scan_arg(
 2014|  19.9M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  19.9M|                                           get_ctx().locale()},
 2016|  19.9M|            arg);
 2017|  19.9M|        return parse_ctx.begin();
 2018|  19.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1700|  19.9M|    {
 1701|  19.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|  19.9M|    {
 1956|  19.9M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 19.9M]
  |  Branch (1956:23): [True: 0, False: 19.9M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  19.9M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  19.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  19.9M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 20.6k, False: 19.9M]
  |  |  ------------------
  ------------------
 1963|  20.6k|            on_error(r.error());
 1964|  20.6k|        }
 1965|  19.9M|        else {
 1966|  19.9M|            get_ctx().advance_to(*r);
 1967|  19.9M|        }
 1968|  19.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|  19.9M|{
 2073|  19.9M|    const auto argcount = args.size();
 2074|  19.9M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 9.97M, False: 9.98M]
  |  Branch (2074:60): [True: 9.97M, False: 0]
  ------------------
 2075|  9.97M|        auto arg = args.get(0);
 2076|  9.97M|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  9.97M|    static_cast<    \
  |  |  929|  9.97M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  9.97M|    }
 2078|       |
 2079|  9.98M|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 9.98M]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  9.98M|    SCN_UNLIKELY_ATTR
 2087|  9.98M|    {
 2088|  9.98M|        auto handler = format_handler<false, CharT>{
 2089|  9.98M|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  9.98M|    static_cast<    \
  |  |  929|  9.98M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  9.98M|        return vscan_parse_format_string(format, handler);
 2091|  9.98M|    }
 2092|  9.98M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  14.9M|{
 1658|  14.9M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  14.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 14.9M]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  14.9M|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  14.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 14.9M]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  14.9M|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  14.9M|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  14.9M|    static_cast<    \
  |  |  929|  14.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  14.9M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3672|  14.9M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.9M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.9M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 5.16k, False: 14.9M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  5.16k|    }                                                  \
  |  |  |  | 3671|  14.9M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  14.9M|    return it.position();
 1675|  14.9M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1902|  9.98M|    {
 1903|  9.98M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1829|  9.98M|    {
 1830|  9.98M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  9.98M|{
 2038|  9.98M|    const auto beg = handler.get_ctx().begin();
 2039|  9.98M|    detail::parse_format_string<false>(format, handler);
 2040|  9.98M|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.2k, False: 9.97M]
  |  |  ------------------
  ------------------
 2041|  17.2k|        return unexpected(handler.error);
 2042|  17.2k|    }
 2043|  9.97M|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  9.98M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  69.8M|    {
 2022|  69.8M|        return ctx.get();
 2023|  69.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  69.8M|    {
 1834|  69.8M|        return ctx;
 1835|  69.8M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|  19.9M|    {
 1907|  19.9M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 19.9M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  19.9M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  9.98M|{
 1681|  9.98M|    auto arg = ctx.arg(id);
 1682|  9.98M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.98M]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  9.98M|    return arg;
 1686|  9.98M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|  9.98M|    {
 1944|  9.98M|        return parse_ctx.next_arg_id();
 1945|  9.98M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|  9.98M|    {
 1985|  9.98M|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  9.98M|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  9.98M|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 9.98M]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  9.98M|        auto specs = detail::format_specs{};
 1998|  9.98M|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  9.98M|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  9.98M|            arg.type()};
 2001|       |
 2002|  9.98M|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  9.98M|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 9.98M]
  |  Branch (2003:29): [True: 0, False: 9.98M]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  9.98M|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.88k, False: 9.98M]
  |  |  ------------------
  ------------------
 2009|  6.88k|            return parse_ctx.begin();
 2010|  6.88k|        }
 2011|  9.98M|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  9.98M|        on_visit_scan_arg(
 2014|  9.98M|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  9.98M|                                           get_ctx().locale()},
 2016|  9.98M|            arg);
 2017|  9.98M|        return parse_ctx.begin();
 2018|  9.98M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1700|  9.98M|    {
 1701|  9.98M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  9.98M|    {
 1956|  9.98M|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 9.98M]
  |  Branch (1956:23): [True: 0, False: 9.98M]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  9.98M|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  9.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  9.98M|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 9.97M]
  |  |  ------------------
  ------------------
 1963|  10.3k|            on_error(r.error());
 1964|  10.3k|        }
 1965|  9.97M|        else {
 1966|  9.97M|            get_ctx().advance_to(*r);
 1967|  9.97M|        }
 1968|  9.98M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  66.8k|{
 2099|  66.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  66.8k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  34.2k|{
 2099|  34.2k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  34.2k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  9.97M|{
 2099|  9.97M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  9.97M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  4.98M|{
 2099|  4.98M|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  4.98M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  4.98M|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1362|    861|{
 1363|    861|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1364|       |
 1365|    861|    if constexpr (sizeof(SourceCharT) == 1) {
  ------------------
  |  Branch (1365:19): [Folded - Ignored]
  ------------------
 1366|    861|        if constexpr (sizeof(DestCharT) == 2) {
  ------------------
  |  Branch (1366:23): [Folded - Ignored]
  ------------------
 1367|    861|            std::u32string tmp;
 1368|    861|            transcode_to_string_impl_to32(src, tmp);
 1369|    861|            return transcode_to_string_impl_32to16<false>(
 1370|    861|                std::u32string_view{tmp}, dest);
 1371|    861|        }
 1372|    861|        else if constexpr (sizeof(DestCharT) == 4) {
  ------------------
  |  Branch (1372:28): [Folded - Ignored]
  ------------------
 1373|    861|            return transcode_to_string_impl_to32(src, dest);
 1374|    861|        }
 1375|    861|    }
 1376|      0|    else if constexpr (sizeof(SourceCharT) == 2) {
 1377|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1378|      0|            std::u32string tmp;
 1379|      0|            transcode_to_string_impl_to32(src, tmp);
 1380|      0|            return transcode_to_string_impl_32to8<false>(
 1381|      0|                std::u32string_view{tmp}, dest);
 1382|      0|        }
 1383|      0|        else if constexpr (sizeof(DestCharT) == 4) {
 1384|      0|            return trasncode_to_string_impl_to32(src, dest);
 1385|      0|        }
 1386|      0|    }
 1387|      0|    else if constexpr (sizeof(SourceCharT) == 4) {
 1388|      0|        if constexpr (sizeof(DestCharT) == 1) {
 1389|      0|            return transcode_to_string_impl_32to8<false>(src, dest);
 1390|      0|        }
 1391|      0|        else if constexpr (sizeof(DestCharT) == 2) {
 1392|      0|            return transcode_to_string_impl_32to16<false>(src, dest);
 1393|      0|        }
 1394|      0|    }
 1395|       |
 1396|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1397|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1398|      0|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1255|    861|{
 1256|    861|    static_assert(sizeof(DestCharT) == 4);
 1257|       |
 1258|    861|    auto it = src.begin();
 1259|   376k|    while (it != src.end()) {
  ------------------
  |  Branch (1259:12): [True: 375k, False: 861]
  ------------------
 1260|   375k|        auto res = get_next_code_point(
 1261|   375k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1262|   375k|                                                                 src.end()));
 1263|   375k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   375k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.01k, False: 370k]
  |  |  ------------------
  ------------------
 1264|  5.01k|            dest.push_back(DestCharT{0xfffd});
 1265|  5.01k|        }
 1266|   370k|        else {
 1267|   370k|            dest.push_back(res.value);
 1268|   370k|        }
 1269|   375k|        it = detail::make_string_view_iterator(src, res.iterator);
 1270|   375k|    }
 1271|    861|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   925k|{
 1169|   925k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   925k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   925k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   925k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   925k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   925k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 14.2k, False: 911k]
  |  |  ------------------
  ------------------
 1173|  14.2k|        return {get_start_for_next_code_point(input),
 1174|  14.2k|                detail::invalid_code_point};
 1175|  14.2k|    }
 1176|   911k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   911k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.31k, False: 907k]
  |  |  ------------------
  ------------------
 1177|  4.31k|        return {input.end(), detail::invalid_code_point};
 1178|  4.31k|    }
 1179|       |
 1180|   907k|    return {input.begin() + len,
 1181|   907k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   911k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  14.2k|{
 1155|  14.2k|    auto it = input.begin();
 1156|  72.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 71.7k, False: 485]
  ------------------
 1157|  71.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 13.7k, False: 57.9k]
  ------------------
 1158|  13.7k|            break;
 1159|  13.7k|        }
 1160|  71.7k|    }
 1161|  14.2k|    return it;
 1162|  14.2k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2930|  15.4k|    {
 2931|  15.4k|        SCN_UNLIKELY_ATTR
 2932|  15.4k|        m_msg = msg;
 2933|  15.4k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2935|  30.1M|    {
 2936|  30.1M|        return m_msg == nullptr;
 2937|  30.1M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  3.70M|{
  458|  3.70M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  3.70M|        static_cast<unsigned char>(ch))];
  460|  3.70M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  43.1k|{
  469|  43.1k|    return static_cast<unsigned char>(ch) <= 127;
  470|  43.1k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  10.5k|{
  474|  10.5k|#if WCHAR_MIN < 0
  475|  10.5k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 9.60k, False: 918]
  |  Branch (475:23): [True: 5.83k, False: 3.77k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  10.5k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|  1.22M|{
  539|  1.22M|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|  1.22M|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|   120M|{
  784|   120M|    return e != eof_error::good;
  785|   120M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  22.4k|{
  798|  22.4k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  22.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  22.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  22.4k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  22.4k|}
_ZN3scn2v34impl11is_cp_spaceEDi:
 1199|   853M|{
 1200|       |    // Pattern_White_Space property
 1201|   853M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (1201:13): [True: 694M, False: 159M]
  |  Branch (1201:27): [True: 97.3M, False: 596M]
  ------------------
 1202|   853M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (1202:12): [True: 117M, False: 638M]
  ------------------
 1203|   853M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (1203:12): [True: 1.95M, False: 636M]
  ------------------
 1204|   853M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (1204:12): [True: 358k, False: 636M]
  ------------------
 1205|   853M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (1205:12): [True: 374k, False: 636M]
  ------------------
 1206|   853M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (1206:12): [True: 803k, False: 635M]
  ------------------
 1207|   853M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (1207:12): [True: 0, False: 635M]
  ------------------
 1208|   853M|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6007|  30.1M|{
 6008|  30.1M|    if (specs.width != 0) {
  ------------------
  |  Branch (6008:9): [True: 0, False: 30.1M]
  ------------------
 6009|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6009:13): [True: 0, False: 0]
  ------------------
 6010|      0|            return {scan_error::invalid_scanned_value,
 6011|      0|                    "Scanned value too narrow, width did not exceed what "
 6012|      0|                    "was specified in the format string"};
 6013|      0|        }
 6014|      0|    }
 6015|  30.1M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6015:9): [True: 0, False: 30.1M]
  ------------------
 6016|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6016:13): [True: 0, False: 0]
  ------------------
 6017|      0|            return {scan_error::invalid_scanned_value,
 6018|      0|                    "Scanned value too wide, width exceeded the specified "
 6019|      0|                    "precision"};
 6020|      0|        }
 6021|      0|    }
 6022|  30.1M|    return {};
 6023|  30.1M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   662k|    {
  304|   662k|        ranges::advance(x, n);
  305|   662k|        return x;
  306|   662k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   662k|    {
  268|   662k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   662k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   662k|    {
  151|   662k|        i += n;
  152|   662k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.41M|    {
  108|  1.41M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.41M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.41M|    {
   87|  1.41M|        return s - i;
   88|  1.41M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  49.8M|    {
  108|  49.8M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  49.8M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  49.8M|    {
   87|  49.8M|        return s - i;
   88|  49.8M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   173k|{
  981|   173k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|   173k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|   173k|        return true;
  984|   173k|    }
  985|   173k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|   173k|                           ranges::const_iterator_t<Range>,
  987|   173k|                           typename detail::basic_scan_buffer<
  988|   173k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   173k|        auto beg = r.begin();
  990|   173k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 173k, False: 0]
  ------------------
  991|   173k|            return false;
  992|   173k|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|   173k|    else {
 1006|   173k|        return false;
 1007|   173k|    }
 1008|   173k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  38.6k|    {
  763|  38.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  38.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  38.6k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  7.88k|    {
  754|  7.88k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEcE_clESE_c:
  743|  19.3k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  19.3k|              cvref<T> obj = *get<T>(fn);
  745|  19.3k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  19.3k|                  obj(static_cast<decltype(args)>(args)...);
  747|  19.3k|              }
  748|  19.3k|              else {
  749|  19.3k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  19.3k|              }
  751|  19.3k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  19.3k|    {
  684|  19.3k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  19.3k|            return static_cast<T*>(s.m_cp);
  686|  19.3k|        }
  687|  19.3k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  19.3k|            return static_cast<T*>(s.m_p);
  689|  19.3k|        }
  690|  19.3k|        else {
  691|  19.3k|            return reinterpret_cast<T*>(s.m_fp);
  692|  19.3k|        }
  693|  19.3k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEELPv0EEEPT_:
  661|  7.88k|        {
  662|  7.88k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  1.07G|    {
  763|  1.07G|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  1.07G|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  1.07G|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  74.9M|    {
  754|  74.9M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEDiE_clESE_Di:
  743|   217M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   217M|              cvref<T> obj = *get<T>(fn);
  745|   217M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   217M|                  obj(static_cast<decltype(args)>(args)...);
  747|   217M|              }
  748|   217M|              else {
  749|   217M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   217M|              }
  751|   217M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|   217M|    {
  684|   217M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   217M|            return static_cast<T*>(s.m_cp);
  686|   217M|        }
  687|   217M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   217M|            return static_cast<T*>(s.m_p);
  689|   217M|        }
  690|   217M|        else {
  691|   217M|            return reinterpret_cast<T*>(s.m_fp);
  692|   217M|        }
  693|   217M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEELPv0EEEPT_:
  661|  74.9M|        {
  662|  74.9M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  70.8k|    {
 6037|  70.8k|        const bool need_skipped_width =
 6038|  70.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 70.8k]
  |  Branch (6038:33): [True: 0, False: 70.8k]
  ------------------
 6039|  70.8k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  70.8k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 70.8k]
  ------------------
 6043|  70.8k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 70.8k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  70.8k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 70.8k, False: 0]
  |  Branch (6047:56): [True: 68.2k, False: 2.62k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  68.2k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 68.2k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   135k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  68.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  68.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  68.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  68.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 67.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.10k|    }                                                  \
  |  |  |  | 3671|  68.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  67.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   135k|                            make_eof_scan_error));
 6058|       |
 6059|   135k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 67.1k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  67.1k|            return result_type{it, 0};
 6067|   135k|        }
 6068|       |
 6069|  2.62k|        return result_type{rng.begin(), 0};
 6070|  70.8k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  2.62k|{
 1976|  2.62k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  2.62k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  2.62k|{
 1957|  2.62k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  2.62k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  2.62k|    }
 1960|  2.62k|    else {
 1961|  2.62k|        auto first = range.begin();
 1962|  6.47k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 6.43k, False: 36]
  ------------------
 1963|  6.43k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 2.59k, False: 3.84k]
  ------------------
 1964|  2.59k|                return first;
 1965|  2.59k|            }
 1966|  6.43k|        }
 1967|     36|        return first;
 1968|  2.62k|    }
 1969|  2.62k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  67.4k|    {
  108|  67.4k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  67.4k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  67.4k|    {
   94|  67.4k|        iter_difference_t<I> counter{0};
   95|   776k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 708k, False: 67.4k]
  ------------------
   96|   708k|            ++i;
   97|   708k|            ++counter;
   98|   708k|        }
   99|  67.4k|        return counter;
  100|  67.4k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   273k|{
  950|   273k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   273k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.71k, False: 270k]
  |  |  ------------------
  ------------------
  951|  2.71k|        return eof_error::eof;
  952|  2.71k|    }
  953|   270k|    return eof_error::good;
  954|   273k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  2.13M|{
  944|  2.13M|    return is_range_eof(r.begin(), r.end());
  945|  2.13M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  2.13M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  2.13M|    {
  937|  2.13M|        return begin == end;
  938|  2.13M|    }
  939|  2.13M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1682|   169k|{
 1683|   169k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   169k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   169k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   169k|        return string_view_wrapper{SCN_FWD(range)};
 1687|   169k|    }
 1688|   169k|    else {
 1689|   169k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|   169k|    }
 1691|   169k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EELPv0EEEOT_:
 1536|   169k|    {
 1537|   169k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   169k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|   169k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1620|   169k|    {
 1621|   169k|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|   169k|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|   169k|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|   169k|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|   169k|            m_storage.reset();
 1627|   169k|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|   169k|        }
 1629|   169k|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|   169k|                                          std::basic_string<CharT>>) {
 1631|   169k|            m_storage.emplace(SCN_FWD(range));
 1632|   169k|            m_view = string_view_type{*m_storage};
 1633|   169k|        }
 1634|   169k|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|   169k|                                          typename detail::basic_scan_buffer<
 1636|   169k|                                              value_t>::forward_iterator> &&
 1637|   169k|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|   169k|            auto beg_seg = range.begin().contiguous_segment();
 1639|   169k|            auto end_seg = range.end().contiguous_segment();
 1640|   169k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   169k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.04k, False: 165k]
  |  |  ------------------
  ------------------
 1641|   169k|                             detail::to_address(end_seg.end()))) {
 1642|  4.04k|                auto& str = m_storage.emplace();
 1643|  4.04k|                str.reserve(range.end().position() - range.begin().position());
 1644|  4.04k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  4.04k|                m_view = string_view_type{str};
 1646|  4.04k|                return;
 1647|  4.04k|            }
 1648|       |
 1649|   165k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|   165k|                                                            end_seg.data());
 1651|   165k|            m_storage.reset();
 1652|   165k|        }
 1653|   169k|        else {
 1654|   169k|            auto& str = m_storage.emplace();
 1655|   169k|            if constexpr (ranges::sized_range<Range>) {
 1656|   169k|                str.reserve(range.size());
 1657|   169k|            }
 1658|   169k|            if constexpr (ranges::common_range<Range>) {
 1659|   169k|                std::copy(ranges::begin(range), ranges::end(range),
 1660|   169k|                          std::back_inserter(str));
 1661|   169k|            }
 1662|   169k|            else {
 1663|   169k|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|   169k|                     ++it) {
 1665|   169k|                    str.push_back(*it);
 1666|   169k|                }
 1667|   169k|            }
 1668|   169k|            m_view = string_view_type{str};
 1669|   169k|        }
 1670|   169k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1581|   333k|    {
 1582|   333k|        return m_view;
 1583|   333k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1571|   169k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  66.9k|    {
 6079|  66.9k|        const bool need_skipped_width =
 6080|  66.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 66.9k]
  |  Branch (6080:33): [True: 0, False: 66.9k]
  ------------------
 6081|  66.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  66.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 66.9k]
  ------------------
 6084|  66.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 66.9k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  66.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 66.9k, False: 0]
  ------------------
 6093|  66.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 888, False: 66.0k]
  ------------------
 6094|  66.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 888]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|    888|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 888]
  ------------------
 6096|    888|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  66.9k|        return result_type{rng.begin(), 0};
 6118|  66.9k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   533k|{
  950|   533k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   533k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.27k, False: 528k]
  |  |  ------------------
  ------------------
  951|  5.27k|        return eof_error::eof;
  952|  5.27k|    }
  953|   528k|    return eof_error::good;
  954|   533k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   533k|{
  944|   533k|    return is_range_eof(r.begin(), r.end());
  945|   533k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   533k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   533k|    {
  937|   533k|        return begin == end;
  938|   533k|    }
  939|   533k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   330k|{
 1683|   330k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   330k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   330k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   330k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   330k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   330k|    }
 1688|   330k|    else {
 1689|   330k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   330k|    }
 1691|   330k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   330k|    {
 1490|   330k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1502|  1.81M|    {
 1503|  1.81M|        return sv;
 1504|  1.81M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  5.25k|{
 1976|  5.25k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  5.25k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  5.25k|{
 1957|  5.25k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  5.25k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  5.25k|    }
 1960|  5.25k|    else {
 1961|  5.25k|        auto first = range.begin();
 1962|  5.25k|        for (; first != range.end(); ++first) {
 1963|  5.25k|            if (pred(*first)) {
 1964|  5.25k|                return first;
 1965|  5.25k|            }
 1966|  5.25k|        }
 1967|  5.25k|        return first;
 1968|  5.25k|    }
 1969|  5.25k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|   333k|{
 2951|   333k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 333k, False: 0]
  ------------------
 2952|   333k|        auto it = read_while_classic_space(range);
 2953|   333k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   333k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   333k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.09k, False: 329k]
  |  |  ------------------
  ------------------
 2955|  4.09k|            return unexpected(e);
 2956|  4.09k|        }
 2957|       |
 2958|   329k|        return it;
 2959|   333k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   333k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|   333k|{
 2117|   333k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   333k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   333k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   333k|        auto buf = make_contiguous_buffer(range);
 2121|   333k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   333k|        return ranges::next(range.begin(),
 2123|   333k|                            ranges::distance(buf.view().begin(), it));
 2124|   333k|    }
 2125|   333k|    else {
 2126|   333k|        auto it = range.begin();
 2127|       |
 2128|   333k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2129|   333k|            auto seg = get_contiguous_beginning(range);
 2130|   333k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   333k|                seg_it != seg.end()) {
 2132|   333k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|   333k|            }
 2134|   333k|            ranges::advance(it, seg.size());
 2135|   333k|        }
 2136|       |
 2137|   333k|        return read_while_code_point(
 2138|   333k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   333k|    }
 2140|   333k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1682|   662k|{
 1683|   662k|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|   662k|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|   662k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|   662k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   662k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|   662k|    }
 1688|   662k|    else {
 1689|   662k|        return contiguous_range_factory{SCN_FWD(range)};
 1690|   662k|    }
 1691|   662k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_:
 1489|   662k|    {
 1490|   662k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  3.85k|    {
  304|  3.85k|        ranges::advance(x, n);
  305|  3.85k|        return x;
  306|  3.85k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   338k|    {
  268|   338k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   338k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   338k|    {
  181|   641k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 302k, False: 338k]
  ------------------
  182|   302k|            ++i;
  183|   302k|        }
  184|   338k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1586|   170k|    {
 1587|   170k|        return m_storage.has_value();
 1588|   170k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1591|  3.25k|    {
 1592|  3.25k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  3.25k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.25k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  3.25k|        return *m_storage;
 1594|  3.25k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6192|  72.5k|    {
 6193|  72.5k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  72.5k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  72.5k|            auto rd = make_reader<T, char_type>();
 6198|  72.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  72.5k|                return unexpected(e);
 6200|  72.5k|            }
 6201|       |
 6202|  72.5k|            return impl(rd, range, value);
 6203|  72.5k|        }
 6204|  72.5k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  72.5k|            auto rd = make_reader<T, char_type>();
 6206|  72.5k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  72.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 70.8k]
  |  |  ------------------
  ------------------
 6207|  1.72k|                return unexpected(e);
 6208|  1.72k|            }
 6209|       |
 6210|  70.8k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 70.8k, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  70.8k|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  70.8k|                return impl(rd, range, value);
 6213|  70.8k|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  72.5k|        else {
 6221|  72.5k|            SCN_EXPECT(false);
 6222|  72.5k|            SCN_UNREACHABLE;
 6223|  72.5k|        }
 6224|  72.5k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5808|   346k|{
 5809|   346k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   346k|        return reader_impl_for_bool<CharT>{};
 5811|   346k|    }
 5812|   346k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   346k|        return reader_impl_for_char<CharT>{};
 5814|   346k|    }
 5815|   346k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   346k|        return reader_impl_for_wchar<CharT>{};
 5817|   346k|    }
 5818|   346k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   346k|        return reader_impl_for_code_point<CharT>{};
 5820|   346k|    }
 5821|   346k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   346k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   346k|        return reader_impl_for_string<CharT>{};
 5824|   346k|    }
 5825|   346k|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|   346k|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|   346k|        return reader_impl_for_string<CharT>{};
 5828|   346k|    }
 5829|   346k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   346k|                       std::is_same_v<T, wregex_matches>) {
 5831|   346k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   346k|    }
 5833|   346k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   346k|        return reader_impl_for_voidptr<CharT>{};
 5835|   346k|    }
 5836|   346k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   346k|        return reader_impl_for_float<CharT>{};
 5838|   346k|    }
 5839|   346k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   346k|                       !std::is_same_v<T, wchar_t> &&
 5841|   346k|                       !std::is_same_v<T, char32_t> &&
 5842|   346k|                       !std::is_same_v<T, bool>) {
 5843|   346k|        return reader_impl_for_int<CharT>{};
 5844|   346k|    }
 5845|   346k|    else {
 5846|   346k|        return reader_impl_for_monostate<CharT>{};
 5847|   346k|    }
 5848|   346k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5205|   518k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3039|   214k|    {
 3040|   214k|        reader_error_handler eh{};
 3041|   214k|        get_derived().check_specs_impl(specs, eh);
 3042|   214k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   214k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.16k, False: 209k]
  |  |  ------------------
  ------------------
 3043|  5.16k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  5.16k|        }
 3045|   209k|        return {};
 3046|   214k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3050|   214k|    {
 3051|   214k|        return static_cast<Derived&>(*this);
 3052|   214k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|   214k|    {
 5210|   214k|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|   214k|        SCN_GCC_PUSH
 5213|   214k|        SCN_GCC_IGNORE("-Wswitch")
 5214|   214k|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|   214k|        SCN_CLANG_PUSH
 5217|   214k|        SCN_CLANG_IGNORE("-Wswitch")
 5218|   214k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|   214k|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 214k]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 214k]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|   201k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 201k, False: 13.0k]
  ------------------
 5226|   201k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 201k]
  ------------------
 5227|   201k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 201k]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|   201k|                else {
 5231|   201k|                    m_type = reader_type::word;
 5232|   201k|                }
 5233|   201k|                break;
 5234|      0|            }
 5235|       |
 5236|  5.16k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 5.16k, False: 209k]
  ------------------
 5237|  5.16k|                m_type = reader_type::character;
 5238|  5.16k|                break;
 5239|       |
 5240|  7.88k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 7.88k, False: 207k]
  ------------------
 5241|  7.88k|                m_type = reader_type::character_set;
 5242|  7.88k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 214k]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 214k]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|   214k|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|   214k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  70.8k|    {
 6124|  70.8k|        const bool need_skipped_width =
 6125|  70.8k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 70.8k]
  |  Branch (6125:33): [True: 0, False: 70.8k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  70.8k|        auto it = rng.begin();
 6129|  70.8k|        std::ptrdiff_t prefix_width = 0;
 6130|  70.8k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 70.8k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  70.8k|        else {
 6138|  70.8k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  70.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  70.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  70.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.10k, False: 69.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.10k|    }                                                  \
  |  |  |  | 3671|  70.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  69.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  69.7k|            std::tie(it, prefix_width) = prefix_result;
 6140|  69.7k|        }
 6141|  69.7k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  69.7k|        std::ptrdiff_t value_width = 0;
 6145|  69.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 69.7k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  69.7k|        else {
 6161|  69.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  69.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  69.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  69.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.34k, False: 67.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.34k|    }                                                  \
  |  | 3671|  69.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  69.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  67.4k|                                             specs, value, loc));
 6163|       |
 6164|  67.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 67.4k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  67.4k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  67.4k|        std::ptrdiff_t postfix_width = 0;
 6173|  67.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 66.9k, False: 432]
  ------------------
 6174|  66.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  66.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  66.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  66.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  66.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 66.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  66.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  66.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  66.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  66.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  66.9k|                                 value_width));
 6178|  66.9k|            std::tie(it, postfix_width) = postfix_result;
 6179|  66.9k|        }
 6180|       |
 6181|  67.4k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  67.4k|                                                 value_width, postfix_width);
 6183|  67.4k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 67.4k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  67.4k|        return it;
 6188|  67.4k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5258|   711k|    {
 5259|   711k|        return m_type == reader_type::word;
 5260|   711k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   499k|{
 1132|   499k|    auto it = src.begin();
 1133|  3.85M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 3.36M, False: 495k]
  ------------------
 1134|  3.36M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  3.36M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 2.03k, False: 3.35M]
  ------------------
 1136|  2.03k|            return false;
 1137|  2.03k|        }
 1138|  3.35M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 306, False: 3.35M]
  ------------------
 1139|    306|            return false;
 1140|    306|        }
 1141|  3.35M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  3.35M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  3.35M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 2.59k, False: 3.35M]
  ------------------
 1144|  2.59k|            return false;
 1145|  2.59k|        }
 1146|  3.35M|        it += len;
 1147|  3.35M|    }
 1148|   495k|    return true;
 1149|   499k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|   167k|{
 2993|   167k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|   167k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 3.25k, False: 164k]
  ------------------
 2995|  3.25k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  3.25k|    static_cast<    \
  |  |  929|  3.25k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  3.25k|        }
 2997|   164k|        else {
 2998|   164k|            dest.assign(source.view());
 2999|   164k|        }
 3000|   167k|    }
 3001|   167k|    else {
 3002|   167k|        return transcode_impl(source.view(), dest);
 3003|   167k|    }
 3004|       |
 3005|   167k|    return {};
 3006|   167k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5102|  7.88k|        {
 5103|  7.88k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 7.88k, False: 0]
  ------------------
 5104|  7.88k|                return {};
 5105|  7.88k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5075|  18.0k|        {
 5076|  18.0k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  18.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  18.0k|            const auto val =
 5078|  18.0k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  18.0k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  18.0k|                    (val % 8)) &
 5081|  18.0k|                   1u;
 5082|  18.0k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5128|  19.3k|        {
 5129|  19.3k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 1.27k, False: 18.0k]
  ------------------
 5130|  1.27k|                return false;
 5131|  1.27k|            }
 5132|       |
 5133|  18.0k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  19.3k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  7.88k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  69.7k|    {
 5277|  69.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  69.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  69.7k|        return read_impl(range, specs, value);
 5279|  69.7k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  69.7k|    {
 5295|  69.7k|        SCN_CLANG_PUSH
 5296|  69.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  69.7k|        switch (m_type) {
 5299|  67.1k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 67.1k, False: 2.62k]
  ------------------
 5300|  67.1k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 69.7k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 69.7k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.62k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.62k, False: 67.1k]
  ------------------
 5310|  2.62k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.62k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 69.7k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 69.7k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 69.7k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  69.7k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  69.7k|        }
 5331|       |
 5332|  69.7k|        SCN_CLANG_POP
 5333|  69.7k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|   168k|    {
 4820|   168k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   168k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|   168k|{
 4752|   168k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   168k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   168k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 1.59k, False: 166k]
  ------------------
 4756|  1.59k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  1.59k|                                     "Invalid encoding in scanned string");
 4758|  1.59k|    }
 4759|   166k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   166k|    static_cast<    \
  |  |  929|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   166k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   166k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 166k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   166k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   166k|    static_cast<    \
  |  |  929|   166k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   166k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|   168k|{
 2088|   168k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   168k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   168k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   168k|        auto buf = make_contiguous_buffer(range);
 2092|   168k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   168k|        return ranges::next(range.begin(),
 2094|   168k|                            ranges::distance(buf.view().begin(), it));
 2095|   168k|    }
 2096|   168k|    else {
 2097|   168k|        auto it = range.begin();
 2098|       |
 2099|   168k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|   168k|            auto seg = get_contiguous_beginning(range);
 2101|   168k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   168k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2102:17): [True: 0, False: 168k]
  ------------------
 2103|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|      0|            }
 2105|   168k|            ranges::advance(it, seg.size());
 2106|   168k|        }
 2107|       |
 2108|   168k|        return read_until_code_point(
 2109|   168k|            ranges::subrange{it, range.end()},
 2110|   168k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   168k|    }
 2112|   168k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   338k|{
 1039|   338k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1039:19): [Folded - Ignored]
  |  Branch (1039:19): [Folded - Ignored]
  ------------------
 1040|   338k|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1040:19): [Folded - Ignored]
  ------------------
 1041|   338k|        return r;
 1042|   338k|    }
 1043|   338k|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (1043:24): [Folded - Ignored]
  ------------------
 1044|   338k|                           ranges::const_iterator_t<Range>,
 1045|   338k|                           typename detail::basic_scan_buffer<
 1046|   338k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|   338k|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1047:23): [Folded - Ignored]
  ------------------
 1048|   338k|            auto seg = r.begin().contiguous_segment();
 1049|   338k|            auto dist =
 1050|   338k|                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|   338k|            return seg.substr(0, std::min(seg.size(), dist));
 1052|   338k|        }
 1053|   338k|        else {
 1054|   338k|            return r.begin().contiguous_segment();
 1055|   338k|        }
 1056|   338k|    }
 1057|   338k|    else {
 1058|   338k|        return std::basic_string_view<detail::char_t<Range>>{};
 1059|   338k|    }
 1060|   338k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|   334k|{
 2061|   334k|    auto it = range.begin();
 2062|  1.86M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 1.85M, False: 3.85k]
  ------------------
 2063|  1.85M|        const auto val =
 2064|  1.85M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|  1.85M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.85M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.85M, False: 7.65k]
  |  |  ------------------
  ------------------
 2066|  1.85M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|  1.85M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|  1.85M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 330k, False: 1.52M]
  ------------------
 2069|   330k|                return it;
 2070|   330k|            }
 2071|  1.85M|        }
 2072|  1.52M|        it = val.iterator;
 2073|  1.52M|    }
 2074|       |
 2075|  3.85k|    return it;
 2076|   334k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|  1.85M|{
 1899|  1.85M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.85M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.85M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|  1.85M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|  1.85M|    auto it = range.begin();
 1903|  1.85M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|  1.85M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.85M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.65k, False: 1.85M]
  |  |  ------------------
  ------------------
 1906|  7.65k|        ++it;
 1907|  7.65k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|  7.65k|        return {it, {}};
 1909|  7.65k|    }
 1910|       |
 1911|  1.85M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 1.76M, False: 91.1k]
  ------------------
 1912|  1.76M|        ++it;
 1913|  1.76M|        return {it, string_type(1, *range.begin())};
 1914|  1.76M|    }
 1915|       |
 1916|  91.1k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|  91.1k|    return {it, string_type{range.begin(), it}};
 1918|  1.85M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  7.65k|{
 1155|  7.65k|    auto it = input.begin();
 1156|  26.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 26.1k, False: 184]
  ------------------
 1157|  26.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 7.47k, False: 18.6k]
  ------------------
 1158|  7.47k|            break;
 1159|  7.47k|        }
 1160|  26.1k|    }
 1161|  7.65k|    return it;
 1162|  7.65k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  91.1k|    {
  283|  91.1k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  91.1k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  91.1k|    {
  252|  91.1k|        constexpr iter_difference_t<I> zero{0};
  253|  91.1k|        iter_difference_t<I> counter{0};
  254|       |
  255|   334k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 243k, False: 90.9k]
  |  Branch (255:30): [True: 243k, False: 266]
  ------------------
  256|   243k|            ++i;
  257|   243k|            ++counter;
  258|   243k|        }
  259|       |
  260|  91.1k|        return counter;
  261|  91.1k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1889|  1.85M|    {
 1890|  1.85M|        return !codepoint.empty();
 1891|  1.85M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   168k|    {
  754|   168k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  1.15M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.15M|              cvref<T> obj = *get<T>(fn);
  745|  1.15M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  1.15M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.15M|              }
  748|  1.15M|              else {
  749|  1.15M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.15M|              }
  751|  1.15M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.15M|    {
  684|  1.15M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  1.15M|            return static_cast<T*>(s.m_cp);
  686|  1.15M|        }
  687|  1.15M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  1.15M|            return static_cast<T*>(s.m_p);
  689|  1.15M|        }
  690|  1.15M|        else {
  691|  1.15M|            return reinterpret_cast<T*>(s.m_fp);
  692|  1.15M|        }
  693|  1.15M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|  1.15M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   168k|        {
  662|   168k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  2.62k|    {
 5048|  2.62k|        auto it = read_source_impl(range, {specs});
 5049|  2.62k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 906]
  |  |  ------------------
  ------------------
 5050|  1.72k|            return unexpected(it.error());
 5051|  1.72k|        }
 5052|       |
 5053|    906|        return read_string_impl(range, *it, value);
 5054|  2.62k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  2.62k|    {
 5153|  2.62k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  2.62k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  2.62k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.62k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  2.62k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  2.62k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 2.62k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  2.62k|        const auto cb = [&](SourceCharT ch) {
 5176|  2.62k|            return cb_wrapper.on_ascii_only(ch);
 5177|  2.62k|        };
 5178|       |
 5179|  2.62k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 2.62k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  2.62k|        auto it = read_while_code_unit(range, cb);
 5184|  2.62k|        return check_nonempty(it, range);
 5185|  2.62k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  2.62k|    {
 5191|  2.62k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 1.72k, False: 906]
  ------------------
 5192|  1.72k|            return unexpected_scan_error(
 5193|  1.72k|                scan_error::invalid_scanned_value,
 5194|  1.72k|                "No characters matched in [character set]");
 5195|  1.72k|        }
 5196|       |
 5197|    906|        return it;
 5198|  2.62k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|   166k|{
 2082|   166k|    return read_until_code_point(range, std::not_fn(pred));
 2083|   166k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_:
  753|  2.62k|    {
  754|  2.62k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES10_c:
  743|  6.43k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.43k|              cvref<T> obj = *get<T>(fn);
  745|  6.43k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  6.43k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.43k|              }
  748|  6.43k|              else {
  749|  6.43k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.43k|              }
  751|  6.43k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  6.43k|    {
  684|  6.43k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  6.43k|            return static_cast<T*>(s.m_cp);
  686|  6.43k|        }
  687|  6.43k|        else if constexpr (std::is_object_v<T>) {
  688|  6.43k|            return static_cast<T*>(s.m_p);
  689|  6.43k|        }
  690|  6.43k|        else {
  691|  6.43k|            return reinterpret_cast<T*>(s.m_fp);
  692|  6.43k|        }
  693|  6.43k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5175|  6.43k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.43k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.43k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_LPv0EEEPKSM_:
  666|  2.62k|        {
  667|  2.62k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|    906|{
 4752|    906|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    906|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    906|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 906]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    906|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    906|    static_cast<    \
  |  |  929|    906|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    906|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 906]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    906|    return SCN_MOVE(result);
  ------------------
  |  |  928|    906|    static_cast<    \
  |  |  929|    906|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    906|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  68.4k|    {
 5277|  68.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  68.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  68.4k|        return read_impl(range, specs, value);
 5279|  68.4k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  68.4k|    {
 5295|  68.4k|        SCN_CLANG_PUSH
 5296|  68.4k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  68.4k|        switch (m_type) {
 5299|  65.8k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 65.8k, False: 2.62k]
  ------------------
 5300|  65.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 68.4k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 68.4k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.62k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.62k, False: 65.8k]
  ------------------
 5310|  2.62k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.62k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 68.4k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 68.4k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 68.4k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  68.4k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  68.4k|        }
 5331|       |
 5332|  68.4k|        SCN_CLANG_POP
 5333|  68.4k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|   164k|    {
 4820|   164k|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|   164k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|   164k|{
 4752|   164k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|   164k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|   164k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 1.67k, False: 162k]
  ------------------
 4756|  1.67k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  1.67k|                                     "Invalid encoding in scanned string");
 4758|  1.67k|    }
 4759|   162k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|   162k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   162k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 162k]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|   162k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|   162k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|   163k|{
 3012|   163k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|   163k|        dest.assign(source.view());
 3014|   163k|    }
 3015|   163k|    else {
 3016|   163k|        return transcode_impl(source.view(), dest);
 3017|   163k|    }
 3018|       |
 3019|   163k|    return {};
 3020|   163k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|   329k|{
 2088|   329k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|   329k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|   329k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|   329k|        auto buf = make_contiguous_buffer(range);
 2092|   329k|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|   329k|        return ranges::next(range.begin(),
 2094|   329k|                            ranges::distance(buf.view().begin(), it));
 2095|   329k|    }
 2096|   329k|    else {
 2097|   329k|        auto it = range.begin();
 2098|       |
 2099|   329k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2100|   329k|            auto seg = get_contiguous_beginning(range);
 2101|   329k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|   329k|                seg_it != seg.end()) {
 2103|   329k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|   329k|            }
 2105|   329k|            ranges::advance(it, seg.size());
 2106|   329k|        }
 2107|       |
 2108|   329k|        return read_until_code_point(
 2109|   329k|            ranges::subrange{it, range.end()},
 2110|   329k|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|   329k|    }
 2112|   329k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  2.62k|    {
 5048|  2.62k|        auto it = read_source_impl(range, {specs});
 5049|  2.62k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 906]
  |  |  ------------------
  ------------------
 5050|  1.72k|            return unexpected(it.error());
 5051|  1.72k|        }
 5052|       |
 5053|    906|        return read_string_impl(range, *it, value);
 5054|  2.62k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  5.25k|    {
 5153|  5.25k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  5.25k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  5.25k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.25k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  5.25k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  5.25k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 5.25k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  5.25k|        const auto cb = [&](SourceCharT ch) {
 5176|  5.25k|            return cb_wrapper.on_ascii_only(ch);
 5177|  5.25k|        };
 5178|       |
 5179|  5.25k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 5.25k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  5.25k|        auto it = read_while_code_unit(range, cb);
 5184|  5.25k|        return check_nonempty(it, range);
 5185|  5.25k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  5.25k|    {
 5191|  5.25k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 3.44k, False: 1.81k]
  ------------------
 5192|  3.44k|            return unexpected_scan_error(
 5193|  3.44k|                scan_error::invalid_scanned_value,
 5194|  3.44k|                "No characters matched in [character set]");
 5195|  3.44k|        }
 5196|       |
 5197|  1.81k|        return it;
 5198|  5.25k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_:
  753|  5.25k|    {
  754|  5.25k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clESX_c:
  743|  12.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.8k|              cvref<T> obj = *get<T>(fn);
  745|  12.8k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  12.8k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.8k|              }
  748|  12.8k|              else {
  749|  12.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.8k|              }
  751|  12.8k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  12.8k|    {
  684|  12.8k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  12.8k|            return static_cast<T*>(s.m_cp);
  686|  12.8k|        }
  687|  12.8k|        else if constexpr (std::is_object_v<T>) {
  688|  12.8k|            return static_cast<T*>(s.m_p);
  689|  12.8k|        }
  690|  12.8k|        else {
  691|  12.8k|            return reinterpret_cast<T*>(s.m_fp);
  692|  12.8k|        }
  693|  12.8k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5175|  12.8k|        const auto cb = [&](SourceCharT ch) {
 5176|  12.8k|            return cb_wrapper.on_ascii_only(ch);
 5177|  12.8k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_LPv0EEEPKSJ_:
  666|  5.25k|        {
  667|  5.25k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|    906|{
 4752|    906|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|    906|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|    906|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 906]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|    906|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    906|    static_cast<    \
  |  |  929|    906|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|    906|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    906|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 906]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|    906|    return SCN_MOVE(result);
  ------------------
  |  |  928|    906|    static_cast<    \
  |  |  929|    906|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|    906|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5808|   171k|{
 5809|   171k|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|   171k|        return reader_impl_for_bool<CharT>{};
 5811|   171k|    }
 5812|   171k|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|   171k|        return reader_impl_for_char<CharT>{};
 5814|   171k|    }
 5815|   171k|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|   171k|        return reader_impl_for_wchar<CharT>{};
 5817|   171k|    }
 5818|   171k|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|   171k|        return reader_impl_for_code_point<CharT>{};
 5820|   171k|    }
 5821|   171k|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|   171k|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|   171k|        return reader_impl_for_string<CharT>{};
 5824|   171k|    }
 5825|   171k|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|   171k|                       std::is_same_v<T, std::wstring>) {
 5827|   171k|        return reader_impl_for_string<CharT>{};
 5828|   171k|    }
 5829|   171k|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|   171k|                       std::is_same_v<T, wregex_matches>) {
 5831|   171k|        return reader_impl_for_regex_matches<CharT>{};
 5832|   171k|    }
 5833|   171k|    else if constexpr (std::is_same_v<T, void*>) {
 5834|   171k|        return reader_impl_for_voidptr<CharT>{};
 5835|   171k|    }
 5836|   171k|    else if constexpr (std::is_floating_point_v<T>) {
 5837|   171k|        return reader_impl_for_float<CharT>{};
 5838|   171k|    }
 5839|   171k|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|   171k|                       !std::is_same_v<T, wchar_t> &&
 5841|   171k|                       !std::is_same_v<T, char32_t> &&
 5842|   171k|                       !std::is_same_v<T, bool>) {
 5843|   171k|        return reader_impl_for_int<CharT>{};
 5844|   171k|    }
 5845|   171k|    else {
 5846|   171k|        return reader_impl_for_monostate<CharT>{};
 5847|   171k|    }
 5848|   171k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  68.4k|    {
 5277|  68.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  68.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  68.4k|        return read_impl(range, specs, value);
 5279|  68.4k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  68.4k|    {
 5295|  68.4k|        SCN_CLANG_PUSH
 5296|  68.4k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  68.4k|        switch (m_type) {
 5299|  65.8k|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 65.8k, False: 2.62k]
  ------------------
 5300|  65.8k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 68.4k]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 68.4k]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  2.62k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 2.62k, False: 65.8k]
  ------------------
 5310|  2.62k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  2.62k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 68.4k]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 68.4k]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 68.4k]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  68.4k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  68.4k|        }
 5331|       |
 5332|  68.4k|        SCN_CLANG_POP
 5333|  68.4k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|   164k|    {
 4827|   164k|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|   164k|                                     value);
 4829|   164k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|   164k|{
 4773|   164k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|   164k|    auto src = [&]() {
 4776|   164k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|   164k|            return make_contiguous_buffer(
 4778|   164k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   164k|        }
 4780|   164k|        else {
 4781|   164k|            return make_contiguous_buffer(
 4782|   164k|                ranges::subrange{range.begin(), result});
 4783|   164k|        }
 4784|   164k|    }();
 4785|   164k|    using src_type = decltype(src);
 4786|       |
 4787|   164k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|   164k|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|   164k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|   164k|                                     "Cannot read a string_view from "
 4796|   164k|                                     "this source range (would require "
 4797|   164k|                                     "transcoding)");
 4798|   164k|    }
 4799|   164k|    else {
 4800|   164k|        const auto view = src.view();
 4801|   164k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|   164k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 1.67k, False: 162k]
  ------------------
 4804|  1.67k|            return unexpected_scan_error(
 4805|  1.67k|                scan_error::invalid_scanned_value,
 4806|  1.67k|                "Invalid encoding in scanned string_view");
 4807|  1.67k|        }
 4808|       |
 4809|   162k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   162k|    static_cast<    \
  |  |  929|   162k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|   164k|    }
 4811|   164k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|   164k|    auto src = [&]() {
 4776|   164k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|   164k|            return make_contiguous_buffer(
 4778|   164k|                ranges::subrange{range.begin().base(), result.base()});
 4779|   164k|        }
 4780|   164k|        else {
 4781|   164k|            return make_contiguous_buffer(
 4782|   164k|                ranges::subrange{range.begin(), result});
 4783|   164k|        }
 4784|   164k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  2.62k|    {
 5062|  2.62k|        auto it = read_source_impl(range, {specs});
 5063|  2.62k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.62k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 906]
  |  |  ------------------
  ------------------
 5064|  1.72k|            return unexpected(it.error());
 5065|  1.72k|        }
 5066|       |
 5067|    906|        return read_string_view_impl(range, *it, value);
 5068|  2.62k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|    906|{
 4773|    906|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|    906|    auto src = [&]() {
 4776|    906|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|    906|            return make_contiguous_buffer(
 4778|    906|                ranges::subrange{range.begin().base(), result.base()});
 4779|    906|        }
 4780|    906|        else {
 4781|    906|            return make_contiguous_buffer(
 4782|    906|                ranges::subrange{range.begin(), result});
 4783|    906|        }
 4784|    906|    }();
 4785|    906|    using src_type = decltype(src);
 4786|       |
 4787|    906|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|    906|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|    906|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|    906|                                     "Cannot read a string_view from "
 4796|    906|                                     "this source range (would require "
 4797|    906|                                     "transcoding)");
 4798|    906|    }
 4799|    906|    else {
 4800|    906|        const auto view = src.view();
 4801|    906|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|    906|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 906]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|    906|        return SCN_MOVE(result);
  ------------------
  |  |  928|    906|    static_cast<    \
  |  |  929|    906|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|    906|    }
 4811|    906|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|    906|    auto src = [&]() {
 4776|    906|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|    906|            return make_contiguous_buffer(
 4778|    906|                ranges::subrange{range.begin().base(), result.base()});
 4779|    906|        }
 4780|    906|        else {
 4781|    906|            return make_contiguous_buffer(
 4782|    906|                ranges::subrange{range.begin(), result});
 4783|    906|        }
 4784|    906|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|   170k|{
 2951|   170k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 170k, False: 0]
  ------------------
 2952|   170k|        auto it = read_while_classic_space(range);
 2953|   170k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|   170k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.09k, False: 168k]
  |  |  ------------------
  ------------------
 2955|  2.09k|            return unexpected(e);
 2956|  2.09k|        }
 2957|       |
 2958|   168k|        return it;
 2959|   170k|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|   170k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|   170k|{
 2117|   170k|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|   170k|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|   170k|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|   170k|        auto buf = make_contiguous_buffer(range);
 2121|   170k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|   170k|        return ranges::next(range.begin(),
 2123|   170k|                            ranges::distance(buf.view().begin(), it));
 2124|   170k|    }
 2125|   170k|    else {
 2126|   170k|        auto it = range.begin();
 2127|       |
 2128|   170k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|   170k|            auto seg = get_contiguous_beginning(range);
 2130|   170k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|   170k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2131:17): [True: 3.85k, False: 166k]
  ------------------
 2132|  3.85k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  3.85k|            }
 2134|   166k|            ranges::advance(it, seg.size());
 2135|   166k|        }
 2136|       |
 2137|   166k|        return read_while_code_point(
 2138|   166k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|   170k|    }
 2140|   170k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|   166k|    {
  754|   166k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   693k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   693k|              cvref<T> obj = *get<T>(fn);
  745|   693k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   693k|                  obj(static_cast<decltype(args)>(args)...);
  747|   693k|              }
  748|   693k|              else {
  749|   693k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   693k|              }
  751|   693k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   693k|    {
  684|   693k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   693k|            return static_cast<T*>(s.m_cp);
  686|   693k|        }
  687|   693k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   693k|            return static_cast<T*>(s.m_p);
  689|   693k|        }
  690|   693k|        else {
  691|   693k|            return reinterpret_cast<T*>(s.m_fp);
  692|   693k|        }
  693|   693k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|   693k|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|   166k|        {
  662|   166k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|  24.9M|{
  981|  24.9M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (981:19): [Folded - Ignored]
  |  Branch (981:19): [Folded - Ignored]
  ------------------
  982|  24.9M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (982:19): [Folded - Ignored]
  ------------------
  983|  24.9M|        return true;
  984|  24.9M|    }
  985|  24.9M|    else if constexpr (std::is_same_v<
  ------------------
  |  Branch (985:24): [Folded - Ignored]
  ------------------
  986|  24.9M|                           ranges::const_iterator_t<Range>,
  987|  24.9M|                           typename detail::basic_scan_buffer<
  988|  24.9M|                               detail::char_t<Range>>::forward_iterator>) {
  989|  24.9M|        auto beg = r.begin();
  990|  24.9M|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 24.9M, False: 0]
  ------------------
  991|  24.9M|            return false;
  992|  24.9M|        }
  993|      0|        if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (993:23): [Folded - Ignored]
  ------------------
  994|      0|            return beg.contiguous_segment().end() ==
  995|      0|                   ranges::end(r).contiguous_segment().end();
  996|      0|        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|      0|    }
 1005|  24.9M|    else {
 1006|  24.9M|        return false;
 1007|  24.9M|    }
 1008|  24.9M|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  21.0k|    {
  763|  21.0k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  21.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  21.0k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_:
  753|  10.4k|    {
  754|  10.4k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_LPv0EEEOT_ENKUlNS1_12fnref_detail4base7storageEwE_clESE_w:
  743|  10.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.5k|              cvref<T> obj = *get<T>(fn);
  745|  10.5k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  10.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.5k|              }
  748|  10.5k|              else {
  749|  10.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.5k|              }
  751|  10.5k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  10.5k|    {
  684|  10.5k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  10.5k|            return static_cast<T*>(s.m_cp);
  686|  10.5k|        }
  687|  10.5k|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  10.5k|            return static_cast<T*>(s.m_p);
  689|  10.5k|        }
  690|  10.5k|        else {
  691|  10.5k|            return reinterpret_cast<T*>(s.m_fp);
  692|  10.5k|        }
  693|  10.5k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEELPv0EEEPT_:
  661|  10.4k|        {
  662|  10.4k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6036|  9.97M|    {
 6037|  9.97M|        const bool need_skipped_width =
 6038|  9.97M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 9.97M]
  |  Branch (6038:33): [True: 0, False: 9.97M]
  ------------------
 6039|  9.97M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  9.97M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 9.97M]
  ------------------
 6043|  9.97M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 9.97M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  9.97M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 9.97M, False: 0]
  |  Branch (6047:56): [True: 9.97M, False: 3.48k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  9.97M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 9.97M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  19.9M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  9.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.92k, False: 9.97M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.92k|    }                                                  \
  |  |  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  19.9M|                            make_eof_scan_error));
 6058|       |
 6059|  19.9M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 9.97M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  9.97M|            return result_type{it, 0};
 6067|  19.9M|        }
 6068|       |
 6069|  3.48k|        return result_type{rng.begin(), 0};
 6070|  9.97M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1975|  3.48k|{
 1976|  3.48k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  3.48k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1956|  3.48k|{
 1957|  3.48k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  3.48k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  3.48k|    }
 1960|  3.48k|    else {
 1961|  3.48k|        auto first = range.begin();
 1962|  3.52k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1962:16): [True: 3.50k, False: 20]
  ------------------
 1963|  3.50k|            if (pred(*first)) {
  ------------------
  |  Branch (1963:17): [True: 3.46k, False: 42]
  ------------------
 1964|  3.46k|                return first;
 1965|  3.46k|            }
 1966|  3.50k|        }
 1967|     20|        return first;
 1968|  3.48k|    }
 1969|  3.48k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  9.97M|    {
  108|  9.97M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  9.97M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  9.97M|    {
   94|  9.97M|        iter_difference_t<I> counter{0};
   95|   103M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 93.3M, False: 9.97M]
  ------------------
   96|  93.3M|            ++i;
   97|  93.3M|            ++counter;
   98|  93.3M|        }
   99|  9.97M|        return counter;
  100|  9.97M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  39.9M|{
  950|  39.9M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  39.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.81k, False: 39.8M]
  |  |  ------------------
  ------------------
  951|  4.81k|        return eof_error::eof;
  952|  4.81k|    }
  953|  39.8M|    return eof_error::good;
  954|  39.9M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|   323M|{
  944|   323M|    return is_range_eof(r.begin(), r.end());
  945|   323M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|   323M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   323M|    {
  937|   323M|        return begin == end;
  938|   323M|    }
  939|   323M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1682|  24.9M|{
 1683|  24.9M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  24.9M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  24.9M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  24.9M|        return string_view_wrapper{SCN_FWD(range)};
 1687|  24.9M|    }
 1688|  24.9M|    else {
 1689|  24.9M|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|  24.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1690|  24.9M|    }
 1691|  24.9M|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EELPv0EEEOT_:
 1536|  24.9M|    {
 1537|  24.9M|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|  24.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1538|  24.9M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1620|  24.9M|    {
 1621|  24.9M|        using value_t = ranges::range_value_t<Range>;
 1622|       |
 1623|  24.9M|        if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1623:23): [Folded - Ignored]
  |  Branch (1623:23): [Folded - Ignored]
  ------------------
 1624|  24.9M|                      ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1624:23): [Folded - Ignored]
  ------------------
 1625|  24.9M|                      ranges::sized_range<Range>) {
  ------------------
  |  Branch (1625:23): [Folded - Ignored]
  ------------------
 1626|  24.9M|            m_storage.reset();
 1627|  24.9M|            m_view = string_view_type{ranges::data(range), range.size()};
 1628|  24.9M|        }
 1629|  24.9M|        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
  ------------------
  |  Branch (1629:28): [Folded - Ignored]
  ------------------
 1630|  24.9M|                                          std::basic_string<CharT>>) {
 1631|  24.9M|            m_storage.emplace(SCN_FWD(range));
 1632|  24.9M|            m_view = string_view_type{*m_storage};
 1633|  24.9M|        }
 1634|  24.9M|        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
  ------------------
  |  Branch (1634:28): [Folded - Ignored]
  |  Branch (1634:28): [Folded - Ignored]
  ------------------
 1635|  24.9M|                                          typename detail::basic_scan_buffer<
 1636|  24.9M|                                              value_t>::forward_iterator> &&
 1637|  24.9M|                           ranges::common_range<Range>) {
  ------------------
  |  Branch (1637:28): [Folded - Ignored]
  ------------------
 1638|  24.9M|            auto beg_seg = range.begin().contiguous_segment();
 1639|  24.9M|            auto end_seg = range.end().contiguous_segment();
 1640|  24.9M|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|  24.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 7.15k, False: 24.9M]
  |  |  ------------------
  ------------------
 1641|  24.9M|                             detail::to_address(end_seg.end()))) {
 1642|  7.15k|                auto& str = m_storage.emplace();
 1643|  7.15k|                str.reserve(range.end().position() - range.begin().position());
 1644|  7.15k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1645|  7.15k|                m_view = string_view_type{str};
 1646|  7.15k|                return;
 1647|  7.15k|            }
 1648|       |
 1649|  24.9M|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1650|  24.9M|                                                            end_seg.data());
 1651|  24.9M|            m_storage.reset();
 1652|  24.9M|        }
 1653|  24.9M|        else {
 1654|  24.9M|            auto& str = m_storage.emplace();
 1655|  24.9M|            if constexpr (ranges::sized_range<Range>) {
 1656|  24.9M|                str.reserve(range.size());
 1657|  24.9M|            }
 1658|  24.9M|            if constexpr (ranges::common_range<Range>) {
 1659|  24.9M|                std::copy(ranges::begin(range), ranges::end(range),
 1660|  24.9M|                          std::back_inserter(str));
 1661|  24.9M|            }
 1662|  24.9M|            else {
 1663|  24.9M|                for (auto it = ranges::begin(range); it != ranges::end(range);
 1664|  24.9M|                     ++it) {
 1665|  24.9M|                    str.push_back(*it);
 1666|  24.9M|                }
 1667|  24.9M|            }
 1668|  24.9M|            m_view = string_view_type{str};
 1669|  24.9M|        }
 1670|  24.9M|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1581|  49.8M|    {
 1582|  49.8M|        return m_view;
 1583|  49.8M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1571|  24.9M|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6078|  9.97M|    {
 6079|  9.97M|        const bool need_skipped_width =
 6080|  9.97M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 9.97M]
  |  Branch (6080:33): [True: 0, False: 9.97M]
  ------------------
 6081|  9.97M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  9.97M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 9.97M]
  ------------------
 6084|  9.97M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 9.97M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  9.97M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 9.97M, False: 0]
  ------------------
 6093|  9.97M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 32, False: 9.97M]
  ------------------
 6094|  9.97M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 32]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     32|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 32]
  ------------------
 6096|     32|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  9.97M|        return result_type{rng.begin(), 0};
 6118|  9.97M|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1898|   567M|{
 1899|   567M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   567M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   567M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   567M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   567M|    auto it = range.begin();
 1903|   567M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   567M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   567M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 567M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   567M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 567M, False: 0]
  ------------------
 1912|   567M|        ++it;
 1913|   567M|        return {it, string_type(1, *range.begin())};
 1914|   567M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   567M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|   647M|{
  944|   647M|    return is_range_eof(r.begin(), r.end());
  945|   647M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|   647M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   647M|    {
  937|   647M|        return begin == end;
  938|   647M|    }
  939|   647M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1889|   567M|    {
 1890|   567M|        return !codepoint.empty();
 1891|   567M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  79.8M|{
  950|  79.8M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  79.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 9.62k, False: 79.7M]
  |  |  ------------------
  ------------------
  951|  9.62k|        return eof_error::eof;
  952|  9.62k|    }
  953|  79.7M|    return eof_error::good;
  954|  79.8M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1682|  49.8M|{
 1683|  49.8M|    if constexpr (ranges::borrowed_range<Range> &&
  ------------------
  |  Branch (1683:19): [Folded - Ignored]
  |  Branch (1683:19): [Folded - Ignored]
  ------------------
 1684|  49.8M|                  ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (1684:19): [Folded - Ignored]
  ------------------
 1685|  49.8M|                  ranges::sized_range<Range>) {
  ------------------
  |  Branch (1685:19): [Folded - Ignored]
  ------------------
 1686|  49.8M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  49.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1687|  49.8M|    }
 1688|  49.8M|    else {
 1689|  49.8M|        return contiguous_range_factory{SCN_FWD(range)};
 1690|  49.8M|    }
 1691|  49.8M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_:
 1489|  49.8M|    {
 1490|  49.8M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1502|  74.8M|    {
 1503|  74.8M|        return sv;
 1504|  74.8M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1975|  6.97k|{
 1976|  6.97k|    return read_until_code_unit(range, std::not_fn(pred));
 1977|  6.97k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1956|  6.97k|{
 1957|  6.97k|    if constexpr (ranges::common_range<Range>) {
  ------------------
  |  Branch (1957:19): [Folded - Ignored]
  ------------------
 1958|  6.97k|        return std::find_if(range.begin(), range.end(), pred);
 1959|  6.97k|    }
 1960|  6.97k|    else {
 1961|  6.97k|        auto first = range.begin();
 1962|  6.97k|        for (; first != range.end(); ++first) {
 1963|  6.97k|            if (pred(*first)) {
 1964|  6.97k|                return first;
 1965|  6.97k|            }
 1966|  6.97k|        }
 1967|  6.97k|        return first;
 1968|  6.97k|    }
 1969|  6.97k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2950|  49.8M|{
 2951|  49.8M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 49.8M, False: 0]
  ------------------
 2952|  49.8M|        auto it = read_while_classic_space(range);
 2953|  49.8M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  49.8M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  49.8M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.62k, False: 49.8M]
  |  |  ------------------
  ------------------
 2955|  6.62k|            return unexpected(e);
 2956|  6.62k|        }
 2957|       |
 2958|  49.8M|        return it;
 2959|  49.8M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  49.8M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2116|  49.8M|{
 2117|  49.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  49.8M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  49.8M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  49.8M|        auto buf = make_contiguous_buffer(range);
 2121|  49.8M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  49.8M|        return ranges::next(range.begin(),
 2123|  49.8M|                            ranges::distance(buf.view().begin(), it));
 2124|  49.8M|    }
 2125|  49.8M|    else {
 2126|  49.8M|        auto it = range.begin();
 2127|       |
 2128|  49.8M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  49.8M|            auto seg = get_contiguous_beginning(range);
 2130|  49.8M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  49.8M|                seg_it != seg.end()) {
 2132|  49.8M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  49.8M|            }
 2134|  49.8M|            ranges::advance(it, seg.size());
 2135|  49.8M|        }
 2136|       |
 2137|  49.8M|        return read_while_code_point(
 2138|  49.8M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  49.8M|    }
 2140|  49.8M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2081|  49.8M|{
 2082|  49.8M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  49.8M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2060|  99.7M|{
 2061|  99.7M|    auto it = range.begin();
 2062|   567M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 567M, False: 18.4k]
  ------------------
 2063|   567M|        const auto val =
 2064|   567M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   567M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   567M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 567M, False: 0]
  |  |  ------------------
  ------------------
 2066|   567M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   567M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   567M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 99.7M, False: 467M]
  ------------------
 2069|  99.7M|                return it;
 2070|  99.7M|            }
 2071|   567M|        }
 2072|   467M|        it = val.iterator;
 2073|   467M|    }
 2074|       |
 2075|  18.4k|    return it;
 2076|  99.7M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  49.8M|    {
  754|  49.8M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   144M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   144M|              cvref<T> obj = *get<T>(fn);
  745|   144M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   144M|                  obj(static_cast<decltype(args)>(args)...);
  747|   144M|              }
  748|   144M|              else {
  749|   144M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   144M|              }
  751|   144M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   144M|    {
  684|   144M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   144M|            return static_cast<T*>(s.m_cp);
  686|   144M|        }
  687|   144M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   144M|            return static_cast<T*>(s.m_p);
  689|   144M|        }
  690|   144M|        else {
  691|   144M|            return reinterpret_cast<T*>(s.m_fp);
  692|   144M|        }
  693|   144M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2138|   144M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  49.8M|        {
  662|  49.8M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1586|  24.9M|    {
 1587|  24.9M|        return m_storage.has_value();
 1588|  24.9M|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1591|  4.04k|    {
 1592|  4.04k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  4.04k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.04k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1593|  4.04k|        return *m_storage;
 1594|  4.04k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5205|  74.8M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3039|  29.9M|    {
 3040|  29.9M|        reader_error_handler eh{};
 3041|  29.9M|        get_derived().check_specs_impl(specs, eh);
 3042|  29.9M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  29.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.3k, False: 29.9M]
  |  |  ------------------
  ------------------
 3043|  10.3k|            return {scan_error::invalid_format_string, eh.m_msg};
 3044|  10.3k|        }
 3045|  29.9M|        return {};
 3046|  29.9M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3050|  29.9M|    {
 3051|  29.9M|        return static_cast<Derived&>(*this);
 3052|  29.9M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5209|  29.9M|    {
 5210|  29.9M|        detail::check_string_type_specs(specs, eh);
 5211|       |
 5212|  29.9M|        SCN_GCC_PUSH
 5213|  29.9M|        SCN_GCC_IGNORE("-Wswitch")
 5214|  29.9M|        SCN_GCC_IGNORE("-Wswitch-default")
 5215|       |
 5216|  29.9M|        SCN_CLANG_PUSH
 5217|  29.9M|        SCN_CLANG_IGNORE("-Wswitch")
 5218|  29.9M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5219|       |
 5220|  29.9M|        switch (specs.type) {
  ------------------
  |  Branch (5220:17): [True: 0, False: 29.9M]
  ------------------
 5221|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5221:13): [True: 0, False: 29.9M]
  ------------------
 5222|      0|                m_type = reader_type::word;
 5223|      0|                break;
 5224|       |
 5225|  29.9M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5225:13): [True: 29.9M, False: 20.7k]
  ------------------
 5226|  29.9M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5226:21): [True: 0, False: 29.9M]
  ------------------
 5227|  29.9M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5227:21): [True: 0, False: 29.9M]
  ------------------
 5228|      0|                    m_type = reader_type::custom_word;
 5229|      0|                }
 5230|  29.9M|                else {
 5231|  29.9M|                    m_type = reader_type::word;
 5232|  29.9M|                }
 5233|  29.9M|                break;
 5234|      0|            }
 5235|       |
 5236|  10.3k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5236:13): [True: 10.3k, False: 29.9M]
  ------------------
 5237|  10.3k|                m_type = reader_type::character;
 5238|  10.3k|                break;
 5239|       |
 5240|  10.4k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5240:13): [True: 10.4k, False: 29.9M]
  ------------------
 5241|  10.4k|                m_type = reader_type::character_set;
 5242|  10.4k|                break;
 5243|       |
 5244|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5244:13): [True: 0, False: 29.9M]
  ------------------
 5245|      0|                m_type = reader_type::regex;
 5246|      0|                break;
 5247|       |
 5248|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5248:13): [True: 0, False: 29.9M]
  ------------------
 5249|      0|                m_type = reader_type::regex_escaped;
 5250|      0|                break;
 5251|  29.9M|        }
 5252|       |
 5253|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5254|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5255|  29.9M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5258|   104M|    {
 5259|   104M|        return m_type == reader_type::word;
 5260|   104M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  74.8M|{
 1132|  74.8M|    auto it = src.begin();
 1133|   632M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 557M, False: 74.7M]
  ------------------
 1134|   557M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|   557M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 557M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|   557M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 557M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|   557M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|   557M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|   557M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 11.4k, False: 557M]
  ------------------
 1144|  11.4k|            return false;
 1145|  11.4k|        }
 1146|   557M|        it += len;
 1147|   557M|    }
 1148|  74.7M|    return true;
 1149|  74.8M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5102|  10.4k|        {
 5103|  10.4k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5103:17): [True: 10.4k, False: 0]
  ------------------
 5104|  10.4k|                return {};
 5105|  10.4k|            }
 5106|       |
 5107|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5108|      0|            auto it = detail::to_address(charset_string.begin());
 5109|      0|            auto set = detail::parse_presentation_set(
 5110|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5111|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5112|      0|                return nonascii.err;
 5113|      0|            }
 5114|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5115|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5116|       |
 5117|      0|            std::sort(nonascii.extra_ranges.begin(),
 5118|      0|                      nonascii.extra_ranges.end());
 5119|      0|            return {};
 5120|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5075|  5.83k|        {
 5076|  5.83k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  5.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5077|  5.83k|            const auto val =
 5078|  5.83k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5079|  5.83k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5080|  5.83k|                    (val % 8)) &
 5081|  5.83k|                   1u;
 5082|  5.83k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5128|  10.5k|        {
 5129|  10.5k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5129:17): [True: 4.69k, False: 5.83k]
  ------------------
 5130|  4.69k|                return false;
 5131|  4.69k|            }
 5132|       |
 5133|  5.83k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5134|  10.5k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5072|  10.4k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2087|  24.9M|{
 2088|  24.9M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  24.9M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  24.9M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  24.9M|        auto buf = make_contiguous_buffer(range);
 2092|  24.9M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  24.9M|        return ranges::next(range.begin(),
 2094|  24.9M|                            ranges::distance(buf.view().begin(), it));
 2095|  24.9M|    }
 2096|  24.9M|    else {
 2097|  24.9M|        auto it = range.begin();
 2098|       |
 2099|  24.9M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  24.9M|            auto seg = get_contiguous_beginning(range);
 2101|  24.9M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  24.9M|                seg_it != seg.end()) {
 2103|  24.9M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  24.9M|            }
 2105|  24.9M|            ranges::advance(it, seg.size());
 2106|  24.9M|        }
 2107|       |
 2108|  24.9M|        return read_until_code_point(
 2109|  24.9M|            ranges::subrange{it, range.end()},
 2110|  24.9M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  24.9M|    }
 2112|  24.9M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2060|  49.8M|{
 2061|  49.8M|    auto it = range.begin();
 2062|   283M|    while (it != range.end()) {
  ------------------
  |  Branch (2062:12): [True: 283M, False: 9.20k]
  ------------------
 2063|   283M|        const auto val =
 2064|   283M|            read_code_point_into(ranges::subrange{it, range.end()});
 2065|   283M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|   283M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 283M, False: 0]
  |  |  ------------------
  ------------------
 2066|   283M|            const auto cp = detail::decode_code_point_exhaustive(
 2067|   283M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2068|   283M|            if (pred(cp)) {
  ------------------
  |  Branch (2068:17): [True: 49.8M, False: 233M]
  ------------------
 2069|  49.8M|                return it;
 2070|  49.8M|            }
 2071|   283M|        }
 2072|   233M|        it = val.iterator;
 2073|   233M|    }
 2074|       |
 2075|  9.20k|    return it;
 2076|  49.8M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1898|   283M|{
 1899|   283M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|   283M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   283M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1900|   283M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1901|       |
 1902|   283M|    auto it = range.begin();
 1903|   283M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1904|       |
 1905|   283M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   283M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 283M]
  |  |  ------------------
  ------------------
 1906|      0|        ++it;
 1907|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1908|      0|        return {it, {}};
 1909|      0|    }
 1910|       |
 1911|   283M|    if (len == 1) {
  ------------------
  |  Branch (1911:9): [True: 283M, False: 0]
  ------------------
 1912|   283M|        ++it;
 1913|   283M|        return {it, string_type(1, *range.begin())};
 1914|   283M|    }
 1915|       |
 1916|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1917|      0|    return {it, string_type{range.begin(), it}};
 1918|   283M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1889|   283M|    {
 1890|   283M|        return !codepoint.empty();
 1891|   283M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  24.9M|    {
  754|  24.9M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|   211M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   211M|              cvref<T> obj = *get<T>(fn);
  745|   211M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   211M|                  obj(static_cast<decltype(args)>(args)...);
  747|   211M|              }
  748|   211M|              else {
  749|   211M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   211M|              }
  751|   211M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   211M|    {
  684|   211M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   211M|            return static_cast<T*>(s.m_cp);
  686|   211M|        }
  687|   211M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   211M|            return static_cast<T*>(s.m_p);
  689|   211M|        }
  690|   211M|        else {
  691|   211M|            return reinterpret_cast<T*>(s.m_fp);
  692|   211M|        }
  693|   211M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2110|   211M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  24.9M|        {
  662|  24.9M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5152|  3.48k|    {
 5153|  3.48k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  3.48k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  3.48k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 3.48k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  3.48k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  3.48k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 3.48k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  3.48k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.48k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.48k|        };
 5178|       |
 5179|  3.48k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 3.48k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  3.48k|        auto it = read_while_code_unit(range, cb);
 5184|  3.48k|        return check_nonempty(it, range);
 5185|  3.48k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5190|  3.48k|    {
 5191|  3.48k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 3.44k, False: 42]
  ------------------
 5192|  3.44k|            return unexpected_scan_error(
 5193|  3.44k|                scan_error::invalid_scanned_value,
 5194|  3.44k|                "No characters matched in [character set]");
 5195|  3.44k|        }
 5196|       |
 5197|     42|        return it;
 5198|  3.48k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2081|  24.9M|{
 2082|  24.9M|    return read_until_code_point(range, std::not_fn(pred));
 2083|  24.9M|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_:
  753|  3.48k|    {
  754|  3.48k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_LPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES10_w:
  743|  3.50k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.50k|              cvref<T> obj = *get<T>(fn);
  745|  3.50k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  3.50k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.50k|              }
  748|  3.50k|              else {
  749|  3.50k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.50k|              }
  751|  3.50k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  3.50k|    {
  684|  3.50k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  3.50k|            return static_cast<T*>(s.m_cp);
  686|  3.50k|        }
  687|  3.50k|        else if constexpr (std::is_object_v<T>) {
  688|  3.50k|            return static_cast<T*>(s.m_p);
  689|  3.50k|        }
  690|  3.50k|        else {
  691|  3.50k|            return reinterpret_cast<T*>(s.m_fp);
  692|  3.50k|        }
  693|  3.50k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5175|  3.50k|        const auto cb = [&](SourceCharT ch) {
 5176|  3.50k|            return cb_wrapper.on_ascii_only(ch);
 5177|  3.50k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_LPv0EEEPKSM_:
  666|  3.48k|        {
  667|  3.48k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2087|  49.8M|{
 2088|  49.8M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2088:19): [Folded - Ignored]
  |  Branch (2088:19): [Folded - Ignored]
  ------------------
 2089|  49.8M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2089:19): [Folded - Ignored]
  ------------------
 2090|  49.8M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2090:19): [Folded - Ignored]
  ------------------
 2091|  49.8M|        auto buf = make_contiguous_buffer(range);
 2092|  49.8M|        auto it = find_classic_space_narrow_fast(buf.view());
 2093|  49.8M|        return ranges::next(range.begin(),
 2094|  49.8M|                            ranges::distance(buf.view().begin(), it));
 2095|  49.8M|    }
 2096|  49.8M|    else {
 2097|  49.8M|        auto it = range.begin();
 2098|       |
 2099|  49.8M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2099:23): [Folded - Ignored]
  ------------------
 2100|  49.8M|            auto seg = get_contiguous_beginning(range);
 2101|  49.8M|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2102|  49.8M|                seg_it != seg.end()) {
 2103|  49.8M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2104|  49.8M|            }
 2105|  49.8M|            ranges::advance(it, seg.size());
 2106|  49.8M|        }
 2107|       |
 2108|  49.8M|        return read_until_code_point(
 2109|  49.8M|            ranges::subrange{it, range.end()},
 2110|  49.8M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
 2111|  49.8M|    }
 2112|  49.8M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_:
  753|  49.8M|    {
  754|  49.8M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_LPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESQ_Di:
  743|   422M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   422M|              cvref<T> obj = *get<T>(fn);
  745|   422M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|   422M|                  obj(static_cast<decltype(args)>(args)...);
  747|   422M|              }
  748|   422M|              else {
  749|   422M|                  return obj(static_cast<decltype(args)>(args)...);
  750|   422M|              }
  751|   422M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|   422M|    {
  684|   422M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|   422M|            return static_cast<T*>(s.m_cp);
  686|   422M|        }
  687|   422M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|   422M|            return static_cast<T*>(s.m_p);
  689|   422M|        }
  690|   422M|        else {
  691|   422M|            return reinterpret_cast<T*>(s.m_fp);
  692|   422M|        }
  693|   422M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2110|   422M|            [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_LPv0EEEPSG_:
  661|  49.8M|        {
  662|  49.8M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5152|  6.97k|    {
 5153|  6.97k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5154|  6.97k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5155|       |
 5156|  6.97k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  6.97k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 6.97k]
  |  |  ------------------
  ------------------
 5157|      0|            return unexpected(e);
 5158|      0|        }
 5159|       |
 5160|  6.97k|        read_source_callback cb_wrapper{helper};
 5161|       |
 5162|  6.97k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5162:13): [True: 0, False: 6.97k]
  ------------------
 5163|      0|            const auto cb = [&](char32_t cp) {
 5164|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5165|      0|            };
 5166|       |
 5167|      0|            if (is_inverted) {
  ------------------
  |  Branch (5167:17): [True: 0, False: 0]
  ------------------
 5168|      0|                auto it = read_until_code_point(range, cb);
 5169|      0|                return check_nonempty(it, range);
 5170|      0|            }
 5171|      0|            auto it = read_while_code_point(range, cb);
 5172|      0|            return check_nonempty(it, range);
 5173|      0|        }
 5174|       |
 5175|  6.97k|        const auto cb = [&](SourceCharT ch) {
 5176|  6.97k|            return cb_wrapper.on_ascii_only(ch);
 5177|  6.97k|        };
 5178|       |
 5179|  6.97k|        if (is_inverted) {
  ------------------
  |  Branch (5179:13): [True: 0, False: 6.97k]
  ------------------
 5180|      0|            auto it = read_until_code_unit(range, cb);
 5181|      0|            return check_nonempty(it, range);
 5182|      0|        }
 5183|  6.97k|        auto it = read_while_code_unit(range, cb);
 5184|  6.97k|        return check_nonempty(it, range);
 5185|  6.97k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5190|  6.97k|    {
 5191|  6.97k|        if (it == range.begin()) {
  ------------------
  |  Branch (5191:13): [True: 6.88k, False: 84]
  ------------------
 5192|  6.88k|            return unexpected_scan_error(
 5193|  6.88k|                scan_error::invalid_scanned_value,
 5194|  6.88k|                "No characters matched in [character set]");
 5195|  6.88k|        }
 5196|       |
 5197|     84|        return it;
 5198|  6.97k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_:
  753|  6.97k|    {
  754|  6.97k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clESX_w:
  743|  7.01k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.01k|              cvref<T> obj = *get<T>(fn);
  745|  7.01k|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  7.01k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.01k|              }
  748|  7.01k|              else {
  749|  7.01k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.01k|              }
  751|  7.01k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  7.01k|    {
  684|  7.01k|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  7.01k|            return static_cast<T*>(s.m_cp);
  686|  7.01k|        }
  687|  7.01k|        else if constexpr (std::is_object_v<T>) {
  688|  7.01k|            return static_cast<T*>(s.m_p);
  689|  7.01k|        }
  690|  7.01k|        else {
  691|  7.01k|            return reinterpret_cast<T*>(s.m_fp);
  692|  7.01k|        }
  693|  7.01k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5175|  7.01k|        const auto cb = [&](SourceCharT ch) {
 5176|  7.01k|            return cb_wrapper.on_ascii_only(ch);
 5177|  7.01k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_LPv0EEEPKSJ_:
  666|  6.97k|        {
  667|  6.97k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6192|  9.98M|    {
 6193|  9.98M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.98M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|      0|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.98M|            auto rd = make_reader<T, char_type>();
 6198|  9.98M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6199|  9.98M|                return unexpected(e);
 6200|  9.98M|            }
 6201|       |
 6202|  9.98M|            return impl(rd, range, value);
 6203|  9.98M|        }
 6204|  9.98M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (6204:28): [Folded - Ignored]
  ------------------
 6205|  9.98M|            auto rd = make_reader<T, char_type>();
 6206|  9.98M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 9.97M]
  |  |  ------------------
  ------------------
 6207|  3.44k|                return unexpected(e);
 6208|  3.44k|            }
 6209|       |
 6210|  9.97M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6210:17): [True: 9.97M, False: 0]
  |  Branch (6210:50): [True: 0, False: 0]
  ------------------
 6211|  9.97M|                specs.width != 0) {
  ------------------
  |  Branch (6211:17): [True: 0, False: 0]
  ------------------
 6212|  9.97M|                return impl(rd, range, value);
 6213|  9.97M|            }
 6214|       |
 6215|      0|            auto crange = get_as_contiguous(range);
 6216|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6217|      0|            return ranges::next(range.begin(),
 6218|      0|                                ranges::distance(crange.begin(), it));
 6219|      0|        }
 6220|  9.98M|        else {
 6221|  9.98M|            SCN_EXPECT(false);
 6222|  9.98M|            SCN_UNREACHABLE;
 6223|  9.98M|        }
 6224|  9.98M|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5808|  49.8M|{
 5809|  49.8M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  49.8M|        return reader_impl_for_bool<CharT>{};
 5811|  49.8M|    }
 5812|  49.8M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  49.8M|        return reader_impl_for_char<CharT>{};
 5814|  49.8M|    }
 5815|  49.8M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  49.8M|        return reader_impl_for_wchar<CharT>{};
 5817|  49.8M|    }
 5818|  49.8M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  49.8M|        return reader_impl_for_code_point<CharT>{};
 5820|  49.8M|    }
 5821|  49.8M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  49.8M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  49.8M|        return reader_impl_for_string<CharT>{};
 5824|  49.8M|    }
 5825|  49.8M|    else if constexpr (std::is_same_v<T, std::string> ||
  ------------------
  |  Branch (5825:24): [Folded - Ignored]
  |  Branch (5825:24): [Folded - Ignored]
  ------------------
 5826|  49.8M|                       std::is_same_v<T, std::wstring>) {
  ------------------
  |  Branch (5826:24): [Folded - Ignored]
  ------------------
 5827|  49.8M|        return reader_impl_for_string<CharT>{};
 5828|  49.8M|    }
 5829|  49.8M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  49.8M|                       std::is_same_v<T, wregex_matches>) {
 5831|  49.8M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  49.8M|    }
 5833|  49.8M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  49.8M|        return reader_impl_for_voidptr<CharT>{};
 5835|  49.8M|    }
 5836|  49.8M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  49.8M|        return reader_impl_for_float<CharT>{};
 5838|  49.8M|    }
 5839|  49.8M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  49.8M|                       !std::is_same_v<T, wchar_t> &&
 5841|  49.8M|                       !std::is_same_v<T, char32_t> &&
 5842|  49.8M|                       !std::is_same_v<T, bool>) {
 5843|  49.8M|        return reader_impl_for_int<CharT>{};
 5844|  49.8M|    }
 5845|  49.8M|    else {
 5846|  49.8M|        return reader_impl_for_monostate<CharT>{};
 5847|  49.8M|    }
 5848|  49.8M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6123|  9.97M|    {
 6124|  9.97M|        const bool need_skipped_width =
 6125|  9.97M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 9.97M]
  |  Branch (6125:33): [True: 0, False: 9.97M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  9.97M|        auto it = rng.begin();
 6129|  9.97M|        std::ptrdiff_t prefix_width = 0;
 6130|  9.97M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 9.97M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  9.97M|        else {
 6138|  9.97M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.92k, False: 9.97M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.92k|    }                                                  \
  |  |  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.97M|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.97M|        }
 6141|  9.97M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  9.97M|        std::ptrdiff_t value_width = 0;
 6145|  9.97M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 9.97M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  9.97M|        else {
 6161|  9.97M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.96k, False: 9.97M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.96k|    }                                                  \
  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  9.97M|                                             specs, value, loc));
 6163|       |
 6164|  9.97M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 9.97M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  9.97M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  9.97M|        std::ptrdiff_t postfix_width = 0;
 6173|  9.97M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 9.97M, False: 1.00k]
  ------------------
 6174|  9.97M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  9.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.97M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  9.97M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  9.97M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  9.97M|                                 value_width));
 6178|  9.97M|            std::tie(it, postfix_width) = postfix_result;
 6179|  9.97M|        }
 6180|       |
 6181|  9.97M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  9.97M|                                                 value_width, postfix_width);
 6183|  9.97M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 9.97M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  9.97M|        return it;
 6188|  9.97M|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2992|  24.9M|{
 2993|  24.9M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (2993:19): [Folded - Ignored]
  ------------------
 2994|  24.9M|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2994:13): [True: 4.04k, False: 24.9M]
  ------------------
 2995|  4.04k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  4.04k|    static_cast<    \
  |  |  929|  4.04k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2996|  4.04k|        }
 2997|  24.9M|        else {
 2998|  24.9M|            dest.assign(source.view());
 2999|  24.9M|        }
 3000|  24.9M|    }
 3001|  24.9M|    else {
 3002|  24.9M|        return transcode_impl(source.view(), dest);
 3003|  24.9M|    }
 3004|       |
 3005|  24.9M|    return {};
 3006|  24.9M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5276|  9.97M|    {
 5277|  9.97M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.97M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.97M|        return read_impl(range, specs, value);
 5279|  9.97M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5294|  9.97M|    {
 5295|  9.97M|        SCN_CLANG_PUSH
 5296|  9.97M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.97M|        switch (m_type) {
 5299|  9.97M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 9.97M, False: 3.48k]
  ------------------
 5300|  9.97M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 9.97M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.97M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.48k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.48k, False: 9.97M]
  ------------------
 5310|  3.48k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.48k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 9.97M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 9.97M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.97M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.97M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.97M|        }
 5331|       |
 5332|  9.97M|        SCN_CLANG_POP
 5333|  9.97M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4819|  24.9M|    {
 4820|  24.9M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  24.9M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4751|  24.9M|{
 4752|  24.9M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  24.9M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  24.9M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.80k, False: 24.9M]
  ------------------
 4756|  3.80k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.80k|                                     "Invalid encoding in scanned string");
 4758|  3.80k|    }
 4759|  24.9M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  24.9M|    static_cast<    \
  |  |  929|  24.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  24.9M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  24.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.9M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  24.9M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  24.9M|    static_cast<    \
  |  |  929|  24.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  24.9M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5047|  3.48k|    {
 5048|  3.48k|        auto it = read_source_impl(range, {specs});
 5049|  3.48k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 42]
  |  |  ------------------
  ------------------
 5050|  3.44k|            return unexpected(it.error());
 5051|  3.44k|        }
 5052|       |
 5053|     42|        return read_string_impl(range, *it, value);
 5054|  3.48k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4751|     42|{
 4752|     42|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     42|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     42|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 42]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     42|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     42|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     42|    return SCN_MOVE(result);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     42|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5276|  9.97M|    {
 5277|  9.97M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.97M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.97M|        return read_impl(range, specs, value);
 5279|  9.97M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5294|  9.97M|    {
 5295|  9.97M|        SCN_CLANG_PUSH
 5296|  9.97M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.97M|        switch (m_type) {
 5299|  9.97M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 9.97M, False: 3.48k]
  ------------------
 5300|  9.97M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 9.97M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.97M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.48k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.48k, False: 9.97M]
  ------------------
 5310|  3.48k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.48k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 9.97M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 9.97M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.97M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.97M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.97M|        }
 5331|       |
 5332|  9.97M|        SCN_CLANG_POP
 5333|  9.97M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4819|  24.9M|    {
 4820|  24.9M|        return read_string_impl(range, read_until_classic_space(range), value);
 4821|  24.9M|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4751|  24.9M|{
 4752|  24.9M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|  24.9M|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|  24.9M|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 3.80k, False: 24.9M]
  ------------------
 4756|  3.80k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|  3.80k|                                     "Invalid encoding in scanned string");
 4758|  3.80k|    }
 4759|  24.9M|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|  24.9M|    static_cast<    \
  |  |  929|  24.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|  24.9M|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  24.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 24.9M]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|  24.9M|    return SCN_MOVE(result);
  ------------------
  |  |  928|  24.9M|    static_cast<    \
  |  |  929|  24.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|  24.9M|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3011|  24.9M|{
 3012|  24.9M|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
  ------------------
  |  Branch (3012:19): [Folded - Ignored]
  ------------------
 3013|  24.9M|        dest.assign(source.view());
 3014|  24.9M|    }
 3015|  24.9M|    else {
 3016|  24.9M|        return transcode_impl(source.view(), dest);
 3017|  24.9M|    }
 3018|       |
 3019|  24.9M|    return {};
 3020|  24.9M|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5047|  3.48k|    {
 5048|  3.48k|        auto it = read_source_impl(range, {specs});
 5049|  3.48k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 42]
  |  |  ------------------
  ------------------
 5050|  3.44k|            return unexpected(it.error());
 5051|  3.44k|        }
 5052|       |
 5053|     42|        return read_string_impl(range, *it, value);
 5054|  3.48k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4751|     42|{
 4752|     42|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4753|       |
 4754|     42|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4755|     42|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4755:9): [True: 0, False: 42]
  ------------------
 4756|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4757|      0|                                     "Invalid encoding in scanned string");
 4758|      0|    }
 4759|     42|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4760|     42|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     42|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 42]
  |  |  ------------------
  ------------------
 4761|      0|        return unexpected(e);
 4762|      0|    }
 4763|       |
 4764|     42|    return SCN_MOVE(result);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4765|     42|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5808|  24.9M|{
 5809|  24.9M|    if constexpr (std::is_same_v<T, bool>) {
  ------------------
  |  Branch (5809:19): [Folded - Ignored]
  ------------------
 5810|  24.9M|        return reader_impl_for_bool<CharT>{};
 5811|  24.9M|    }
 5812|  24.9M|    else if constexpr (std::is_same_v<T, char>) {
  ------------------
  |  Branch (5812:24): [Folded - Ignored]
  ------------------
 5813|  24.9M|        return reader_impl_for_char<CharT>{};
 5814|  24.9M|    }
 5815|  24.9M|    else if constexpr (std::is_same_v<T, wchar_t>) {
  ------------------
  |  Branch (5815:24): [Folded - Ignored]
  ------------------
 5816|  24.9M|        return reader_impl_for_wchar<CharT>{};
 5817|  24.9M|    }
 5818|  24.9M|    else if constexpr (std::is_same_v<T, char32_t>) {
  ------------------
  |  Branch (5818:24): [Folded - Ignored]
  ------------------
 5819|  24.9M|        return reader_impl_for_code_point<CharT>{};
 5820|  24.9M|    }
 5821|  24.9M|    else if constexpr (std::is_same_v<T, std::string_view> ||
  ------------------
  |  Branch (5821:24): [Folded - Ignored]
  |  Branch (5821:24): [Folded - Ignored]
  ------------------
 5822|  24.9M|                       std::is_same_v<T, std::wstring_view>) {
  ------------------
  |  Branch (5822:24): [Folded - Ignored]
  ------------------
 5823|  24.9M|        return reader_impl_for_string<CharT>{};
 5824|  24.9M|    }
 5825|  24.9M|    else if constexpr (std::is_same_v<T, std::string> ||
 5826|  24.9M|                       std::is_same_v<T, std::wstring>) {
 5827|  24.9M|        return reader_impl_for_string<CharT>{};
 5828|  24.9M|    }
 5829|  24.9M|    else if constexpr (std::is_same_v<T, regex_matches> ||
 5830|  24.9M|                       std::is_same_v<T, wregex_matches>) {
 5831|  24.9M|        return reader_impl_for_regex_matches<CharT>{};
 5832|  24.9M|    }
 5833|  24.9M|    else if constexpr (std::is_same_v<T, void*>) {
 5834|  24.9M|        return reader_impl_for_voidptr<CharT>{};
 5835|  24.9M|    }
 5836|  24.9M|    else if constexpr (std::is_floating_point_v<T>) {
 5837|  24.9M|        return reader_impl_for_float<CharT>{};
 5838|  24.9M|    }
 5839|  24.9M|    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5840|  24.9M|                       !std::is_same_v<T, wchar_t> &&
 5841|  24.9M|                       !std::is_same_v<T, char32_t> &&
 5842|  24.9M|                       !std::is_same_v<T, bool>) {
 5843|  24.9M|        return reader_impl_for_int<CharT>{};
 5844|  24.9M|    }
 5845|  24.9M|    else {
 5846|  24.9M|        return reader_impl_for_monostate<CharT>{};
 5847|  24.9M|    }
 5848|  24.9M|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5276|  9.97M|    {
 5277|  9.97M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  9.97M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5278|  9.97M|        return read_impl(range, specs, value);
 5279|  9.97M|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5294|  9.97M|    {
 5295|  9.97M|        SCN_CLANG_PUSH
 5296|  9.97M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5297|       |
 5298|  9.97M|        switch (m_type) {
 5299|  9.97M|            case reader_type::word:
  ------------------
  |  Branch (5299:13): [True: 9.97M, False: 3.48k]
  ------------------
 5300|  9.97M|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5301|       |
 5302|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5302:13): [True: 0, False: 9.97M]
  ------------------
 5303|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5304|      0|                                                                   value);
 5305|       |
 5306|      0|            case reader_type::character:
  ------------------
  |  Branch (5306:13): [True: 0, False: 9.97M]
  ------------------
 5307|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5308|       |
 5309|  3.48k|            case reader_type::character_set:
  ------------------
  |  Branch (5309:13): [True: 3.48k, False: 9.97M]
  ------------------
 5310|  3.48k|                return character_set_reader_impl<SourceCharT>{}.read(
 5311|  3.48k|                    range, specs, value);
 5312|       |
 5313|      0|#if !SCN_DISABLE_REGEX
 5314|      0|            case reader_type::regex:
  ------------------
  |  Branch (5314:13): [True: 0, False: 9.97M]
  ------------------
 5315|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5316|      0|                    range, specs.charset_string<SourceCharT>(),
 5317|      0|                    specs.regexp_flags, value);
 5318|       |
 5319|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5319:13): [True: 0, False: 9.97M]
  ------------------
 5320|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5321|      0|                    range,
 5322|      0|                    get_unescaped_regex_pattern(
 5323|      0|                        specs.charset_string<SourceCharT>()),
 5324|      0|                    specs.regexp_flags, value);
 5325|      0|#endif
 5326|       |
 5327|      0|            default:
  ------------------
  |  Branch (5327:13): [True: 0, False: 9.97M]
  ------------------
 5328|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5329|  9.97M|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5330|  9.97M|        }
 5331|       |
 5332|  9.97M|        SCN_CLANG_POP
 5333|  9.97M|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4826|  24.9M|    {
 4827|  24.9M|        return read_string_view_impl(range, read_until_classic_space(range),
 4828|  24.9M|                                     value);
 4829|  24.9M|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4772|  24.9M|{
 4773|  24.9M|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|  24.9M|    auto src = [&]() {
 4776|  24.9M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|  24.9M|            return make_contiguous_buffer(
 4778|  24.9M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  24.9M|        }
 4780|  24.9M|        else {
 4781|  24.9M|            return make_contiguous_buffer(
 4782|  24.9M|                ranges::subrange{range.begin(), result});
 4783|  24.9M|        }
 4784|  24.9M|    }();
 4785|  24.9M|    using src_type = decltype(src);
 4786|       |
 4787|  24.9M|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|  24.9M|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|  24.9M|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|  24.9M|                                     "Cannot read a string_view from "
 4796|  24.9M|                                     "this source range (would require "
 4797|  24.9M|                                     "transcoding)");
 4798|  24.9M|    }
 4799|  24.9M|    else {
 4800|  24.9M|        const auto view = src.view();
 4801|  24.9M|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|  24.9M|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 3.80k, False: 24.9M]
  ------------------
 4804|  3.80k|            return unexpected_scan_error(
 4805|  3.80k|                scan_error::invalid_scanned_value,
 4806|  3.80k|                "Invalid encoding in scanned string_view");
 4807|  3.80k|        }
 4808|       |
 4809|  24.9M|        return SCN_MOVE(result);
  ------------------
  |  |  928|  24.9M|    static_cast<    \
  |  |  929|  24.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|  24.9M|    }
 4811|  24.9M|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4775|  24.9M|    auto src = [&]() {
 4776|  24.9M|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|  24.9M|            return make_contiguous_buffer(
 4778|  24.9M|                ranges::subrange{range.begin().base(), result.base()});
 4779|  24.9M|        }
 4780|  24.9M|        else {
 4781|  24.9M|            return make_contiguous_buffer(
 4782|  24.9M|                ranges::subrange{range.begin(), result});
 4783|  24.9M|        }
 4784|  24.9M|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5061|  3.48k|    {
 5062|  3.48k|        auto it = read_source_impl(range, {specs});
 5063|  3.48k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  3.48k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 42]
  |  |  ------------------
  ------------------
 5064|  3.44k|            return unexpected(it.error());
 5065|  3.44k|        }
 5066|       |
 5067|     42|        return read_string_view_impl(range, *it, value);
 5068|  3.48k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4772|     42|{
 4773|     42|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4774|       |
 4775|     42|    auto src = [&]() {
 4776|     42|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4777|     42|            return make_contiguous_buffer(
 4778|     42|                ranges::subrange{range.begin().base(), result.base()});
 4779|     42|        }
 4780|     42|        else {
 4781|     42|            return make_contiguous_buffer(
 4782|     42|                ranges::subrange{range.begin(), result});
 4783|     42|        }
 4784|     42|    }();
 4785|     42|    using src_type = decltype(src);
 4786|       |
 4787|     42|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4787:9): [Folded - Ignored]
  ------------------
 4788|      0|        return unexpected_scan_error(
 4789|      0|            scan_error::invalid_scanned_value,
 4790|      0|            "Cannot read a string_view from this source range (not "
 4791|      0|            "contiguous)");
 4792|      0|    }
 4793|     42|    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
  ------------------
  |  Branch (4793:19): [Folded - Ignored]
  ------------------
 4794|     42|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4795|     42|                                     "Cannot read a string_view from "
 4796|     42|                                     "this source range (would require "
 4797|     42|                                     "transcoding)");
 4798|     42|    }
 4799|     42|    else {
 4800|     42|        const auto view = src.view();
 4801|     42|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4802|       |
 4803|     42|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4803:13): [True: 0, False: 42]
  ------------------
 4804|      0|            return unexpected_scan_error(
 4805|      0|                scan_error::invalid_scanned_value,
 4806|      0|                "Invalid encoding in scanned string_view");
 4807|      0|        }
 4808|       |
 4809|     42|        return SCN_MOVE(result);
  ------------------
  |  |  928|     42|    static_cast<    \
  |  |  929|     42|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4810|     42|    }
 4811|     42|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4775|     42|    auto src = [&]() {
 4776|     42|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
  ------------------
  |  Branch (4776:23): [Folded - Ignored]
  ------------------
 4777|     42|            return make_contiguous_buffer(
 4778|     42|                ranges::subrange{range.begin().base(), result.base()});
 4779|     42|        }
 4780|     42|        else {
 4781|     42|            return make_contiguous_buffer(
 4782|     42|                ranges::subrange{range.begin(), result});
 4783|     42|        }
 4784|     42|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2950|  24.9M|{
 2951|  24.9M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2951:9): [True: 24.9M, False: 0]
  ------------------
 2952|  24.9M|        auto it = read_while_classic_space(range);
 2953|  24.9M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2954|  24.9M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  24.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.31k, False: 24.9M]
  |  |  ------------------
  ------------------
 2955|  3.31k|            return unexpected(e);
 2956|  3.31k|        }
 2957|       |
 2958|  24.9M|        return it;
 2959|  24.9M|    }
 2960|       |
 2961|      0|    return read_while_classic_space(range);
 2962|  24.9M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2116|  24.9M|{
 2117|  24.9M|    if constexpr (ranges::contiguous_range<Range> &&
  ------------------
  |  Branch (2117:19): [Folded - Ignored]
  |  Branch (2117:19): [Folded - Ignored]
  ------------------
 2118|  24.9M|                  ranges::sized_range<Range> &&
  ------------------
  |  Branch (2118:19): [Folded - Ignored]
  ------------------
 2119|  24.9M|                  std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2119:19): [Folded - Ignored]
  ------------------
 2120|  24.9M|        auto buf = make_contiguous_buffer(range);
 2121|  24.9M|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2122|  24.9M|        return ranges::next(range.begin(),
 2123|  24.9M|                            ranges::distance(buf.view().begin(), it));
 2124|  24.9M|    }
 2125|  24.9M|    else {
 2126|  24.9M|        auto it = range.begin();
 2127|       |
 2128|  24.9M|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
  ------------------
  |  Branch (2128:23): [Folded - Ignored]
  ------------------
 2129|  24.9M|            auto seg = get_contiguous_beginning(range);
 2130|  24.9M|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2131|  24.9M|                seg_it != seg.end()) {
 2132|  24.9M|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2133|  24.9M|            }
 2134|  24.9M|            ranges::advance(it, seg.size());
 2135|  24.9M|        }
 2136|       |
 2137|  24.9M|        return read_while_code_point(
 2138|  24.9M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
 2139|  24.9M|    }
 2140|  24.9M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_:
  753|  24.9M|    {
  754|  24.9M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_LPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clEST_Di:
  743|  72.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  72.3M|              cvref<T> obj = *get<T>(fn);
  745|  72.3M|              if constexpr (std::is_void_v<R>) {
  ------------------
  |  Branch (745:29): [Folded - Ignored]
  ------------------
  746|  72.3M|                  obj(static_cast<decltype(args)>(args)...);
  747|  72.3M|              }
  748|  72.3M|              else {
  749|  72.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  72.3M|              }
  751|  72.3M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  72.3M|    {
  684|  72.3M|        if constexpr (std::is_const_v<T>) {
  ------------------
  |  Branch (684:23): [Folded - Ignored]
  ------------------
  685|  72.3M|            return static_cast<T*>(s.m_cp);
  686|  72.3M|        }
  687|  72.3M|        else if constexpr (std::is_object_v<T>) {
  ------------------
  |  Branch (687:28): [Folded - Ignored]
  ------------------
  688|  72.3M|            return static_cast<T*>(s.m_p);
  689|  72.3M|        }
  690|  72.3M|        else {
  691|  72.3M|            return reinterpret_cast<T*>(s.m_fp);
  692|  72.3M|        }
  693|  72.3M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2138|  72.3M|            range, [](char32_t cp) noexcept { return is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_LPv0EEEPSJ_:
  661|  24.9M|        {
  662|  24.9M|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|   200k|{
 5795|   200k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.17k, False: 199k]
  |  |  ------------------
  ------------------
 5796|  1.17k|        return unexpected(e);
 5797|  1.17k|    }
 5798|       |
 5799|   199k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 199k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   199k|    return skip_classic_whitespace(range);
 5804|   199k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|   100k|    {
 5871|   100k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   100k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   100k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   100k|            auto rd = make_reader<T, char_type>();
 5876|   100k|            return impl(rd, range, value);
 5877|   100k|        }
 5878|   100k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   100k|            auto rd = make_reader<T, char_type>();
 5880|   100k|            if (!is_segment_contiguous(range)) {
 5881|   100k|                return impl(rd, range, value);
 5882|   100k|            }
 5883|   100k|            auto crange = get_as_contiguous(range);
 5884|   100k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   100k|            return ranges::next(range.begin(),
 5886|   100k|                                ranges::distance(crange.begin(), it));
 5887|   100k|        }
 5888|   100k|        else {
 5889|   100k|            SCN_EXPECT(false);
 5890|   100k|            SCN_UNREACHABLE;
 5891|   100k|        }
 5892|   100k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|   100k|    {
 5863|   100k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.58k, False: 98.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.58k|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  98.7k|                        .transform_error(make_eof_scan_error));
 5865|  98.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   100k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  98.7k|    {
 5266|  98.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  98.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  98.7k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  98.7k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5870|   100k|    {
 5871|   100k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   100k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|   100k|                          basic_contiguous_scan_context<char_type>>) {
 5875|   100k|            auto rd = make_reader<T, char_type>();
 5876|   100k|            return impl(rd, range, value);
 5877|   100k|        }
 5878|   100k|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|   100k|            auto rd = make_reader<T, char_type>();
 5880|   100k|            if (!is_segment_contiguous(range)) {
 5881|   100k|                return impl(rd, range, value);
 5882|   100k|            }
 5883|   100k|            auto crange = get_as_contiguous(range);
 5884|   100k|            SCN_TRY(it, impl(rd, crange, value));
 5885|   100k|            return ranges::next(range.begin(),
 5886|   100k|                                ranges::distance(crange.begin(), it));
 5887|   100k|        }
 5888|   100k|        else {
 5889|   100k|            SCN_EXPECT(false);
 5890|   100k|            SCN_UNREACHABLE;
 5891|   100k|        }
 5892|   100k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|   100k|    {
 5863|   100k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   100k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   100k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   100k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.58k, False: 98.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.58k|    }                                                  \
  |  |  |  | 3671|   100k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  98.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  98.7k|                        .transform_error(make_eof_scan_error));
 5865|  98.7k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   100k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  98.7k|    {
 5266|  98.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  98.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  98.7k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  98.7k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|   102k|{
 5795|   102k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 618, False: 102k]
  |  |  ------------------
  ------------------
 5796|    618|        return unexpected(e);
 5797|    618|    }
 5798|       |
 5799|   102k|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 102k]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|   102k|    return skip_classic_whitespace(range);
 5804|   102k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5870|   102k|    {
 5871|   102k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|   102k|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|   102k|            auto rd = make_reader<T, char_type>();
 5876|   102k|            return impl(rd, range, value);
 5877|   102k|        }
 5878|   102k|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|   102k|            auto rd = make_reader<T, char_type>();
 5880|   102k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 102k, False: 0]
  ------------------
 5881|   102k|                return impl(rd, range, value);
 5882|   102k|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|   102k|        else {
 5889|   102k|            SCN_EXPECT(false);
 5890|   102k|            SCN_UNREACHABLE;
 5891|   102k|        }
 5892|   102k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|   102k|    {
 5863|   102k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|   102k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   102k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   102k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.61k, False: 101k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.61k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.61k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.61k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.61k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.61k|    }                                                  \
  |  |  |  | 3671|   102k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   101k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|   101k|                        .transform_error(make_eof_scan_error));
 5865|   101k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|   102k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|   101k|    {
 5266|   101k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   101k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   101k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|   101k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2878|   149k|    {
 2879|   149k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2882|   423k|    {
 2883|   423k|        return m_current;
 2884|   423k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2887|   274k|    {
 2888|   274k|        return m_range.end();
 2889|   274k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2902|   132k|    {
 2903|   132k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   132k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   132k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|   132k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|   132k|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 132k]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|   132k|        }
 2909|   132k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   132k|    static_cast<    \
  |  |  929|   132k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|   132k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2892|   142k|    {
 2893|   142k|        return ranges::subrange{begin(), end()};
 2894|   142k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|   138k|    {
 6037|   138k|        const bool need_skipped_width =
 6038|   138k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 138k]
  |  Branch (6038:33): [True: 0, False: 138k]
  ------------------
 6039|   138k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|   138k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 138k]
  ------------------
 6043|   138k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 138k]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|   138k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 138k, False: 0]
  |  Branch (6047:56): [True: 133k, False: 5.25k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|   133k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 133k]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|   265k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|   133k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|   133k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|   133k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.10k, False: 131k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.10k|    }                                                  \
  |  |  |  | 3671|   133k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   131k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|   265k|                            make_eof_scan_error));
 6058|       |
 6059|   265k|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 131k]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|   131k|            return result_type{it, 0};
 6067|   265k|        }
 6068|       |
 6069|  5.25k|        return result_type{rng.begin(), 0};
 6070|   138k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|   131k|    {
 6079|   131k|        const bool need_skipped_width =
 6080|   131k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 131k]
  |  Branch (6080:33): [True: 0, False: 131k]
  ------------------
 6081|   131k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|   131k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 131k]
  ------------------
 6084|   131k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 131k]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|   131k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 131k, False: 0]
  ------------------
 6093|   131k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 1.77k, False: 129k]
  ------------------
 6094|   131k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 1.77k]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|  1.77k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 1.77k]
  ------------------
 6096|  1.77k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|   131k|        return result_type{rng.begin(), 0};
 6118|   131k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  71.2k|    {
 6193|  71.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  71.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  71.2k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  71.2k|            auto rd = make_reader<T, char_type>();
 6198|  71.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 69.4k]
  |  |  ------------------
  ------------------
 6199|  1.72k|                return unexpected(e);
 6200|  1.72k|            }
 6201|       |
 6202|  69.4k|            return impl(rd, range, value);
 6203|  71.2k|        }
 6204|  71.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  71.2k|            auto rd = make_reader<T, char_type>();
 6206|  71.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  71.2k|                return unexpected(e);
 6208|  71.2k|            }
 6209|       |
 6210|  71.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  71.2k|                specs.width != 0) {
 6212|  71.2k|                return impl(rd, range, value);
 6213|  71.2k|            }
 6214|       |
 6215|  71.2k|            auto crange = get_as_contiguous(range);
 6216|  71.2k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  71.2k|            return ranges::next(range.begin(),
 6218|  71.2k|                                ranges::distance(crange.begin(), it));
 6219|  71.2k|        }
 6220|  71.2k|        else {
 6221|  71.2k|            SCN_EXPECT(false);
 6222|  71.2k|            SCN_UNREACHABLE;
 6223|  71.2k|        }
 6224|  71.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  69.4k|    {
 6124|  69.4k|        const bool need_skipped_width =
 6125|  69.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 69.4k]
  |  Branch (6125:33): [True: 0, False: 69.4k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  69.4k|        auto it = rng.begin();
 6129|  69.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  69.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 69.4k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  69.4k|        else {
 6138|  69.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  69.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 68.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.05k|    }                                                  \
  |  |  |  | 3671|  69.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  68.4k|            std::tie(it, prefix_width) = prefix_result;
 6140|  68.4k|        }
 6141|  68.4k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  68.4k|        std::ptrdiff_t value_width = 0;
 6145|  68.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 68.4k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  68.4k|        else {
 6161|  68.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  68.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  68.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.39k, False: 66.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.39k|    }                                                  \
  |  | 3671|  68.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  66.0k|                                             specs, value, loc));
 6163|       |
 6164|  66.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 66.0k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  66.0k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  66.0k|        std::ptrdiff_t postfix_width = 0;
 6173|  66.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 65.6k, False: 410]
  ------------------
 6174|  65.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  65.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  65.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  65.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 65.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  65.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  65.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  65.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  65.6k|                                 value_width));
 6178|  65.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  65.6k|        }
 6180|       |
 6181|  66.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  66.0k|                                                 value_width, postfix_width);
 6183|  66.0k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 66.0k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  66.0k|        return it;
 6188|  66.0k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6192|  71.2k|    {
 6193|  71.2k|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  71.2k|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  71.2k|                          basic_contiguous_scan_context<char_type>>) {
 6197|  71.2k|            auto rd = make_reader<T, char_type>();
 6198|  71.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  71.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.72k, False: 69.4k]
  |  |  ------------------
  ------------------
 6199|  1.72k|                return unexpected(e);
 6200|  1.72k|            }
 6201|       |
 6202|  69.4k|            return impl(rd, range, value);
 6203|  71.2k|        }
 6204|  71.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  71.2k|            auto rd = make_reader<T, char_type>();
 6206|  71.2k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  71.2k|                return unexpected(e);
 6208|  71.2k|            }
 6209|       |
 6210|  71.2k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  71.2k|                specs.width != 0) {
 6212|  71.2k|                return impl(rd, range, value);
 6213|  71.2k|            }
 6214|       |
 6215|  71.2k|            auto crange = get_as_contiguous(range);
 6216|  71.2k|            SCN_TRY(it, impl(rd, crange, value));
 6217|  71.2k|            return ranges::next(range.begin(),
 6218|  71.2k|                                ranges::distance(crange.begin(), it));
 6219|  71.2k|        }
 6220|  71.2k|        else {
 6221|  71.2k|            SCN_EXPECT(false);
 6222|  71.2k|            SCN_UNREACHABLE;
 6223|  71.2k|        }
 6224|  71.2k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  69.4k|    {
 6124|  69.4k|        const bool need_skipped_width =
 6125|  69.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 69.4k]
  |  Branch (6125:33): [True: 0, False: 69.4k]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  69.4k|        auto it = rng.begin();
 6129|  69.4k|        std::ptrdiff_t prefix_width = 0;
 6130|  69.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 69.4k]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  69.4k|        else {
 6138|  69.4k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  69.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  69.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  69.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  69.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 68.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.05k|    }                                                  \
  |  |  |  | 3671|  69.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  68.4k|            std::tie(it, prefix_width) = prefix_result;
 6140|  68.4k|        }
 6141|  68.4k|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  68.4k|        std::ptrdiff_t value_width = 0;
 6145|  68.4k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 68.4k]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  68.4k|        else {
 6161|  68.4k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  68.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  68.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 2.39k, False: 66.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  2.39k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  2.39k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  2.39k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  2.39k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  2.39k|    }                                                  \
  |  | 3671|  68.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  66.0k|                                             specs, value, loc));
 6163|       |
 6164|  66.0k|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 66.0k]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  66.0k|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  66.0k|        std::ptrdiff_t postfix_width = 0;
 6173|  66.0k|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 65.6k, False: 410]
  ------------------
 6174|  65.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  65.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  65.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  65.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  65.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 65.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  65.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  65.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  65.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  65.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  65.6k|                                 value_width));
 6178|  65.6k|            std::tie(it, postfix_width) = postfix_result;
 6179|  65.6k|        }
 6180|       |
 6181|  66.0k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  66.0k|                                                 value_width, postfix_width);
 6183|  66.0k|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 66.0k]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  66.0k|        return it;
 6188|  66.0k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5794|  29.9M|{
 5795|  29.9M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  29.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.99k, False: 29.9M]
  |  |  ------------------
  ------------------
 5796|  2.99k|        return unexpected(e);
 5797|  2.99k|    }
 5798|       |
 5799|  29.9M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 29.9M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  29.9M|    return skip_classic_whitespace(range);
 5804|  29.9M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  14.9M|    {
 5871|  14.9M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  14.9M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  14.9M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  14.9M|            auto rd = make_reader<T, char_type>();
 5876|  14.9M|            return impl(rd, range, value);
 5877|  14.9M|        }
 5878|  14.9M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  14.9M|            auto rd = make_reader<T, char_type>();
 5880|  14.9M|            if (!is_segment_contiguous(range)) {
 5881|  14.9M|                return impl(rd, range, value);
 5882|  14.9M|            }
 5883|  14.9M|            auto crange = get_as_contiguous(range);
 5884|  14.9M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  14.9M|            return ranges::next(range.begin(),
 5886|  14.9M|                                ranges::distance(crange.begin(), it));
 5887|  14.9M|        }
 5888|  14.9M|        else {
 5889|  14.9M|            SCN_EXPECT(false);
 5890|  14.9M|            SCN_UNREACHABLE;
 5891|  14.9M|        }
 5892|  14.9M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5862|  14.9M|    {
 5863|  14.9M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  14.9M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.9M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.9M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.88k, False: 14.9M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.88k|    }                                                  \
  |  |  |  | 3671|  14.9M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  14.9M|                        .transform_error(make_eof_scan_error));
 5865|  14.9M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  14.9M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5265|  14.9M|    {
 5266|  14.9M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  14.9M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  14.9M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5870|  14.9M|    {
 5871|  14.9M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  14.9M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|  14.9M|                          basic_contiguous_scan_context<char_type>>) {
 5875|  14.9M|            auto rd = make_reader<T, char_type>();
 5876|  14.9M|            return impl(rd, range, value);
 5877|  14.9M|        }
 5878|  14.9M|        else if constexpr (!detail::is_type_disabled<T>) {
 5879|  14.9M|            auto rd = make_reader<T, char_type>();
 5880|  14.9M|            if (!is_segment_contiguous(range)) {
 5881|  14.9M|                return impl(rd, range, value);
 5882|  14.9M|            }
 5883|  14.9M|            auto crange = get_as_contiguous(range);
 5884|  14.9M|            SCN_TRY(it, impl(rd, crange, value));
 5885|  14.9M|            return ranges::next(range.begin(),
 5886|  14.9M|                                ranges::distance(crange.begin(), it));
 5887|  14.9M|        }
 5888|  14.9M|        else {
 5889|  14.9M|            SCN_EXPECT(false);
 5890|  14.9M|            SCN_UNREACHABLE;
 5891|  14.9M|        }
 5892|  14.9M|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5862|  14.9M|    {
 5863|  14.9M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  14.9M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.9M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.9M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.88k, False: 14.9M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.88k|    }                                                  \
  |  |  |  | 3671|  14.9M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  14.9M|                        .transform_error(make_eof_scan_error));
 5865|  14.9M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  14.9M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5265|  14.9M|    {
 5266|  14.9M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  14.9M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  14.9M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EELPv0EEEOT_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2878|  19.9M|    {
 2879|  19.9M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2882|  59.8M|    {
 2883|  59.8M|        return m_current;
 2884|  59.8M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2887|  39.9M|    {
 2888|  39.9M|        return m_range.end();
 2889|  39.9M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2902|  19.9M|    {
 2903|  19.9M|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  19.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  19.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2904|  19.9M|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
  ------------------
  |  Branch (2904:23): [Folded - Ignored]
  ------------------
 2905|  19.9M|            if (it == nullptr) {
  ------------------
  |  Branch (2905:17): [True: 0, False: 19.9M]
  ------------------
 2906|      0|                it = end();
 2907|      0|            }
 2908|  19.9M|        }
 2909|  19.9M|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  19.9M|    static_cast<    \
  |  |  929|  19.9M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2910|  19.9M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2892|  19.9M|    {
 2893|  19.9M|        return ranges::subrange{begin(), end()};
 2894|  19.9M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6036|  19.9M|    {
 6037|  19.9M|        const bool need_skipped_width =
 6038|  19.9M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6038:13): [True: 0, False: 19.9M]
  |  Branch (6038:33): [True: 0, False: 19.9M]
  ------------------
 6039|  19.9M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6040|       |
 6041|       |        // Read prefix
 6042|  19.9M|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6042:13): [True: 0, False: 19.9M]
  ------------------
 6043|  19.9M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6043:13): [True: 0, False: 19.9M]
  ------------------
 6044|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6045|      0|                             need_skipped_width);
 6046|      0|        }
 6047|  19.9M|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6047:13): [True: 19.9M, False: 0]
  |  Branch (6047:56): [True: 19.9M, False: 6.97k]
  ------------------
 6048|       |            // Default alignment:
 6049|       |            // Skip preceding whitespace, if required by the reader
 6050|  19.9M|            if (specs.precision != 0) {
  ------------------
  |  Branch (6050:17): [True: 0, False: 19.9M]
  ------------------
 6051|      0|                auto max_width_view = take_width(rng, specs.precision);
 6052|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6053|      0|                                  .transform_error(make_eof_scan_error));
 6054|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6055|      0|            }
 6056|  39.9M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3672|  19.9M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  19.9M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  19.9M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  19.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.84k, False: 19.9M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  3.84k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  3.84k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  3.84k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  3.84k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  3.84k|    }                                                  \
  |  |  |  | 3671|  19.9M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  19.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6057|  39.9M|                            make_eof_scan_error));
 6058|       |
 6059|  39.9M|            if (need_skipped_width) {
  ------------------
  |  Branch (6059:17): [True: 0, False: 19.9M]
  ------------------
 6060|      0|                return result_type{
 6061|      0|                    it,
 6062|      0|                    calculate_text_width(make_contiguous_buffer(
 6063|      0|                                             ranges::subrange{rng.begin(), it})
 6064|      0|                                             .view())};
 6065|      0|            }
 6066|  19.9M|            return result_type{it, 0};
 6067|  39.9M|        }
 6068|       |
 6069|  6.97k|        return result_type{rng.begin(), 0};
 6070|  19.9M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6078|  19.9M|    {
 6079|  19.9M|        const bool need_skipped_width =
 6080|  19.9M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6080:13): [True: 0, False: 19.9M]
  |  Branch (6080:33): [True: 0, False: 19.9M]
  ------------------
 6081|  19.9M|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6082|       |
 6083|  19.9M|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6083:13): [True: 0, False: 19.9M]
  ------------------
 6084|  19.9M|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6084:13): [True: 0, False: 19.9M]
  ------------------
 6085|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6085:17): [True: 0, False: 0]
  ------------------
 6086|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                return result_type{rng.begin(), 0};
 6088|      0|            }
 6089|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6090|      0|                             specs.fill, need_skipped_width);
 6091|      0|        }
 6092|  19.9M|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6092:13): [True: 19.9M, False: 0]
  ------------------
 6093|  19.9M|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6093:13): [True: 64, False: 19.9M]
  ------------------
 6094|  19.9M|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6094:15): [True: 0, False: 64]
  |  Branch (6094:35): [True: 0, False: 0]
  ------------------
 6095|     64|             (specs.precision != 0 &&
  ------------------
  |  Branch (6095:15): [True: 0, False: 64]
  ------------------
 6096|     64|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6096:15): [True: 0, False: 0]
  ------------------
 6097|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                const auto initial_width =
 6099|      0|                    specs.precision - prefix_width - value_width;
 6100|      0|                auto max_width_view = take_width(rng, initial_width);
 6101|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6102|      0|                                  .transform_error(make_eof_scan_error));
 6103|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6104|      0|            }
 6105|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6106|      0|                            make_eof_scan_error));
 6107|       |
 6108|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6108:17): [True: 0, False: 0]
  ------------------
 6109|      0|                return result_type{
 6110|      0|                    it,
 6111|      0|                    calculate_text_width(make_contiguous_buffer(
 6112|      0|                                             ranges::subrange{rng.begin(), it})
 6113|      0|                                             .view())};
 6114|      0|            }
 6115|      0|            return result_type{it, 0};
 6116|      0|        }
 6117|  19.9M|        return result_type{rng.begin(), 0};
 6118|  19.9M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  9.98M|    {
 6193|  9.98M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.98M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.98M|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.98M|            auto rd = make_reader<T, char_type>();
 6198|  9.98M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 9.97M]
  |  |  ------------------
  ------------------
 6199|  3.44k|                return unexpected(e);
 6200|  3.44k|            }
 6201|       |
 6202|  9.97M|            return impl(rd, range, value);
 6203|  9.98M|        }
 6204|  9.98M|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.98M|            auto rd = make_reader<T, char_type>();
 6206|  9.98M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.98M|                return unexpected(e);
 6208|  9.98M|            }
 6209|       |
 6210|  9.98M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.98M|                specs.width != 0) {
 6212|  9.98M|                return impl(rd, range, value);
 6213|  9.98M|            }
 6214|       |
 6215|  9.98M|            auto crange = get_as_contiguous(range);
 6216|  9.98M|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.98M|            return ranges::next(range.begin(),
 6218|  9.98M|                                ranges::distance(crange.begin(), it));
 6219|  9.98M|        }
 6220|  9.98M|        else {
 6221|  9.98M|            SCN_EXPECT(false);
 6222|  9.98M|            SCN_UNREACHABLE;
 6223|  9.98M|        }
 6224|  9.98M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6123|  9.97M|    {
 6124|  9.97M|        const bool need_skipped_width =
 6125|  9.97M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 9.97M]
  |  Branch (6125:33): [True: 0, False: 9.97M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  9.97M|        auto it = rng.begin();
 6129|  9.97M|        std::ptrdiff_t prefix_width = 0;
 6130|  9.97M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 9.97M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  9.97M|        else {
 6138|  9.97M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.92k, False: 9.97M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.92k|    }                                                  \
  |  |  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.97M|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.97M|        }
 6141|  9.97M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  9.97M|        std::ptrdiff_t value_width = 0;
 6145|  9.97M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 9.97M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  9.97M|        else {
 6161|  9.97M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.96k, False: 9.97M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.96k|    }                                                  \
  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  9.97M|                                             specs, value, loc));
 6163|       |
 6164|  9.97M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 9.97M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  9.97M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  9.97M|        std::ptrdiff_t postfix_width = 0;
 6173|  9.97M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 9.97M, False: 1.00k]
  ------------------
 6174|  9.97M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  9.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.97M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  9.97M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  9.97M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  9.97M|                                 value_width));
 6178|  9.97M|            std::tie(it, postfix_width) = postfix_result;
 6179|  9.97M|        }
 6180|       |
 6181|  9.97M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  9.97M|                                                 value_width, postfix_width);
 6183|  9.97M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 9.97M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  9.97M|        return it;
 6188|  9.97M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6192|  9.98M|    {
 6193|  9.98M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (6193:23): [Folded - Ignored]
  |  Branch (6193:23): [Folded - Ignored]
  ------------------
 6194|  9.98M|                      std::is_same_v<
  ------------------
  |  Branch (6194:23): [Folded - Ignored]
  ------------------
 6195|      0|                          context_type,
 6196|  9.98M|                          basic_contiguous_scan_context<char_type>>) {
 6197|  9.98M|            auto rd = make_reader<T, char_type>();
 6198|  9.98M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  9.98M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.44k, False: 9.97M]
  |  |  ------------------
  ------------------
 6199|  3.44k|                return unexpected(e);
 6200|  3.44k|            }
 6201|       |
 6202|  9.97M|            return impl(rd, range, value);
 6203|  9.98M|        }
 6204|  9.98M|        else if constexpr (!detail::is_type_disabled<T>) {
 6205|  9.98M|            auto rd = make_reader<T, char_type>();
 6206|  9.98M|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6207|  9.98M|                return unexpected(e);
 6208|  9.98M|            }
 6209|       |
 6210|  9.98M|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6211|  9.98M|                specs.width != 0) {
 6212|  9.98M|                return impl(rd, range, value);
 6213|  9.98M|            }
 6214|       |
 6215|  9.98M|            auto crange = get_as_contiguous(range);
 6216|  9.98M|            SCN_TRY(it, impl(rd, crange, value));
 6217|  9.98M|            return ranges::next(range.begin(),
 6218|  9.98M|                                ranges::distance(crange.begin(), it));
 6219|  9.98M|        }
 6220|  9.98M|        else {
 6221|  9.98M|            SCN_EXPECT(false);
 6222|  9.98M|            SCN_UNREACHABLE;
 6223|  9.98M|        }
 6224|  9.98M|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6123|  9.97M|    {
 6124|  9.97M|        const bool need_skipped_width =
 6125|  9.97M|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6125:13): [True: 0, False: 9.97M]
  |  Branch (6125:33): [True: 0, False: 9.97M]
  ------------------
 6126|       |
 6127|       |        // Read prefix
 6128|  9.97M|        auto it = rng.begin();
 6129|  9.97M|        std::ptrdiff_t prefix_width = 0;
 6130|  9.97M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6130:13): [True: 0, False: 9.97M]
  ------------------
 6131|      0|            auto max_width_view = take_width(rng, specs.precision);
 6132|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6133|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6134|      0|            it = prefix_result.first.base();
 6135|      0|            prefix_width = prefix_result.second;
 6136|      0|        }
 6137|  9.97M|        else {
 6138|  9.97M|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3672|  9.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.92k, False: 9.97M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  1.92k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  1.92k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  1.92k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  1.92k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  1.92k|    }                                                  \
  |  |  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6139|  9.97M|            std::tie(it, prefix_width) = prefix_result;
 6140|  9.97M|        }
 6141|  9.97M|        auto prefix_end_it = it;
 6142|       |
 6143|       |        // Read value
 6144|  9.97M|        std::ptrdiff_t value_width = 0;
 6145|  9.97M|        if (specs.precision != 0) {
  ------------------
  |  Branch (6145:13): [True: 0, False: 9.97M]
  ------------------
 6146|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return unexpected_scan_error(
 6148|      0|                    scan_error::invalid_scanned_value,
 6149|      0|                    "Too many fill characters before value, "
 6150|      0|                    "precision exceeded before reading value");
 6151|      0|            }
 6152|       |
 6153|      0|            const auto initial_width = specs.precision - prefix_width;
 6154|      0|            auto max_width_view =
 6155|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6156|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6157|      0|            it = w_it.base();
 6158|      0|            value_width = initial_width - w_it.count();
 6159|      0|        }
 6160|  9.97M|        else {
 6161|  9.97M|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 4.96k, False: 9.97M]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3669|  4.96k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3664|  4.96k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3663|  4.96k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3662|  4.96k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3670|  4.96k|    }                                                  \
  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6162|  9.97M|                                             specs, value, loc));
 6163|       |
 6164|  9.97M|            if (need_skipped_width) {
  ------------------
  |  Branch (6164:17): [True: 0, False: 9.97M]
  ------------------
 6165|      0|                value_width = calculate_text_width(
 6166|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6167|      0|                        .view());
 6168|      0|            }
 6169|  9.97M|        }
 6170|       |
 6171|       |        // Read postfix
 6172|  9.97M|        std::ptrdiff_t postfix_width = 0;
 6173|  9.97M|        if (it != rng.end()) {
  ------------------
  |  Branch (6173:13): [True: 9.97M, False: 1.00k]
  ------------------
 6174|  9.97M|            SCN_TRY(postfix_result,
  ------------------
  |  | 3672|  9.97M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  9.97M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  9.97M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  9.97M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 9.97M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|  9.97M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  9.97M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6175|  9.97M|                    impl_postfix(ranges::subrange{it, rng.end()},
 6176|  9.97M|                                 rd.skip_ws_before_read(), prefix_width,
 6177|  9.97M|                                 value_width));
 6178|  9.97M|            std::tie(it, postfix_width) = postfix_result;
 6179|  9.97M|        }
 6180|       |
 6181|  9.97M|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6182|  9.97M|                                                 value_width, postfix_width);
 6183|  9.97M|            !e) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 9.97M]
  ------------------
 6184|      0|            return unexpected(e);
 6185|      0|        }
 6186|       |
 6187|  9.97M|        return it;
 6188|  9.97M|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5794|  14.9M|{
 5795|  14.9M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  14.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.49k, False: 14.9M]
  |  |  ------------------
  ------------------
 5796|  1.49k|        return unexpected(e);
 5797|  1.49k|    }
 5798|       |
 5799|  14.9M|    if (!is_required) {
  ------------------
  |  Branch (5799:9): [True: 0, False: 14.9M]
  ------------------
 5800|      0|        return range.begin();
 5801|      0|    }
 5802|       |
 5803|  14.9M|    return skip_classic_whitespace(range);
 5804|  14.9M|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5870|  14.9M|    {
 5871|  14.9M|        if constexpr (!detail::is_type_disabled<T> &&
  ------------------
  |  Branch (5871:23): [Folded - Ignored]
  |  Branch (5871:23): [Folded - Ignored]
  ------------------
 5872|  14.9M|                      std::is_same_v<
  ------------------
  |  Branch (5872:23): [Folded - Ignored]
  ------------------
 5873|      0|                          context_type,
 5874|      0|                          basic_contiguous_scan_context<char_type>>) {
 5875|  14.9M|            auto rd = make_reader<T, char_type>();
 5876|  14.9M|            return impl(rd, range, value);
 5877|  14.9M|        }
 5878|  14.9M|        else if constexpr (!detail::is_type_disabled<T>) {
  ------------------
  |  Branch (5878:28): [Folded - Ignored]
  ------------------
 5879|  14.9M|            auto rd = make_reader<T, char_type>();
 5880|  14.9M|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5880:17): [True: 14.9M, False: 0]
  ------------------
 5881|  14.9M|                return impl(rd, range, value);
 5882|  14.9M|            }
 5883|      0|            auto crange = get_as_contiguous(range);
 5884|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3672|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|      0|    }                                                  \
  |  |  |  | 3671|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5885|      0|            return ranges::next(range.begin(),
 5886|      0|                                ranges::distance(crange.begin(), it));
 5887|      0|        }
 5888|  14.9M|        else {
 5889|  14.9M|            SCN_EXPECT(false);
 5890|  14.9M|            SCN_UNREACHABLE;
 5891|  14.9M|        }
 5892|  14.9M|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5862|  14.9M|    {
 5863|  14.9M|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3672|  14.9M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3667|  14.9M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3668|  14.9M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  14.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.88k, False: 14.9M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3669|  2.88k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3664|  2.88k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3663|  2.88k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3662|  2.88k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3670|  2.88k|    }                                                  \
  |  |  |  | 3671|  14.9M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  14.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5864|  14.9M|                        .transform_error(make_eof_scan_error));
 5865|  14.9M|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5866|  14.9M|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5265|  14.9M|    {
 5266|  14.9M|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  14.9M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  14.9M|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5268|  14.9M|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|    861|{
   52|    861|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|    861|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|    861|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|    861|    string_buffer.resize(size);
   56|    861|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|    861|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|    861|    const auto wsv_reinterpret_size =
   61|    861|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 80, False: 781]
  ------------------
   62|    861|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|    861|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|    861|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|    861|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|    861|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|    861|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|    861|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    861|{
  122|    861|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    861|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    861|    buf.resize(sizeof...(Args));
  125|    861|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    861|    return buf;
  127|    861|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|    861|{
  108|    861|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    861|        return format_string_view_buffer;
  110|    861|    }
  111|    861|    else {
  112|    861|        return wformat_string_view_buffer;
  113|    861|    }
  114|    861|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|    861|{
  185|    861|    do_basic_run_for_source<CharT>(data, format_strings);
  186|    861|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|    861|                                   format_strings);
  188|    861|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|    861|{
  133|       |    // Regular scan
  134|  5.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 5.16k, False: 861]
  ------------------
  135|  5.16k|        auto it = scn::ranges::begin(source);
  136|  70.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  70.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  70.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  70.7k|            auto result = scn::scan<T>(
  139|  70.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  70.7k|                scn::runtime_format(f));
  141|  70.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 5.16k, False: 65.5k]
  ------------------
  142|  5.16k|                break;
  143|  5.16k|            }
  144|  65.5k|            it = result->begin();
  145|  65.5k|        }
  146|  5.16k|    }
  147|       |
  148|       |    // scan localized
  149|  5.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 5.16k, False: 861]
  ------------------
  150|  5.16k|        auto it = scn::ranges::begin(source);
  151|  70.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  70.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  70.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  70.7k|            auto result = scn::scan<T>(
  154|  70.7k|                global_locale,
  155|  70.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  70.7k|                scn::runtime_format(f));
  157|  70.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 5.16k, False: 65.5k]
  ------------------
  158|  5.16k|                break;
  159|  5.16k|            }
  160|  65.5k|            it = result->begin();
  161|  65.5k|        }
  162|  5.16k|    }
  163|       |
  164|       |    // scan_value
  165|    861|    {
  166|    861|        auto it = scn::ranges::begin(source);
  167|  33.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.4k|            auto result = scn::scan_value<T>(
  170|  33.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 861, False: 32.5k]
  ------------------
  172|    861|                break;
  173|    861|            }
  174|  32.5k|            it = result->begin();
  175|  32.5k|        }
  176|    861|    }
  177|    861|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|    861|{
  133|       |    // Regular scan
  134|  5.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 5.16k, False: 861]
  ------------------
  135|  5.16k|        auto it = scn::ranges::begin(source);
  136|  70.7k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  70.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  70.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  70.7k|            auto result = scn::scan<T>(
  139|  70.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  70.7k|                scn::runtime_format(f));
  141|  70.7k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 5.16k, False: 65.5k]
  ------------------
  142|  5.16k|                break;
  143|  5.16k|            }
  144|  65.5k|            it = result->begin();
  145|  65.5k|        }
  146|  5.16k|    }
  147|       |
  148|       |    // scan localized
  149|  5.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 5.16k, False: 861]
  ------------------
  150|  5.16k|        auto it = scn::ranges::begin(source);
  151|  70.7k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  70.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  70.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  70.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  70.7k|            auto result = scn::scan<T>(
  154|  70.7k|                global_locale,
  155|  70.7k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  70.7k|                scn::runtime_format(f));
  157|  70.7k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 5.16k, False: 65.5k]
  ------------------
  158|  5.16k|                break;
  159|  5.16k|            }
  160|  65.5k|            it = result->begin();
  161|  65.5k|        }
  162|  5.16k|    }
  163|       |
  164|       |    // scan_value
  165|    861|    {
  166|    861|        auto it = scn::ranges::begin(source);
  167|  33.4k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  33.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  33.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  33.4k|            auto result = scn::scan_value<T>(
  170|  33.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  33.4k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 861, False: 32.5k]
  ------------------
  172|    861|                break;
  173|    861|            }
  174|  32.5k|            it = result->begin();
  175|  32.5k|        }
  176|    861|    }
  177|    861|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|    861|{
  133|       |    // Regular scan
  134|  5.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 5.16k, False: 861]
  ------------------
  135|  5.16k|        auto it = scn::ranges::begin(source);
  136|  72.2k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  72.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  72.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  72.2k|            auto result = scn::scan<T>(
  139|  72.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  72.2k|                scn::runtime_format(f));
  141|  72.2k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 5.16k, False: 67.0k]
  ------------------
  142|  5.16k|                break;
  143|  5.16k|            }
  144|  67.0k|            it = result->begin();
  145|  67.0k|        }
  146|  5.16k|    }
  147|       |
  148|       |    // scan localized
  149|  5.16k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 5.16k, False: 861]
  ------------------
  150|  5.16k|        auto it = scn::ranges::begin(source);
  151|  72.2k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  72.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  72.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  72.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  72.2k|            auto result = scn::scan<T>(
  154|  72.2k|                global_locale,
  155|  72.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  72.2k|                scn::runtime_format(f));
  157|  72.2k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 5.16k, False: 67.0k]
  ------------------
  158|  5.16k|                break;
  159|  5.16k|            }
  160|  67.0k|            it = result->begin();
  161|  67.0k|        }
  162|  5.16k|    }
  163|       |
  164|       |    // scan_value
  165|    861|    {
  166|    861|        auto it = scn::ranges::begin(source);
  167|  34.2k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  34.2k|            auto result = scn::scan_value<T>(
  170|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  34.2k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 861, False: 33.3k]
  ------------------
  172|    861|                break;
  173|    861|            }
  174|  33.3k|            it = result->begin();
  175|  33.3k|        }
  176|    861|    }
  177|    861|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|    861|{
   90|    861|    using char_type = ranges::range_value_t<Source>;
   91|    861|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|    861|    deque.clear();
   93|    861|    std::copy(ranges::begin(source), ranges::end(source),
   94|    861|              std::back_inserter(deque));
   95|    861|    return deque;
   96|    861|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|    861|{
   79|    861|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|    861|        return noncontiguous_buffer;
   81|    861|    }
   82|    861|    else {
   83|    861|        return wnoncontiguous_buffer;
   84|    861|    }
   85|    861|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|    861|{
  122|    861|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|    861|    auto& buf = get_format_string_view_buffer<CharT>();
  124|    861|    buf.resize(sizeof...(Args));
  125|    861|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|    861|    return buf;
  127|    861|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|    861|{
  108|    861|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (108:19): [Folded - Ignored]
  ------------------
  109|    861|        return format_string_view_buffer;
  110|    861|    }
  111|    861|    else {
  112|    861|        return wformat_string_view_buffer;
  113|    861|    }
  114|    861|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.72k|{
  185|  1.72k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.72k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.72k|                                   format_strings);
  188|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.72k|{
  133|       |    // Regular scan
  134|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 10.3k, False: 1.72k]
  ------------------
  135|  10.3k|        auto it = scn::ranges::begin(source);
  136|  9.98M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  9.98M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  9.98M|            auto result = scn::scan<T>(
  139|  9.98M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  9.98M|                scn::runtime_format(f));
  141|  9.98M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 10.3k, False: 9.97M]
  ------------------
  142|  10.3k|                break;
  143|  10.3k|            }
  144|  9.97M|            it = result->begin();
  145|  9.97M|        }
  146|  10.3k|    }
  147|       |
  148|       |    // scan localized
  149|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 10.3k, False: 1.72k]
  ------------------
  150|  10.3k|        auto it = scn::ranges::begin(source);
  151|  9.98M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  9.98M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  9.98M|            auto result = scn::scan<T>(
  154|  9.98M|                global_locale,
  155|  9.98M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  9.98M|                scn::runtime_format(f));
  157|  9.98M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 10.3k, False: 9.97M]
  ------------------
  158|  10.3k|                break;
  159|  10.3k|            }
  160|  9.97M|            it = result->begin();
  161|  9.97M|        }
  162|  10.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.72k|    {
  166|  1.72k|        auto it = scn::ranges::begin(source);
  167|  4.98M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.98M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.98M|            auto result = scn::scan_value<T>(
  170|  4.98M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.98M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.72k, False: 4.98M]
  ------------------
  172|  1.72k|                break;
  173|  1.72k|            }
  174|  4.98M|            it = result->begin();
  175|  4.98M|        }
  176|  1.72k|    }
  177|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.72k|{
  133|       |    // Regular scan
  134|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 10.3k, False: 1.72k]
  ------------------
  135|  10.3k|        auto it = scn::ranges::begin(source);
  136|  9.98M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  9.98M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  9.98M|            auto result = scn::scan<T>(
  139|  9.98M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  9.98M|                scn::runtime_format(f));
  141|  9.98M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 10.3k, False: 9.97M]
  ------------------
  142|  10.3k|                break;
  143|  10.3k|            }
  144|  9.97M|            it = result->begin();
  145|  9.97M|        }
  146|  10.3k|    }
  147|       |
  148|       |    // scan localized
  149|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 10.3k, False: 1.72k]
  ------------------
  150|  10.3k|        auto it = scn::ranges::begin(source);
  151|  9.98M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  9.98M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  9.98M|            auto result = scn::scan<T>(
  154|  9.98M|                global_locale,
  155|  9.98M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  9.98M|                scn::runtime_format(f));
  157|  9.98M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 10.3k, False: 9.97M]
  ------------------
  158|  10.3k|                break;
  159|  10.3k|            }
  160|  9.97M|            it = result->begin();
  161|  9.97M|        }
  162|  10.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.72k|    {
  166|  1.72k|        auto it = scn::ranges::begin(source);
  167|  4.98M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.98M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.98M|            auto result = scn::scan_value<T>(
  170|  4.98M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.98M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.72k, False: 4.98M]
  ------------------
  172|  1.72k|                break;
  173|  1.72k|            }
  174|  4.98M|            it = result->begin();
  175|  4.98M|        }
  176|  1.72k|    }
  177|  1.72k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.72k|{
  133|       |    // Regular scan
  134|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 10.3k, False: 1.72k]
  ------------------
  135|  10.3k|        auto it = scn::ranges::begin(source);
  136|  9.98M|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  9.98M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  9.98M|            auto result = scn::scan<T>(
  139|  9.98M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  9.98M|                scn::runtime_format(f));
  141|  9.98M|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 10.3k, False: 9.97M]
  ------------------
  142|  10.3k|                break;
  143|  10.3k|            }
  144|  9.97M|            it = result->begin();
  145|  9.97M|        }
  146|  10.3k|    }
  147|       |
  148|       |    // scan localized
  149|  10.3k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 10.3k, False: 1.72k]
  ------------------
  150|  10.3k|        auto it = scn::ranges::begin(source);
  151|  9.98M|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  9.98M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  9.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  9.98M|            auto result = scn::scan<T>(
  154|  9.98M|                global_locale,
  155|  9.98M|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  9.98M|                scn::runtime_format(f));
  157|  9.98M|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 10.3k, False: 9.97M]
  ------------------
  158|  10.3k|                break;
  159|  10.3k|            }
  160|  9.97M|            it = result->begin();
  161|  9.97M|        }
  162|  10.3k|    }
  163|       |
  164|       |    // scan_value
  165|  1.72k|    {
  166|  1.72k|        auto it = scn::ranges::begin(source);
  167|  4.98M|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  4.98M|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  4.98M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.98M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  4.98M|            auto result = scn::scan_value<T>(
  170|  4.98M|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  4.98M|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.72k, False: 4.98M]
  ------------------
  172|  1.72k|                break;
  173|  1.72k|            }
  174|  4.98M|            it = result->begin();
  175|  4.98M|        }
  176|  1.72k|    }
  177|  1.72k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  1.72k|{
   90|  1.72k|    using char_type = ranges::range_value_t<Source>;
   91|  1.72k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.72k|    deque.clear();
   93|  1.72k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.72k|              std::back_inserter(deque));
   95|  1.72k|    return deque;
   96|  1.72k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  1.72k|{
   79|  1.72k|    if constexpr (std::is_same_v<CharT, char>) {
  ------------------
  |  Branch (79:19): [Folded - Ignored]
  ------------------
   80|  1.72k|        return noncontiguous_buffer;
   81|  1.72k|    }
   82|  1.72k|    else {
   83|  1.72k|        return wnoncontiguous_buffer;
   84|  1.72k|    }
   85|  1.72k|}

LLVMFuzzerTestOneInput:
   57|    862|{
   58|    862|    scn::fuzz::run(data, size);
   59|    862|    return 0;
   60|    862|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    862|{
   36|    862|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 861]
  |  Branch (36:35): [True: 0, False: 861]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    861|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    861|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    861|                                             "{:64U}", "{:[A-Za-z]}");
   44|    861|    do_basic_run(sv, f);
   45|       |
   46|    861|    const auto& wf = get_format_strings<wchar_t>(
   47|    861|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    861|    do_basic_run(wsv_reinterpret, wf);
   49|    861|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 861, False: 0]
  ------------------
   50|    861|        do_basic_run(wsv_transcode, wf);
   51|    861|    }
   52|    861|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    861|{
   25|    861|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    861|                                                           format_strings);
   27|    861|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    861|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    861|            source, format_strings);
   30|    861|    }
   31|    861|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    861|{
   25|    861|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    861|                                                           format_strings);
   27|    861|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|    861|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    861|            source, format_strings);
   30|    861|    }
   31|    861|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.72k|{
   25|  1.72k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.72k|                                                           format_strings);
   27|  1.72k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.72k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.72k|            source, format_strings);
   30|  1.72k|    }
   31|  1.72k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.72k|{
   25|  1.72k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.72k|                                                           format_strings);
   27|  1.72k|    if constexpr (scn::ranges::contiguous_range<Source>) {
  ------------------
  |  Branch (27:19): [Folded - Ignored]
  ------------------
   28|  1.72k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.72k|            source, format_strings);
   30|  1.72k|    }
   31|  1.72k|}

