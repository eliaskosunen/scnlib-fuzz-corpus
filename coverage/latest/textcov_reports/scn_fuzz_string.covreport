_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4067|  2.85M|{
 4068|  2.85M|    if constexpr (sizeof(U) == 1) {
 4069|  2.85M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|       |    else {
 4075|       |        // utf-32
 4076|       |        static_assert(sizeof(U) == 4);
 4077|       |        SCN_UNUSED(ch);
 4078|       |        return 1;
 4079|       |    }
 4080|  2.85M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4031|  2.85M|{
 4032|  2.85M|    static_assert(sizeof(U8) == 1);
 4033|       |
 4034|  2.85M|    SCN_GCC_COMPAT_PUSH
 4035|  2.85M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4036|  2.85M|    constexpr char lengths[] =
 4037|  2.85M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4038|  2.85M|        "\1\1\1\1\1\1\1\1"
 4039|  2.85M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4040|       |                            // byte
 4041|  2.85M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4042|  2.85M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4043|  2.85M|        "\4";               // highest bits 11110 -> 4-byte cp
 4044|  2.85M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4045|  2.85M|    SCN_GCC_COMPAT_POP
 4046|  2.85M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|  2.73M|{
 4274|  2.73M|    if constexpr (sizeof(CharT) == 1) {
 4275|  2.73M|        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|       |    else {
 4281|       |        SCN_EXPECT(input.size() == 1);
 4282|       |        auto cp = static_cast<char32_t>(input.front());
 4283|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4284|       |            return invalid_code_point;
 4285|       |        }
 4286|       |        return cp;
 4287|       |    }
 4288|  2.73M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4086|  2.73M|{
 4087|  2.73M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  930|  2.73M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.73M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4088|       |
 4089|  2.73M|    const auto is_trailing_code_unit = [](char ch) {
 4090|  2.73M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|  2.73M|    };
 4092|       |
 4093|  2.73M|    if (input.size() == 1) {
  ------------------
  |  Branch (4093:9): [True: 2.45M, False: 281k]
  ------------------
 4094|  2.45M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4094:13): [True: 258, False: 2.44M]
  ------------------
 4095|    258|            SCN_UNLIKELY_ATTR
 4096|    258|            return invalid_code_point;
 4097|    258|        }
 4098|  2.44M|        return static_cast<char32_t>(input[0]);
 4099|  2.45M|    }
 4100|       |
 4101|   281k|    if (input.size() == 2) {
  ------------------
  |  Branch (4101:9): [True: 92.7k, False: 188k]
  ------------------
 4102|  92.7k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4102:13): [True: 117, False: 92.6k]
  ------------------
 4103|    117|            SCN_UNLIKELY_ATTR
 4104|    117|            return invalid_code_point;
 4105|    117|        }
 4106|  92.6k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4106:13): [True: 8.53k, False: 84.1k]
  ------------------
 4107|  8.53k|            SCN_UNLIKELY_ATTR
 4108|  8.53k|            return invalid_code_point;
 4109|  8.53k|        }
 4110|       |
 4111|  84.1k|        char32_t cp{};
 4112|  84.1k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4113|  84.1k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4114|  84.1k|        return cp;
 4115|  92.6k|    }
 4116|       |
 4117|   188k|    if (input.size() == 3) {
  ------------------
  |  Branch (4117:9): [True: 179k, False: 8.92k]
  ------------------
 4118|   179k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4118:13): [True: 25, False: 179k]
  ------------------
 4119|     25|            SCN_UNLIKELY_ATTR
 4120|     25|            return invalid_code_point;
 4121|     25|        }
 4122|   179k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4122:13): [True: 1.75k, False: 178k]
  ------------------
 4123|   179k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4123:13): [True: 600, False: 177k]
  ------------------
 4124|  2.35k|            SCN_UNLIKELY_ATTR
 4125|  2.35k|            return invalid_code_point;
 4126|  2.35k|        }
 4127|       |
 4128|   177k|        char32_t cp{};
 4129|   177k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4130|   177k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4131|   177k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4132|   177k|        return cp;
 4133|   179k|    }
 4134|       |
 4135|  8.92k|    if (input.size() == 4) {
  ------------------
  |  Branch (4135:9): [True: 8.92k, False: 0]
  ------------------
 4136|  8.92k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4136:13): [True: 0, False: 8.92k]
  ------------------
 4137|      0|            SCN_UNLIKELY_ATTR
 4138|      0|            return invalid_code_point;
 4139|      0|        }
 4140|  8.92k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4140:13): [True: 3.67k, False: 5.24k]
  ------------------
 4141|  3.67k|            SCN_UNLIKELY_ATTR
 4142|  3.67k|            return invalid_code_point;
 4143|  3.67k|        }
 4144|  5.24k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4144:13): [True: 2.28k, False: 2.95k]
  ------------------
 4145|  5.24k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4145:13): [True: 132, False: 2.82k]
  ------------------
 4146|  5.24k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4146:13): [True: 95, False: 2.73k]
  ------------------
 4147|  2.51k|            SCN_UNLIKELY_ATTR
 4148|  2.51k|            return invalid_code_point;
 4149|  2.51k|        }
 4150|       |
 4151|  2.73k|        char32_t cp{};
 4152|  2.73k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4153|  2.73k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4154|  2.73k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4155|  2.73k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4156|  2.73k|        return cp;
 4157|  5.24k|    }
 4158|       |
 4159|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4160|       |    // gcc 7 thinks we'll get here, even when we won't
 4161|      0|    SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4162|      0|#endif
 4163|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4164|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4089|   461k|    const auto is_trailing_code_unit = [](char ch) {
 4090|   461k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4091|   461k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  2.43M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  2.43M|    else {
 3966|  2.43M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  2.43M|                                       to_address(first), to_address(last)))};
 3968|  2.43M|    }
 3969|  2.43M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  7.56M|{
  316|  7.56M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  7.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  7.56M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  293|  8.52M|{
  294|  8.52M|    return p;
  295|  8.52M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3990|  1.22M|{
 3991|       |    if constexpr (std::is_constructible_v<
 3992|       |                      typename std::basic_string_view<CharT>::iterator,
 3993|       |                      decltype(it)> &&
 3994|  1.22M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3995|  1.22M|        SCN_UNUSED(sv);
  ------------------
  |  |  915|  1.22M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3996|  1.22M|        return it;
 3997|       |    }
 3998|       |    else {
 3999|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4000|       |    }
 4001|  1.22M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  20.3k|    {
 2869|  20.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  20.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  20.3k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  20.3k|    {
 2850|  20.3k|        return decay_copy(t.begin());
 2851|  20.3k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2093|  1.57M|{
 2094|  1.57M|    return SCN_FWD(t);
  ------------------
  |  |  936|  1.57M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  1.57M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   336k|    {
 2926|   336k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   336k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   336k|    {
 2908|   336k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   336k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   336k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9704|  34.2k|{
 9705|  34.2k|    auto result = make_scan_result<Source, Args...>();
 9706|  34.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  34.2k|                                   make_scan_args(result->values())));
 9708|  34.2k|    return result;
 9709|  34.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9660|  83.9k|{
 9661|  83.9k|    return scan_result_type<Source, Args...>();
 9662|  83.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  83.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|  83.9k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|  83.9k|    {
  613|  83.9k|        construct();
  614|  83.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|  83.9k|    {
  694|  83.9k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|  83.9k|        m_has_value = true;
  696|  83.9k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  395|  83.9k|{
  396|  83.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  83.9k|        T(std::forward<Args>(args)...);
  398|  83.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6610|  83.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6453|   167k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3459|   167k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6384|   184k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   400k|    {
  718|   400k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   400k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   400k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|  83.9k|{
 9646|  83.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.81k, False: 74.1k]
  |  |  ------------------
  ------------------
 9647|  9.81k|        out = unexpected(in.error());
 9648|  9.81k|    }
 9649|  74.1k|    else {
 9650|  74.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  74.1k|    static_cast<    \
  |  |  935|  74.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  74.1k|    }
 9652|  83.9k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1739|   167k|    {
 1740|   167k|        return has_value();
 1741|   167k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   335k|    {
  490|   335k|        return m_has_value;
  491|   335k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1745|  19.6k|    {
 1746|  19.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  19.6k|        return this->get_unexpected().error();
 1748|  19.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  19.6k|    {
  473|  19.6k|        return m_unexpected;
  474|  19.6k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  364|   847k|    {
  365|   847k|        return m_unexpected;
  366|   847k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  349|   371k|        : m_unexpected(std::forward<Err>(e))
  350|   371k|    {
  351|   371k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   371k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   371k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  9.81k|        : base(unexpect, std::move(e.error())),
 1616|  9.81k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.81k|    {
 1618|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  9.81k|        : m_has_value(false)
  637|  9.81k|    {
  638|  9.81k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  9.81k|    {
  701|  9.81k|        scn::detail::construct_at(unexpected_ptr(),
  702|  9.81k|                                  std::forward<Args>(args)...);
  703|  9.81k|        m_has_value = false;
  704|  9.81k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  395|  58.8k|{
  396|  58.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  58.8k|        T(std::forward<Args>(args)...);
  398|  58.8k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  358|   487k|        : m_unexpected(std::forward<Args>(args)...)
  359|   487k|    {
  360|   487k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   487k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|   487k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  49.0k|    {
  730|  49.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  49.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  49.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  49.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.81k|    {
 1316|  9.81k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  9.81k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  9.81k|    {
  903|  9.81k|        assign_common(std::move(other));
  904|  9.81k|        return *this;
  905|  9.81k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  9.81k|    {
  950|  9.81k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 9.81k, False: 0]
  ------------------
  951|  9.81k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 9.81k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  9.81k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  9.81k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   429k|    {
  687|   429k|        return m_has_value;
  688|   429k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   232k|    {
  653|   232k|        return *value_ptr();
  654|   232k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  9.81k|    {
 1046|  9.81k|        this->destroy_value();
 1047|  9.81k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|  83.9k|    {
  708|  83.9k|        scn::detail::destroy_at(value_ptr());
  709|  83.9k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  401|  83.9k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|  83.9k|    else {
  408|  83.9k|        p->~T();
  409|  83.9k|    }
  410|  83.9k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6617|  83.9k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  9.81k|    {
  701|  9.81k|        scn::detail::construct_at(unexpected_ptr(),
  702|  9.81k|                                  std::forward<Args>(args)...);
  703|  9.81k|        m_has_value = false;
  704|  9.81k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  395|  88.3k|{
  396|  88.3k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|  88.3k|        T(std::forward<Args>(args)...);
  398|  88.3k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  9.81k|    {
  678|  9.81k|        return std::move(*unexpected_ptr());
  679|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  19.6k|    {
  712|  19.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  19.6k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  401|   117k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   117k|    else {
  408|   117k|        p->~T();
  409|   117k|    }
  410|   117k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6484|   148k|    {
 6485|   148k|        m_range = std::forward<Other>(r);
 6486|   148k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|   148k|    {
 1795|   148k|        return value();
 1796|   148k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|   148k|    {
 1769|   148k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   148k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   148k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   148k|        return this->get_value();
 1771|   148k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   148k|    {
  456|   148k|        return m_value;
  457|   148k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9484|  68.4k|{
 9485|  68.4k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  68.4k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|  68.4k|{
 9422|  68.4k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  68.4k|    auto result = vscan_impl(buffer, format, args);
 9425|  68.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.06k, False: 59.4k]
  |  |  ------------------
  ------------------
 9426|  9.06k|        return unexpected(result.error());
 9427|  9.06k|    }
 9428|  59.4k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  68.4k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5380|   167k|{
 5381|   167k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   167k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   167k|                  "\n"
 5385|   167k|                  "Unsupported range type given as input to a scanning "
 5386|   167k|                  "function.\n"
 5387|   167k|                  "A range needs to have a character type (value type) "
 5388|   167k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   167k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   167k|                  "to be included.\n"
 5391|   167k|                  "See the scnlib documentation for more details.");
 5392|   167k|    static_assert(
 5393|   167k|        !std::is_same_v<T, custom_char_traits>,
 5394|   167k|        "\n"
 5395|   167k|        "Unsupported range type given as input to a scanning "
 5396|   167k|        "function.\n"
 5397|   167k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   167k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   167k|        "not supported.");
 5400|   167k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   167k|                  "\n"
 5402|   167k|                  "Unsupported range type given as input to a scanning "
 5403|   167k|                  "function.\n"
 5404|   167k|                  "file_marker_found cannot be used as an "
 5405|   167k|                  "source range type to scn::scan.\n"
 5406|   167k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   167k|                  "and do not provide an explicit source range, "
 5408|   167k|                  "or use scn::scan with a FILE* directly.");
 5409|   167k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   167k|                  "\n"
 5411|   167k|                  "Unsupported range type given as input to a scanning "
 5412|   167k|                  "function.\n"
 5413|   167k|                  "In order to be scannable, a range needs to satisfy "
 5414|   167k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   167k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   167k|                  "\n"
 5417|   167k|                  "Unsupported range type given as input to a scanning "
 5418|   167k|                  "function.\n"
 5419|   167k|                  "A range needs to model forward_range and have a valid "
 5420|   167k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   167k|                  "Examples of scannable ranges are std::string, "
 5422|   167k|                  "std::string_view, "
 5423|   167k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   167k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   167k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   167k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|   167k|{
 5320|   167k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|   167k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|   167k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   167k|    {
 3000|   167k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   167k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   167k|    {
 2981|   167k|        return t.data();
 2982|   167k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3382|   167k|    {
 3383|   167k|        return detail::to_address(ranges::begin(derived()));
 3384|   167k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   960k|{
  316|   960k|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   960k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   960k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   316k|    {
 2869|   316k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   316k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   316k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   316k|    {
 2850|   316k|        return decay_copy(t.begin());
 2851|   316k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3479|  1.98M|    {
 3480|  1.98M|        return m_iterator;
 3481|  1.98M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3338|   167k|    {
 3339|   167k|        return static_cast<const D&>(*this);
 3340|   167k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|   167k|    {
 3075|   167k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   167k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|   167k|    {
 3041|   167k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   167k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   167k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2093|  2.00M|{
 2094|  2.00M|    return SCN_FWD(t);
  ------------------
  |  |  936|  2.00M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  2.00M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|   700k|    {
 3496|   700k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|   700k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1739|  2.85M|    {
 1740|  2.85M|        return has_value();
 1741|  2.85M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  489|  5.68M|    {
  490|  5.68M|        return m_has_value;
  491|  5.68M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1745|  88.3k|    {
 1746|  88.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  88.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  88.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  88.3k|        return this->get_unexpected().error();
 1748|  88.3k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  88.3k|    {
  473|  88.3k|        return m_unexpected;
  474|  88.3k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  19.6k|        : base(unexpect, std::move(e.error())),
 1616|  19.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.6k|    {
 1618|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  19.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  19.6k|          m_has_value(false)
  451|  19.6k|    {
  452|  19.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   167k|    {
 1316|   167k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|   148k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   148k|                      ranges::iterator_t<SourceRange>>) {
 6717|   148k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   148k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   756k|    {
 2869|   756k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   756k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   756k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   756k|    {
 2850|   756k|        return decay_copy(t.begin());
 2851|   756k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6701|   148k|{
 6702|   148k|    return ranges::end(source);
 6703|   148k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   148k|    {
 2926|   148k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   148k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   148k|    {
 2908|   148k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   148k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3483|   956k|    {
 3484|   956k|        return m_sentinel;
 3485|   956k|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1794|  2.74M|    {
 1795|  2.74M|        return value();
 1796|  2.74M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1768|  2.74M|    {
 1769|  2.74M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.74M|        return this->get_value();
 1771|  2.74M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.74M|    {
  456|  2.74M|        return m_value;
  457|  2.74M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   148k|        : base(std::in_place, std::forward<U>(val)),
 1570|   148k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   148k|    {
 1572|   148k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|   148k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   148k|    {
  442|   148k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8782|  68.4k|    {
 8783|  68.4k|        return m_str;
 8784|  68.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|   150k|{
 6115|   150k|    detail::check_scan_arg_types<Args...>();
 6116|   150k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   150k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5829|   184k|{
 5830|   184k|    constexpr bool default_constructible_constraint =
 5831|   184k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   184k|    static_assert(default_constructible_constraint,
 5833|   184k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   184k|    constexpr bool destructible_constraint =
 5836|   184k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   184k|    static_assert(destructible_constraint,
 5838|   184k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   184k|    constexpr bool non_reference_constraint =
 5841|   184k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   184k|    static_assert(non_reference_constraint,
 5843|   184k|                  "Scan argument types must not be references");
 5844|       |
 5845|   184k|    constexpr bool movable_constraint =
 5846|   184k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   184k|    static_assert(movable_constraint,
 5848|   184k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   184k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   184k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   184k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|   150k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   150k|    {
 6092|   150k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|   150k|    {
 6100|   150k|        return {detail::make_arg<
 6101|   150k|            kind, Context,
 6102|   150k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   150k|                                 typename Context::char_type>::value>(args)...};
 6104|   150k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5879|   150k|{
 5880|   150k|    return make_value<Context>(value).ref_value;
 5881|   150k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5814|   184k|{
 5815|   184k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   184k|                                  needs_context_tag>) {
 5819|   184k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   184k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   184k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5653|   184k|    {                                                                        \
 5654|   184k|        return val;                                                          \
 5655|   184k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5783|   184k|{
 5784|   184k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   184k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   184k|    constexpr bool scannable_char =
 5788|   184k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   184k|    static_assert(scannable_char,
 5790|   184k|                  "Cannot scan an argument of an unsupported character "
 5791|   184k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   184k|    constexpr bool scannable_const =
 5794|   184k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   184k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   184k|    constexpr bool scannable_disabled =
 5798|   184k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   184k|    static_assert(scannable_disabled,
 5800|   184k|                  "Cannot scan an argument that has been disabled by "
 5801|   184k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   184k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   184k|    static_assert(
 5805|   184k|        scannable,
 5806|   184k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   184k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   184k|    return arg_value{arg};
 5810|   184k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5596|   184k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   184k|    {
 5598|   184k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6393|   150k|    {
 6394|   150k|        return m_values;
 6395|   150k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   150k|        : basic_scan_args(store.desc, store.args.data())
 6141|   150k|    {
 6142|   150k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6192|   218k|        : m_desc(desc), m_builtin_values(data)
 6193|   218k|    {
 6194|   218k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  1.14M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.14M|    static_cast<    \
  |  |  935|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.14M|    static_cast<    \
  |  |  935|  1.14M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.14M|    {
 3466|  1.14M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8443|   218k|{
 8444|   218k|    return s;
 8445|   218k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8420|   218k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  68.4k|        : m_str(r.str)
 8778|  68.4k|    {
 8779|  68.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  83.9k|    {
 1740|  83.9k|        return has_value();
 1741|  83.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   232k|    {
 1815|   232k|        return &value();
 1816|   232k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|   232k|    {
 1769|   232k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   232k|        return this->get_value();
 1771|   232k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6473|   148k|    {
 6474|   148k|        return ranges::begin(m_range);
 6475|   148k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|  93.7k|    {
  643|  93.7k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 74.1k, False: 19.6k]
  ------------------
  644|  74.1k|            destroy_value();
  645|  74.1k|        }
  646|  19.6k|        else {
  647|  19.6k|            destroy_unexpected();
  648|  19.6k|        }
  649|  93.7k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9773|  34.2k|{
 9774|  34.2k|    auto result = make_scan_result<Source, Args...>();
 9775|  34.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  34.2k|                                   make_scan_args(result->values())));
 9777|  34.2k|    return result;
 9778|  34.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9502|  68.4k|{
 9503|  68.4k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  68.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  68.4k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|  68.4k|{
 9438|  68.4k|#if !SCN_DISABLE_LOCALE
 9439|  68.4k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  68.4k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  68.4k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  68.4k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  68.4k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  68.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.06k, False: 59.4k]
  |  |  ------------------
  ------------------
 9446|  9.06k|        return unexpected(result.error());
 9447|  9.06k|    }
 9448|  59.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  59.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  68.4k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 9814|  15.4k|{
 9815|  15.4k|    auto result = make_scan_result<Source, T>();
 9816|  15.4k|    fill_scan_result(
 9817|  15.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  15.4k|                            detail::make_arg<scan_context>(result->value())));
 9819|  15.4k|    return result;
 9820|  15.4k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9515|  30.9k|{
 9516|  30.9k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  30.9k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  30.9k|{
 9462|  30.9k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  30.9k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  30.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  30.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.51k, False: 29.4k]
  |  |  ------------------
  ------------------
 9466|  1.51k|        return unexpected(result.error());
 9467|  1.51k|    }
 9468|  29.4k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  29.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  30.9k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|  34.3k|{
 5865|  34.3k|    check_scan_arg_types<T>();
 5866|       |
 5867|  34.3k|    basic_scan_arg<Context> arg;
 5868|  34.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  34.3k|    arg.m_value = make_value<Context>(value);
 5870|  34.3k|    return arg;
 5871|  34.3k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 5959|   268k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5593|  2.13M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  34.3k|    {
 6416|  34.3k|        return std::get<0>(m_values);
 6417|  34.3k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9704|  34.2k|{
 9705|  34.2k|    auto result = make_scan_result<Source, Args...>();
 9706|  34.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  34.2k|                                   make_scan_args(result->values())));
 9708|  34.2k|    return result;
 9709|  34.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9660|  83.9k|{
 9661|  83.9k|    return scan_result_type<Source, Args...>();
 9662|  83.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|  83.9k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|  83.9k|        : m_value(T{}), m_has_value(true)
  427|  83.9k|    {
  428|  83.9k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6610|  83.9k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6384|  83.9k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|  83.9k|{
 9646|  83.9k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|  83.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.81k, False: 74.1k]
  |  |  ------------------
  ------------------
 9647|  9.81k|        out = unexpected(in.error());
 9648|  9.81k|    }
 9649|  74.1k|    else {
 9650|  74.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  74.1k|    static_cast<    \
  |  |  935|  74.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  74.1k|    }
 9652|  83.9k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  9.81k|        : base(unexpect, std::move(e.error())),
 1616|  9.81k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.81k|    {
 1618|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  9.81k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.81k|          m_has_value(false)
  451|  9.81k|    {
  452|  9.81k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.81k|    {
 1316|  9.81k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  9.81k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  9.81k|    {
  903|  9.81k|        assign_common(std::move(other));
  904|  9.81k|        return *this;
  905|  9.81k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  9.81k|    {
  950|  9.81k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 9.81k, False: 0]
  ------------------
  951|  9.81k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 9.81k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  9.81k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  9.81k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|   335k|    {
  490|   335k|        return m_has_value;
  491|   335k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|   232k|    {
  456|   232k|        return m_value;
  457|   232k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  9.81k|    {
 1046|  9.81k|        this->destroy_value();
 1047|  9.81k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  9.81k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  9.81k|    {
  504|  9.81k|        scn::detail::construct_at(&get_unexpected(),
  505|  9.81k|                                  std::forward<Args>(args)...);
  506|  9.81k|        m_has_value = false;
  507|  9.81k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  9.81k|    {
  473|  9.81k|        return m_unexpected;
  474|  9.81k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  9.81k|    {
  481|  9.81k|        return std::move(m_unexpected);
  482|  9.81k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8782|  68.4k|    {
 8783|  68.4k|        return m_str;
 8784|  68.4k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  68.4k|{
 6115|  68.4k|    detail::check_scan_arg_types<Args...>();
 6116|  68.4k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  68.4k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5829|  83.9k|{
 5830|  83.9k|    constexpr bool default_constructible_constraint =
 5831|  83.9k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  83.9k|    static_assert(default_constructible_constraint,
 5833|  83.9k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  83.9k|    constexpr bool destructible_constraint =
 5836|  83.9k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  83.9k|    static_assert(destructible_constraint,
 5838|  83.9k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  83.9k|    constexpr bool non_reference_constraint =
 5841|  83.9k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  83.9k|    static_assert(non_reference_constraint,
 5843|  83.9k|                  "Scan argument types must not be references");
 5844|       |
 5845|  83.9k|    constexpr bool movable_constraint =
 5846|  83.9k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  83.9k|    static_assert(movable_constraint,
 5848|  83.9k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  83.9k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  83.9k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  83.9k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|  68.4k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  68.4k|    {
 6092|  68.4k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  68.4k|    {
 6100|  68.4k|        return {detail::make_arg<
 6101|  68.4k|            kind, Context,
 6102|  68.4k|            mapped_type_constant<remove_cvref_t<A>,
 6103|  68.4k|                                 typename Context::char_type>::value>(args)...};
 6104|  68.4k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5879|  68.4k|{
 5880|  68.4k|    return make_value<Context>(value).ref_value;
 5881|  68.4k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5814|  83.9k|{
 5815|  83.9k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  83.9k|                                  needs_context_tag>) {
 5819|  83.9k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  83.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  83.9k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5653|  83.9k|    {                                                                        \
 5654|  83.9k|        return val;                                                          \
 5655|  83.9k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5783|  83.9k|{
 5784|  83.9k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  83.9k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  83.9k|    constexpr bool scannable_char =
 5788|  83.9k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  83.9k|    static_assert(scannable_char,
 5790|  83.9k|                  "Cannot scan an argument of an unsupported character "
 5791|  83.9k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  83.9k|    constexpr bool scannable_const =
 5794|  83.9k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  83.9k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  83.9k|    constexpr bool scannable_disabled =
 5798|  83.9k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  83.9k|    static_assert(scannable_disabled,
 5800|  83.9k|                  "Cannot scan an argument that has been disabled by "
 5801|  83.9k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  83.9k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  83.9k|    static_assert(
 5805|  83.9k|        scannable,
 5806|  83.9k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  83.9k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  83.9k|    return arg_value{arg};
 5810|  83.9k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5596|  83.9k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  83.9k|    {
 5598|  83.9k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6393|  68.4k|    {
 6394|  68.4k|        return m_values;
 6395|  68.4k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  68.4k|        : basic_scan_args(store.desc, store.args.data())
 6141|  68.4k|    {
 6142|  68.4k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  68.4k|        : m_str(r.str)
 8778|  68.4k|    {
 8779|  68.4k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|  83.9k|    {
 1740|  83.9k|        return has_value();
 1741|  83.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   232k|    {
 1815|   232k|        return &value();
 1816|   232k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|   232k|    {
 1769|   232k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   232k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   232k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   232k|        return this->get_value();
 1771|   232k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9773|  34.2k|{
 9774|  34.2k|    auto result = make_scan_result<Source, Args...>();
 9775|  34.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  34.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  34.2k|                                   make_scan_args(result->values())));
 9777|  34.2k|    return result;
 9778|  34.2k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 9814|  15.4k|{
 9815|  15.4k|    auto result = make_scan_result<Source, T>();
 9816|  15.4k|    fill_scan_result(
 9817|  15.4k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  15.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  15.4k|                            detail::make_arg<scan_context>(result->value())));
 9819|  15.4k|    return result;
 9820|  15.4k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|  15.4k|{
 5865|  15.4k|    check_scan_arg_types<T>();
 5866|       |
 5867|  15.4k|    basic_scan_arg<Context> arg;
 5868|  15.4k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|  15.4k|    arg.m_value = make_value<Context>(value);
 5870|  15.4k|    return arg;
 5871|  15.4k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|  15.4k|    {
 6416|  15.4k|        return std::get<0>(m_values);
 6417|  15.4k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  9.81k|    {
 2869|  9.81k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  9.81k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  9.81k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  9.81k|    {
 2850|  9.81k|        return decay_copy(t.begin());
 2851|  9.81k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2093|  3.84M|{
 2094|  3.84M|    return SCN_FWD(t);
  ------------------
  |  |  936|  3.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  3.84M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   201k|    {
 2926|   201k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   201k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   201k|    {
 2908|   201k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   201k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   201k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9704|  40.9k|{
 9705|  40.9k|    auto result = make_scan_result<Source, Args...>();
 9706|  40.9k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9707|  40.9k|                                   make_scan_args(result->values())));
 9708|  40.9k|    return result;
 9709|  40.9k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9660|   100k|{
 9661|   100k|    return scan_result_type<Source, Args...>();
 9662|   100k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   100k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   100k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   100k|    {
  613|   100k|        construct();
  614|   100k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   100k|    {
  694|   100k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   100k|        m_has_value = true;
  696|   100k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  395|   100k|{
  396|   100k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   100k|        T(std::forward<Args>(args)...);
  398|   100k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6610|   100k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6453|   100k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3459|   100k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|   483k|    {
  718|   483k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|   483k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|   483k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9645|   100k|{
 9646|   100k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   100k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.81k, False: 90.8k]
  |  |  ------------------
  ------------------
 9647|  9.81k|        out = unexpected(in.error());
 9648|  9.81k|    }
 9649|  90.8k|    else {
 9650|  90.8k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|  90.8k|    static_cast<    \
  |  |  935|  90.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|  90.8k|    }
 9652|   100k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   100k|    {
 1740|   100k|        return has_value();
 1741|   100k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|   201k|    {
  490|   201k|        return m_has_value;
  491|   201k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  9.81k|    {
 1746|  9.81k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  9.81k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.81k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  9.81k|        return this->get_unexpected().error();
 1748|  9.81k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  9.81k|    {
  473|  9.81k|        return m_unexpected;
  474|  9.81k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  9.81k|        : base(unexpect, std::move(e.error())),
 1616|  9.81k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.81k|    {
 1618|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  9.81k|        : m_has_value(false)
  637|  9.81k|    {
  638|  9.81k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  9.81k|    {
  701|  9.81k|        scn::detail::construct_at(unexpected_ptr(),
  702|  9.81k|                                  std::forward<Args>(args)...);
  703|  9.81k|        m_has_value = false;
  704|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  49.0k|    {
  730|  49.0k|        return reinterpret_cast<unexpected<E>*>(
  731|  49.0k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  49.0k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  49.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  9.81k|    {
 1316|  9.81k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  9.81k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  9.81k|    {
  903|  9.81k|        assign_common(std::move(other));
  904|  9.81k|        return *this;
  905|  9.81k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  9.81k|    {
  950|  9.81k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 9.81k, False: 0]
  ------------------
  951|  9.81k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 9.81k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  9.81k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  9.81k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|   513k|    {
  687|   513k|        return m_has_value;
  688|   513k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|   282k|    {
  653|   282k|        return *value_ptr();
  654|   282k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  9.81k|    {
 1046|  9.81k|        this->destroy_value();
 1047|  9.81k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   100k|    {
  708|   100k|        scn::detail::destroy_at(value_ptr());
  709|   100k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  401|   100k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   100k|    else {
  408|   100k|        p->~T();
  409|   100k|    }
  410|   100k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6617|   100k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  9.81k|    {
  701|  9.81k|        scn::detail::construct_at(unexpected_ptr(),
  702|  9.81k|                                  std::forward<Args>(args)...);
  703|  9.81k|        m_has_value = false;
  704|  9.81k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  9.81k|    {
  678|  9.81k|        return std::move(*unexpected_ptr());
  679|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  19.6k|    {
  712|  19.6k|        scn::detail::destroy_at(unexpected_ptr());
  713|  19.6k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6484|  90.8k|    {
 6485|  90.8k|        m_range = std::forward<Other>(r);
 6486|  90.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|  90.8k|    {
 1795|  90.8k|        return value();
 1796|  90.8k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|  90.8k|    {
 1769|  90.8k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  90.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  90.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  90.8k|        return this->get_value();
 1771|  90.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  90.8k|    {
  456|  90.8k|        return m_value;
  457|  90.8k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9484|  40.9k|{
 9485|  40.9k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  936|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9486|  40.9k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|  40.9k|{
 9422|  40.9k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|  40.9k|    auto result = vscan_impl(buffer, format, args);
 9425|  40.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  40.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.53k, False: 36.3k]
  |  |  ------------------
  ------------------
 9426|  4.53k|        return unexpected(result.error());
 9427|  4.53k|    }
 9428|  36.3k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|  40.9k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5380|   100k|{
 5381|   100k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   100k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   100k|                  "\n"
 5385|   100k|                  "Unsupported range type given as input to a scanning "
 5386|   100k|                  "function.\n"
 5387|   100k|                  "A range needs to have a character type (value type) "
 5388|   100k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   100k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   100k|                  "to be included.\n"
 5391|   100k|                  "See the scnlib documentation for more details.");
 5392|   100k|    static_assert(
 5393|   100k|        !std::is_same_v<T, custom_char_traits>,
 5394|   100k|        "\n"
 5395|   100k|        "Unsupported range type given as input to a scanning "
 5396|   100k|        "function.\n"
 5397|   100k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   100k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   100k|        "not supported.");
 5400|   100k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   100k|                  "\n"
 5402|   100k|                  "Unsupported range type given as input to a scanning "
 5403|   100k|                  "function.\n"
 5404|   100k|                  "file_marker_found cannot be used as an "
 5405|   100k|                  "source range type to scn::scan.\n"
 5406|   100k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   100k|                  "and do not provide an explicit source range, "
 5408|   100k|                  "or use scn::scan with a FILE* directly.");
 5409|   100k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   100k|                  "\n"
 5411|   100k|                  "Unsupported range type given as input to a scanning "
 5412|   100k|                  "function.\n"
 5413|   100k|                  "In order to be scannable, a range needs to satisfy "
 5414|   100k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   100k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   100k|                  "\n"
 5417|   100k|                  "Unsupported range type given as input to a scanning "
 5418|   100k|                  "function.\n"
 5419|   100k|                  "A range needs to model forward_range and have a valid "
 5420|   100k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   100k|                  "Examples of scannable ranges are std::string, "
 5422|   100k|                  "std::string_view, "
 5423|   100k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   100k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   100k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   100k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   100k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   100k|    else {
 5366|   100k|        return make_forward_scan_buffer(r);
 5367|   100k|    }
 5368|   100k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5184|   100k|{
 5185|   100k|    return basic_scan_forward_buffer_impl(range);
 5186|   100k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   100k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   100k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   100k|          m_cursor(ranges::begin(*m_range))
 4766|   100k|    {
 4767|   100k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4736|   100k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   100k|    {
 4738|   100k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4427|   100k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   100k|    {
 4429|   100k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4340|   100k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   191k|    {
 2869|   191k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   191k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   191k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   191k|    {
 2850|   191k|        return decay_copy(t.begin());
 2851|   191k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3479|   282k|    {
 3480|   282k|        return m_iterator;
 3481|   282k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4770|  1.09M|    {
 4771|  1.09M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 15.7k, False: 1.08M]
  ------------------
 4772|  15.7k|            return false;
 4773|  15.7k|        }
 4774|  1.08M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  1.08M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  1.08M|        }
 4777|  1.08M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 985k, False: 95.0k]
  ------------------
 4778|   985k|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|   985k|                                          this->m_current_view.begin(),
 4780|   985k|                                          this->m_current_view.end());
 4781|   985k|        }
 4782|  1.08M|        m_latest = *m_cursor;
 4783|  1.08M|        ++m_cursor;
 4784|  1.08M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  1.08M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  1.08M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  1.08M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.08M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  1.08M|        }
 4788|  1.08M|        return true;
 4789|  1.09M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  3.25M|    {
 2926|  3.25M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  3.25M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  3.25M|    {
 2908|  3.25M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  3.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  3.25M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3483|  3.34M|    {
 3484|  3.34M|        return m_sentinel;
 3485|  3.34M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4345|   100k|    {
 4346|   100k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   100k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   100k|        return true;
 4348|   100k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  9.81k|        : base(unexpect, std::move(e.error())),
 1616|  9.81k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  9.81k|    {
 1618|  9.81k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  9.81k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  9.81k|          m_has_value(false)
  451|  9.81k|    {
  452|  9.81k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   100k|    {
 1316|   100k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|  90.8k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  90.8k|                      ranges::iterator_t<SourceRange>>) {
 6717|  90.8k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  90.8k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  90.8k|    {
 2869|  90.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  90.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  90.8k|    {
 2850|  90.8k|        return decay_copy(t.begin());
 2851|  90.8k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6701|  90.8k|{
 6702|  90.8k|    return ranges::end(source);
 6703|  90.8k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  90.8k|    {
 2926|  90.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  90.8k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  90.8k|    {
 2908|  90.8k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  90.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  90.8k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|  90.8k|        : base(std::in_place, std::forward<U>(val)),
 1570|  90.8k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  90.8k|    {
 1572|  90.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|  90.8k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  90.8k|    {
  442|  90.8k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8782|  81.8k|    {
 8783|  81.8k|        return m_str;
 8784|  81.8k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|   191k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   191k|    static_cast<    \
  |  |  935|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   191k|    static_cast<    \
  |  |  935|   191k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   191k|    {
 3466|   191k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8777|  81.8k|        : m_str(r.str)
 8778|  81.8k|    {
 8779|  81.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   100k|    {
 1740|   100k|        return has_value();
 1741|   100k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1814|   282k|    {
 1815|   282k|        return &value();
 1816|   282k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|   282k|    {
 1769|   282k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   282k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   282k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   282k|        return this->get_value();
 1771|   282k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6473|  90.8k|    {
 6474|  90.8k|        return ranges::begin(m_range);
 6475|  90.8k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   110k|    {
  643|   110k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 90.8k, False: 19.6k]
  ------------------
  644|  90.8k|            destroy_value();
  645|  90.8k|        }
  646|  19.6k|        else {
  647|  19.6k|            destroy_unexpected();
  648|  19.6k|        }
  649|   110k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9773|  40.9k|{
 9774|  40.9k|    auto result = make_scan_result<Source, Args...>();
 9775|  40.9k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9776|  40.9k|                                   make_scan_args(result->values())));
 9777|  40.9k|    return result;
 9778|  40.9k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9502|  40.9k|{
 9503|  40.9k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  936|  40.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9504|  40.9k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|  40.9k|{
 9438|  40.9k|#if !SCN_DISABLE_LOCALE
 9439|  40.9k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|  40.9k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|  40.9k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|  40.9k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|  40.9k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  40.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.53k, False: 36.3k]
  |  |  ------------------
  ------------------
 9446|  4.53k|        return unexpected(result.error());
 9447|  4.53k|    }
 9448|  36.3k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  36.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|  40.9k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 9814|  18.8k|{
 9815|  18.8k|    auto result = make_scan_result<Source, T>();
 9816|  18.8k|    fill_scan_result(
 9817|  18.8k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9818|  18.8k|                            detail::make_arg<scan_context>(result->value())));
 9819|  18.8k|    return result;
 9820|  18.8k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9515|  18.8k|{
 9516|  18.8k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  936|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9517|  18.8k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|  18.8k|{
 9462|  18.8k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|  18.8k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|  18.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|  18.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 755, False: 18.0k]
  |  |  ------------------
  ------------------
 9466|    755|        return unexpected(result.error());
 9467|    755|    }
 9468|  18.0k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|  18.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|  18.8k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  40.7k|    {
 2869|  40.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  40.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  40.7k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  40.7k|    {
 2850|  40.7k|        return decay_copy(t.begin());
 2851|  40.7k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2093|  9.63M|{
 2094|  9.63M|    return SCN_FWD(t);
  ------------------
  |  |  936|  9.63M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  9.63M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  2.49M|    {
 2926|  2.49M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  2.49M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  2.49M|    {
 2908|  2.49M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  2.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  2.49M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9660|   622k|{
 9661|   622k|    return scan_result_type<Source, Args...>();
 9662|   622k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   622k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   622k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   622k|    {
  613|   622k|        construct();
  614|   622k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   622k|    {
  694|   622k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   622k|        m_has_value = true;
  696|   622k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  395|   622k|{
  396|   622k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   622k|        T(std::forward<Args>(args)...);
  398|   622k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6610|   622k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6453|  1.24M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3459|  1.24M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6384|  1.24M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.07M|    {
  718|  3.07M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  3.07M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.07M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9645|   622k|{
 9646|   622k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   622k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.6k, False: 602k]
  |  |  ------------------
  ------------------
 9647|  19.6k|        out = unexpected(in.error());
 9648|  19.6k|    }
 9649|   602k|    else {
 9650|   602k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   602k|    static_cast<    \
  |  |  935|   602k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   602k|    }
 9652|   622k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1739|  1.24M|    {
 1740|  1.24M|        return has_value();
 1741|  1.24M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.48M|    {
  490|  2.48M|        return m_has_value;
  491|  2.48M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1745|  39.2k|    {
 1746|  39.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  39.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  39.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  39.2k|        return this->get_unexpected().error();
 1748|  39.2k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  39.2k|    {
  473|  39.2k|        return m_unexpected;
  474|  39.2k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1615|  19.6k|        : base(unexpect, std::move(e.error())),
 1616|  19.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.6k|    {
 1618|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  636|  19.6k|        : m_has_value(false)
  637|  19.6k|    {
  638|  19.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  700|  19.6k|    {
  701|  19.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  19.6k|                                  std::forward<Args>(args)...);
  703|  19.6k|        m_has_value = false;
  704|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  98.1k|    {
  730|  98.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  98.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  98.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  98.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  19.6k|    {
 1316|  19.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1556|  19.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  902|  19.6k|    {
  903|  19.6k|        assign_common(std::move(other));
  904|  19.6k|        return *this;
  905|  19.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  949|  19.6k|    {
  950|  19.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 19.6k, False: 0]
  ------------------
  951|  19.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 19.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  19.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  19.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.13M|    {
  687|  3.13M|        return m_has_value;
  688|  3.13M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  1.82M|    {
  653|  1.82M|        return *value_ptr();
  654|  1.82M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1045|  19.6k|    {
 1046|  19.6k|        this->destroy_value();
 1047|  19.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   622k|    {
  708|   622k|        scn::detail::destroy_at(value_ptr());
  709|   622k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  401|   622k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   622k|    else {
  408|   622k|        p->~T();
  409|   622k|    }
  410|   622k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6617|   622k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  700|  19.6k|    {
  701|  19.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  19.6k|                                  std::forward<Args>(args)...);
  703|  19.6k|        m_has_value = false;
  704|  19.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  19.6k|    {
  678|  19.6k|        return std::move(*unexpected_ptr());
  679|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  39.2k|    {
  712|  39.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  39.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6484|  1.20M|    {
 6485|  1.20M|        m_range = std::forward<Other>(r);
 6486|  1.20M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1794|  1.20M|    {
 1795|  1.20M|        return value();
 1796|  1.20M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1768|  1.20M|    {
 1769|  1.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.20M|        return this->get_value();
 1771|  1.20M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.20M|    {
  456|  1.20M|        return m_value;
  457|  1.20M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9421|   500k|{
 9422|   500k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   500k|    auto result = vscan_impl(buffer, format, args);
 9425|   500k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.1k, False: 482k]
  |  |  ------------------
  ------------------
 9426|  18.1k|        return unexpected(result.error());
 9427|  18.1k|    }
 9428|   482k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   482k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   500k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5380|  1.24M|{
 5381|  1.24M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|  1.24M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|  1.24M|                  "\n"
 5385|  1.24M|                  "Unsupported range type given as input to a scanning "
 5386|  1.24M|                  "function.\n"
 5387|  1.24M|                  "A range needs to have a character type (value type) "
 5388|  1.24M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|  1.24M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|  1.24M|                  "to be included.\n"
 5391|  1.24M|                  "See the scnlib documentation for more details.");
 5392|  1.24M|    static_assert(
 5393|  1.24M|        !std::is_same_v<T, custom_char_traits>,
 5394|  1.24M|        "\n"
 5395|  1.24M|        "Unsupported range type given as input to a scanning "
 5396|  1.24M|        "function.\n"
 5397|  1.24M|        "String types (std::basic_string, and std::basic_string_view) "
 5398|  1.24M|        "need to use std::char_traits. Strings with custom Traits are "
 5399|  1.24M|        "not supported.");
 5400|  1.24M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|  1.24M|                  "\n"
 5402|  1.24M|                  "Unsupported range type given as input to a scanning "
 5403|  1.24M|                  "function.\n"
 5404|  1.24M|                  "file_marker_found cannot be used as an "
 5405|  1.24M|                  "source range type to scn::scan.\n"
 5406|  1.24M|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|  1.24M|                  "and do not provide an explicit source range, "
 5408|  1.24M|                  "or use scn::scan with a FILE* directly.");
 5409|  1.24M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|  1.24M|                  "\n"
 5411|  1.24M|                  "Unsupported range type given as input to a scanning "
 5412|  1.24M|                  "function.\n"
 5413|  1.24M|                  "In order to be scannable, a range needs to satisfy "
 5414|  1.24M|                  "`forward_range`. `input_range` is not sufficient.");
 5415|  1.24M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|  1.24M|                  "\n"
 5417|  1.24M|                  "Unsupported range type given as input to a scanning "
 5418|  1.24M|                  "function.\n"
 5419|  1.24M|                  "A range needs to model forward_range and have a valid "
 5420|  1.24M|                  "character type (char or wchar_t) to be scannable.\n"
 5421|  1.24M|                  "Examples of scannable ranges are std::string, "
 5422|  1.24M|                  "std::string_view, "
 5423|  1.24M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|  1.24M|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|  1.24M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|  1.24M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5319|  1.24M|{
 5320|  1.24M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5321|  1.24M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5322|       |    }
 5323|       |    else {
 5324|       |        return invalid_char_type{};
 5325|       |    }
 5326|  1.24M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  1.24M|    {
 3000|  1.24M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  1.24M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  1.24M|    {
 2981|  1.24M|        return t.data();
 2982|  1.24M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3382|  1.24M|    {
 3383|  1.24M|        return detail::to_address(ranges::begin(derived()));
 3384|  1.24M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|  4.70M|{
  316|  4.70M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|  4.70M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|  4.70M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  293|   158M|{
  294|   158M|    return p;
  295|   158M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  2.45M|    {
 2869|  2.45M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  2.45M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  2.45M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  2.45M|    {
 2850|  2.45M|        return decay_copy(t.begin());
 2851|  2.45M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3479|   130M|    {
 3480|   130M|        return m_iterator;
 3481|   130M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3338|  1.24M|    {
 3339|  1.24M|        return static_cast<const D&>(*this);
 3340|  1.24M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3074|  1.24M|    {
 3075|  1.24M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  1.24M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3040|  1.24M|    {
 3041|  1.24M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  1.24M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3495|  2.97M|    {
 3496|  2.97M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3497|  2.97M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1615|  39.2k|        : base(unexpect, std::move(e.error())),
 1616|  39.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  39.2k|    {
 1618|  39.2k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  449|  39.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  39.2k|          m_has_value(false)
  451|  39.2k|    {
  452|  39.2k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.24M|    {
 1316|  1.24M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6714|  1.20M|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|  1.20M|                      ranges::iterator_t<SourceRange>>) {
 6717|  1.20M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|  1.20M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  3.44M|    {
 2869|  3.44M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  3.44M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  3.44M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  3.44M|    {
 2850|  3.44M|        return decay_copy(t.begin());
 2851|  3.44M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6701|  1.20M|{
 6702|  1.20M|    return ranges::end(source);
 6703|  1.20M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.20M|    {
 2926|  1.20M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.20M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.20M|    {
 2908|  1.20M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.20M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.20M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3483|   124M|    {
 3484|   124M|        return m_sentinel;
 3485|   124M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  1.20M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.20M|    {
 1572|  1.20M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  440|  1.20M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.20M|    {
  442|  1.20M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8782|   500k|    {
 8783|   500k|        return m_str;
 8784|   500k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|  1.00M|{
 6115|  1.00M|    detail::check_scan_arg_types<Args...>();
 6116|  1.00M|    return detail::scan_arg_store<Context, Args...>(values);
 6117|  1.00M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5829|  1.24M|{
 5830|  1.24M|    constexpr bool default_constructible_constraint =
 5831|  1.24M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|  1.24M|    static_assert(default_constructible_constraint,
 5833|  1.24M|                  "Scan argument types must be default constructible");
 5834|       |
 5835|  1.24M|    constexpr bool destructible_constraint =
 5836|  1.24M|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|  1.24M|    static_assert(destructible_constraint,
 5838|  1.24M|                  "Scan argument types must be Destructible");
 5839|       |
 5840|  1.24M|    constexpr bool non_reference_constraint =
 5841|  1.24M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|  1.24M|    static_assert(non_reference_constraint,
 5843|  1.24M|                  "Scan argument types must not be references");
 5844|       |
 5845|  1.24M|    constexpr bool movable_constraint =
 5846|  1.24M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|  1.24M|    static_assert(movable_constraint,
 5848|  1.24M|                  "Scan argument types must be move constructible");
 5849|       |
 5850|  1.24M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|  1.24M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|  1.24M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6090|  1.00M|        : args(std::apply(make_argptrs<Args...>, args))
 6091|  1.00M|    {
 6092|  1.00M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|  1.00M|    {
 6100|  1.00M|        return {detail::make_arg<
 6101|  1.00M|            kind, Context,
 6102|  1.00M|            mapped_type_constant<remove_cvref_t<A>,
 6103|  1.00M|                                 typename Context::char_type>::value>(args)...};
 6104|  1.00M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5879|  1.00M|{
 5880|  1.00M|    return make_value<Context>(value).ref_value;
 5881|  1.00M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5814|  1.24M|{
 5815|  1.24M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|  1.24M|                                  needs_context_tag>) {
 5819|  1.24M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|  1.24M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5653|  1.24M|    {                                                                        \
 5654|  1.24M|        return val;                                                          \
 5655|  1.24M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5783|  1.24M|{
 5784|  1.24M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|  1.24M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|  1.24M|    constexpr bool scannable_char =
 5788|  1.24M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|  1.24M|    static_assert(scannable_char,
 5790|  1.24M|                  "Cannot scan an argument of an unsupported character "
 5791|  1.24M|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|  1.24M|    constexpr bool scannable_const =
 5794|  1.24M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|  1.24M|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|  1.24M|    constexpr bool scannable_disabled =
 5798|  1.24M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|  1.24M|    static_assert(scannable_disabled,
 5800|  1.24M|                  "Cannot scan an argument that has been disabled by "
 5801|  1.24M|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|  1.24M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|  1.24M|    static_assert(
 5805|  1.24M|        scannable,
 5806|  1.24M|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|  1.24M|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|  1.24M|    return arg_value{arg};
 5810|  1.24M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5596|  1.24M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|  1.24M|    {
 5598|  1.24M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6393|  1.00M|    {
 6394|  1.00M|        return m_values;
 6395|  1.00M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|  1.00M|        : basic_scan_args(store.desc, store.args.data())
 6141|  1.00M|    {
 6142|  1.00M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6192|  1.50M|        : m_desc(desc), m_builtin_values(data)
 6193|  1.50M|    {
 6194|  1.50M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3464|  48.5M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  48.5M|    static_cast<    \
  |  |  935|  48.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  48.5M|    static_cast<    \
  |  |  935|  48.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  48.5M|    {
 3466|  48.5M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8448|  1.50M|{
 8449|  1.50M|    return s;
 8450|  1.50M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8420|  1.50M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   500k|        : m_str(r.str)
 8778|   500k|    {
 8779|   500k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   622k|    {
 1740|   622k|        return has_value();
 1741|   622k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.82M|    {
 1815|  1.82M|        return &value();
 1816|  1.82M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1768|  1.82M|    {
 1769|  1.82M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.82M|        return this->get_value();
 1771|  1.82M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6473|  1.20M|    {
 6474|  1.20M|        return ranges::begin(m_range);
 6475|  1.20M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   642k|    {
  643|   642k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 602k, False: 39.2k]
  ------------------
  644|   602k|            destroy_value();
  645|   602k|        }
  646|  39.2k|        else {
  647|  39.2k|            destroy_unexpected();
  648|  39.2k|        }
  649|   642k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9437|   500k|{
 9438|   500k|#if !SCN_DISABLE_LOCALE
 9439|   500k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   500k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   500k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   500k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   500k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.1k, False: 482k]
  |  |  ------------------
  ------------------
 9446|  18.1k|        return unexpected(result.error());
 9447|  18.1k|    }
 9448|   482k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   482k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   500k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   244k|{
 9462|   244k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   244k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   244k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.02k, False: 241k]
  |  |  ------------------
  ------------------
 9466|  3.02k|        return unexpected(result.error());
 9467|  3.02k|    }
 9468|   241k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   244k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|   244k|{
 5865|   244k|    check_scan_arg_types<T>();
 5866|       |
 5867|   244k|    basic_scan_arg<Context> arg;
 5868|   244k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|   244k|    arg.m_value = make_value<Context>(value);
 5870|   244k|    return arg;
 5871|   244k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 5959|  1.86M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   244k|    {
 6416|   244k|        return std::get<0>(m_values);
 6417|   244k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9660|   622k|{
 9661|   622k|    return scan_result_type<Source, Args...>();
 9662|   622k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   622k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  426|   622k|        : m_value(T{}), m_has_value(true)
  427|   622k|    {
  428|   622k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6610|   622k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6384|   622k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9645|   622k|{
 9646|   622k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   622k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.6k, False: 602k]
  |  |  ------------------
  ------------------
 9647|  19.6k|        out = unexpected(in.error());
 9648|  19.6k|    }
 9649|   602k|    else {
 9650|   602k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   602k|    static_cast<    \
  |  |  935|   602k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   602k|    }
 9652|   622k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1615|  19.6k|        : base(unexpect, std::move(e.error())),
 1616|  19.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.6k|    {
 1618|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  449|  19.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  19.6k|          m_has_value(false)
  451|  19.6k|    {
  452|  19.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  19.6k|    {
 1316|  19.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1556|  19.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  902|  19.6k|    {
  903|  19.6k|        assign_common(std::move(other));
  904|  19.6k|        return *this;
  905|  19.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  949|  19.6k|    {
  950|  19.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 19.6k, False: 0]
  ------------------
  951|  19.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 19.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  19.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  19.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.48M|    {
  490|  2.48M|        return m_has_value;
  491|  2.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.82M|    {
  456|  1.82M|        return m_value;
  457|  1.82M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1045|  19.6k|    {
 1046|  19.6k|        this->destroy_value();
 1047|  19.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  510|  19.6k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  503|  19.6k|    {
  504|  19.6k|        scn::detail::construct_at(&get_unexpected(),
  505|  19.6k|                                  std::forward<Args>(args)...);
  506|  19.6k|        m_has_value = false;
  507|  19.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  19.6k|    {
  473|  19.6k|        return m_unexpected;
  474|  19.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  480|  19.6k|    {
  481|  19.6k|        return std::move(m_unexpected);
  482|  19.6k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8782|   500k|    {
 8783|   500k|        return m_str;
 8784|   500k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6114|   500k|{
 6115|   500k|    detail::check_scan_arg_types<Args...>();
 6116|   500k|    return detail::scan_arg_store<Context, Args...>(values);
 6117|   500k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5829|   622k|{
 5830|   622k|    constexpr bool default_constructible_constraint =
 5831|   622k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5832|   622k|    static_assert(default_constructible_constraint,
 5833|   622k|                  "Scan argument types must be default constructible");
 5834|       |
 5835|   622k|    constexpr bool destructible_constraint =
 5836|   622k|        std::conjunction_v<std::is_destructible<Args>...>;
 5837|   622k|    static_assert(destructible_constraint,
 5838|   622k|                  "Scan argument types must be Destructible");
 5839|       |
 5840|   622k|    constexpr bool non_reference_constraint =
 5841|   622k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5842|   622k|    static_assert(non_reference_constraint,
 5843|   622k|                  "Scan argument types must not be references");
 5844|       |
 5845|   622k|    constexpr bool movable_constraint =
 5846|   622k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5847|   622k|    static_assert(movable_constraint,
 5848|   622k|                  "Scan argument types must be move constructible");
 5849|       |
 5850|   622k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5850:12): [Folded - Ignored]
  |  Branch (5850:48): [Folded - Ignored]
  ------------------
 5851|   622k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5851:12): [Folded - Ignored]
  |  Branch (5851:40): [Folded - Ignored]
  ------------------
 5852|   622k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6090|   500k|        : args(std::apply(make_argptrs<Args...>, args))
 6091|   500k|    {
 6092|   500k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6099|   500k|    {
 6100|   500k|        return {detail::make_arg<
 6101|   500k|            kind, Context,
 6102|   500k|            mapped_type_constant<remove_cvref_t<A>,
 6103|   500k|                                 typename Context::char_type>::value>(args)...};
 6104|   500k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5879|   500k|{
 5880|   500k|    return make_value<Context>(value).ref_value;
 5881|   500k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5814|   622k|{
 5815|   622k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5816|       |
 5817|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5818|   622k|                                  needs_context_tag>) {
 5819|   622k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  |  936|   622k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5820|       |    }
 5821|       |    else {
 5822|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5823|       |            value, context_tag<Context>{}));
 5824|       |    }
 5825|   622k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5653|   622k|    {                                                                        \
 5654|   622k|        return val;                                                          \
 5655|   622k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5783|   622k|{
 5784|   622k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5785|   622k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5786|       |
 5787|   622k|    constexpr bool scannable_char =
 5788|   622k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5789|   622k|    static_assert(scannable_char,
 5790|   622k|                  "Cannot scan an argument of an unsupported character "
 5791|   622k|                  "type (i.e. char from a wchar_t source)");
 5792|       |
 5793|   622k|    constexpr bool scannable_const =
 5794|   622k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5795|   622k|    static_assert(scannable_const, "Cannot scan a const argument");
 5796|       |
 5797|   622k|    constexpr bool scannable_disabled =
 5798|   622k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5799|   622k|    static_assert(scannable_disabled,
 5800|   622k|                  "Cannot scan an argument that has been disabled by "
 5801|   622k|                  "flag (SCN_DISABLE_TYPE_*)");
 5802|       |
 5803|   622k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5804|   622k|    static_assert(
 5805|   622k|        scannable,
 5806|   622k|        "Cannot scan an argument. To make a type T scannable, provide "
 5807|   622k|        "a scn::scanner<T, CharT> specialization.");
 5808|       |
 5809|   622k|    return arg_value{arg};
 5810|   622k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5596|   622k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5597|   622k|    {
 5598|   622k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6393|   500k|    {
 6394|   500k|        return m_values;
 6395|   500k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6140|   500k|        : basic_scan_args(store.desc, store.args.data())
 6141|   500k|    {
 6142|   500k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   500k|        : m_str(r.str)
 8778|   500k|    {
 8779|   500k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   622k|    {
 1740|   622k|        return has_value();
 1741|   622k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.82M|    {
 1815|  1.82M|        return &value();
 1816|  1.82M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1768|  1.82M|    {
 1769|  1.82M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.82M|        return this->get_value();
 1771|  1.82M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5864|   122k|{
 5865|   122k|    check_scan_arg_types<T>();
 5866|       |
 5867|   122k|    basic_scan_arg<Context> arg;
 5868|   122k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5869|   122k|    arg.m_value = make_value<Context>(value);
 5870|   122k|    return arg;
 5871|   122k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6415|   122k|    {
 6416|   122k|        return std::get<0>(m_values);
 6417|   122k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  19.6k|    {
 2869|  19.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  19.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  19.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  19.6k|    {
 2850|  19.6k|        return decay_copy(t.begin());
 2851|  19.6k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2093|  61.4M|{
 2094|  61.4M|    return SCN_FWD(t);
  ------------------
  |  |  936|  61.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2095|  61.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  1.24M|    {
 2926|  1.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  1.24M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  1.24M|    {
 2908|  1.24M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  1.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  1.24M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9660|   622k|{
 9661|   622k|    return scan_result_type<Source, Args...>();
 9662|   622k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1551|   622k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  611|   622k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  612|   622k|    {
  613|   622k|        construct();
  614|   622k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  693|   622k|    {
  694|   622k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  695|   622k|        m_has_value = true;
  696|   622k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  395|   622k|{
  396|   622k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  397|   622k|        T(std::forward<Args>(args)...);
  398|   622k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6610|   622k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6453|   622k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3459|   622k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  717|  3.07M|    {
  718|  3.07M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  900|  3.07M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  719|  3.07M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9645|   622k|{
 9646|   622k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  |  865|   622k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 19.6k, False: 602k]
  |  |  ------------------
  ------------------
 9647|  19.6k|        out = unexpected(in.error());
 9648|  19.6k|    }
 9649|   602k|    else {
 9650|   602k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  |  934|   602k|    static_cast<    \
  |  |  935|   602k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9651|   602k|    }
 9652|   622k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1739|   622k|    {
 1740|   622k|        return has_value();
 1741|   622k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.24M|    {
  490|  1.24M|        return m_has_value;
  491|  1.24M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1745|  19.6k|    {
 1746|  19.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  19.6k|        return this->get_unexpected().error();
 1748|  19.6k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  19.6k|    {
  473|  19.6k|        return m_unexpected;
  474|  19.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1615|  19.6k|        : base(unexpect, std::move(e.error())),
 1616|  19.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.6k|    {
 1618|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  636|  19.6k|        : m_has_value(false)
  637|  19.6k|    {
  638|  19.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  639|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  700|  19.6k|    {
  701|  19.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  19.6k|                                  std::forward<Args>(args)...);
  703|  19.6k|        m_has_value = false;
  704|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  729|  98.1k|    {
  730|  98.1k|        return reinterpret_cast<unexpected<E>*>(
  731|  98.1k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  900|  98.1k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  732|  98.1k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  19.6k|    {
 1316|  19.6k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1556|  19.6k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  902|  19.6k|    {
  903|  19.6k|        assign_common(std::move(other));
  904|  19.6k|        return *this;
  905|  19.6k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  949|  19.6k|    {
  950|  19.6k|        if (this->has_value()) {
  ------------------
  |  Branch (950:13): [True: 19.6k, False: 0]
  ------------------
  951|  19.6k|            if (other.has_value()) {
  ------------------
  |  Branch (951:17): [True: 0, False: 19.6k]
  ------------------
  952|      0|                return reassign_value(std::forward<Other>(other));
  953|      0|            }
  954|  19.6k|            return assign_unexpected_over_value(std::forward<Other>(other));
  955|  19.6k|        }
  956|       |
  957|      0|        if (other.has_value()) {
  ------------------
  |  Branch (957:13): [True: 0, False: 0]
  ------------------
  958|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  959|      0|        }
  960|      0|        return reassign_unexpected(std::forward<Other>(other));
  961|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  686|  3.13M|    {
  687|  3.13M|        return m_has_value;
  688|  3.13M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  652|  1.82M|    {
  653|  1.82M|        return *value_ptr();
  654|  1.82M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1045|  19.6k|    {
 1046|  19.6k|        this->destroy_value();
 1047|  19.6k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1048|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  707|   622k|    {
  708|   622k|        scn::detail::destroy_at(value_ptr());
  709|   622k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  401|   622k|{
  402|       |    if constexpr (std::is_array_v<T>) {
  403|       |        for (auto& elem : *p) {
  404|       |            scn::detail::destroy_at(&elem);
  405|       |        }
  406|       |    }
  407|   622k|    else {
  408|   622k|        p->~T();
  409|   622k|    }
  410|   622k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6617|   622k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  700|  19.6k|    {
  701|  19.6k|        scn::detail::construct_at(unexpected_ptr(),
  702|  19.6k|                                  std::forward<Args>(args)...);
  703|  19.6k|        m_has_value = false;
  704|  19.6k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  677|  19.6k|    {
  678|  19.6k|        return std::move(*unexpected_ptr());
  679|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  711|  39.2k|    {
  712|  39.2k|        scn::detail::destroy_at(unexpected_ptr());
  713|  39.2k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6484|   602k|    {
 6485|   602k|        m_range = std::forward<Other>(r);
 6486|   602k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1794|   602k|    {
 1795|   602k|        return value();
 1796|   602k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1768|   602k|    {
 1769|   602k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   602k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   602k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   602k|        return this->get_value();
 1771|   602k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  455|   602k|    {
  456|   602k|        return m_value;
  457|   602k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9421|   250k|{
 9422|   250k|    auto buffer = make_scan_buffer(range);
 9423|       |
 9424|   250k|    auto result = vscan_impl(buffer, format, args);
 9425|   250k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.06k, False: 241k]
  |  |  ------------------
  ------------------
 9426|  9.06k|        return unexpected(result.error());
 9427|  9.06k|    }
 9428|   241k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9429|   250k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5380|   622k|{
 5381|   622k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5382|       |
 5383|   622k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5384|   622k|                  "\n"
 5385|   622k|                  "Unsupported range type given as input to a scanning "
 5386|   622k|                  "function.\n"
 5387|   622k|                  "A range needs to have a character type (value type) "
 5388|   622k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5389|   622k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5390|   622k|                  "to be included.\n"
 5391|   622k|                  "See the scnlib documentation for more details.");
 5392|   622k|    static_assert(
 5393|   622k|        !std::is_same_v<T, custom_char_traits>,
 5394|   622k|        "\n"
 5395|   622k|        "Unsupported range type given as input to a scanning "
 5396|   622k|        "function.\n"
 5397|   622k|        "String types (std::basic_string, and std::basic_string_view) "
 5398|   622k|        "need to use std::char_traits. Strings with custom Traits are "
 5399|   622k|        "not supported.");
 5400|   622k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5401|   622k|                  "\n"
 5402|   622k|                  "Unsupported range type given as input to a scanning "
 5403|   622k|                  "function.\n"
 5404|   622k|                  "file_marker_found cannot be used as an "
 5405|   622k|                  "source range type to scn::scan.\n"
 5406|   622k|                  "To read from stdin, use scn::input or scn::prompt, "
 5407|   622k|                  "and do not provide an explicit source range, "
 5408|   622k|                  "or use scn::scan with a FILE* directly.");
 5409|   622k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5410|   622k|                  "\n"
 5411|   622k|                  "Unsupported range type given as input to a scanning "
 5412|   622k|                  "function.\n"
 5413|   622k|                  "In order to be scannable, a range needs to satisfy "
 5414|   622k|                  "`forward_range`. `input_range` is not sufficient.");
 5415|   622k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5416|   622k|                  "\n"
 5417|   622k|                  "Unsupported range type given as input to a scanning "
 5418|   622k|                  "function.\n"
 5419|   622k|                  "A range needs to model forward_range and have a valid "
 5420|   622k|                  "character type (char or wchar_t) to be scannable.\n"
 5421|   622k|                  "Examples of scannable ranges are std::string, "
 5422|   622k|                  "std::string_view, "
 5423|   622k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5424|   622k|                  "See the scnlib documentation for more details.");
 5425|       |
 5426|   622k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5427|   622k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5350|   622k|{
 5351|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5352|       |        return file_marker_found{};
 5353|       |    }
 5354|       |    else if constexpr (!ranges::forward_range<Range>) {
 5355|       |        if constexpr (ranges::range<Range>) {
 5356|       |            return insufficient_range{};
 5357|       |        }
 5358|       |        else {
 5359|       |            return invalid_input_range{};
 5360|       |        }
 5361|       |    }
 5362|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5363|       |        return invalid_char_type{};
 5364|       |    }
 5365|   622k|    else {
 5366|   622k|        return make_forward_scan_buffer(r);
 5367|   622k|    }
 5368|   622k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5184|   622k|{
 5185|   622k|    return basic_scan_forward_buffer_impl(range);
 5186|   622k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4764|   622k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  936|   622k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4765|   622k|          m_cursor(ranges::begin(*m_range))
 4766|   622k|    {
 4767|   622k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4736|   622k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4737|   622k|    {
 4738|   622k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4427|   622k|        : m_current_view(sv), m_is_contiguous(false)
 4428|   622k|    {
 4429|   622k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4340|   622k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|  1.22M|    {
 2869|  1.22M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  1.22M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|  1.22M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|  1.22M|    {
 2850|  1.22M|        return decay_copy(t.begin());
 2851|  1.22M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3479|  1.82M|    {
 3480|  1.82M|        return m_iterator;
 3481|  1.82M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4770|  19.2M|    {
 4771|  19.2M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4771:13): [True: 19.0k, False: 19.2M]
  ------------------
 4772|  19.0k|            return false;
 4773|  19.0k|        }
 4774|  19.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4775|  19.2M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  930|  19.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4776|  19.2M|        }
 4777|  19.2M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4777:13): [True: 18.6M, False: 611k]
  ------------------
 4778|  18.6M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4779|  18.6M|                                          this->m_current_view.begin(),
 4780|  18.6M|                                          this->m_current_view.end());
 4781|  18.6M|        }
 4782|  19.2M|        m_latest = *m_cursor;
 4783|  19.2M|        ++m_cursor;
 4784|  19.2M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4785|  19.2M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4786|  19.2M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  930|  19.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4787|  19.2M|        }
 4788|  19.2M|        return true;
 4789|  19.2M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|  57.7M|    {
 2926|  57.7M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|  57.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|  57.7M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|  57.7M|    {
 2908|  57.7M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|  57.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|  57.7M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3483|  58.3M|    {
 3484|  58.3M|        return m_sentinel;
 3485|  58.3M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4345|   622k|    {
 4346|   622k|        SCN_UNUSED(position);
  ------------------
  |  |  915|   622k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4347|   622k|        return true;
 4348|   622k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1615|  19.6k|        : base(unexpect, std::move(e.error())),
 1616|  19.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  19.6k|    {
 1618|  19.6k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  449|  19.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  19.6k|          m_has_value(false)
  451|  19.6k|    {
  452|  19.6k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   622k|    {
 1316|   622k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6714|   602k|{
 6715|       |    if constexpr (ranges::random_access_iterator<
 6716|   602k|                      ranges::iterator_t<SourceRange>>) {
 6717|   602k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6718|       |    }
 6719|       |    else {
 6720|       |        auto it = ranges::begin(source);
 6721|       |        while (n > 0) {
 6722|       |            --n;
 6723|       |            ++it;
 6724|       |        }
 6725|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6726|       |    }
 6727|   602k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2868|   602k|    {
 2869|   602k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   602k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2870|   602k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2849|   602k|    {
 2850|   602k|        return decay_copy(t.begin());
 2851|   602k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6701|   602k|{
 6702|   602k|    return ranges::end(source);
 6703|   602k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2925|   602k|    {
 2926|   602k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  936|   602k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2927|   602k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2907|   602k|    {
 2908|   602k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  936|   602k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2909|   602k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1569|   602k|        : base(std::in_place, std::forward<U>(val)),
 1570|   602k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   602k|    {
 1572|   602k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  440|   602k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   602k|    {
  442|   602k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8782|   500k|    {
 8783|   500k|        return m_str;
 8784|   500k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3464|  1.22M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.22M|    static_cast<    \
  |  |  935|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.22M|    static_cast<    \
  |  |  935|  1.22M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.22M|    {
 3466|  1.22M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8777|   500k|        : m_str(r.str)
 8778|   500k|    {
 8779|   500k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1739|   622k|    {
 1740|   622k|        return has_value();
 1741|   622k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1814|  1.82M|    {
 1815|  1.82M|        return &value();
 1816|  1.82M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1768|  1.82M|    {
 1769|  1.82M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.82M|        return this->get_value();
 1771|  1.82M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6473|   602k|    {
 6474|   602k|        return ranges::begin(m_range);
 6475|   602k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  642|   642k|    {
  643|   642k|        if (has_value()) {
  ------------------
  |  Branch (643:13): [True: 602k, False: 39.2k]
  ------------------
  644|   602k|            destroy_value();
  645|   602k|        }
  646|  39.2k|        else {
  647|  39.2k|            destroy_unexpected();
  648|  39.2k|        }
  649|   642k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9437|   250k|{
 9438|   250k|#if !SCN_DISABLE_LOCALE
 9439|   250k|    auto buffer = detail::make_scan_buffer(range);
 9440|       |
 9441|   250k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9442|   250k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9443|   250k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9444|       |
 9445|   250k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.06k, False: 241k]
  |  |  ------------------
  ------------------
 9446|  9.06k|        return unexpected(result.error());
 9447|  9.06k|    }
 9448|   241k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   241k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9449|       |#else
 9450|       |    static_assert(dependent_false<Locale>::value,
 9451|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9452|       |
 9453|       |    return {};
 9454|       |#endif
 9455|   250k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9461|   122k|{
 9462|   122k|    auto buffer = detail::make_scan_buffer(range);
 9463|       |
 9464|   122k|    auto result = detail::vscan_value_impl(buffer, arg);
 9465|   122k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  865|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.51k, False: 120k]
  |  |  ------------------
  ------------------
 9466|  1.51k|        return unexpected(result.error());
 9467|  1.51k|    }
 9468|   120k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  936|   120k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9469|   122k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3740|   115k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3741|   115k|    {
 3742|   115k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  915|   115k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3743|   115k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|  89.8k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|  89.8k|    else {
 3981|  89.8k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|  89.8k|    }
 3983|  89.8k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  3.65M|    {
 3480|  3.65M|        return m_iterator;
 3481|  3.65M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3479|  63.1M|    {
 3480|  63.1M|        return m_iterator;
 3481|  63.1M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  571|  6.72M|    {
  572|  6.72M|        return m_has_value;
  573|  6.72M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  554|  81.5k|    {
  555|  81.5k|        return m_unexpected;
  556|  81.5k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1745|  81.5k|    {
 1746|  81.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  81.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  81.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  81.5k|        return this->get_unexpected().error();
 1748|  81.5k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7014|   888k|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7037|  27.1k|    {
 7038|  27.1k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7038:13): [True: 0, False: 27.1k]
  |  Branch (7038:39): [True: 0, False: 0]
  ------------------
 7039|       |            // clang-format off
 7040|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7041|       |            // clang-format on
 7042|      0|        }
 7043|       |
 7044|  27.1k|        m_specs.width = width;
 7045|  27.1k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7058|   860k|    {
 7059|   860k|        m_specs.type = type;
 7060|   860k|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7075|  31.2k|    {
 7076|  31.2k|        const auto begin_value = static_cast<unsigned>(begin);
 7077|  31.2k|        const auto end_value = static_cast<unsigned>(end);
 7078|  31.2k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  930|  31.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  31.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7079|       |
 7080|  31.2k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  864|  31.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 31.2k, False: 0]
  |  |  ------------------
  ------------------
 7081|       |            // No need to bit-twiddle with a mask, because with the
 7082|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7083|  31.2k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  884|  31.2k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7084|   843k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7084:40): [True: 811k, False: 31.2k]
  ------------------
 7085|   811k|                m_specs.charset_literals[v / 8] |=
 7086|   811k|                    static_cast<unsigned char>(1ul << (v % 8));
 7087|   811k|            }
 7088|  31.2k|        }
 7089|      0|        else {
 7090|      0|            m_specs.charset_has_nonascii = true;
 7091|      0|        }
 7092|  31.2k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7120|  27.1k|    {
 7121|  27.1k|        SCN_UNLIKELY_ATTR
 7122|  27.1k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7123|  27.1k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7131|   934k|    {
 7132|   934k|        return m_error;
 7133|   934k|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3917|   103k|{
 3918|   103k|    return unexpected(scan_error{c, m});
 3919|   103k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4307|  58.9M|{
 4308|       |    // Pattern_White_Space property
 4309|  58.9M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4309:13): [True: 10.8M, False: 48.1M]
  |  Branch (4309:27): [True: 2.17M, False: 8.66M]
  ------------------
 4310|  58.9M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4310:12): [True: 1.61M, False: 55.2M]
  ------------------
 4311|  58.9M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4311:12): [True: 352k, False: 54.8M]
  ------------------
 4312|  58.9M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4312:12): [True: 146k, False: 54.7M]
  ------------------
 4313|  58.9M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4313:12): [True: 202k, False: 54.5M]
  ------------------
 4314|  58.9M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4314:12): [True: 143k, False: 54.3M]
  ------------------
 4315|  58.9M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4315:12): [True: 0, False: 54.3M]
  ------------------
 4316|  58.9M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7814|  13.5k|{
 7815|  13.5k|    switch (type) {
 7816|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7816:9): [True: 0, False: 13.5k]
  ------------------
 7817|      0|            return arg_type_category::none;
 7818|       |
 7819|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7819:9): [True: 0, False: 13.5k]
  ------------------
 7820|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7820:9): [True: 0, False: 13.5k]
  ------------------
 7821|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7821:9): [True: 0, False: 13.5k]
  ------------------
 7822|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7822:9): [True: 0, False: 13.5k]
  ------------------
 7823|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7823:9): [True: 0, False: 13.5k]
  ------------------
 7824|      0|            return arg_type_category::integer;
 7825|       |
 7826|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7826:9): [True: 0, False: 13.5k]
  ------------------
 7827|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7827:9): [True: 0, False: 13.5k]
  ------------------
 7828|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7828:9): [True: 0, False: 13.5k]
  ------------------
 7829|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7829:9): [True: 0, False: 13.5k]
  ------------------
 7830|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7830:9): [True: 0, False: 13.5k]
  ------------------
 7831|      0|            return arg_type_category::unsigned_integer;
 7832|       |
 7833|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7833:9): [True: 0, False: 13.5k]
  ------------------
 7834|      0|            return arg_type_category::pointer;
 7835|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7835:9): [True: 0, False: 13.5k]
  ------------------
 7836|      0|            return arg_type_category::boolean;
 7837|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7837:9): [True: 0, False: 13.5k]
  ------------------
 7838|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7838:9): [True: 0, False: 13.5k]
  ------------------
 7839|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7839:9): [True: 0, False: 13.5k]
  ------------------
 7840|      0|            return arg_type_category::character;
 7841|       |
 7842|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7842:9): [True: 0, False: 13.5k]
  ------------------
 7843|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7843:9): [True: 0, False: 13.5k]
  ------------------
 7844|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7844:9): [True: 0, False: 13.5k]
  ------------------
 7845|      0|            return arg_type_category::floating;
 7846|       |
 7847|  1.51k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7847:9): [True: 1.51k, False: 12.0k]
  ------------------
 7848|  4.53k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7848:9): [True: 3.02k, False: 10.5k]
  ------------------
 7849|  7.55k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7849:9): [True: 3.02k, False: 10.5k]
  ------------------
 7850|  13.5k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7850:9): [True: 6.04k, False: 7.55k]
  ------------------
 7851|  13.5k|            return arg_type_category::string;
 7852|       |
 7853|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7853:9): [True: 0, False: 13.5k]
  ------------------
 7854|      0|            return arg_type_category::custom;
 7855|       |
 7856|      0|            SCN_CLANG_PUSH
 7857|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7858|      0|        default:
  ------------------
  |  Branch (7858:9): [True: 0, False: 13.5k]
  ------------------
 7859|      0|            SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7860|  13.5k|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7861|  13.5k|            SCN_CLANG_POP
 7862|  13.5k|    }
 7863|       |
 7864|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7865|  13.5k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1739|  6.63M|    {
 1740|  6.63M|        return has_value();
 1741|  6.63M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7956|   860k|{
 7957|   860k|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7957:9): [True: 0, False: 860k]
  ------------------
 7958|   860k|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7958:9): [True: 831k, False: 29.2k]
  ------------------
 7959|   860k|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7959:9): [True: 15.6k, False: 13.5k]
  ------------------
 7960|   860k|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7960:9): [True: 0, False: 13.5k]
  ------------------
 7961|   860k|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7961:9): [True: 0, False: 13.5k]
  ------------------
 7962|   847k|        return;
 7963|   847k|    }
 7964|  13.5k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7964:9): [True: 13.5k, False: 0]
  ------------------
 7965|  13.5k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  865|  13.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.5k, False: 0]
  |  |  ------------------
  ------------------
 7966|       |            // clang-format off
 7967|  13.5k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7968|       |            // clang-format on
 7969|  13.5k|        }
 7970|      0|        return;
 7971|  13.5k|    }
 7972|      0|    SCN_UNLIKELY_ATTR
 7973|      0|    handler.on_error("Invalid type specifier for string");
 7974|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4472|  19.7M|    {
 4473|  19.7M|        assert(m_begin);
 4474|  19.7M|        return m_end == nullptr;
 4475|  19.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4489|   466k|    {
 4490|   466k|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 466k]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|   466k|        return parent()->get_segment_starting_at(position());
 4496|   466k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4483|  11.5M|    {
 4484|  11.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|  11.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|  11.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|  11.5M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4376|   466k|    {
 4377|   466k|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|   466k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 262k, False: 203k]
  |  |  ------------------
  ------------------
 4378|   466k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|   262k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|   262k|        }
 4381|   203k|        const auto start = pos - m_putback_buffer.size();
 4382|   203k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   203k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   203k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   203k|        return m_current_view.substr(start);
 4384|   203k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4467|   526k|    {
 4468|   526k|        return m_position;
 4469|   526k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4398|   302k|    {
 4399|   302k|        return m_is_contiguous;
 4400|   302k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4472|   348M|    {
 4473|   348M|        assert(m_begin);
 4474|   348M|        return m_end == nullptr;
 4475|   348M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3975|   605k|{
 3976|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3977|       |                                          const CharT*, const CharT*>) {
 3978|       |        return {first, last};
 3979|       |    }
 3980|   605k|    else {
 3981|   605k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3982|   605k|    }
 3983|   605k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4489|  1.82M|    {
 4490|  1.82M|        if (!stores_parent()) {
  ------------------
  |  Branch (4490:13): [True: 0, False: 1.82M]
  ------------------
 4491|      0|            return make_string_view_from_pointers(
 4492|      0|                static_cast<const CharT*>(m_begin) + position(),
 4493|      0|                static_cast<const CharT*>(m_end));
 4494|      0|        }
 4495|  1.82M|        return parent()->get_segment_starting_at(position());
 4496|  1.82M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4483|   203M|    {
 4484|   203M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  930|   203M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   203M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4485|   203M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4486|   203M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4376|  1.82M|    {
 4377|  1.82M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.20M, False: 620k]
  |  |  ------------------
  ------------------
 4378|  1.82M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4379|  1.20M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4380|  1.20M|        }
 4381|   620k|        const auto start = pos - m_putback_buffer.size();
 4382|   620k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  930|   620k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   620k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4383|   620k|        return m_current_view.substr(start);
 4384|   620k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4467|  2.19M|    {
 4468|  2.19M|        return m_position;
 4469|  2.19M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4398|  1.86M|    {
 4399|  1.86M|        return m_is_contiguous;
 4400|  1.86M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3333|   607k|    {
 3334|   607k|        return static_cast<D&>(*this);
 3335|   607k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3374|   607k|    {
 3375|   607k|        return detail::to_address(ranges::begin(derived()));
 3376|   607k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3333|  2.24M|    {
 3334|  2.24M|        return static_cast<D&>(*this);
 3335|  2.24M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3374|  2.24M|    {
 3375|  2.24M|        return detail::to_address(ranges::begin(derived()));
 3376|  2.24M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 8979|  41.1k|    {
 8980|  41.1k|        return ranges::subrange{begin(), end()};
 8981|  41.1k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 8971|  41.1k|    {
 8972|  41.1k|        return ranges::default_sentinel;
 8973|  41.1k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  1.35M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.35M|    static_cast<    \
  |  |  935|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  1.35M|    static_cast<    \
  |  |  935|  1.35M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  1.35M|    {
 3466|  1.35M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8798|  2.12M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|  94.0k|    {
 1979|  94.0k|        return detail::transform_error_impl(std::move(*this),
 1980|  94.0k|                                            std::forward<F>(f));
 1981|  94.0k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|  94.0k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  94.0k|    else {
 1472|  94.0k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  94.0k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  94.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 92.0k, False: 2.02k]
  |  |  ------------------
  ------------------
 1474|  94.0k|                   ? result(*std::forward<Exp>(exp))
 1475|  94.0k|                   : result(unexpect,
 1476|  2.02k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.02k|                                           std::forward<Exp>(exp).error()));
 1478|  94.0k|    }
 1479|  94.0k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   188k|    {
  490|   188k|        return m_has_value;
  491|   188k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|  92.0k|    {
 1805|  92.0k|        return std::move(value());
 1806|  92.0k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|  92.0k|    {
 1769|  92.0k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  92.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  92.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  92.0k|        return this->get_value();
 1771|  92.0k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  92.0k|    {
  456|  92.0k|        return m_value;
  457|  92.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|   219k|        : base(std::in_place, std::forward<U>(val)),
 1570|   219k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   219k|    {
 1572|   219k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   219k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   219k|    {
  442|   219k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   232k|    {
 1316|   232k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1349|  11.7k|{
 1350|  11.7k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1351|  11.7k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.02k|    {
 1756|  2.02k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.02k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.02k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.02k|        return std::move(this->get_unexpected().error());
 1758|  2.02k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.02k|    {
  473|  2.02k|        return m_unexpected;
  474|  2.02k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  364|  23.4k|    {
  365|  23.4k|        return m_unexpected;
  366|  23.4k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.02k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.02k|    {
 1628|  2.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  12.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  12.4k|          m_has_value(false)
  451|  12.4k|    {
  452|  12.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 8979|   250k|    {
 8980|   250k|        return ranges::subrange{begin(), end()};
 8981|   250k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 8971|   250k|    {
 8972|   250k|        return ranges::default_sentinel;
 8973|   250k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3464|  22.1M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  22.1M|    static_cast<    \
  |  |  935|  22.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  22.1M|    static_cast<    \
  |  |  935|  22.1M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  22.1M|    {
 3466|  22.1M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1978|   610k|    {
 1979|   610k|        return detail::transform_error_impl(std::move(*this),
 1980|   610k|                                            std::forward<F>(f));
 1981|   610k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1461|   610k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   610k|    else {
 1472|   610k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   610k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   610k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 608k, False: 2.18k]
  |  |  ------------------
  ------------------
 1474|   610k|                   ? result(*std::forward<Exp>(exp))
 1475|   610k|                   : result(unexpect,
 1476|  2.18k|                            trivial_invoke(std::forward<F>(f),
 1477|  2.18k|                                           std::forward<Exp>(exp).error()));
 1478|   610k|    }
 1479|   610k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  1.22M|    {
  490|  1.22M|        return m_has_value;
  491|  1.22M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1804|   608k|    {
 1805|   608k|        return std::move(value());
 1806|   608k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1768|   608k|    {
 1769|   608k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   608k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   608k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   608k|        return this->get_value();
 1771|   608k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   608k|    {
  456|   608k|        return m_value;
  457|   608k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1569|  1.45M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.45M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.45M|    {
 1572|  1.45M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  1.45M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.45M|    {
  442|  1.45M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.47M|    {
 1316|  1.47M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1755|  2.18k|    {
 1756|  2.18k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  2.18k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.18k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  2.18k|        return std::move(this->get_unexpected().error());
 1758|  2.18k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  2.18k|    {
  473|  2.18k|        return m_unexpected;
  474|  2.18k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1625|  2.18k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  2.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  2.18k|    {
 1628|  2.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  23.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  23.9k|          m_has_value(false)
  451|  23.9k|    {
  452|  23.9k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  349|   103k|        : m_unexpected(std::forward<Err>(e))
  350|   103k|    {
  351|   103k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|   103k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|   103k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|  88.3k|        : base(unexpect, std::move(e.error())),
 1616|  88.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  88.3k|    {
 1618|  88.3k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  449|  88.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  88.3k|          m_has_value(false)
  451|  88.3k|    {
  452|  88.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.13M|    {
 1316|  2.13M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  21.3k|        : base(unexpect, std::move(e.error())),
 1616|  21.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  21.3k|    {
 1618|  21.3k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  24.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  24.5k|          m_has_value(false)
  451|  24.5k|    {
  452|  24.5k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   385k|    {
 1316|   385k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|   359k|        : base(std::in_place, std::forward<U>(val)),
 1570|   359k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   359k|    {
 1572|   359k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   359k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   359k|    {
  442|   359k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1739|   385k|    {
 1740|   385k|        return has_value();
 1741|   385k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  489|   770k|    {
  490|   770k|        return m_has_value;
  491|   770k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1745|  24.5k|    {
 1746|  24.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  24.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  24.5k|        return this->get_unexpected().error();
 1748|  24.5k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  24.5k|    {
  473|  24.5k|        return m_unexpected;
  474|  24.5k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|   299k|    {
 1805|   299k|        return std::move(value());
 1806|   299k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|   360k|    {
 1769|   360k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   360k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   360k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   360k|        return this->get_value();
 1771|   360k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  455|   360k|    {
  456|   360k|        return m_value;
  457|   360k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1615|  43.5k|        : base(unexpect, std::move(e.error())),
 1616|  43.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  43.5k|    {
 1618|  43.5k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  449|  47.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  47.9k|          m_has_value(false)
  451|  47.9k|    {
  452|  47.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  2.95M|    {
 1316|  2.95M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1569|  2.90M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.90M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.90M|    {
 1572|  2.90M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  2.90M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.90M|    {
  442|  2.90M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1739|  2.95M|    {
 1740|  2.95M|        return has_value();
 1741|  2.95M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  489|  5.90M|    {
  490|  5.90M|        return m_has_value;
  491|  5.90M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1745|  47.9k|    {
 1746|  47.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  47.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  47.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  47.9k|        return this->get_unexpected().error();
 1748|  47.9k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  47.9k|    {
  473|  47.9k|        return m_unexpected;
  474|  47.9k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1804|  2.42M|    {
 1805|  2.42M|        return std::move(value());
 1806|  2.42M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1768|  2.90M|    {
 1769|  2.90M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  2.90M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.90M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  2.90M|        return this->get_value();
 1771|  2.90M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  455|  2.90M|    {
  456|  2.90M|        return m_value;
  457|  2.90M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|   154k|    {
 1979|   154k|        return detail::transform_error_impl(std::move(*this),
 1980|   154k|                                            std::forward<F>(f));
 1981|   154k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|   154k|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|   154k|    else {
 1472|   154k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|   154k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|   154k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 151k, False: 3.17k]
  |  |  ------------------
  ------------------
 1474|   154k|                   ? result(*std::forward<Exp>(exp))
 1475|   154k|                   : result(unexpect,
 1476|  3.17k|                            trivial_invoke(std::forward<F>(f),
 1477|  3.17k|                                           std::forward<Exp>(exp).error()));
 1478|   154k|    }
 1479|   154k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|   309k|    {
  490|   309k|        return m_has_value;
  491|   309k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|   151k|    {
 1805|   151k|        return std::move(value());
 1806|   151k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|   151k|    {
 1769|   151k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   151k|        return this->get_value();
 1771|   151k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|   151k|    {
  456|   151k|        return m_value;
  457|   151k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1755|  3.17k|    {
 1756|  3.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  3.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  3.17k|        return std::move(this->get_unexpected().error());
 1758|  3.17k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  3.17k|    {
  473|  3.17k|        return m_unexpected;
  474|  3.17k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  3.17k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  3.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  3.17k|    {
 1628|  3.17k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 8963|   121k|    {
 8964|   121k|        return m_current;
 8965|   121k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8856|   110k|    {
 8857|   110k|        return m_locale;
 8858|   110k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8862|   119k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   119k|    static_cast<    \
  |  |  935|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   119k|    static_cast<    \
  |  |  935|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   119k|    {
 8864|   119k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  10.4k|        : base(unexpect, std::move(e.error())),
 1616|  10.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  10.4k|    {
 1618|  10.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 8963|   747k|    {
 8964|   747k|        return m_current;
 8965|   747k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8856|   750k|    {
 8857|   750k|        return m_locale;
 8858|   750k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8862|   768k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   768k|    static_cast<    \
  |  |  935|   768k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  934|   768k|    static_cast<    \
  |  |  935|   768k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8863|   768k|    {
 8864|   768k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  21.7k|        : base(unexpect, std::move(e.error())),
 1616|  21.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  21.7k|    {
 1618|  21.7k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1615|   108k|        : base(unexpect, std::move(e.error())),
 1616|   108k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|   108k|    {
 1618|   108k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  548|   108k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  549|   108k|          m_has_value(false)
  550|   108k|    {
  551|   108k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   108k|    {
 1316|   108k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1551|  5.73M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  528|  5.73M|        : m_deferred_init(), m_has_value(true)
  529|  5.73M|    {
  530|  5.73M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  1.03M|    {
 4559|  1.03M|        return x.is_at_end();
 4560|  1.03M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4602|  2.11M|    {
 4603|  2.11M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 2.11M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  2.11M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 2.11M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  2.11M|        return !read_at_position();
 4610|  2.11M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4582|  5.83M|    {
 4583|  5.83M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  5.83M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  5.83M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|  5.83M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 5.83M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|  5.83M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|  5.83M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 4.74M, False: 1.09M]
  |  |  ------------------
  ------------------
 4590|  4.74M|            return true;
 4591|  4.74M|        }
 4592|       |
 4593|  2.17M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 1.09M, False: 1.08M]
  ------------------
 4594|  1.09M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 15.7k, False: 1.08M]
  ------------------
 4595|  15.7k|                return false;
 4596|  15.7k|            }
 4597|  1.09M|        }
 4598|  1.08M|        return true;
 4599|  1.09M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4517|  1.92M|    {
 4518|  1.92M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  1.92M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 1.92M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  1.92M|        auto res = read_at_position();
 4527|  1.92M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  1.92M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.92M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  1.92M|        return parent()->get_character_at(m_position);
 4529|  1.92M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4387|  1.92M|    {
 4388|  1.92M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  1.92M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.05M, False: 869k]
  |  |  ------------------
  ------------------
 4389|  1.92M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  1.05M|            return m_putback_buffer[pos];
 4391|  1.05M|        }
 4392|   869k|        const auto start = pos - m_putback_buffer.size();
 4393|   869k|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|   869k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   869k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|   869k|        return m_current_view[start];
 4395|   869k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|  92.0k|        : base(std::in_place, std::forward<U>(val)),
 1570|  92.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  92.0k|    {
 1572|  92.0k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|  92.0k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  92.0k|    {
  442|  92.0k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  94.0k|    {
 1316|  94.0k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.02k|        : base(unexpect, std::move(e.error())),
 1616|  2.02k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.02k|    {
 1618|  2.02k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.02k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.02k|          m_has_value(false)
  451|  2.02k|    {
  452|  2.02k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  358|  11.7k|        : m_unexpected(std::forward<Args>(args)...)
  359|  11.7k|    {
  360|  11.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  361|  11.7k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4503|  1.79M|    {
 4504|  1.79M|        ++m_position;
 4505|  1.79M|        (void)read_at_position();
 4506|  1.79M|        return *this;
 4507|  1.79M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4552|   801k|    {
 4553|   801k|        return !(lhs == rhs);
 4554|   801k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4547|   803k|    {
 4548|   803k|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 803k, False: 0]
  |  Branch (4548:46): [True: 142k, False: 661k]
  ------------------
 4549|   803k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  349|  11.7k|        : m_unexpected(std::forward<Err>(e))
  350|  11.7k|    {
  351|  11.7k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  915|  11.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  352|  11.7k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    864|        : base(unexpect, std::move(e.error())),
 1616|    864|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    864|    {
 1618|    864|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    864|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    864|          m_has_value(false)
  451|    864|    {
  452|    864|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  75.7k|    {
 1316|  75.7k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|  74.9k|        : base(std::in_place, std::forward<U>(val)),
 1570|  74.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  74.9k|    {
 1572|  74.9k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|  74.9k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  74.9k|    {
  442|  74.9k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|  75.7k|    {
 1740|  75.7k|        return has_value();
 1741|  75.7k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   151k|    {
  490|   151k|        return m_has_value;
  491|   151k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    864|    {
 1746|    864|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    864|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    864|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    864|        return this->get_unexpected().error();
 1748|    864|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    864|    {
  473|    864|        return m_unexpected;
  474|    864|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|  74.9k|    {
 1805|  74.9k|        return std::move(value());
 1806|  74.9k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|  74.9k|    {
 1769|  74.9k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  74.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  74.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  74.9k|        return this->get_value();
 1771|  74.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|  74.9k|    {
  456|  74.9k|        return m_value;
  457|  74.9k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  3.24M|    {
 3484|  3.24M|        return m_sentinel;
 3485|  3.24M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|   232k|    {
 1740|   232k|        return has_value();
 1741|   232k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|   465k|    {
  490|   465k|        return m_has_value;
  491|   465k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  12.4k|    {
 1746|  12.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  12.4k|        return this->get_unexpected().error();
 1748|  12.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  12.4k|    {
  473|  12.4k|        return m_unexpected;
  474|  12.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   182k|    {
 1805|   182k|        return std::move(value());
 1806|   182k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   220k|    {
 1769|   220k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   220k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   220k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   220k|        return this->get_value();
 1771|   220k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|   220k|    {
  456|   220k|        return m_value;
  457|   220k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3479|  98.0k|    {
 3480|  98.0k|        return m_iterator;
 3481|  98.0k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3483|  98.0k|    {
 3484|  98.0k|        return m_sentinel;
 3485|  98.0k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|  92.6k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  92.6k|    static_cast<    \
  |  |  935|  92.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|  92.6k|    static_cast<    \
  |  |  935|  92.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|  92.6k|    {
 3466|  92.6k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  1.08M|    {
 4570|  1.08M|        return !x.is_at_end();
 4571|  1.08M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  3.17k|        : base(unexpect, std::move(e.error())),
 1616|  3.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  3.17k|    {
 1618|  3.17k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  3.17k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  3.17k|          m_has_value(false)
  451|  3.17k|    {
  452|  3.17k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   154k|    {
 1316|   154k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|   151k|        : base(std::in_place, std::forward<U>(val)),
 1570|   151k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   151k|    {
 1572|   151k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|   151k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   151k|    {
  442|   151k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.26k|        : base(unexpect, std::move(e.error())),
 1616|  1.26k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.26k|    {
 1618|  1.26k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.26k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.26k|          m_has_value(false)
  451|  1.26k|    {
  452|  1.26k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   125k|    {
 1316|   125k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   123k|        : base(std::in_place, std::forward<U>(val)),
 1570|   123k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   123k|    {
 1572|   123k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   123k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   123k|    {
  442|   123k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1739|   125k|    {
 1740|   125k|        return has_value();
 1741|   125k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  489|   250k|    {
  490|   250k|        return m_has_value;
  491|   250k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1745|  1.26k|    {
 1746|  1.26k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.26k|        return this->get_unexpected().error();
 1748|  1.26k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.26k|    {
  473|  1.26k|        return m_unexpected;
  474|  1.26k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   123k|    {
 1805|   123k|        return std::move(value());
 1806|   123k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   123k|    {
 1769|   123k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   123k|        return this->get_value();
 1771|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  455|   123k|    {
  456|   123k|        return m_value;
  457|   123k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|   607k|    {
 3000|   607k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|   607k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|   607k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|   607k|    {
 2981|   607k|        return t.data();
 2982|   607k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1569|  2.04M|        : base(std::in_place, std::forward<U>(val)),
 1570|  2.04M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  2.04M|    {
 1572|  2.04M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  440|  2.04M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  2.04M|    {
  442|  2.04M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|  37.1k|    {
 1795|  37.1k|        return value();
 1796|  37.1k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|  61.1k|    {
 1795|  61.1k|        return value();
 1796|  61.1k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    574|        : base(std::in_place, std::forward<U>(val)),
 1570|    574|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    574|    {
 1572|    574|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    574|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    574|    {
  442|    574|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|  1.14k|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.14k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.14k|    {
 1572|  1.14k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.14k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.14k|    {
  442|  1.14k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4558|  20.2M|    {
 4559|  20.2M|        return x.is_at_end();
 4560|  20.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4602|  39.7M|    {
 4603|  39.7M|        if (m_end) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 39.7M]
  ------------------
 4604|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4605|      0|        }
 4606|  39.7M|        if (!m_begin) {
  ------------------
  |  Branch (4606:13): [True: 0, False: 39.7M]
  ------------------
 4607|      0|            return true;
 4608|      0|        }
 4609|  39.7M|        return !read_at_position();
 4610|  39.7M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4582|   104M|    {
 4583|   104M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|   104M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   104M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4584|       |
 4585|   104M|        if (!stores_parent()) {
  ------------------
  |  Branch (4585:13): [True: 0, False: 104M]
  ------------------
 4586|      0|            return true;
 4587|      0|        }
 4588|       |
 4589|   104M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  864|   104M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 85.7M, False: 19.2M]
  |  |  ------------------
  ------------------
 4590|  85.7M|            return true;
 4591|  85.7M|        }
 4592|       |
 4593|  38.5M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4593:16): [True: 19.2M, False: 19.2M]
  ------------------
 4594|  19.2M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4594:17): [True: 19.0k, False: 19.2M]
  ------------------
 4595|  19.0k|                return false;
 4596|  19.0k|            }
 4597|  19.2M|        }
 4598|  19.2M|        return true;
 4599|  19.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4356|   143M|    {
 4357|   143M|        return m_putback_buffer.size() + m_current_view.size();
 4358|   143M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4517|  38.6M|    {
 4518|  38.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  930|  38.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4519|       |
 4520|  38.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4520:13): [True: 0, False: 38.6M]
  ------------------
 4521|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4522|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4523|      0|            return *ptr;
 4524|      0|        }
 4525|       |
 4526|  38.6M|        auto res = read_at_position();
 4527|  38.6M|        SCN_EXPECT(res);
  ------------------
  |  |  930|  38.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4528|  38.6M|        return parent()->get_character_at(m_position);
 4529|  38.6M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4387|  38.6M|    {
 4388|  38.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  865|  38.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 20.0M, False: 18.6M]
  |  |  ------------------
  ------------------
 4389|  38.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4390|  20.0M|            return m_putback_buffer[pos];
 4391|  20.0M|        }
 4392|  18.6M|        const auto start = pos - m_putback_buffer.size();
 4393|  18.6M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  930|  18.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4394|  18.6M|        return m_current_view[start];
 4395|  18.6M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1569|   608k|        : base(std::in_place, std::forward<U>(val)),
 1570|   608k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   608k|    {
 1572|   608k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  440|   608k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   608k|    {
  442|   608k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   610k|    {
 1316|   610k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1615|  2.18k|        : base(unexpect, std::move(e.error())),
 1616|  2.18k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  2.18k|    {
 1618|  2.18k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  449|  2.18k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  2.18k|          m_has_value(false)
  451|  2.18k|    {
  452|  2.18k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4503|  26.5M|    {
 4504|  26.5M|        ++m_position;
 4505|  26.5M|        (void)read_at_position();
 4506|  26.5M|        return *this;
 4507|  26.5M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4552|  7.56M|    {
 4553|  7.56M|        return !(lhs == rhs);
 4554|  7.56M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4547|  7.56M|    {
 4548|  7.56M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4548:16): [True: 7.56M, False: 0]
  |  Branch (4548:46): [True: 247k, False: 7.32M]
  ------------------
 4549|  7.56M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4067|   109M|{
 4068|       |    if constexpr (sizeof(U) == 1) {
 4069|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4070|       |    }
 4071|       |    else if constexpr (sizeof(U) == 2) {
 4072|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4073|       |    }
 4074|   109M|    else {
 4075|       |        // utf-32
 4076|   109M|        static_assert(sizeof(U) == 4);
 4077|   109M|        SCN_UNUSED(ch);
  ------------------
  |  |  915|   109M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4078|   109M|        return 1;
 4079|   109M|    }
 4080|   109M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4273|   109M|{
 4274|       |    if constexpr (sizeof(CharT) == 1) {
 4275|       |        return decode_utf8_code_point_exhaustive(input);
 4276|       |    }
 4277|       |    else if constexpr (sizeof(CharT) == 2) {
 4278|       |        return decode_utf16_code_point_exhaustive(input);
 4279|       |    }
 4280|   109M|    else {
 4281|   109M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  930|   109M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   109M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4282|   109M|        auto cp = static_cast<char32_t>(input.front());
 4283|   109M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|   109M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 459k, False: 108M]
  |  |  ------------------
  ------------------
 4284|   459k|            return invalid_code_point;
 4285|   459k|        }
 4286|   108M|        return cp;
 4287|   109M|    }
 4288|   109M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1615|    874|        : base(unexpect, std::move(e.error())),
 1616|    874|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|    874|    {
 1618|    874|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  449|    874|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|    874|          m_has_value(false)
  451|    874|    {
  452|    874|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   487k|    {
 1316|   487k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1569|   486k|        : base(std::in_place, std::forward<U>(val)),
 1570|   486k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   486k|    {
 1572|   486k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  440|   486k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   486k|    {
  442|   486k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1739|   487k|    {
 1740|   487k|        return has_value();
 1741|   487k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  489|   975k|    {
  490|   975k|        return m_has_value;
  491|   975k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1745|    874|    {
 1746|    874|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|    874|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    874|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|    874|        return this->get_unexpected().error();
 1748|    874|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|    874|    {
  473|    874|        return m_unexpected;
  474|    874|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1804|   486k|    {
 1805|   486k|        return std::move(value());
 1806|   486k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1768|   486k|    {
 1769|   486k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   486k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   486k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   486k|        return this->get_value();
 1771|   486k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  455|   486k|    {
  456|   486k|        return m_value;
  457|   486k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3483|  61.0M|    {
 3484|  61.0M|        return m_sentinel;
 3485|  61.0M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1739|  1.47M|    {
 1740|  1.47M|        return has_value();
 1741|  1.47M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  489|  2.95M|    {
  490|  2.95M|        return m_has_value;
  491|  2.95M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1745|  23.9k|    {
 1746|  23.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  23.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  23.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  23.9k|        return this->get_unexpected().error();
 1748|  23.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  23.9k|    {
  473|  23.9k|        return m_unexpected;
  474|  23.9k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|  1.21M|    {
 1805|  1.21M|        return std::move(value());
 1806|  1.21M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|  1.45M|    {
 1769|  1.45M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.45M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.45M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.45M|        return this->get_value();
 1771|  1.45M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  455|  1.45M|    {
  456|  1.45M|        return m_value;
  457|  1.45M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3959|  51.2M|{
 3960|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3961|       |                                          decltype(first), decltype(last)> &&
 3962|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3963|       |        return {first, last};
 3964|       |    }
 3965|  51.2M|    else {
 3966|  51.2M|        return {to_address(first), static_cast<size_t>(std::distance(
 3967|  51.2M|                                       to_address(first), to_address(last)))};
 3968|  51.2M|    }
 3969|  51.2M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  315|   153M|{
  316|   153M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  936|   153M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  317|   153M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3479|   614k|    {
 3480|   614k|        return m_iterator;
 3481|   614k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3483|   614k|    {
 3484|   614k|        return m_sentinel;
 3485|   614k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3464|   608k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   608k|    static_cast<    \
  |  |  935|   608k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  934|   608k|    static_cast<    \
  |  |  935|   608k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3465|   608k|    {
 3466|   608k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4569|  19.5M|    {
 4570|  19.5M|        return !x.is_at_end();
 4571|  19.5M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1615|  4.37k|        : base(unexpect, std::move(e.error())),
 1616|  4.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  4.37k|    {
 1618|  4.37k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  449|  4.37k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  4.37k|          m_has_value(false)
  451|  4.37k|    {
  452|  4.37k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|  1.22M|    {
 1316|  1.22M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1569|  1.21M|        : base(std::in_place, std::forward<U>(val)),
 1570|  1.21M|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|  1.21M|    {
 1572|  1.21M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  440|  1.21M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|  1.21M|    {
  442|  1.21M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  489|  2.44M|    {
  490|  2.44M|        return m_has_value;
  491|  2.44M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1768|  1.21M|    {
 1769|  1.21M|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|  1.21M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.21M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|  1.21M|        return this->get_value();
 1771|  1.21M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  455|  1.21M|    {
  456|  1.21M|        return m_value;
  457|  1.21M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1615|  1.74k|        : base(unexpect, std::move(e.error())),
 1616|  1.74k|          ctor_base(detail::non_default_ctor_tag_t{})
 1617|  1.74k|    {
 1618|  1.74k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  449|  1.74k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  450|  1.74k|          m_has_value(false)
  451|  1.74k|    {
  452|  1.74k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1315|   975k|    {
 1316|   975k|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1569|   973k|        : base(std::in_place, std::forward<U>(val)),
 1570|   973k|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|   973k|    {
 1572|   973k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  440|   973k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|   973k|    {
  442|   973k|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1978|  1.22M|    {
 1979|  1.22M|        return detail::transform_error_impl(std::move(*this),
 1980|  1.22M|                                            std::forward<F>(f));
 1981|  1.22M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1461|  1.22M|{
 1462|       |    if constexpr (std::is_void_v<Ret>) {
 1463|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1464|       |        if (SCN_LIKELY(exp.has_value())) {
 1465|       |            return result(*std::forward<Exp>(exp));
 1466|       |        }
 1467|       |
 1468|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1469|       |        return result(unexpect, monostate{});
 1470|       |    }
 1471|  1.22M|    else {
 1472|  1.22M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1473|  1.22M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  864|  1.22M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 1.21M, False: 4.37k]
  |  |  ------------------
  ------------------
 1474|  1.22M|                   ? result(*std::forward<Exp>(exp))
 1475|  1.22M|                   : result(unexpect,
 1476|  4.37k|                            trivial_invoke(std::forward<F>(f),
 1477|  4.37k|                                           std::forward<Exp>(exp).error()));
 1478|  1.22M|    }
 1479|  1.22M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1804|  1.21M|    {
 1805|  1.21M|        return std::move(value());
 1806|  1.21M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1755|  4.37k|    {
 1756|  4.37k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  4.37k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.37k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1757|  4.37k|        return std::move(this->get_unexpected().error());
 1758|  4.37k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  472|  4.37k|    {
  473|  4.37k|        return m_unexpected;
  474|  4.37k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1625|  4.37k|        : base(unexpect, std::forward<Args>(args)...),
 1626|  4.37k|          ctor_base(detail::non_default_ctor_tag_t{})
 1627|  4.37k|    {
 1628|  4.37k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1739|   975k|    {
 1740|   975k|        return has_value();
 1741|   975k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  489|  1.95M|    {
  490|  1.95M|        return m_has_value;
  491|  1.95M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1745|  1.74k|    {
 1746|  1.74k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  930|  1.74k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.74k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1747|  1.74k|        return this->get_unexpected().error();
 1748|  1.74k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  472|  1.74k|    {
  473|  1.74k|        return m_unexpected;
  474|  1.74k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1804|   973k|    {
 1805|   973k|        return std::move(value());
 1806|   973k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1768|   973k|    {
 1769|   973k|        SCN_EXPECT(has_value());
  ------------------
  |  |  930|   973k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   973k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1770|   973k|        return this->get_value();
 1771|   973k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  455|   973k|    {
  456|   973k|        return m_value;
  457|   973k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2999|  2.24M|    {
 3000|  2.24M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  936|  2.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3001|  2.24M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2980|  2.24M|    {
 2981|  2.24M|        return t.data();
 2982|  2.24M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1794|   241k|    {
 1795|   241k|        return value();
 1796|   241k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1794|   482k|    {
 1795|   482k|        return value();
 1796|   482k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1569|    100|        : base(std::in_place, std::forward<U>(val)),
 1570|    100|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    100|    {
 1572|    100|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  440|    100|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    100|    {
  442|    100|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1569|    200|        : base(std::in_place, std::forward<U>(val)),
 1570|    200|          ctor_base(detail::non_default_ctor_tag_t{})
 1571|    200|    {
 1572|    200|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  440|    200|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  441|    200|    {
  442|    200|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4356|  8.01M|    {
 4357|  8.01M|        return m_putback_buffer.size() + m_current_view.size();
 4358|  8.01M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6181|   218k|    {
 6182|   218k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|   218k|        return static_cast<std::size_t>(m_desc &
 6187|   218k|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|   218k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6207|   437k|    {
 6208|   437k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|   437k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6149|   218k|    {
 6150|   218k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|   218k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|   218k|        const auto t = type(id);
 6162|   218k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|   218k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 218k]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|   218k|        basic_scan_arg<Context> arg;
 6167|   218k|        arg.m_type = t;
 6168|   218k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 218k, False: 0]
  ------------------
 6169|   218k|            arg.m_value.ref_value = m_builtin_values[id];
 6170|   218k|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|   218k|        return arg;
 6175|   218k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6216|   218k|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|   218k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|   218k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|   218k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|   218k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6211|   218k|    {
 6212|   218k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|   218k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 5965|   378k|    {
 5966|   378k|        return m_type != detail::arg_type::none_type;
 5967|   378k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  92.7k|{
 9324|  92.7k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  92.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  92.7k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  92.7k|{
 9225|  92.7k|#define SCN_VISIT(Type)                                                \
 9226|  92.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  92.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  92.7k|    }                                                                  \
 9229|  92.7k|    else {                                                             \
 9230|  92.7k|        return vis(monostate_val);                                     \
 9231|  92.7k|    }
 9232|       |
 9233|  92.7k|    monostate monostate_val{};
 9234|       |
 9235|  92.7k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 92.7k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 92.7k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 92.7k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 92.7k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 92.7k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 92.7k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 92.7k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 92.7k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 92.7k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 92.7k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 92.7k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 92.7k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 92.7k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 92.7k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 92.7k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 92.7k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 92.7k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 92.7k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|  46.3k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 46.3k, False: 46.3k]
  ------------------
 9273|  46.3k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  46.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  46.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  46.3k|    }                                                                  \
  |  | 9229|  46.3k|    else {                                                             \
  |  | 9230|  46.3k|        return vis(monostate_val);                                     \
  |  | 9231|  46.3k|    }
  ------------------
 9274|  92.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 46.3k, False: 46.3k]
  ------------------
 9275|  92.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  92.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  92.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  92.7k|    }                                                                  \
  |  | 9229|  92.7k|    else {                                                             \
  |  | 9230|  92.7k|        return vis(monostate_val);                                     \
  |  | 9231|  92.7k|    }
  ------------------
 9276|  92.7k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 92.7k]
  ------------------
 9277|  92.7k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  92.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  92.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  92.7k|    }                                                                  \
  |  | 9229|  92.7k|    else {                                                             \
  |  | 9230|  92.7k|        return vis(monostate_val);                                     \
  |  | 9231|  92.7k|    }
  ------------------
 9278|  92.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 92.7k]
  ------------------
 9279|  92.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  92.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  92.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  92.7k|    }                                                                  \
  |  | 9229|  92.7k|    else {                                                             \
  |  | 9230|  92.7k|        return vis(monostate_val);                                     \
  |  | 9231|  92.7k|    }
  ------------------
 9280|  92.7k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 92.7k]
  ------------------
 9281|  92.7k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  92.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  92.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  92.7k|    }                                                                  \
  |  | 9229|  92.7k|    else {                                                             \
  |  | 9230|  92.7k|        return vis(monostate_val);                                     \
  |  | 9231|  92.7k|    }
  ------------------
 9282|  92.7k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 92.7k]
  ------------------
 9283|  92.7k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  92.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  92.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  92.7k|    }                                                                  \
  |  | 9229|  92.7k|    else {                                                             \
  |  | 9230|  92.7k|        return vis(monostate_val);                                     \
  |  | 9231|  92.7k|    }
  ------------------
 9284|       |
 9285|  92.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 92.7k]
  ------------------
 9286|  92.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  92.7k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  92.7k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 92.7k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 92.7k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  92.7k|            SCN_CLANG_POP
 9303|  92.7k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|   497k|{
 6011|   497k|    return arg.m_type;
 6012|   497k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|   259k|{
 6023|   259k|    return arg.m_value;
 6024|   259k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|  44.1k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|  44.1k|    static_cast<    \
  |  |  935|  44.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  44.1k|    {
 8949|  44.1k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4690|   100k|{
 4691|   100k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 100k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   100k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   100k|                            ranges::default_sentinel};
 4697|   100k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4453|   100k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   100k|    {
 4455|   100k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   100k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   100k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   100k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   100k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|  56.5k|{
 9324|  56.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  56.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  56.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  56.5k|{
 9225|  56.5k|#define SCN_VISIT(Type)                                                \
 9226|  56.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  56.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  56.5k|    }                                                                  \
 9229|  56.5k|    else {                                                             \
 9230|  56.5k|        return vis(monostate_val);                                     \
 9231|  56.5k|    }
 9232|       |
 9233|  56.5k|    monostate monostate_val{};
 9234|       |
 9235|  56.5k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 56.5k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 56.5k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 56.5k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 56.5k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 56.5k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 56.5k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 56.5k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 56.5k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 56.5k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 56.5k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 56.5k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 56.5k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 56.5k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 56.5k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 56.5k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 56.5k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 56.5k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 56.5k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 56.5k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|  56.5k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 56.5k, False: 0]
  ------------------
 9275|  56.5k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  56.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.5k|    }                                                                  \
  |  | 9229|  56.5k|    else {                                                             \
  |  | 9230|  56.5k|        return vis(monostate_val);                                     \
  |  | 9231|  56.5k|    }
  ------------------
 9276|  56.5k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 56.5k]
  ------------------
 9277|  56.5k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  56.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.5k|    }                                                                  \
  |  | 9229|  56.5k|    else {                                                             \
  |  | 9230|  56.5k|        return vis(monostate_val);                                     \
  |  | 9231|  56.5k|    }
  ------------------
 9278|  56.5k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 56.5k]
  ------------------
 9279|  56.5k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  56.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.5k|    }                                                                  \
  |  | 9229|  56.5k|    else {                                                             \
  |  | 9230|  56.5k|        return vis(monostate_val);                                     \
  |  | 9231|  56.5k|    }
  ------------------
 9280|  56.5k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 56.5k]
  ------------------
 9281|  56.5k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  56.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.5k|    }                                                                  \
  |  | 9229|  56.5k|    else {                                                             \
  |  | 9230|  56.5k|        return vis(monostate_val);                                     \
  |  | 9231|  56.5k|    }
  ------------------
 9282|  56.5k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 56.5k]
  ------------------
 9283|  56.5k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  56.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  56.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  56.5k|    }                                                                  \
  |  | 9229|  56.5k|    else {                                                             \
  |  | 9230|  56.5k|        return vis(monostate_val);                                     \
  |  | 9231|  56.5k|    }
  ------------------
 9284|       |
 9285|  56.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 56.5k]
  ------------------
 9286|  56.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  56.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  56.5k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 56.5k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 56.5k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  56.5k|            SCN_CLANG_POP
 9303|  56.5k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6279|  75.0k|        : m_format{format},
 6280|  75.0k|          m_next_arg_id{next_arg_id},
 6281|  75.0k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  75.0k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  75.0k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  75.0k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  75.0k|    {
 6287|  75.0k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|  75.0k|    {
 3075|  75.0k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|  75.0k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|  75.0k|    {
 3041|  75.0k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|  75.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|  75.0k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  75.0k|{
 7796|  75.0k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  75.0k|    handler.check_args_exhausted();
 7798|  75.0k|    return handler.get_error();
 7799|  75.0k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  75.0k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  75.0k|    auto begin = format.data();
 7764|  75.0k|    auto it = begin;
 7765|  75.0k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   135k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 75.0k, False: 59.9k]
  ------------------
 7768|  75.0k|        const auto ch = *it++;
 7769|  75.0k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 75.0k, False: 0]
  ------------------
 7770|  75.0k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  75.0k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  75.0k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 15.1k, False: 59.9k]
  ------------------
 7774|  15.1k|                return;
 7775|  15.1k|            }
 7776|  75.0k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  75.0k|    }
 7787|       |
 7788|  59.9k|    handler.on_literal_text(begin, end);
 7789|  59.9k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7692|  75.0k|{
 7693|  75.0k|    struct id_adapter {
 7694|  75.0k|        constexpr void operator()()
 7695|  75.0k|        {
 7696|  75.0k|            arg_id = handler.on_arg_id();
 7697|  75.0k|        }
 7698|  75.0k|        constexpr void operator()(std::size_t id)
 7699|  75.0k|        {
 7700|  75.0k|            arg_id = handler.on_arg_id(id);
 7701|  75.0k|        }
 7702|       |
 7703|  75.0k|        constexpr void on_error(const char* msg)
 7704|  75.0k|        {
 7705|  75.0k|            SCN_UNLIKELY_ATTR
 7706|  75.0k|            handler.on_error(msg);
 7707|  75.0k|        }
 7708|       |
 7709|  75.0k|        Handler& handler;
 7710|  75.0k|        std::size_t arg_id;
 7711|  75.0k|    };
 7712|       |
 7713|  75.0k|    ++begin;
 7714|  75.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  75.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 75.0k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  75.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 75.0k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  75.0k|    else {
 7726|  75.0k|        auto adapter = id_adapter{handler, 0};
 7727|  75.0k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  75.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  75.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 75.0k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  75.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 75.0k, False: 0]
  ------------------
 7738|  75.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  75.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  75.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.04k, False: 69.0k]
  |  |  |  Branch (865:45): [True: 0, False: 75.0k]
  |  |  |  Branch (865:45): [True: 6.04k, False: 69.0k]
  |  |  ------------------
  ------------------
 7744|  6.04k|                handler.on_error("Unknown format specifier");
 7745|  6.04k|                return begin;
 7746|  6.04k|            }
 7747|  75.0k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  75.0k|    }
 7754|  69.0k|    return begin + 1;
 7755|  75.0k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8846|   119k|    {
 8847|   119k|        return m_args.get(id);
 8848|   119k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6314|   119k|    {
 6315|   119k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   119k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 119k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   119k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   119k|        do_check_arg_id(id);
 6323|   119k|        return id;
 6324|   119k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6808|   119k|{
 6809|   119k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   119k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   119k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  75.0k|{
 7194|  75.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  75.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 75.0k, False: 0]
  |  Branch (7195:26): [True: 0, False: 75.0k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  75.0k|    handler();
 7200|  75.0k|    return begin;
 7201|  75.0k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7142|  9.06k|{
 7143|  9.06k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  9.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  9.06k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  9.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  9.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  9.06k|    unsigned long long value = 0;
 7147|  18.1k|    do {
 7148|  18.1k|        value *= 10;
 7149|  18.1k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  18.1k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 0, False: 18.1k]
  ------------------
 7151|  18.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|      0|            return -1;
 7153|      0|        }
 7154|  18.1k|        ++begin;
 7155|  18.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 18.1k, False: 0]
  |  Branch (7155:30): [True: 18.1k, False: 0]
  |  Branch (7155:47): [True: 9.06k, False: 9.06k]
  ------------------
 7156|  9.06k|    return static_cast<int>(value);
 7157|  9.06k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  75.0k|        {
 7696|  75.0k|            arg_id = handler.on_arg_id();
 7697|  75.0k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6309|   110k|    {
 6310|   110k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   110k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6298|   229k|    {
 6299|   229k|        return m_format.data();
 6300|   229k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|  75.0k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  75.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|  75.0k|    {
 7874|  75.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  75.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  75.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  75.0k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7608|  75.0k|{
 7609|  75.0k|    auto do_presentation = [&]() -> const CharT* {
 7610|  75.0k|        if (*begin == CharT{'['}) {
 7611|  75.0k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  75.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|  75.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|  75.0k|                return begin;
 7617|  75.0k|            }
 7618|  75.0k|            handler.on_character_set_string(set);
 7619|  75.0k|            return begin;
 7620|  75.0k|        }
 7621|  75.0k|        if (*begin == CharT{'/'}) {
 7622|  75.0k|            return parse_presentation_regex(begin, end, handler);
 7623|  75.0k|        }
 7624|  75.0k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  75.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|  75.0k|            handler.on_error("Invalid type specifier in format string");
 7627|  75.0k|            return begin;
 7628|  75.0k|        }
 7629|  75.0k|        handler.on_type(type);
 7630|  75.0k|        return begin;
 7631|  75.0k|    };
 7632|       |
 7633|  75.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 75.0k, False: 0]
  |  Branch (7633:28): [True: 64.8k, False: 10.2k]
  ------------------
 7634|  75.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 64.8k, False: 0]
  |  Branch (7634:36): [True: 61.8k, False: 3.02k]
  ------------------
 7635|  61.8k|        return do_presentation();
 7636|  61.8k|    }
 7637|       |
 7638|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  13.2k|    begin = parse_align(begin, end, handler);
 7644|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  13.2k|    begin = parse_width(begin, end, handler);
 7650|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  13.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 13.2k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  13.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 3.02k, False: 10.2k]
  ------------------
 7669|  3.02k|        handler.on_localized();
 7670|  3.02k|        ++begin;
 7671|  3.02k|    }
 7672|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  13.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 13.2k, False: 0]
  |  Branch (7677:25): [True: 10.2k, False: 3.02k]
  ------------------
 7678|  10.2k|        do_presentation();
 7679|  10.2k|    }
 7680|  13.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  13.2k|    return begin;
 7686|  13.2k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7257|   103k|{
 7258|   103k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 99.3k, False: 4.53k]
  |  Branch (7258:33): [True: 99.3k, False: 0]
  ------------------
 7259|   103k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 4.53k, False: 0]
  |  Branch (7259:33): [True: 4.53k, False: 0]
  ------------------
 7260|   103k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|  72.0k|    auto do_presentation = [&]() -> const CharT* {
 7610|  72.0k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 4.16k, False: 67.8k]
  ------------------
 7611|  4.16k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  4.16k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.16k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  4.16k|            handler.on_character_set_string(set);
 7619|  4.16k|            return begin;
 7620|  4.16k|        }
 7621|  67.8k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 67.8k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|  67.8k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  67.8k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  67.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.02k, False: 64.8k]
  |  |  ------------------
  ------------------
 7626|  3.02k|            handler.on_error("Invalid type specifier in format string");
 7627|  3.02k|            return begin;
 7628|  3.02k|        }
 7629|  64.8k|        handler.on_type(type);
 7630|  64.8k|        return begin;
 7631|  67.8k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  4.16k|{
 7448|  4.16k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  4.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  4.16k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  4.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  4.16k|    auto start = begin;
 7452|  4.16k|    ++begin;
 7453|       |
 7454|  4.16k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.16k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  4.16k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 4.16k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  4.16k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 4.16k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  12.5k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 12.5k, False: 0]
  ------------------
 7479|  12.5k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  12.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.5k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  12.5k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 4.16k, False: 8.33k]
  ------------------
 7484|  4.16k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  4.16k|        }
 7486|       |
 7487|  8.33k|        parse_presentation_set_literal(begin, end, handler);
 7488|  8.33k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  4.16k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7411|  8.33k|{
 7412|  8.33k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  8.33k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  8.33k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  8.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.33k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  8.33k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 8.33k, False: 0]
  |  Branch (7419:25): [True: 8.33k, False: 0]
  |  Branch (7419:49): [True: 8.33k, False: 0]
  ------------------
 7420|  8.33k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 8.33k, False: 0]
  ------------------
 7421|  8.33k|        ++begin;
 7422|       |
 7423|  8.33k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  8.33k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  8.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.33k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  8.33k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  8.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.33k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  8.33k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  8.33k|        return;
 7437|  8.33k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7387|  16.6k|{
 7388|  16.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  16.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  16.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  16.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  16.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  33.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.6k]
  |  |  |  Branch (865:45): [True: 0, False: 16.6k]
  |  |  |  Branch (865:45): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  16.6k|    const auto cp =
 7397|  16.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  16.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 16.6k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  16.6k|    begin += len;
 7404|  16.6k|    return cp;
 7405|  16.6k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  6.25k|    {
 7102|  6.25k|        m_specs.charset_string_data = fmt.data();
 7103|  6.25k|        m_specs.charset_string_size = fmt.size();
 7104|  6.25k|        on_type(presentation_type::string_set);
 7105|  6.25k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7205|   108k|{
 7206|   108k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 108k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 108k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 108k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 108k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 108k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 108k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 108k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 108k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 108k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 108k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 108k]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 108k]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 108k]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 108k]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 108k]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 108k]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 108k]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 108k]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|  99.3k|        case 's':
  ------------------
  |  Branch (7236:9): [True: 99.3k, False: 9.06k]
  ------------------
 7237|  99.3k|            return presentation_type::string;
 7238|  4.53k|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 4.53k, False: 103k]
  ------------------
 7239|  4.53k|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 108k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 108k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 108k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 108k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  4.53k|        default:
  ------------------
  |  Branch (7250:9): [True: 4.53k, False: 103k]
  ------------------
 7251|  4.53k|            return presentation_type::none;
 7252|   108k|    }
 7253|   108k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7282|  13.2k|{
 7283|  13.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  13.2k|    auto check_align = [](wchar_t ch) {
 7286|  13.2k|        switch (ch) {
 7287|  13.2k|            case L'<':
 7288|  13.2k|                return align_type::left;
 7289|  13.2k|            case L'>':
 7290|  13.2k|                return align_type::right;
 7291|  13.2k|            case L'^':
 7292|  13.2k|                return align_type::center;
 7293|  13.2k|            default:
 7294|  13.2k|                return align_type::none;
 7295|  13.2k|        }
 7296|  13.2k|    };
 7297|       |
 7298|  13.2k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  13.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  26.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.2k]
  |  |  |  Branch (865:45): [True: 0, False: 13.2k]
  |  |  |  Branch (865:45): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 7300|  13.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  13.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  13.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  13.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  13.2k|    const auto begin_before_fill = begin;
 7310|  13.2k|    begin += potential_fill_len;
 7311|       |
 7312|  13.2k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 13.2k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  13.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  13.2k|    const auto begin_after_fill = begin;
 7318|  13.2k|    ++begin;
 7319|       |
 7320|  13.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 13.2k, False: 0]
  ------------------
 7321|  13.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 13.2k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  13.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 4.16k, False: 9.06k]
  ------------------
 7326|  4.16k|            return begin_before_fill;
 7327|  4.16k|        }
 7328|  13.2k|    }
 7329|       |
 7330|  9.06k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 9.06k, False: 0]
  ------------------
 7331|  9.06k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 9.06k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  9.06k|        return begin_before_fill;
 7336|  9.06k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  9.06k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7264|  19.8k|{
 7265|  19.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  19.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|       |    if constexpr (sizeof(CharT) != 1) {
 7267|       |        return 1;
 7268|       |    }
 7269|  19.8k|    else {
 7270|  19.8k|        const auto lengths =
 7271|  19.8k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|  19.8k|            "\3\4";
 7273|  19.8k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|  19.8k|        return len;
 7275|  19.8k|    }
 7276|  19.8k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  26.4k|    auto check_align = [](wchar_t ch) {
 7286|  26.4k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 26.4k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 26.4k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 26.4k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  26.4k|            default:
  ------------------
  |  Branch (7293:13): [True: 26.4k, False: 0]
  ------------------
 7294|  26.4k|                return align_type::none;
 7295|  26.4k|        }
 7296|  26.4k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7347|  13.2k|{
 7348|  13.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  13.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  13.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  13.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 13.2k, False: 0]
  |  Branch (7350:33): [True: 6.04k, False: 7.18k]
  ------------------
 7351|  6.04k|        int width = parse_simple_int(begin, end);
 7352|  6.04k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  6.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.04k, False: 0]
  |  |  ------------------
  ------------------
 7353|  6.04k|            handler.on_width(width);
 7354|  6.04k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  6.04k|    }
 7360|  13.2k|    return begin;
 7361|  13.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7878|  3.02k|    {
 7879|  3.02k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  3.02k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 3.02k, False: 0]
  ------------------
 7881|  3.02k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 3.02k, False: 0]
  ------------------
 7882|  3.02k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 3.02k, False: 0]
  ------------------
 7883|  3.02k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 3.02k, False: 0]
  ------------------
 7884|  3.02k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  3.02k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  3.02k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9323|  69.0k|{
 9324|  69.0k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  69.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  69.0k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  69.0k|{
 9225|  69.0k|#define SCN_VISIT(Type)                                                \
 9226|  69.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  69.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  69.0k|    }                                                                  \
 9229|  69.0k|    else {                                                             \
 9230|  69.0k|        return vis(monostate_val);                                     \
 9231|  69.0k|    }
 9232|       |
 9233|  69.0k|    monostate monostate_val{};
 9234|       |
 9235|  69.0k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 69.0k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 69.0k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 69.0k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 69.0k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 69.0k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 69.0k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 69.0k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 69.0k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 69.0k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 69.0k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 69.0k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 69.0k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 69.0k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 69.0k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 69.0k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 69.0k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 69.0k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 69.0k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|  34.5k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 34.5k, False: 34.5k]
  ------------------
 9273|  34.5k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|  34.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  34.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  34.5k|    }                                                                  \
  |  | 9229|  34.5k|    else {                                                             \
  |  | 9230|  34.5k|        return vis(monostate_val);                                     \
  |  | 9231|  34.5k|    }
  ------------------
 9274|  69.0k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 34.5k, False: 34.5k]
  ------------------
 9275|  69.0k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  69.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  69.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  69.0k|    }                                                                  \
  |  | 9229|  69.0k|    else {                                                             \
  |  | 9230|  69.0k|        return vis(monostate_val);                                     \
  |  | 9231|  69.0k|    }
  ------------------
 9276|  69.0k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 69.0k]
  ------------------
 9277|  69.0k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  69.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  69.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  69.0k|    }                                                                  \
  |  | 9229|  69.0k|    else {                                                             \
  |  | 9230|  69.0k|        return vis(monostate_val);                                     \
  |  | 9231|  69.0k|    }
  ------------------
 9278|  69.0k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 69.0k]
  ------------------
 9279|  69.0k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  69.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  69.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  69.0k|    }                                                                  \
  |  | 9229|  69.0k|    else {                                                             \
  |  | 9230|  69.0k|        return vis(monostate_val);                                     \
  |  | 9231|  69.0k|    }
  ------------------
 9280|  69.0k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 69.0k]
  ------------------
 9281|  69.0k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  69.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  69.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  69.0k|    }                                                                  \
  |  | 9229|  69.0k|    else {                                                             \
  |  | 9230|  69.0k|        return vis(monostate_val);                                     \
  |  | 9231|  69.0k|    }
  ------------------
 9282|  69.0k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 69.0k]
  ------------------
 9283|  69.0k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  69.0k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  69.0k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  69.0k|    }                                                                  \
  |  | 9229|  69.0k|    else {                                                             \
  |  | 9230|  69.0k|        return vis(monostate_val);                                     \
  |  | 9231|  69.0k|    }
  ------------------
 9284|       |
 9285|  69.0k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 69.0k]
  ------------------
 9286|  69.0k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  69.0k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  69.0k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 69.0k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 69.0k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  69.0k|            SCN_CLANG_POP
 9303|  69.0k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6279|  44.1k|        : m_format{format},
 6280|  44.1k|          m_next_arg_id{next_arg_id},
 6281|  44.1k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|  44.1k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|  44.1k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|  44.1k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|  44.1k|    {
 6287|  44.1k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|  44.1k|{
 7796|  44.1k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|  44.1k|    handler.check_args_exhausted();
 7798|  44.1k|    return handler.get_error();
 7799|  44.1k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|  44.1k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|  44.1k|    auto begin = format.data();
 7764|  44.1k|    auto it = begin;
 7765|  44.1k|    const auto end = format.data() + format.size();
 7766|       |
 7767|  80.7k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 44.1k, False: 36.6k]
  ------------------
 7768|  44.1k|        const auto ch = *it++;
 7769|  44.1k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 44.1k, False: 0]
  ------------------
 7770|  44.1k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|  44.1k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|  44.1k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 7.55k, False: 36.6k]
  ------------------
 7774|  7.55k|                return;
 7775|  7.55k|            }
 7776|  44.1k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|  44.1k|    }
 7787|       |
 7788|  36.6k|    handler.on_literal_text(begin, end);
 7789|  36.6k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 8985|  36.6k|    {
 8986|  36.6k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  36.6k|    static_cast<    \
  |  |  935|  36.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|  36.6k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7692|  44.1k|{
 7693|  44.1k|    struct id_adapter {
 7694|  44.1k|        constexpr void operator()()
 7695|  44.1k|        {
 7696|  44.1k|            arg_id = handler.on_arg_id();
 7697|  44.1k|        }
 7698|  44.1k|        constexpr void operator()(std::size_t id)
 7699|  44.1k|        {
 7700|  44.1k|            arg_id = handler.on_arg_id(id);
 7701|  44.1k|        }
 7702|       |
 7703|  44.1k|        constexpr void on_error(const char* msg)
 7704|  44.1k|        {
 7705|  44.1k|            SCN_UNLIKELY_ATTR
 7706|  44.1k|            handler.on_error(msg);
 7707|  44.1k|        }
 7708|       |
 7709|  44.1k|        Handler& handler;
 7710|  44.1k|        std::size_t arg_id;
 7711|  44.1k|    };
 7712|       |
 7713|  44.1k|    ++begin;
 7714|  44.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44.1k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|  44.1k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 44.1k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|  44.1k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 44.1k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|  44.1k|    else {
 7726|  44.1k|        auto adapter = id_adapter{handler, 0};
 7727|  44.1k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|  44.1k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44.1k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|  44.1k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 44.1k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|  44.1k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 44.1k, False: 0]
  ------------------
 7738|  44.1k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44.1k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|  44.1k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|  44.1k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  88.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.02k, False: 41.1k]
  |  |  |  Branch (865:45): [True: 0, False: 44.1k]
  |  |  |  Branch (865:45): [True: 3.02k, False: 41.1k]
  |  |  ------------------
  ------------------
 7744|  3.02k|                handler.on_error("Unknown format specifier");
 7745|  3.02k|                return begin;
 7746|  3.02k|            }
 7747|  44.1k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|  44.1k|    }
 7754|  41.1k|    return begin + 1;
 7755|  44.1k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|  44.1k|{
 7194|  44.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  44.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|  44.1k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 44.1k, False: 0]
  |  Branch (7195:26): [True: 0, False: 44.1k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|  44.1k|    handler();
 7200|  44.1k|    return begin;
 7201|  44.1k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|  44.1k|        {
 7696|  44.1k|            arg_id = handler.on_arg_id();
 7697|  44.1k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|  44.1k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|  44.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|  44.1k|    {
 7874|  44.1k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|  44.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  44.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|  44.1k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7608|  44.1k|{
 7609|  44.1k|    auto do_presentation = [&]() -> const CharT* {
 7610|  44.1k|        if (*begin == CharT{'['}) {
 7611|  44.1k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  44.1k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|  44.1k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|  44.1k|                return begin;
 7617|  44.1k|            }
 7618|  44.1k|            handler.on_character_set_string(set);
 7619|  44.1k|            return begin;
 7620|  44.1k|        }
 7621|  44.1k|        if (*begin == CharT{'/'}) {
 7622|  44.1k|            return parse_presentation_regex(begin, end, handler);
 7623|  44.1k|        }
 7624|  44.1k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  44.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|  44.1k|            handler.on_error("Invalid type specifier in format string");
 7627|  44.1k|            return begin;
 7628|  44.1k|        }
 7629|  44.1k|        handler.on_type(type);
 7630|  44.1k|        return begin;
 7631|  44.1k|    };
 7632|       |
 7633|  44.1k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 44.1k, False: 0]
  |  Branch (7633:28): [True: 39.0k, False: 5.10k]
  ------------------
 7634|  44.1k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 39.0k, False: 0]
  |  Branch (7634:36): [True: 37.5k, False: 1.51k]
  ------------------
 7635|  37.5k|        return do_presentation();
 7636|  37.5k|    }
 7637|       |
 7638|  6.61k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.61k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  6.61k|    begin = parse_align(begin, end, handler);
 7644|  6.61k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.61k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  6.61k|    begin = parse_width(begin, end, handler);
 7650|  6.61k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.61k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  6.61k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 6.61k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  6.61k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 1.51k, False: 5.10k]
  ------------------
 7669|  1.51k|        handler.on_localized();
 7670|  1.51k|        ++begin;
 7671|  1.51k|    }
 7672|  6.61k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.61k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  6.61k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 6.61k, False: 0]
  |  Branch (7677:25): [True: 5.10k, False: 1.51k]
  ------------------
 7678|  5.10k|        do_presentation();
 7679|  5.10k|    }
 7680|  6.61k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.61k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  6.61k|    return begin;
 7686|  6.61k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|  42.6k|    auto do_presentation = [&]() -> const CharT* {
 7610|  42.6k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 2.08k, False: 40.5k]
  ------------------
 7611|  2.08k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  2.08k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.08k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  2.08k|            handler.on_character_set_string(set);
 7619|  2.08k|            return begin;
 7620|  2.08k|        }
 7621|  40.5k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 40.5k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|  40.5k|        presentation_type type = parse_presentation_type(*begin++);
 7625|  40.5k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|  40.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.51k, False: 39.0k]
  |  |  ------------------
  ------------------
 7626|  1.51k|            handler.on_error("Invalid type specifier in format string");
 7627|  1.51k|            return begin;
 7628|  1.51k|        }
 7629|  39.0k|        handler.on_type(type);
 7630|  39.0k|        return begin;
 7631|  40.5k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7447|  2.08k|{
 7448|  2.08k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  2.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  2.08k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  2.08k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  2.08k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  2.08k|    auto start = begin;
 7452|  2.08k|    ++begin;
 7453|       |
 7454|  2.08k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 2.08k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  2.08k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 2.08k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  2.08k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 2.08k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  6.25k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 6.25k, False: 0]
  ------------------
 7479|  6.25k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  6.25k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.25k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  6.25k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 2.08k, False: 4.16k]
  ------------------
 7484|  2.08k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  2.08k|        }
 7486|       |
 7487|  4.16k|        parse_presentation_set_literal(begin, end, handler);
 7488|  4.16k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  2.08k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7411|  4.16k|{
 7412|  4.16k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  4.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  4.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  4.16k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  4.16k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.16k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  4.16k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 4.16k, False: 0]
  |  Branch (7419:25): [True: 4.16k, False: 0]
  |  Branch (7419:49): [True: 4.16k, False: 0]
  ------------------
 7420|  4.16k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 4.16k, False: 0]
  ------------------
 7421|  4.16k|        ++begin;
 7422|       |
 7423|  4.16k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  4.16k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.16k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  4.16k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 4.16k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  4.16k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  4.16k|        return;
 7437|  4.16k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7387|  8.33k|{
 7388|  8.33k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  8.33k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  8.33k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  8.33k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  8.33k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  16.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.33k]
  |  |  |  Branch (865:45): [True: 0, False: 8.33k]
  |  |  |  Branch (865:45): [True: 0, False: 8.33k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  8.33k|    const auto cp =
 7397|  8.33k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  8.33k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  8.33k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 8.33k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  8.33k|    begin += len;
 7404|  8.33k|    return cp;
 7405|  8.33k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7282|  6.61k|{
 7283|  6.61k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  6.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  6.61k|    auto check_align = [](wchar_t ch) {
 7286|  6.61k|        switch (ch) {
 7287|  6.61k|            case L'<':
 7288|  6.61k|                return align_type::left;
 7289|  6.61k|            case L'>':
 7290|  6.61k|                return align_type::right;
 7291|  6.61k|            case L'^':
 7292|  6.61k|                return align_type::center;
 7293|  6.61k|            default:
 7294|  6.61k|                return align_type::none;
 7295|  6.61k|        }
 7296|  6.61k|    };
 7297|       |
 7298|  6.61k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  6.61k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  13.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.61k]
  |  |  |  Branch (865:45): [True: 0, False: 6.61k]
  |  |  |  Branch (865:45): [True: 0, False: 6.61k]
  |  |  ------------------
  ------------------
 7300|  6.61k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  6.61k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  6.61k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  6.61k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  6.61k|    const auto begin_before_fill = begin;
 7310|  6.61k|    begin += potential_fill_len;
 7311|       |
 7312|  6.61k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 6.61k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  6.61k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  6.61k|    const auto begin_after_fill = begin;
 7318|  6.61k|    ++begin;
 7319|       |
 7320|  6.61k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 6.61k, False: 0]
  ------------------
 7321|  6.61k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  6.61k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.61k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  6.61k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 2.08k, False: 4.53k]
  ------------------
 7326|  2.08k|            return begin_before_fill;
 7327|  2.08k|        }
 7328|  6.61k|    }
 7329|       |
 7330|  4.53k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 4.53k, False: 0]
  ------------------
 7331|  4.53k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 4.53k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  4.53k|        return begin_before_fill;
 7336|  4.53k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  4.53k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|  13.2k|    auto check_align = [](wchar_t ch) {
 7286|  13.2k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 13.2k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 13.2k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 13.2k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  13.2k|            default:
  ------------------
  |  Branch (7293:13): [True: 13.2k, False: 0]
  ------------------
 7294|  13.2k|                return align_type::none;
 7295|  13.2k|        }
 7296|  13.2k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7347|  6.61k|{
 7348|  6.61k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  6.61k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.61k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  6.61k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 6.61k, False: 0]
  |  Branch (7350:33): [True: 3.02k, False: 3.59k]
  ------------------
 7351|  3.02k|        int width = parse_simple_int(begin, end);
 7352|  3.02k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  3.02k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 3.02k, False: 0]
  |  |  ------------------
  ------------------
 7353|  3.02k|            handler.on_width(width);
 7354|  3.02k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  3.02k|    }
 7360|  6.61k|    return begin;
 7361|  6.61k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7878|  1.51k|    {
 7879|  1.51k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  1.51k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 1.51k, False: 0]
  ------------------
 7881|  1.51k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 1.51k, False: 0]
  ------------------
 7882|  1.51k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 1.51k, False: 0]
  ------------------
 7883|  1.51k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 1.51k, False: 0]
  ------------------
 7884|  1.51k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  1.51k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  1.51k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|  41.1k|{
 9324|  41.1k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|  41.1k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|  41.1k|{
 9225|  41.1k|#define SCN_VISIT(Type)                                                \
 9226|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|  41.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|  41.1k|    }                                                                  \
 9229|  41.1k|    else {                                                             \
 9230|  41.1k|        return vis(monostate_val);                                     \
 9231|  41.1k|    }
 9232|       |
 9233|  41.1k|    monostate monostate_val{};
 9234|       |
 9235|  41.1k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 41.1k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 41.1k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 41.1k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 41.1k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 41.1k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 41.1k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 41.1k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 41.1k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 41.1k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 41.1k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 41.1k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 41.1k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 41.1k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 41.1k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 41.1k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 41.1k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 41.1k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 41.1k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 41.1k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|  41.1k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 41.1k, False: 0]
  ------------------
 9275|  41.1k|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  41.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  41.1k|    }                                                                  \
  |  | 9229|  41.1k|    else {                                                             \
  |  | 9230|  41.1k|        return vis(monostate_val);                                     \
  |  | 9231|  41.1k|    }
  ------------------
 9276|  41.1k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 41.1k]
  ------------------
 9277|  41.1k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  41.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  41.1k|    }                                                                  \
  |  | 9229|  41.1k|    else {                                                             \
  |  | 9230|  41.1k|        return vis(monostate_val);                                     \
  |  | 9231|  41.1k|    }
  ------------------
 9278|  41.1k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 0, False: 41.1k]
  ------------------
 9279|  41.1k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  41.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  41.1k|    }                                                                  \
  |  | 9229|  41.1k|    else {                                                             \
  |  | 9230|  41.1k|        return vis(monostate_val);                                     \
  |  | 9231|  41.1k|    }
  ------------------
 9280|  41.1k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 41.1k]
  ------------------
 9281|  41.1k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  41.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  41.1k|    }                                                                  \
  |  | 9229|  41.1k|    else {                                                             \
  |  | 9230|  41.1k|        return vis(monostate_val);                                     \
  |  | 9231|  41.1k|    }
  ------------------
 9282|  41.1k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 41.1k]
  ------------------
 9283|  41.1k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|  41.1k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|  41.1k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|  41.1k|    }                                                                  \
  |  | 9229|  41.1k|    else {                                                             \
  |  | 9230|  41.1k|        return vis(monostate_val);                                     \
  |  | 9231|  41.1k|    }
  ------------------
 9284|       |
 9285|  41.1k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 41.1k]
  ------------------
 9286|  41.1k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|  41.1k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|  41.1k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 41.1k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 41.1k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|  41.1k|            SCN_CLANG_POP
 9303|  41.1k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4351|  9.81k|    {
 4352|  9.81k|        return sync(0);
 4353|  9.81k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6181|  1.50M|    {
 6182|  1.50M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 6183|      0|            return max_size();
 6184|      0|        }
 6185|       |
 6186|  1.50M|        return static_cast<std::size_t>(m_desc &
 6187|  1.50M|                                        ((1 << detail::packed_arg_bits) - 1));
 6188|  1.50M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6207|  3.00M|    {
 6208|  3.00M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6209|  3.00M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6149|  1.50M|    {
 6150|  1.50M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  865|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 6151|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  864|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6152|      0|                return m_args[id];
 6153|      0|            }
 6154|      0|            return {};
 6155|      0|        }
 6156|       |
 6157|  1.50M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  865|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 6158|      0|            return {};
 6159|      0|        }
 6160|       |
 6161|  1.50M|        const auto t = type(id);
 6162|  1.50M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  865|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 1.50M]
  |  |  ------------------
  ------------------
 6163|      0|            return {};
 6164|      0|        }
 6165|       |
 6166|  1.50M|        basic_scan_arg<Context> arg;
 6167|  1.50M|        arg.m_type = t;
 6168|  1.50M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6168:13): [True: 1.50M, False: 0]
  ------------------
 6169|  1.50M|            arg.m_value.ref_value = m_builtin_values[id];
 6170|  1.50M|        }
 6171|      0|        else {
 6172|      0|            arg.m_value = m_values[id];
 6173|      0|        }
 6174|  1.50M|        return arg;
 6175|  1.50M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6216|  1.50M|    {
 6217|       |        // First (0th) index is size, types start after that
 6218|  1.50M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6219|  1.50M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6220|  1.50M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6221|  1.50M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6211|  1.50M|    {
 6212|  1.50M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6213|  1.50M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 5965|  2.61M|    {
 5966|  2.61M|        return m_type != detail::arg_type::none_type;
 5967|  2.61M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   732k|{
 9324|   732k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   732k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   732k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   732k|{
 9225|   732k|#define SCN_VISIT(Type)                                                \
 9226|   732k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   732k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   732k|    }                                                                  \
 9229|   732k|    else {                                                             \
 9230|   732k|        return vis(monostate_val);                                     \
 9231|   732k|    }
 9232|       |
 9233|   732k|    monostate monostate_val{};
 9234|       |
 9235|   732k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 732k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 732k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 732k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 732k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 732k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 732k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 732k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 732k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 732k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 732k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 732k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 732k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 732k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 732k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 732k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 732k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 732k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 732k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 732k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 732k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|   366k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 366k, False: 366k]
  ------------------
 9277|   366k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   366k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   366k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   366k|    }                                                                  \
  |  | 9229|   366k|    else {                                                             \
  |  | 9230|   366k|        return vis(monostate_val);                                     \
  |  | 9231|   366k|    }
  ------------------
 9278|   732k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 366k, False: 366k]
  ------------------
 9279|   732k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   732k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   732k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   732k|    }                                                                  \
  |  | 9229|   732k|    else {                                                             \
  |  | 9230|   732k|        return vis(monostate_val);                                     \
  |  | 9231|   732k|    }
  ------------------
 9280|   732k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 732k]
  ------------------
 9281|   732k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   732k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   732k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   732k|    }                                                                  \
  |  | 9229|   732k|    else {                                                             \
  |  | 9230|   732k|        return vis(monostate_val);                                     \
  |  | 9231|   732k|    }
  ------------------
 9282|   732k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 732k]
  ------------------
 9283|   732k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   732k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   732k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   732k|    }                                                                  \
  |  | 9229|   732k|    else {                                                             \
  |  | 9230|   732k|        return vis(monostate_val);                                     \
  |  | 9231|   732k|    }
  ------------------
 9284|       |
 9285|   732k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 732k]
  ------------------
 9286|   732k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   732k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   732k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 732k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 732k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   732k|            SCN_CLANG_POP
 9303|   732k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6010|  3.38M|{
 6011|  3.38M|    return arg.m_type;
 6012|  3.38M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6022|  1.84M|{
 6023|  1.84M|    return arg.m_value;
 6024|  1.84M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 8947|   256k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  934|   256k|    static_cast<    \
  |  |  935|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|   256k|    {
 8949|   256k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6279|   512k|        : m_format{format},
 6280|   512k|          m_next_arg_id{next_arg_id},
 6281|   512k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   512k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   512k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   512k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   512k|    {
 6287|   512k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3074|   512k|    {
 3075|   512k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3076|   512k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3040|   512k|    {
 3041|   512k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  936|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3042|   512k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   512k|{
 7796|   512k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   512k|    handler.check_args_exhausted();
 7798|   512k|    return handler.get_error();
 7799|   512k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   512k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   512k|    auto begin = format.data();
 7764|   512k|    auto it = begin;
 7765|   512k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   994k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 512k, False: 482k]
  ------------------
 7768|   512k|        const auto ch = *it++;
 7769|   512k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 512k, False: 0]
  ------------------
 7770|   512k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   512k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   512k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 30.2k, False: 482k]
  ------------------
 7774|  30.2k|                return;
 7775|  30.2k|            }
 7776|   512k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   512k|    }
 7787|       |
 7788|   482k|    handler.on_literal_text(begin, end);
 7789|   482k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7692|   512k|{
 7693|   512k|    struct id_adapter {
 7694|   512k|        constexpr void operator()()
 7695|   512k|        {
 7696|   512k|            arg_id = handler.on_arg_id();
 7697|   512k|        }
 7698|   512k|        constexpr void operator()(std::size_t id)
 7699|   512k|        {
 7700|   512k|            arg_id = handler.on_arg_id(id);
 7701|   512k|        }
 7702|       |
 7703|   512k|        constexpr void on_error(const char* msg)
 7704|   512k|        {
 7705|   512k|            SCN_UNLIKELY_ATTR
 7706|   512k|            handler.on_error(msg);
 7707|   512k|        }
 7708|       |
 7709|   512k|        Handler& handler;
 7710|   512k|        std::size_t arg_id;
 7711|   512k|    };
 7712|       |
 7713|   512k|    ++begin;
 7714|   512k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 512k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   512k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 512k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   512k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 512k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   512k|    else {
 7726|   512k|        auto adapter = id_adapter{handler, 0};
 7727|   512k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   512k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 512k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   512k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 512k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   512k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 512k, False: 0]
  ------------------
 7738|   512k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 512k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   512k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   512k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|  1.02M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 500k]
  |  |  |  Branch (865:45): [True: 0, False: 512k]
  |  |  |  Branch (865:45): [True: 12.0k, False: 500k]
  |  |  ------------------
  ------------------
 7744|  12.0k|                handler.on_error("Unknown format specifier");
 7745|  12.0k|                return begin;
 7746|  12.0k|            }
 7747|   512k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   512k|    }
 7754|   500k|    return begin + 1;
 7755|   512k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8846|   768k|    {
 8847|   768k|        return m_args.get(id);
 8848|   768k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6314|   768k|    {
 6315|   768k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  865|   768k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 768k]
  |  |  ------------------
  ------------------
 6316|      0|            on_error(
 6317|      0|                "Cannot switch from manual to automatic argument indexing");
 6318|      0|            return 0;
 6319|      0|        }
 6320|       |
 6321|   768k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6322|   768k|        do_check_arg_id(id);
 6323|   768k|        return id;
 6324|   768k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6808|   768k|{
 6809|   768k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6809:9): [Folded - Ignored]
  ------------------
 6810|   768k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  235|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6810:10): [Folded - Ignored]
  |  Branch (6810:22): [Folded - Ignored]
  ------------------
 6811|       |        // The cast below will cause an error on gcc pre-12
 6812|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6813|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6813:13): [True: 0, False: 0]
  ------------------
 6814|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6815|      0|            SCN_UNLIKELY_ATTR
 6816|      0|            on_error("Argument not found");
 6817|      0|        }
 6818|      0|    }
 6819|   768k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   512k|{
 7194|   512k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   512k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 512k, False: 0]
  |  Branch (7195:26): [True: 0, False: 512k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   512k|    handler();
 7200|   512k|    return begin;
 7201|   512k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7142|  18.1k|{
 7143|  18.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7144|  18.1k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  930|  18.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7145|       |
 7146|  18.1k|    unsigned long long value = 0;
 7147|  36.2k|    do {
 7148|  36.2k|        value *= 10;
 7149|  36.2k|        value += static_cast<unsigned long long>(*begin - '0');
 7150|  36.2k|        if (value >
  ------------------
  |  Branch (7150:13): [True: 0, False: 36.2k]
  ------------------
 7151|  36.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7152|      0|            return -1;
 7153|      0|        }
 7154|  36.2k|        ++begin;
 7155|  36.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7155:14): [True: 36.2k, False: 0]
  |  Branch (7155:30): [True: 36.2k, False: 0]
  |  Branch (7155:47): [True: 18.1k, False: 18.1k]
  ------------------
 7156|  18.1k|    return static_cast<int>(value);
 7157|  18.1k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   512k|        {
 7696|   512k|            arg_id = handler.on_arg_id();
 7697|   512k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6309|   750k|    {
 6310|   750k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6311|   750k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4690|   622k|{
 4691|   622k|    if (is_contiguous()) {
  ------------------
  |  Branch (4691:9): [True: 0, False: 622k]
  ------------------
 4692|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4693|      0|                                ranges::default_sentinel};
 4694|      0|    }
 4695|   622k|    return ranges::subrange{forward_iterator{this, 0},
 4696|   622k|                            ranges::default_sentinel};
 4697|   622k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4453|   622k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4454|   622k|    {
 4455|   622k|        SCN_EXPECT(parent);
  ------------------
  |  |  930|   622k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   622k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4456|   622k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  930|   622k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   622k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4457|   622k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6298|  1.51M|    {
 6299|  1.51M|        return m_format.data();
 6300|  1.51M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7872|   512k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   512k|    {
 7874|   512k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   512k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   512k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   512k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7608|   512k|{
 7609|   512k|    auto do_presentation = [&]() -> const CharT* {
 7610|   512k|        if (*begin == CharT{'['}) {
 7611|   512k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   512k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   512k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   512k|                return begin;
 7617|   512k|            }
 7618|   512k|            handler.on_character_set_string(set);
 7619|   512k|            return begin;
 7620|   512k|        }
 7621|   512k|        if (*begin == CharT{'/'}) {
 7622|   512k|            return parse_presentation_regex(begin, end, handler);
 7623|   512k|        }
 7624|   512k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   512k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   512k|            handler.on_error("Invalid type specifier in format string");
 7627|   512k|            return begin;
 7628|   512k|        }
 7629|   512k|        handler.on_type(type);
 7630|   512k|        return begin;
 7631|   512k|    };
 7632|       |
 7633|   512k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 512k, False: 0]
  |  Branch (7633:28): [True: 494k, False: 18.3k]
  ------------------
 7634|   512k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 494k, False: 0]
  |  Branch (7634:36): [True: 488k, False: 6.04k]
  ------------------
 7635|   488k|        return do_presentation();
 7636|   488k|    }
 7637|       |
 7638|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  24.3k|    begin = parse_align(begin, end, handler);
 7644|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  24.3k|    begin = parse_width(begin, end, handler);
 7650|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  24.3k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 24.3k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  24.3k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 6.04k, False: 18.3k]
  ------------------
 7669|  6.04k|        handler.on_localized();
 7670|  6.04k|        ++begin;
 7671|  6.04k|    }
 7672|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  24.3k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 24.3k, False: 0]
  |  Branch (7677:25): [True: 18.3k, False: 6.04k]
  ------------------
 7678|  18.3k|        do_presentation();
 7679|  18.3k|    }
 7680|  24.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  24.3k|    return begin;
 7686|  24.3k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7257|   741k|{
 7258|   741k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7258:13): [True: 732k, False: 9.06k]
  |  Branch (7258:33): [True: 732k, False: 0]
  ------------------
 7259|   741k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7259:13): [True: 9.06k, False: 0]
  |  Branch (7259:33): [True: 9.06k, False: 0]
  ------------------
 7260|   741k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7609|   506k|    auto do_presentation = [&]() -> const CharT* {
 7610|   506k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 6.24k, False: 500k]
  ------------------
 7611|  6.24k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  6.24k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  6.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.24k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  6.24k|            handler.on_character_set_string(set);
 7619|  6.24k|            return begin;
 7620|  6.24k|        }
 7621|   500k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 500k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   500k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   500k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.04k, False: 494k]
  |  |  ------------------
  ------------------
 7626|  6.04k|            handler.on_error("Invalid type specifier in format string");
 7627|  6.04k|            return begin;
 7628|  6.04k|        }
 7629|   494k|        handler.on_type(type);
 7630|   494k|        return begin;
 7631|   500k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7447|  6.24k|{
 7448|  6.24k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  6.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  6.24k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  6.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  6.24k|    auto start = begin;
 7452|  6.24k|    ++begin;
 7453|       |
 7454|  6.24k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  6.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.24k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  6.24k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 6.24k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  6.24k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 6.24k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  18.7k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 18.7k, False: 0]
  ------------------
 7479|  18.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  18.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 18.7k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  18.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 6.24k, False: 12.4k]
  ------------------
 7484|  6.24k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  6.24k|        }
 7486|       |
 7487|  12.4k|        parse_presentation_set_literal(begin, end, handler);
 7488|  12.4k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  6.24k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7411|  12.4k|{
 7412|  12.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  12.4k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  12.4k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.4k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  12.4k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 12.4k, False: 0]
  |  Branch (7419:25): [True: 12.4k, False: 0]
  |  Branch (7419:49): [True: 12.4k, False: 0]
  ------------------
 7420|  12.4k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 12.4k, False: 0]
  ------------------
 7421|  12.4k|        ++begin;
 7422|       |
 7423|  12.4k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  12.4k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.4k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  12.4k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.4k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  12.4k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  12.4k|        return;
 7437|  12.4k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7387|  24.9k|{
 7388|  24.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  24.9k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  24.9k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  49.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.9k]
  |  |  |  Branch (865:45): [True: 0, False: 24.9k]
  |  |  |  Branch (865:45): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  24.9k|    const auto cp =
 7397|  24.9k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  24.9k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.9k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  24.9k|    begin += len;
 7404|  24.9k|    return cp;
 7405|  24.9k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7101|  9.36k|    {
 7102|  9.36k|        m_specs.charset_string_data = fmt.data();
 7103|  9.36k|        m_specs.charset_string_size = fmt.size();
 7104|  9.36k|        on_type(presentation_type::string_set);
 7105|  9.36k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7205|   750k|{
 7206|   750k|    switch (type) {
 7207|      0|        case 'b':
  ------------------
  |  Branch (7207:9): [True: 0, False: 750k]
  ------------------
 7208|      0|        case 'B':
  ------------------
  |  Branch (7208:9): [True: 0, False: 750k]
  ------------------
 7209|      0|            return presentation_type::int_binary;
 7210|      0|        case 'd':
  ------------------
  |  Branch (7210:9): [True: 0, False: 750k]
  ------------------
 7211|      0|            return presentation_type::int_decimal;
 7212|      0|        case 'i':
  ------------------
  |  Branch (7212:9): [True: 0, False: 750k]
  ------------------
 7213|      0|            return presentation_type::int_generic;
 7214|      0|        case 'u':
  ------------------
  |  Branch (7214:9): [True: 0, False: 750k]
  ------------------
 7215|      0|            return presentation_type::int_unsigned_decimal;
 7216|      0|        case 'o':
  ------------------
  |  Branch (7216:9): [True: 0, False: 750k]
  ------------------
 7217|      0|            return presentation_type::int_octal;
 7218|      0|        case 'x':
  ------------------
  |  Branch (7218:9): [True: 0, False: 750k]
  ------------------
 7219|      0|        case 'X':
  ------------------
  |  Branch (7219:9): [True: 0, False: 750k]
  ------------------
 7220|      0|            return presentation_type::int_hex;
 7221|      0|        case 'r':
  ------------------
  |  Branch (7221:9): [True: 0, False: 750k]
  ------------------
 7222|      0|        case 'R':
  ------------------
  |  Branch (7222:9): [True: 0, False: 750k]
  ------------------
 7223|      0|            return presentation_type::int_arbitrary_base;
 7224|      0|        case 'a':
  ------------------
  |  Branch (7224:9): [True: 0, False: 750k]
  ------------------
 7225|      0|        case 'A':
  ------------------
  |  Branch (7225:9): [True: 0, False: 750k]
  ------------------
 7226|      0|            return presentation_type::float_hex;
 7227|      0|        case 'e':
  ------------------
  |  Branch (7227:9): [True: 0, False: 750k]
  ------------------
 7228|      0|        case 'E':
  ------------------
  |  Branch (7228:9): [True: 0, False: 750k]
  ------------------
 7229|      0|            return presentation_type::float_scientific;
 7230|      0|        case 'f':
  ------------------
  |  Branch (7230:9): [True: 0, False: 750k]
  ------------------
 7231|      0|        case 'F':
  ------------------
  |  Branch (7231:9): [True: 0, False: 750k]
  ------------------
 7232|      0|            return presentation_type::float_fixed;
 7233|      0|        case 'g':
  ------------------
  |  Branch (7233:9): [True: 0, False: 750k]
  ------------------
 7234|      0|        case 'G':
  ------------------
  |  Branch (7234:9): [True: 0, False: 750k]
  ------------------
 7235|      0|            return presentation_type::float_general;
 7236|   732k|        case 's':
  ------------------
  |  Branch (7236:9): [True: 732k, False: 18.1k]
  ------------------
 7237|   732k|            return presentation_type::string;
 7238|  9.06k|        case 'c':
  ------------------
  |  Branch (7238:9): [True: 9.06k, False: 741k]
  ------------------
 7239|  9.06k|            return presentation_type::character;
 7240|      0|        case '?':
  ------------------
  |  Branch (7240:9): [True: 0, False: 750k]
  ------------------
 7241|      0|            return presentation_type::escaped_character;
 7242|      0|        case 'p':
  ------------------
  |  Branch (7242:9): [True: 0, False: 750k]
  ------------------
 7243|      0|            return presentation_type::pointer;
 7244|      0|        case '[':
  ------------------
  |  Branch (7244:9): [True: 0, False: 750k]
  ------------------
 7245|      0|        case '/':
  ------------------
  |  Branch (7245:9): [True: 0, False: 750k]
  ------------------
 7246|       |            // Should be handled by parse_presentation_set and
 7247|       |            // parse_presentation_regex
 7248|      0|            SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7249|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7250|  9.06k|        default:
  ------------------
  |  Branch (7250:9): [True: 9.06k, False: 741k]
  ------------------
 7251|  9.06k|            return presentation_type::none;
 7252|   750k|    }
 7253|   750k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7282|  24.3k|{
 7283|  24.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  24.3k|    auto check_align = [](wchar_t ch) {
 7286|  24.3k|        switch (ch) {
 7287|  24.3k|            case L'<':
 7288|  24.3k|                return align_type::left;
 7289|  24.3k|            case L'>':
 7290|  24.3k|                return align_type::right;
 7291|  24.3k|            case L'^':
 7292|  24.3k|                return align_type::center;
 7293|  24.3k|            default:
 7294|  24.3k|                return align_type::none;
 7295|  24.3k|        }
 7296|  24.3k|    };
 7297|       |
 7298|  24.3k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  24.3k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  48.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.3k]
  |  |  |  Branch (865:45): [True: 0, False: 24.3k]
  |  |  |  Branch (865:45): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 7300|  24.3k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  24.3k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  24.3k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  24.3k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  24.3k|    const auto begin_before_fill = begin;
 7310|  24.3k|    begin += potential_fill_len;
 7311|       |
 7312|  24.3k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 24.3k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  24.3k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  24.3k|    const auto begin_after_fill = begin;
 7318|  24.3k|    ++begin;
 7319|       |
 7320|  24.3k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 24.3k, False: 0]
  ------------------
 7321|  24.3k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 24.3k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  24.3k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 6.24k, False: 18.1k]
  ------------------
 7326|  6.24k|            return begin_before_fill;
 7327|  6.24k|        }
 7328|  24.3k|    }
 7329|       |
 7330|  18.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 18.1k, False: 0]
  ------------------
 7331|  18.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 18.1k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  18.1k|        return begin_before_fill;
 7336|  18.1k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  18.1k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7264|  36.5k|{
 7265|  36.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  36.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  36.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7266|  36.5k|    if constexpr (sizeof(CharT) != 1) {
 7267|  36.5k|        return 1;
 7268|       |    }
 7269|       |    else {
 7270|       |        const auto lengths =
 7271|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7272|       |            "\3\4";
 7273|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7274|       |        return len;
 7275|       |    }
 7276|  36.5k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7285|  48.7k|    auto check_align = [](wchar_t ch) {
 7286|  48.7k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 48.7k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 48.7k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 48.7k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  48.7k|            default:
  ------------------
  |  Branch (7293:13): [True: 48.7k, False: 0]
  ------------------
 7294|  48.7k|                return align_type::none;
 7295|  48.7k|        }
 7296|  48.7k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7347|  24.3k|{
 7348|  24.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  24.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  24.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  24.3k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 24.3k, False: 0]
  |  Branch (7350:33): [True: 12.0k, False: 12.2k]
  ------------------
 7351|  12.0k|        int width = parse_simple_int(begin, end);
 7352|  12.0k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  12.0k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 12.0k, False: 0]
  |  |  ------------------
  ------------------
 7353|  12.0k|            handler.on_width(width);
 7354|  12.0k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  12.0k|    }
 7360|  24.3k|    return begin;
 7361|  24.3k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7878|  6.04k|    {
 7879|  6.04k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  6.04k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 6.04k, False: 0]
  ------------------
 7881|  6.04k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 6.04k, False: 0]
  ------------------
 7882|  6.04k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 6.04k, False: 0]
  ------------------
 7883|  6.04k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 6.04k, False: 0]
  ------------------
 7884|  6.04k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  6.04k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  6.04k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9323|   500k|{
 9324|   500k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   500k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   500k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   500k|{
 9225|   500k|#define SCN_VISIT(Type)                                                \
 9226|   500k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   500k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   500k|    }                                                                  \
 9229|   500k|    else {                                                             \
 9230|   500k|        return vis(monostate_val);                                     \
 9231|   500k|    }
 9232|       |
 9233|   500k|    monostate monostate_val{};
 9234|       |
 9235|   500k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 500k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 500k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 500k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 500k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 500k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 500k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 500k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 500k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 500k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 500k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 500k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 500k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 500k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 500k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 500k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 500k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 500k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 500k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 500k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 500k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|   250k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 250k, False: 250k]
  ------------------
 9277|   250k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|   250k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   250k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   250k|    }                                                                  \
  |  | 9229|   250k|    else {                                                             \
  |  | 9230|   250k|        return vis(monostate_val);                                     \
  |  | 9231|   250k|    }
  ------------------
 9278|   500k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 250k, False: 250k]
  ------------------
 9279|   500k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   500k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   500k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   500k|    }                                                                  \
  |  | 9229|   500k|    else {                                                             \
  |  | 9230|   500k|        return vis(monostate_val);                                     \
  |  | 9231|   500k|    }
  ------------------
 9280|   500k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 500k]
  ------------------
 9281|   500k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   500k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   500k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   500k|    }                                                                  \
  |  | 9229|   500k|    else {                                                             \
  |  | 9230|   500k|        return vis(monostate_val);                                     \
  |  | 9231|   500k|    }
  ------------------
 9282|   500k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 500k]
  ------------------
 9283|   500k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   500k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   500k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   500k|    }                                                                  \
  |  | 9229|   500k|    else {                                                             \
  |  | 9230|   500k|        return vis(monostate_val);                                     \
  |  | 9231|   500k|    }
  ------------------
 9284|       |
 9285|   500k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 500k]
  ------------------
 9286|   500k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   500k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   500k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 500k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 500k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   500k|            SCN_CLANG_POP
 9303|   500k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9323|   366k|{
 9324|   366k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   366k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   366k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   366k|{
 9225|   366k|#define SCN_VISIT(Type)                                                \
 9226|   366k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   366k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   366k|    }                                                                  \
 9229|   366k|    else {                                                             \
 9230|   366k|        return vis(monostate_val);                                     \
 9231|   366k|    }
 9232|       |
 9233|   366k|    monostate monostate_val{};
 9234|       |
 9235|   366k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 366k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 366k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 366k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 366k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 366k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 366k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 366k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 366k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 366k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 366k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 366k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 366k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 366k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 366k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 366k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 366k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 366k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 366k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 366k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 366k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 366k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|   366k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 366k, False: 0]
  ------------------
 9279|   366k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   366k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   366k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   366k|    }                                                                  \
  |  | 9229|   366k|    else {                                                             \
  |  | 9230|   366k|        return vis(monostate_val);                                     \
  |  | 9231|   366k|    }
  ------------------
 9280|   366k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 366k]
  ------------------
 9281|   366k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   366k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   366k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   366k|    }                                                                  \
  |  | 9229|   366k|    else {                                                             \
  |  | 9230|   366k|        return vis(monostate_val);                                     \
  |  | 9231|   366k|    }
  ------------------
 9282|   366k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 366k]
  ------------------
 9283|   366k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   366k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   366k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   366k|    }                                                                  \
  |  | 9229|   366k|    else {                                                             \
  |  | 9230|   366k|        return vis(monostate_val);                                     \
  |  | 9231|   366k|    }
  ------------------
 9284|       |
 9285|   366k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 366k]
  ------------------
 9286|   366k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   366k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   366k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 366k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 366k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   366k|            SCN_CLANG_POP
 9303|   366k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6279|   256k|        : m_format{format},
 6280|   256k|          m_next_arg_id{next_arg_id},
 6281|   256k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6281:27): [Folded - Ignored]
  ------------------
 6282|   256k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6282:27): [Folded - Ignored]
  ------------------
 6283|       |          m_is_borrowed(
 6284|   256k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6284:16): [Folded - Ignored]
  |  Branch (6284:41): [Folded - Ignored]
  ------------------
 6285|   256k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6285:15): [Folded - Ignored]
  ------------------
 6286|   256k|    {
 6287|   256k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7795|   256k|{
 7796|   256k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7797|   256k|    handler.check_args_exhausted();
 7798|   256k|    return handler.get_error();
 7799|   256k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7760|   256k|{
 7761|       |    // TODO: memchr fast path with a larger (> 32) format string
 7762|       |
 7763|   256k|    auto begin = format.data();
 7764|   256k|    auto it = begin;
 7765|   256k|    const auto end = format.data() + format.size();
 7766|       |
 7767|   497k|    while (it != end) {
  ------------------
  |  Branch (7767:12): [True: 256k, False: 241k]
  ------------------
 7768|   256k|        const auto ch = *it++;
 7769|   256k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7769:13): [True: 256k, False: 0]
  ------------------
 7770|   256k|            handler.on_literal_text(begin, it - 1);
 7771|       |
 7772|   256k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7773|   256k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7773:17): [True: 15.1k, False: 241k]
  ------------------
 7774|  15.1k|                return;
 7775|  15.1k|            }
 7776|   256k|        }
 7777|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7777:18): [True: 0, False: 0]
  ------------------
 7778|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  |  Branch (865:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7779|      0|                handler.on_error("Unmatched '}' in format string");
 7780|      0|                return;
 7781|      0|            }
 7782|       |
 7783|      0|            handler.on_literal_text(begin, it);
 7784|      0|            begin = ++it;
 7785|      0|        }
 7786|   256k|    }
 7787|       |
 7788|   241k|    handler.on_literal_text(begin, end);
 7789|   241k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 8985|   241k|    {
 8986|   241k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   241k|    static_cast<    \
  |  |  935|   241k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8987|   241k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7692|   256k|{
 7693|   256k|    struct id_adapter {
 7694|   256k|        constexpr void operator()()
 7695|   256k|        {
 7696|   256k|            arg_id = handler.on_arg_id();
 7697|   256k|        }
 7698|   256k|        constexpr void operator()(std::size_t id)
 7699|   256k|        {
 7700|   256k|            arg_id = handler.on_arg_id(id);
 7701|   256k|        }
 7702|       |
 7703|   256k|        constexpr void on_error(const char* msg)
 7704|   256k|        {
 7705|   256k|            SCN_UNLIKELY_ATTR
 7706|   256k|            handler.on_error(msg);
 7707|   256k|        }
 7708|       |
 7709|   256k|        Handler& handler;
 7710|   256k|        std::size_t arg_id;
 7711|   256k|    };
 7712|       |
 7713|   256k|    ++begin;
 7714|   256k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 7715|      0|        handler.on_error("Unexpected end of replacement field");
 7716|      0|        return begin;
 7717|      0|    }
 7718|       |
 7719|   256k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7719:9): [True: 0, False: 256k]
  ------------------
 7720|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7721|      0|    }
 7722|   256k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7722:14): [True: 0, False: 256k]
  ------------------
 7723|      0|        handler.on_literal_text(begin, begin + 1);
 7724|      0|    }
 7725|   256k|    else {
 7726|   256k|        auto adapter = id_adapter{handler, 0};
 7727|   256k|        begin = parse_arg_id(begin, end, adapter);
 7728|       |
 7729|   256k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 7730|      0|            handler.on_error("Missing '}' in format string");
 7731|      0|            return begin;
 7732|      0|        }
 7733|       |
 7734|   256k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7734:13): [True: 0, False: 256k]
  ------------------
 7735|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7736|      0|        }
 7737|   256k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7737:18): [True: 256k, False: 0]
  ------------------
 7738|   256k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  865|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 7739|      0|                handler.on_error("Unexpected end of replacement field");
 7740|      0|                return begin;
 7741|      0|            }
 7742|   256k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7743|   256k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  865|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.04k, False: 250k]
  |  |  |  Branch (865:45): [True: 0, False: 256k]
  |  |  |  Branch (865:45): [True: 6.04k, False: 250k]
  |  |  ------------------
  ------------------
 7744|  6.04k|                handler.on_error("Unknown format specifier");
 7745|  6.04k|                return begin;
 7746|  6.04k|            }
 7747|   256k|        }
 7748|      0|        else {
 7749|      0|            SCN_UNLIKELY_ATTR
 7750|      0|            handler.on_error("Missing '}' in format string");
 7751|      0|            return begin;
 7752|      0|        }
 7753|   256k|    }
 7754|   250k|    return begin + 1;
 7755|   256k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7193|   256k|{
 7194|   256k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7195|   256k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7195:9): [True: 256k, False: 0]
  |  Branch (7195:26): [True: 0, False: 256k]
  ------------------
 7196|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7197|      0|    }
 7198|       |
 7199|   256k|    handler();
 7200|   256k|    return begin;
 7201|   256k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7695|   256k|        {
 7696|   256k|            arg_id = handler.on_arg_id();
 7697|   256k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7872|   256k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  936|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7873|   256k|    {
 7874|   256k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  930|   256k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   256k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7875|   256k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7608|   256k|{
 7609|   256k|    auto do_presentation = [&]() -> const CharT* {
 7610|   256k|        if (*begin == CharT{'['}) {
 7611|   256k|            auto set = parse_presentation_set(begin, end, handler);
 7612|   256k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7613|       |                // clang-format off
 7614|   256k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|   256k|                return begin;
 7617|   256k|            }
 7618|   256k|            handler.on_character_set_string(set);
 7619|   256k|            return begin;
 7620|   256k|        }
 7621|   256k|        if (*begin == CharT{'/'}) {
 7622|   256k|            return parse_presentation_regex(begin, end, handler);
 7623|   256k|        }
 7624|   256k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   256k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7626|   256k|            handler.on_error("Invalid type specifier in format string");
 7627|   256k|            return begin;
 7628|   256k|        }
 7629|   256k|        handler.on_type(type);
 7630|   256k|        return begin;
 7631|   256k|    };
 7632|       |
 7633|   256k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7633:9): [True: 256k, False: 0]
  |  Branch (7633:28): [True: 247k, False: 9.16k]
  ------------------
 7634|   256k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7634:9): [True: 247k, False: 0]
  |  Branch (7634:36): [True: 244k, False: 3.02k]
  ------------------
 7635|   244k|        return do_presentation();
 7636|   244k|    }
 7637|       |
 7638|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 7639|      0|        handler.on_error("Unexpected end of format string");
 7640|      0|        return begin;
 7641|      0|    }
 7642|       |
 7643|  12.1k|    begin = parse_align(begin, end, handler);
 7644|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 7645|      0|        handler.on_error("Unexpected end of format string");
 7646|      0|        return begin;
 7647|      0|    }
 7648|       |
 7649|  12.1k|    begin = parse_width(begin, end, handler);
 7650|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 7651|      0|        handler.on_error("Unexpected end of format string");
 7652|      0|        return begin;
 7653|      0|    }
 7654|       |
 7655|  12.1k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7655:9): [True: 0, False: 12.1k]
  ------------------
 7656|      0|        ++begin;
 7657|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7658|      0|            handler.on_error("Unexpected end of format string");
 7659|      0|            return begin;
 7660|      0|        }
 7661|      0|        begin = parse_precision(begin, end, handler);
 7662|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7663|      0|            handler.on_error("Unexpected end of format string");
 7664|      0|            return begin;
 7665|      0|        }
 7666|      0|    }
 7667|       |
 7668|  12.1k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7668:9): [True: 3.02k, False: 9.16k]
  ------------------
 7669|  3.02k|        handler.on_localized();
 7670|  3.02k|        ++begin;
 7671|  3.02k|    }
 7672|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 7673|      0|        handler.on_error("Unexpected end of format string");
 7674|      0|        return begin;
 7675|      0|    }
 7676|       |
 7677|  12.1k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7677:9): [True: 12.1k, False: 0]
  |  Branch (7677:25): [True: 9.16k, False: 3.02k]
  ------------------
 7678|  9.16k|        do_presentation();
 7679|  9.16k|    }
 7680|  12.1k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 7681|      0|        handler.on_error("Unexpected end of format string");
 7682|      0|        return begin;
 7683|      0|    }
 7684|       |
 7685|  12.1k|    return begin;
 7686|  12.1k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7609|   253k|    auto do_presentation = [&]() -> const CharT* {
 7610|   253k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7610:13): [True: 3.12k, False: 250k]
  ------------------
 7611|  3.12k|            auto set = parse_presentation_set(begin, end, handler);
 7612|  3.12k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  865|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.12k]
  |  |  ------------------
  ------------------
 7613|       |                // clang-format off
 7614|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7615|       |                // clang-format on
 7616|      0|                return begin;
 7617|      0|            }
 7618|  3.12k|            handler.on_character_set_string(set);
 7619|  3.12k|            return begin;
 7620|  3.12k|        }
 7621|   250k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7621:13): [True: 0, False: 250k]
  ------------------
 7622|      0|            return parse_presentation_regex(begin, end, handler);
 7623|      0|        }
 7624|   250k|        presentation_type type = parse_presentation_type(*begin++);
 7625|   250k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.02k, False: 247k]
  |  |  ------------------
  ------------------
 7626|  3.02k|            handler.on_error("Invalid type specifier in format string");
 7627|  3.02k|            return begin;
 7628|  3.02k|        }
 7629|   247k|        handler.on_type(type);
 7630|   247k|        return begin;
 7631|   250k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7447|  3.12k|{
 7448|  3.12k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  3.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7449|  3.12k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  930|  3.12k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  3.12k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7450|       |
 7451|  3.12k|    auto start = begin;
 7452|  3.12k|    ++begin;
 7453|       |
 7454|  3.12k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 3.12k]
  |  |  ------------------
  ------------------
 7455|       |        // clang-format off
 7456|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7457|       |        // clang-format on
 7458|      0|        return {};
 7459|      0|    }
 7460|  3.12k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7460:9): [True: 0, False: 3.12k]
  ------------------
 7461|      0|        handler.on_charset_inverted();
 7462|      0|        ++begin;
 7463|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7464|       |            // clang-format off
 7465|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7466|       |            // clang-format on
 7467|      0|            return {};
 7468|      0|        }
 7469|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7469:13): [True: 0, False: 0]
  ------------------
 7470|      0|            handler.on_charset_single(char32_t{']'});
 7471|      0|            ++begin;
 7472|      0|        }
 7473|      0|    }
 7474|  3.12k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7474:14): [True: 0, False: 3.12k]
  ------------------
 7475|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7476|      0|    }
 7477|       |
 7478|  9.36k|    while (begin != end) {
  ------------------
  |  Branch (7478:12): [True: 9.36k, False: 0]
  ------------------
 7479|  9.36k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  9.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.36k]
  |  |  ------------------
  ------------------
 7480|      0|            break;
 7481|      0|        }
 7482|       |
 7483|  9.36k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7483:13): [True: 3.12k, False: 6.24k]
  ------------------
 7484|  3.12k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7485|  3.12k|        }
 7486|       |
 7487|  6.24k|        parse_presentation_set_literal(begin, end, handler);
 7488|  6.24k|    }
 7489|       |
 7490|      0|    SCN_UNLIKELY_ATTR
 7491|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7492|      0|    return {};
 7493|  3.12k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7411|  6.24k|{
 7412|  6.24k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  6.24k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  6.24k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7413|       |
 7414|  6.24k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7415|  6.24k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  865|  6.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.24k]
  |  |  ------------------
  ------------------
 7416|      0|        return;
 7417|      0|    }
 7418|       |
 7419|  6.24k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7419:9): [True: 6.24k, False: 0]
  |  Branch (7419:25): [True: 6.24k, False: 0]
  |  Branch (7419:49): [True: 6.24k, False: 0]
  ------------------
 7420|  6.24k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7420:9): [True: 6.24k, False: 0]
  ------------------
 7421|  6.24k|        ++begin;
 7422|       |
 7423|  6.24k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7424|  6.24k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  865|  6.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.24k]
  |  |  ------------------
  ------------------
 7425|      0|            return;
 7426|      0|        }
 7427|       |
 7428|  6.24k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  865|  6.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 6.24k]
  |  |  ------------------
  ------------------
 7429|       |            // clang-format off
 7430|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7431|       |            // clang-format on
 7432|      0|            return;
 7433|      0|        }
 7434|       |
 7435|  6.24k|        handler.on_charset_range(cp_first, cp_second + 1);
 7436|  6.24k|        return;
 7437|  6.24k|    }
 7438|       |
 7439|      0|    handler.on_charset_single(cp_first);
 7440|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7387|  12.4k|{
 7388|  12.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  12.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7389|       |
 7390|  12.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7391|  12.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  865|  24.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.4k]
  |  |  |  Branch (865:45): [True: 0, False: 12.4k]
  |  |  |  Branch (865:45): [True: 0, False: 12.4k]
  |  |  ------------------
  ------------------
 7392|      0|        handler.on_error("Invalid encoding in format string");
 7393|      0|        return invalid_code_point;
 7394|      0|    }
 7395|       |
 7396|  12.4k|    const auto cp =
 7397|  12.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7398|  12.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  865|  12.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.4k]
  |  |  ------------------
  ------------------
 7399|      0|        handler.on_error("Invalid encoding in format string");
 7400|      0|        return invalid_code_point;
 7401|      0|    }
 7402|       |
 7403|  12.4k|    begin += len;
 7404|  12.4k|    return cp;
 7405|  12.4k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7282|  12.1k|{
 7283|  12.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7284|       |
 7285|  12.1k|    auto check_align = [](wchar_t ch) {
 7286|  12.1k|        switch (ch) {
 7287|  12.1k|            case L'<':
 7288|  12.1k|                return align_type::left;
 7289|  12.1k|            case L'>':
 7290|  12.1k|                return align_type::right;
 7291|  12.1k|            case L'^':
 7292|  12.1k|                return align_type::center;
 7293|  12.1k|            default:
 7294|  12.1k|                return align_type::none;
 7295|  12.1k|        }
 7296|  12.1k|    };
 7297|       |
 7298|  12.1k|    auto potential_fill_len = code_point_length(begin, end);
 7299|  12.1k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  865|  24.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.1k]
  |  |  |  Branch (865:45): [True: 0, False: 12.1k]
  |  |  |  Branch (865:45): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 7300|  12.1k|                     std::distance(begin, end) < potential_fill_len)) {
 7301|      0|        handler.on_error("Invalid encoding in fill character");
 7302|      0|        return begin;
 7303|      0|    }
 7304|       |
 7305|  12.1k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7306|       |
 7307|  12.1k|    auto potential_fill = std::basic_string_view<CharT>{
 7308|  12.1k|        begin, static_cast<size_t>(potential_fill_len)};
 7309|  12.1k|    const auto begin_before_fill = begin;
 7310|  12.1k|    begin += potential_fill_len;
 7311|       |
 7312|  12.1k|    if (begin == end) {
  ------------------
  |  Branch (7312:9): [True: 0, False: 12.1k]
  ------------------
 7313|      0|        return begin_before_fill;
 7314|      0|    }
 7315|       |
 7316|  12.1k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7317|  12.1k|    const auto begin_after_fill = begin;
 7318|  12.1k|    ++begin;
 7319|       |
 7320|  12.1k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7320:9): [True: 12.1k, False: 0]
  ------------------
 7321|  12.1k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  865|  12.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 12.1k]
  |  |  ------------------
  ------------------
 7322|      0|            handler.on_error("Invalid fill character '{' in format string");
 7323|      0|            return begin;
 7324|      0|        }
 7325|  12.1k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7325:13): [True: 3.12k, False: 9.06k]
  ------------------
 7326|  3.12k|            return begin_before_fill;
 7327|  3.12k|        }
 7328|  12.1k|    }
 7329|       |
 7330|  9.06k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7330:9): [True: 9.06k, False: 0]
  ------------------
 7331|  9.06k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7331:13): [True: 0, False: 9.06k]
  ------------------
 7332|      0|            handler.on_align(potential_align_on_fill);
 7333|      0|            return begin_after_fill;
 7334|      0|        }
 7335|  9.06k|        return begin_before_fill;
 7336|  9.06k|    }
 7337|       |
 7338|      0|    handler.on_fill(potential_fill);
 7339|      0|    handler.on_align(potential_align_after_fill);
 7340|      0|    return begin;
 7341|  9.06k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7285|  24.3k|    auto check_align = [](wchar_t ch) {
 7286|  24.3k|        switch (ch) {
 7287|      0|            case L'<':
  ------------------
  |  Branch (7287:13): [True: 0, False: 24.3k]
  ------------------
 7288|      0|                return align_type::left;
 7289|      0|            case L'>':
  ------------------
  |  Branch (7289:13): [True: 0, False: 24.3k]
  ------------------
 7290|      0|                return align_type::right;
 7291|      0|            case L'^':
  ------------------
  |  Branch (7291:13): [True: 0, False: 24.3k]
  ------------------
 7292|      0|                return align_type::center;
 7293|  24.3k|            default:
  ------------------
  |  Branch (7293:13): [True: 24.3k, False: 0]
  ------------------
 7294|  24.3k|                return align_type::none;
 7295|  24.3k|        }
 7296|  24.3k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7347|  12.1k|{
 7348|  12.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  930|  12.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7349|       |
 7350|  12.1k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7350:9): [True: 12.1k, False: 0]
  |  Branch (7350:33): [True: 6.04k, False: 6.14k]
  ------------------
 7351|  6.04k|        int width = parse_simple_int(begin, end);
 7352|  6.04k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  864|  6.04k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 6.04k, False: 0]
  |  |  ------------------
  ------------------
 7353|  6.04k|            handler.on_width(width);
 7354|  6.04k|        }
 7355|      0|        else {
 7356|      0|            handler.on_error("Invalid field width");
 7357|      0|            return begin;
 7358|      0|        }
 7359|  6.04k|    }
 7360|  12.1k|    return begin;
 7361|  12.1k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7878|  3.02k|    {
 7879|  3.02k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7880|  3.02k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7880:13): [True: 3.02k, False: 0]
  ------------------
 7881|  3.02k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7881:13): [True: 3.02k, False: 0]
  ------------------
 7882|  3.02k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7882:13): [True: 3.02k, False: 0]
  ------------------
 7883|  3.02k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7883:13): [True: 3.02k, False: 0]
  ------------------
 7884|  3.02k|            SCN_UNLIKELY_ATTR
 7885|       |            // clang-format off
 7886|  3.02k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7887|       |            // clang-format on
 7888|  3.02k|        }
 7889|       |
 7890|      0|        Handler::on_localized();
 7891|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9323|   250k|{
 9324|   250k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9325|   250k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9224|   250k|{
 9225|   250k|#define SCN_VISIT(Type)                                                \
 9226|   250k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9227|   250k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9228|   250k|    }                                                                  \
 9229|   250k|    else {                                                             \
 9230|   250k|        return vis(monostate_val);                                     \
 9231|   250k|    }
 9232|       |
 9233|   250k|    monostate monostate_val{};
 9234|       |
 9235|   250k|    switch (get_arg_type(arg)) {
 9236|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9236:9): [True: 0, False: 250k]
  ------------------
 9237|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9238|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9238:9): [True: 0, False: 250k]
  ------------------
 9239|      0|            SCN_VISIT(short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9240|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9240:9): [True: 0, False: 250k]
  ------------------
 9241|      0|            SCN_VISIT(int);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9242|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9242:9): [True: 0, False: 250k]
  ------------------
 9243|      0|            SCN_VISIT(long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9244|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9244:9): [True: 0, False: 250k]
  ------------------
 9245|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9246|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9246:9): [True: 0, False: 250k]
  ------------------
 9247|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9248|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9248:9): [True: 0, False: 250k]
  ------------------
 9249|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9250|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9250:9): [True: 0, False: 250k]
  ------------------
 9251|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9252|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9252:9): [True: 0, False: 250k]
  ------------------
 9253|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9254|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9254:9): [True: 0, False: 250k]
  ------------------
 9255|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9256|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9256:9): [True: 0, False: 250k]
  ------------------
 9257|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9258|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9258:9): [True: 0, False: 250k]
  ------------------
 9259|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9260|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9260:9): [True: 0, False: 250k]
  ------------------
 9261|      0|            SCN_VISIT(char);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9262|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9262:9): [True: 0, False: 250k]
  ------------------
 9263|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9264|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9264:9): [True: 0, False: 250k]
  ------------------
 9265|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9266|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9266:9): [True: 0, False: 250k]
  ------------------
 9267|      0|            SCN_VISIT(float);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9268|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9268:9): [True: 0, False: 250k]
  ------------------
 9269|      0|            SCN_VISIT(double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9270|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9270:9): [True: 0, False: 250k]
  ------------------
 9271|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9272|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (9272:9): [True: 0, False: 250k]
  ------------------
 9273|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9274|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9274:9): [True: 0, False: 250k]
  ------------------
 9275|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9276|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (9276:9): [True: 0, False: 250k]
  ------------------
 9277|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9226|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|      0|    }                                                                  \
  |  | 9229|      0|    else {                                                             \
  |  | 9230|      0|        return vis(monostate_val);                                     \
  |  | 9231|      0|    }
  ------------------
 9278|   250k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9278:9): [True: 250k, False: 0]
  ------------------
 9279|   250k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9226|   250k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   250k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   250k|    }                                                                  \
  |  | 9229|   250k|    else {                                                             \
  |  | 9230|   250k|        return vis(monostate_val);                                     \
  |  | 9231|   250k|    }
  ------------------
 9280|   250k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (9280:9): [True: 0, False: 250k]
  ------------------
 9281|   250k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 9226|   250k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   250k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   250k|    }                                                                  \
  |  | 9229|   250k|    else {                                                             \
  |  | 9230|   250k|        return vis(monostate_val);                                     \
  |  | 9231|   250k|    }
  ------------------
 9282|   250k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (9282:9): [True: 0, False: 250k]
  ------------------
 9283|   250k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 9226|   250k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9227|   250k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9228|   250k|    }                                                                  \
  |  | 9229|   250k|    else {                                                             \
  |  | 9230|   250k|        return vis(monostate_val);                                     \
  |  | 9231|   250k|    }
  ------------------
 9284|       |
 9285|   250k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9285:9): [True: 0, False: 250k]
  ------------------
 9286|   250k|#if !SCN_DISABLE_TYPE_CUSTOM
 9287|   250k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9288|   250k|                get_arg_value(arg).custom_value));
 9289|       |#else
 9290|       |            return vis(monostate_val);
 9291|       |#endif
 9292|       |
 9293|      0|            SCN_CLANG_PUSH
 9294|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9295|       |
 9296|      0|            SCN_UNLIKELY_ATTR
 9297|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9297:9): [True: 0, False: 250k]
  ------------------
 9298|      0|        default: {
  ------------------
  |  Branch (9298:9): [True: 0, False: 250k]
  ------------------
 9299|      0|            return vis(monostate_val);
 9300|      0|        }
 9301|       |
 9302|   250k|            SCN_CLANG_POP
 9303|   250k|    }
 9304|       |
 9305|      0|#undef SCN_VISIT
 9306|       |
 9307|      0|    SCN_ENSURE(false);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9308|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9309|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4351|  19.6k|    {
 4352|  19.6k|        return sync(0);
 4353|  19.6k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6135|  49.7k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6135|   366k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   250k|{
   89|   250k|    auto result = make_scan_result<Source, Args...>();
   90|   250k|    fill_scan_result(result,
   91|   250k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   250k|                           make_scan_args<wscan_context>(result->values())));
   93|   250k|    return result;
   94|   250k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   500k|{
   44|   500k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   500k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   500k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   250k|{
  131|   250k|    auto result = make_scan_result<Source, Args...>();
  132|   250k|    fill_scan_result(result,
  133|   250k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   250k|                           make_scan_args<wscan_context>(result->values())));
  135|   250k|    return result;
  136|   250k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   500k|{
   60|   500k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   500k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   500k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   122k|{
  171|   122k|    auto result = make_scan_result<Source, T>();
  172|   122k|    fill_scan_result(
  173|   122k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   122k|                            detail::make_arg<wscan_context>(result->value())));
  175|   122k|    return result;
  176|   122k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   244k|{
   72|   244k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   244k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   250k|{
   89|   250k|    auto result = make_scan_result<Source, Args...>();
   90|   250k|    fill_scan_result(result,
   91|   250k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   250k|                           make_scan_args<wscan_context>(result->values())));
   93|   250k|    return result;
   94|   250k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   250k|{
  131|   250k|    auto result = make_scan_result<Source, Args...>();
  132|   250k|    fill_scan_result(result,
  133|   250k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   250k|                           make_scan_args<wscan_context>(result->values())));
  135|   250k|    return result;
  136|   250k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   122k|{
  171|   122k|    auto result = make_scan_result<Source, T>();
  172|   122k|    fill_scan_result(
  173|   122k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   122k|                            detail::make_arg<wscan_context>(result->value())));
  175|   122k|    return result;
  176|   122k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   250k|{
   89|   250k|    auto result = make_scan_result<Source, Args...>();
   90|   250k|    fill_scan_result(result,
   91|   250k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   250k|                           make_scan_args<wscan_context>(result->values())));
   93|   250k|    return result;
   94|   250k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   250k|{
   44|   250k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   250k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   250k|{
  131|   250k|    auto result = make_scan_result<Source, Args...>();
  132|   250k|    fill_scan_result(result,
  133|   250k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   250k|                           make_scan_args<wscan_context>(result->values())));
  135|   250k|    return result;
  136|   250k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   250k|{
   60|   250k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   250k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   122k|{
  171|   122k|    auto result = make_scan_result<Source, T>();
  172|   122k|    fill_scan_result(
  173|   122k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  |  936|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   122k|                            detail::make_arg<wscan_context>(result->value())));
  175|   122k|    return result;
  176|   122k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   122k|{
   72|   122k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  936|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   122k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|   860k|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|   860k|{
  309|   860k|    static_assert(std::is_same_v<Locale, std::locale>);
  310|   860k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1902|  68.4k|{
 1903|  68.4k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1904|  68.4k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1910|  40.9k|{
 1911|  40.9k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1912|  40.9k|    return sync_after_vscan(source, n);
 1913|  40.9k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1920|   500k|{
 1921|   500k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 1922|   500k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1928|   250k|{
 1929|   250k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 1930|   250k|    return sync_after_vscan(source, n);
 1931|   250k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   243k|{
  207|   243k|    return find_classic_impl(
  208|   243k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   243k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   243k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   247k|{
  215|   247k|    return find_classic_impl(
  216|   247k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   247k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   247k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1871|  68.4k|{
 1872|  68.4k|    return vscan_internal(source, format, args);
 1873|  68.4k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1877|  40.9k|{
 1878|  40.9k|    auto n = vscan_internal(source, format, args);
 1879|  40.9k|    return sync_after_vscan(source, n);
 1880|  40.9k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1885|   500k|{
 1886|   500k|    return vscan_internal(source, format, args);
 1887|   500k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1891|   250k|{
 1892|   250k|    auto n = vscan_internal(source, format, args);
 1893|   250k|    return sync_after_vscan(source, n);
 1894|   250k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1957|  30.9k|{
 1958|  30.9k|    return vscan_value_internal(source, arg);
 1959|  30.9k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 1962|  18.8k|{
 1963|  18.8k|    auto n = vscan_value_internal(source, arg);
 1964|  18.8k|    return sync_after_vscan(source, n);
 1965|  18.8k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1970|   244k|{
 1971|   244k|    return vscan_value_internal(source, arg);
 1972|   244k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 1976|   122k|{
 1977|   122k|    auto n = vscan_value_internal(source, arg);
 1978|   122k|    return sync_after_vscan(source, n);
 1979|   122k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   243k|{
  131|   243k|    auto it = source.begin();
  132|       |
  133|   433k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 337k, False: 96.1k]
  ------------------
  134|   337k|        auto sv =
  135|   337k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   337k|                .substr(0, 8);
  137|       |
  138|   337k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 229k, False: 107k]
  ------------------
  139|   229k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   229k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   229k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 97.8k, False: 131k]
  ------------------
  142|  97.8k|                break;
  143|  97.8k|            }
  144|   131k|            continue;
  145|   229k|        }
  146|       |
  147|   319k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 260k, False: 58.4k]
  ------------------
  148|   260k|            auto tmp =
  149|   260k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   260k|            auto res = get_next_code_point(tmp);
  151|   260k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 49.5k, False: 211k]
  ------------------
  152|  49.5k|                return it;
  153|  49.5k|            }
  154|   211k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   211k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   211k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|   211k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|   211k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   211k|        }
  158|   107k|    }
  159|       |
  160|   194k|    return detail::make_string_view_iterator(source, it);
  161|   243k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   562k|{
  118|   562k|    static_assert(sizeof(*source.data()) == 1);
  119|   562k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  930|   562k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   562k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   562k|    uint64_t word{};
  121|   562k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   562k|    return has_byte_greater(word, 127) != 0;
  124|   562k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|   835k|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   260k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   247k|{
  131|   247k|    auto it = source.begin();
  132|       |
  133|   310k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 225k, False: 85.7k]
  ------------------
  134|   225k|        auto sv =
  135|   225k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   225k|                .substr(0, 8);
  137|       |
  138|   225k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 162k, False: 63.0k]
  ------------------
  139|   162k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   162k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   162k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 100k, False: 61.1k]
  ------------------
  142|   100k|                break;
  143|   100k|            }
  144|  61.1k|            continue;
  145|   162k|        }
  146|       |
  147|   122k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 119k, False: 2.70k]
  ------------------
  148|   119k|            auto tmp =
  149|   119k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   119k|            auto res = get_next_code_point(tmp);
  151|   119k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 60.3k, False: 59.2k]
  ------------------
  152|  60.3k|                return it;
  153|  60.3k|            }
  154|  59.2k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  59.2k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  59.2k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  931|  59.2k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|  59.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  59.2k|        }
  158|  63.0k|    }
  159|       |
  160|   186k|    return detail::make_string_view_iterator(source, it);
  161|   247k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   387k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   119k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|  81.8k|{
 1769|  81.8k|    const auto argcount = args.size();
 1770|  81.8k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 37.6k, False: 44.1k]
  |  Branch (1770:60): [True: 37.6k, False: 0]
  ------------------
 1771|  37.6k|        auto arg = args.get(0);
 1772|  37.6k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  37.6k|    static_cast<    \
  |  |  935|  37.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|  37.6k|    }
 1774|       |
 1775|  44.1k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 44.1k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|  44.1k|    SCN_UNLIKELY_ATTR
 1783|  44.1k|    {
 1784|  44.1k|        auto handler = format_handler<false, CharT>{
 1785|  44.1k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  44.1k|    static_cast<    \
  |  |  935|  44.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  44.1k|    static_cast<    \
  |  |  935|  44.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|  44.1k|        return vscan_parse_format_string(format, handler);
 1787|  44.1k|    }
 1788|  44.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|   218k|{
 1317|   218k|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 119k, False: 99.5k]
  ------------------
 1318|   119k|        return false;
 1319|   119k|    }
 1320|  99.5k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 99.5k, False: 0]
  |  Branch (1320:39): [True: 99.5k, False: 0]
  ------------------
 1321|   218k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|  56.5k|{
 1350|  56.5k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 56.5k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|  56.5k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|  56.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 56.5k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|  56.5k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|  56.5k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|  56.5k|    static_cast<    \
  |  |  935|  56.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|  56.5k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  56.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  56.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  56.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 2.26k, False: 54.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  2.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  2.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  2.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  2.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  2.26k|    }                                                  \
  |  |  |  | 3939|  56.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|  54.2k|    return it.position();
 1367|  56.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 1592|  75.0k|        : format_handler_base{argcount},
 1593|  75.0k|          parse_ctx{source_tag<Source&&>, format},
 1594|  75.0k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  75.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  75.0k|    static_cast<    \
  |  |  935|  75.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  75.0k|    static_cast<    \
  |  |  935|  75.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  75.0k|    {
 1596|  75.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 1410|   888k|    format_handler_base(size_t argcount) : args_count(argcount)
 1411|   888k|    {
 1412|   888k|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  865|   888k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 888k]
  |  |  ------------------
  ------------------
 1413|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1414|      0|        }
 1415|   888k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 1543|  75.0k|        : contiguous_ctx(source, args, loc)
 1544|  75.0k|    {
 1545|  75.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  75.0k|{
 1734|  75.0k|    const auto beg = handler.get_ctx().begin();
 1735|  75.0k|    detail::parse_format_string<false>(format, handler);
 1736|  75.0k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.1k, False: 59.9k]
  |  |  ------------------
  ------------------
 1737|  15.1k|        return unexpected(err.error());
 1738|  15.1k|    }
 1739|  59.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  75.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 1717|   483k|    {
 1718|   483k|        return ctx.get();
 1719|   483k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1548|   483k|    {
 1549|   483k|        return contiguous_ctx;
 1550|   483k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1599|   135k|    {
 1600|   135k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 135k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   135k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1459|  40.7k|    {
 1460|  40.7k|        error = unexpected(err);
 1461|  40.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 1371|  75.0k|{
 1372|  75.0k|    auto arg = ctx.arg(id);
 1373|  75.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 75.0k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  75.0k|    return arg;
 1377|  75.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1485|   888k|    {
 1486|   888k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   888k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 888k]
  |  |  ------------------
  ------------------
 1487|      0|            on_error({scan_error::invalid_format_string,
 1488|      0|                      "Argument ID out-of-range"});
 1489|      0|            return;
 1490|      0|        }
 1491|       |
 1492|   888k|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  865|   888k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 888k]
  |  |  ------------------
  ------------------
 1493|      0|            on_error({scan_error::invalid_format_string,
 1494|      0|                      "Argument with this ID has already been scanned"});
 1495|      0|        }
 1496|       |
 1497|   888k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   888k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 888k, False: 0]
  |  |  ------------------
  ------------------
 1498|   888k|            visited_args_lower64 |= (1ull << id);
 1499|   888k|            return;
 1500|   888k|        }
 1501|       |
 1502|      0|        id -= 64;
 1503|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1504|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1469|   888k|    {
 1470|   888k|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  865|   888k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 888k]
  |  |  ------------------
  ------------------
 1471|      0|            on_error({scan_error::invalid_format_string,
 1472|      0|                      "Argument ID out-of-range"});
 1473|      0|            return false;
 1474|      0|        }
 1475|       |
 1476|   888k|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  864|   888k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 888k, False: 0]
  |  |  ------------------
  ------------------
 1477|   888k|            return (visited_args_lower64 >> id) & 1ull;
 1478|   888k|        }
 1479|       |
 1480|      0|        id -= 64;
 1481|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1482|   888k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1639|  75.0k|    {
 1640|  75.0k|        return parse_ctx.next_arg_id();
 1641|  75.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1679|  75.0k|    {
 1680|  75.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  75.0k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  75.0k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 75.0k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  75.0k|        auto specs = detail::format_specs{};
 1693|  75.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  75.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  75.0k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  75.0k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  75.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 75.0k]
  |  Branch (1698:29): [True: 0, False: 75.0k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|  75.0k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  75.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.04k, False: 69.0k]
  |  |  ------------------
  ------------------
 1705|  6.04k|            return parse_ctx.begin();
 1706|  6.04k|        }
 1707|  69.0k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  69.0k|        on_visit_scan_arg(
 1710|  69.0k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  69.0k|                                           get_ctx().locale()},
 1712|  69.0k|            arg);
 1713|  69.0k|        return parse_ctx.begin();
 1714|  75.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 1389|  75.0k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  75.0k|    {
 1391|  75.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 1650|  69.0k|    {
 1651|  69.0k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 69.0k]
  |  Branch (1651:13): [True: 0, False: 69.0k]
  |  Branch (1651:29): [True: 0, False: 69.0k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  69.0k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  69.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  69.0k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  69.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.06k, False: 59.9k]
  |  |  ------------------
  ------------------
 1658|  9.06k|            on_error(r.error());
 1659|  9.06k|        }
 1660|  59.9k|        else {
 1661|  59.9k|            get_ctx().advance_to(*r);
 1662|  59.9k|        }
 1663|  69.0k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1453|  27.1k|    {
 1454|  27.1k|        SCN_UNLIKELY_ATTR
 1455|  27.1k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 1456|  27.1k|                                              msg);
 1457|  27.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1418|   888k|    {
 1419|   888k|        {
 1420|   888k|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1420:45): [True: 0, False: 888k]
  ------------------
 1421|   888k|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1421:35): [True: 0, False: 888k]
  ------------------
 1422|   888k|                                      ? std::numeric_limits<uint64_t>::max()
 1423|   888k|                                      : (1ull << args_count_lower64) - 1;
 1424|       |
 1425|   888k|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1425:17): [True: 0, False: 888k]
  ------------------
 1426|      0|                return on_error({scan_error::invalid_format_string,
 1427|      0|                                 "Argument list not exhausted"});
 1428|      0|            }
 1429|   888k|        }
 1430|       |
 1431|   888k|        if (args_count < 64) {
  ------------------
  |  Branch (1431:13): [True: 888k, False: 0]
  ------------------
 1432|   888k|            return;
 1433|   888k|        }
 1434|       |
 1435|      0|        auto last_args_count = args_count - 64;
 1436|      0|        for (auto it = visited_args_upper.begin();
 1437|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1437:14): [True: 0, False: 0]
  ------------------
 1438|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1438:17): [True: 0, False: 0]
  ------------------
 1439|      0|                return on_error({scan_error::invalid_format_string,
 1440|      0|                                 "Argument list not exhausted"});
 1441|      0|            }
 1442|      0|            last_args_count -= 8;
 1443|      0|        }
 1444|       |
 1445|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1446|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1446:13): [True: 0, False: 0]
  ------------------
 1447|      0|            return on_error({scan_error::invalid_format_string,
 1448|      0|                             "Argument list not exhausted"});
 1449|      0|        }
 1450|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 1464|  3.52M|    {
 1465|  3.52M|        return error;
 1466|  3.52M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 1592|  44.1k|        : format_handler_base{argcount},
 1593|  44.1k|          parse_ctx{source_tag<Source&&>, format},
 1594|  44.1k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|  44.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  44.1k|    static_cast<    \
  |  |  935|  44.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|  44.1k|    static_cast<    \
  |  |  935|  44.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|  44.1k|    {
 1596|  44.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 1519|  44.1k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|  44.1k|    static_cast<    \
  |  |  935|  44.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|  44.1k|    {
 1521|  44.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|  44.1k|{
 1734|  44.1k|    const auto beg = handler.get_ctx().begin();
 1735|  44.1k|    detail::parse_format_string<false>(format, handler);
 1736|  44.1k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 7.55k, False: 36.6k]
  |  |  ------------------
  ------------------
 1737|  7.55k|        return unexpected(err.error());
 1738|  7.55k|    }
 1739|  36.6k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|  44.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 1717|   287k|    {
 1718|   287k|        return ctx.get();
 1719|   287k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1524|   287k|    {
 1525|   287k|        return ctx;
 1526|   287k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1599|  80.7k|    {
 1600|  80.7k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 80.7k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|  80.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 1371|  44.1k|{
 1372|  44.1k|    auto arg = ctx.arg(id);
 1373|  44.1k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 44.1k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|  44.1k|    return arg;
 1377|  44.1k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1639|  44.1k|    {
 1640|  44.1k|        return parse_ctx.next_arg_id();
 1641|  44.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1679|  44.1k|    {
 1680|  44.1k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|  44.1k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|  44.1k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 44.1k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|  44.1k|        auto specs = detail::format_specs{};
 1693|  44.1k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|  44.1k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|  44.1k|            detail::get_arg_type(arg)};
 1696|       |
 1697|  44.1k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|  44.1k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 44.1k]
  |  Branch (1698:29): [True: 0, False: 44.1k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|  44.1k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|  44.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.02k, False: 41.1k]
  |  |  ------------------
  ------------------
 1705|  3.02k|            return parse_ctx.begin();
 1706|  3.02k|        }
 1707|  41.1k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|  41.1k|        on_visit_scan_arg(
 1710|  41.1k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|  41.1k|                                           get_ctx().locale()},
 1712|  41.1k|            arg);
 1713|  41.1k|        return parse_ctx.begin();
 1714|  44.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 1389|  44.1k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|  44.1k|    {
 1391|  44.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|  41.1k|    {
 1651|  41.1k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 41.1k]
  |  Branch (1651:13): [True: 0, False: 41.1k]
  |  Branch (1651:29): [True: 0, False: 41.1k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|  41.1k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|  41.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|  41.1k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.53k, False: 36.6k]
  |  |  ------------------
  ------------------
 1658|  4.53k|            on_error(r.error());
 1659|  4.53k|        }
 1660|  36.6k|        else {
 1661|  36.6k|            get_ctx().advance_to(*r);
 1662|  36.6k|        }
 1663|  41.1k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|   136k|{
 1749|   136k|    const auto argcount = args.size();
 1750|   136k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 61.8k, False: 75.0k]
  |  Branch (1750:60): [True: 61.8k, False: 0]
  ------------------
 1751|  61.8k|        auto arg = args.get(0);
 1752|  61.8k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|  61.8k|    static_cast<    \
  |  |  935|  61.8k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|  61.8k|    }
 1754|       |
 1755|  75.0k|    auto handler = format_handler<true, CharT>{
 1756|  75.0k|        ranges::subrange<const CharT*>{source.data(),
 1757|  75.0k|                                       source.data() + source.size()},
 1758|  75.0k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  75.0k|    static_cast<    \
  |  |  935|  75.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|  75.0k|    static_cast<    \
  |  |  935|  75.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|  75.0k|    return vscan_parse_format_string(format, handler);
 1760|   136k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|  92.7k|{
 1330|  92.7k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 92.7k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|  92.7k|    auto reader =
 1336|  92.7k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|  92.7k|            ranges::subrange<const CharT*>{source.data(),
 1338|  92.7k|                                           source.data() + source.size()},
 1339|  92.7k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|  92.7k|    static_cast<    \
  |  |  935|  92.7k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|  92.7k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|  92.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  92.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  92.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.53k, False: 88.2k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.53k|    }                                                  \
  |  |  |  | 3939|  92.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  88.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|  88.2k|    return ranges::distance(source.data(), it);
 1342|  92.7k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   100k|{
 1849|   100k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   100k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 90.8k, False: 9.81k]
  |  |  ------------------
  ------------------
 1850|  90.8k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|  90.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 90.8k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|  90.8k|    }
 1856|  9.81k|    else {
 1857|  9.81k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  9.81k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 9.81k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  9.81k|    }
 1863|   100k|    return result;
 1864|   100k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 1748|  1.00M|{
 1749|  1.00M|    const auto argcount = args.size();
 1750|  1.00M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1750:9): [True: 488k, False: 512k]
  |  Branch (1750:60): [True: 488k, False: 0]
  ------------------
 1751|   488k|        auto arg = args.get(0);
 1752|   488k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   488k|    static_cast<    \
  |  |  935|   488k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1753|   488k|    }
 1754|       |
 1755|   512k|    auto handler = format_handler<true, CharT>{
 1756|   512k|        ranges::subrange<const CharT*>{source.data(),
 1757|   512k|                                       source.data() + source.size()},
 1758|   512k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   512k|    static_cast<    \
  |  |  935|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   512k|    static_cast<    \
  |  |  935|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1759|   512k|    return vscan_parse_format_string(format, handler);
 1760|  1.00M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1316|  1.50M|{
 1317|  1.50M|    if (format.size() != 2) {
  ------------------
  |  Branch (1317:9): [True: 768k, False: 732k]
  ------------------
 1318|   768k|        return false;
 1319|   768k|    }
 1320|   732k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1320:12): [True: 732k, False: 0]
  |  Branch (1320:39): [True: 732k, False: 0]
  ------------------
 1321|  1.50M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 1329|   732k|{
 1330|   732k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 732k]
  |  |  ------------------
  ------------------
 1331|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1332|      0|                                             "Argument #0 not found");
 1333|      0|    }
 1334|       |
 1335|   732k|    auto reader =
 1336|   732k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1337|   732k|            ranges::subrange<const CharT*>{source.data(),
 1338|   732k|                                           source.data() + source.size()},
 1339|   732k|            SCN_MOVE(args), loc};
  ------------------
  |  |  934|   732k|    static_cast<    \
  |  |  935|   732k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1340|   732k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   732k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   732k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   732k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 9.06k, False: 723k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  9.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  9.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  9.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  9.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  9.06k|    }                                                  \
  |  |  |  | 3939|   732k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   723k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1341|   723k|    return ranges::distance(source.data(), it);
 1342|   732k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 1592|   512k|        : format_handler_base{argcount},
 1593|   512k|          parse_ctx{source_tag<Source&&>, format},
 1594|   512k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   512k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   512k|    static_cast<    \
  |  |  935|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   512k|    static_cast<    \
  |  |  935|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   512k|    {
 1596|   512k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 1543|   512k|        : contiguous_ctx(source, args, loc)
 1544|   512k|    {
 1545|   512k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   512k|{
 1734|   512k|    const auto beg = handler.get_ctx().begin();
 1735|   512k|    detail::parse_format_string<false>(format, handler);
 1736|   512k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 30.2k, False: 482k]
  |  |  ------------------
  ------------------
 1737|  30.2k|        return unexpected(err.error());
 1738|  30.2k|    }
 1739|   482k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   512k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 1717|  3.50M|    {
 1718|  3.50M|        return ctx.get();
 1719|  3.50M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1548|  3.50M|    {
 1549|  3.50M|        return contiguous_ctx;
 1550|  3.50M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1599|   994k|    {
 1600|   994k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 994k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   994k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 1371|   512k|{
 1372|   512k|    auto arg = ctx.arg(id);
 1373|   512k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 512k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   512k|    return arg;
 1377|   512k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1639|   512k|    {
 1640|   512k|        return parse_ctx.next_arg_id();
 1641|   512k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1679|   512k|    {
 1680|   512k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   512k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   512k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 512k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   512k|        auto specs = detail::format_specs{};
 1693|   512k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   512k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   512k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   512k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   512k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 512k]
  |  Branch (1698:29): [True: 0, False: 512k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   512k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   512k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.0k, False: 500k]
  |  |  ------------------
  ------------------
 1705|  12.0k|            return parse_ctx.begin();
 1706|  12.0k|        }
 1707|   500k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   500k|        on_visit_scan_arg(
 1710|   500k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   500k|                                           get_ctx().locale()},
 1712|   500k|            arg);
 1713|   500k|        return parse_ctx.begin();
 1714|   512k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 1389|   512k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   512k|    {
 1391|   512k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 1650|   500k|    {
 1651|   500k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 500k]
  |  Branch (1651:13): [True: 0, False: 500k]
  |  Branch (1651:29): [True: 0, False: 500k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   500k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   500k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   500k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   500k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 18.1k, False: 482k]
  |  |  ------------------
  ------------------
 1658|  18.1k|            on_error(r.error());
 1659|  18.1k|        }
 1660|   482k|        else {
 1661|   482k|            get_ctx().advance_to(*r);
 1662|   482k|        }
 1663|   500k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 1768|   500k|{
 1769|   500k|    const auto argcount = args.size();
 1770|   500k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (1770:9): [True: 244k, False: 256k]
  |  Branch (1770:60): [True: 244k, False: 0]
  ------------------
 1771|   244k|        auto arg = args.get(0);
 1772|   244k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  934|   244k|    static_cast<    \
  |  |  935|   244k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1773|   244k|    }
 1774|       |
 1775|   256k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (1775:9): [True: 0, False: 256k]
  ------------------
 1776|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 1777|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1778|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1779|      0|        return vscan_parse_format_string(format, handler);
 1780|      0|    }
 1781|       |
 1782|   256k|    SCN_UNLIKELY_ATTR
 1783|   256k|    {
 1784|   256k|        auto handler = format_handler<false, CharT>{
 1785|   256k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   256k|    static_cast<    \
  |  |  935|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  934|   256k|    static_cast<    \
  |  |  935|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1786|   256k|        return vscan_parse_format_string(format, handler);
 1787|   256k|    }
 1788|   256k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 1349|   366k|{
 1350|   366k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 1351|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 1352|      0|                                             "Argument #0 not found");
 1353|      0|    }
 1354|       |
 1355|   366k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  864|   366k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 0, False: 366k]
  |  |  ------------------
  ------------------
 1356|      0|        auto reader = impl::default_arg_reader<
 1357|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1358|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  934|      0|    static_cast<    \
  |  |  935|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1359|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1360|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1361|      0|    }
 1362|       |
 1363|   366k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 1364|   366k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  934|   366k|    static_cast<    \
  |  |  935|   366k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1365|   366k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3940|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 4.53k, False: 361k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  4.53k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  4.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  4.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  4.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  4.53k|    }                                                  \
  |  |  |  | 3939|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1366|   361k|    return it.position();
 1367|   366k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 1592|   256k|        : format_handler_base{argcount},
 1593|   256k|          parse_ctx{source_tag<Source&&>, format},
 1594|   256k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  936|   256k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   256k|    static_cast<    \
  |  |  935|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  934|   256k|    static_cast<    \
  |  |  935|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1595|   256k|    {
 1596|   256k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 1519|   256k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  934|   256k|    static_cast<    \
  |  |  935|   256k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1520|   256k|    {
 1521|   256k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 1733|   256k|{
 1734|   256k|    const auto beg = handler.get_ctx().begin();
 1735|   256k|    detail::parse_format_string<false>(format, handler);
 1736|   256k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  |  865|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 15.1k, False: 241k]
  |  |  ------------------
  ------------------
 1737|  15.1k|        return unexpected(err.error());
 1738|  15.1k|    }
 1739|   241k|    return ranges::distance(beg, handler.get_ctx().begin());
 1740|   256k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 1717|  1.75M|    {
 1718|  1.75M|        return ctx.get();
 1719|  1.75M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1524|  1.75M|    {
 1525|  1.75M|        return ctx;
 1526|  1.75M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1599|   497k|    {
 1600|   497k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1600:16): [True: 0, False: 497k]
  ------------------
 1601|      0|            auto it = get_ctx().begin();
 1602|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1602:17): [True: 0, False: 0]
  ------------------
 1603|      0|                SCN_UNLIKELY_ATTR
 1604|      0|                return on_error(
 1605|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 1606|      0|            }
 1607|       |
 1608|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1609|      0|                    detail::make_string_view_from_pointers(begin, end));
 1610|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1610:17): [True: 0, False: 0]
  ------------------
 1611|      0|                SCN_UNLIKELY_ATTR
 1612|      0|                return on_error({scan_error::invalid_format_string,
 1613|      0|                                 "Invalid encoding in format string"});
 1614|      0|            }
 1615|      0|            else if (is_space) {
  ------------------
  |  Branch (1615:22): [True: 0, False: 0]
  ------------------
 1616|       |                // Skip all whitespace in input
 1617|      0|                get_ctx().advance_to(
 1618|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1619|       |                // And, skip all whitespace in the format string
 1620|      0|                auto begin_it = impl::read_while_classic_space(
 1621|      0|                    detail::make_string_view_from_pointers(
 1622|      0|                        detail::to_address(after_space_it),
 1623|      0|                        detail::to_address(end)));
 1624|       |                // (-1 because of the for loop ++begin)
 1625|      0|                begin = detail::to_address(begin_it) - 1;
 1626|      0|                continue;
 1627|      0|            }
 1628|       |
 1629|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1629:17): [True: 0, False: 0]
  ------------------
 1630|      0|                SCN_UNLIKELY_ATTR
 1631|      0|                return on_error({scan_error::invalid_literal,
 1632|      0|                                 "Unexpected literal character in source"});
 1633|      0|            }
 1634|      0|            get_ctx().advance_to(ranges::next(it));
 1635|      0|        }
 1636|   497k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 1371|   256k|{
 1372|   256k|    auto arg = ctx.arg(id);
 1373|   256k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  865|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 256k]
  |  |  ------------------
  ------------------
 1374|      0|        handler.on_error("Failed to find argument with ID");
 1375|      0|    }
 1376|   256k|    return arg;
 1377|   256k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1639|   256k|    {
 1640|   256k|        return parse_ctx.next_arg_id();
 1641|   256k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1679|   256k|    {
 1680|   256k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1681|   256k|        set_arg_as_visited(arg_id);
 1682|       |
 1683|   256k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1683:13): [True: 0, False: 256k]
  ------------------
 1684|      0|            parse_ctx.advance_to(begin);
 1685|      0|            on_visit_scan_arg(
 1686|      0|                impl::custom_reader<detail::default_context<char_type>>{
 1687|      0|                    parse_ctx, get_custom_ctx()},
 1688|      0|                arg);
 1689|      0|            return parse_ctx.begin();
 1690|      0|        }
 1691|       |
 1692|   256k|        auto specs = detail::format_specs{};
 1693|   256k|        detail::specs_checker<specs_handler<context_type>> handler{
 1694|   256k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 1695|   256k|            detail::get_arg_type(arg)};
 1696|       |
 1697|   256k|        begin = detail::parse_format_specs(begin, end, handler);
 1698|   256k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (1698:13): [True: 0, False: 256k]
  |  Branch (1698:29): [True: 0, False: 256k]
  ------------------
 1699|      0|            SCN_UNLIKELY_ATTR
 1700|      0|            on_error({scan_error::invalid_format_string,
 1701|      0|                      "Missing '}' in format string"});
 1702|      0|            return parse_ctx.begin();
 1703|      0|        }
 1704|   256k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  |  865|   256k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 6.04k, False: 250k]
  |  |  ------------------
  ------------------
 1705|  6.04k|            return parse_ctx.begin();
 1706|  6.04k|        }
 1707|   250k|        parse_ctx.advance_to(begin);
 1708|       |
 1709|   250k|        on_visit_scan_arg(
 1710|   250k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 1711|   250k|                                           get_ctx().locale()},
 1712|   250k|            arg);
 1713|   250k|        return parse_ctx.begin();
 1714|   256k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 1389|   256k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1390|   256k|    {
 1391|   256k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 1650|   250k|    {
 1651|   250k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (1651:13): [True: 0, False: 250k]
  |  Branch (1651:13): [True: 0, False: 250k]
  |  Branch (1651:29): [True: 0, False: 250k]
  ------------------
 1652|      0|            SCN_UNLIKELY_ATTR
 1653|      0|            return;
 1654|      0|        }
 1655|       |
 1656|   250k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  |  936|   250k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1657|   250k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.06k, False: 241k]
  |  |  ------------------
  ------------------
 1658|  9.06k|            on_error(r.error());
 1659|  9.06k|        }
 1660|   241k|        else {
 1661|   241k|            get_ctx().advance_to(*r);
 1662|   241k|        }
 1663|   250k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 1848|   622k|{
 1849|   622k|    if (SCN_LIKELY(result)) {
  ------------------
  |  |  864|   622k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 602k, False: 19.6k]
  |  |  ------------------
  ------------------
 1850|   602k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  |  865|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 602k]
  |  |  ------------------
  ------------------
 1851|      0|            return detail::unexpected_scan_error(
 1852|      0|                scan_error::invalid_source_state,
 1853|      0|                "Failed to sync with underlying source");
 1854|      0|        }
 1855|   602k|    }
 1856|  19.6k|    else {
 1857|  19.6k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  |  865|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 1858|      0|            return detail::unexpected_scan_error(
 1859|      0|                scan_error::invalid_source_state,
 1860|      0|                "Failed to sync with underlying source");
 1861|      0|        }
 1862|  19.6k|    }
 1863|   622k|    return result;
 1864|   622k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|  30.9k|{
 1795|  30.9k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  30.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  30.9k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|  18.8k|{
 1795|  18.8k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|  18.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|  18.8k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 1794|   244k|{
 1795|   244k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   244k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   244k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 1794|   122k|{
 1795|   122k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  936|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1796|   122k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    755|{
 1462|    755|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    755|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    755|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    755|            return transcode_to_string_impl_to32(src, dest);
 1473|    755|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    755|    SCN_EXPECT(false);
  ------------------
  |  |  930|    755|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    755|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    755|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    755|{
 1355|    755|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    755|    auto it = src.begin();
 1358|   184k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 183k, False: 755]
  ------------------
 1359|   183k|        auto res = get_next_code_point(
 1360|   183k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   183k|                                                                 src.end()));
 1362|   183k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  865|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.46k, False: 181k]
  |  |  ------------------
  ------------------
 1363|  2.46k|            dest.push_back(DestCharT{0xfffd});
 1364|  2.46k|        }
 1365|   181k|        else {
 1366|   181k|            dest.push_back(res.value);
 1367|   181k|        }
 1368|   183k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   183k|    }
 1370|    755|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   564k|{
 1279|   564k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  930|   564k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   564k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   564k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   564k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   564k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 13.1k, False: 551k]
  |  |  ------------------
  ------------------
 1283|  13.1k|        return {get_start_for_next_code_point(input),
 1284|  13.1k|                detail::invalid_code_point};
 1285|  13.1k|    }
 1286|   551k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  865|   551k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 17.6k, False: 533k]
  |  |  ------------------
  ------------------
 1287|  17.6k|        return {input.end(), detail::invalid_code_point};
 1288|  17.6k|    }
 1289|       |
 1290|   533k|    return {input.begin() + len,
 1291|   533k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   551k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  13.1k|{
 1265|  13.1k|    auto it = input.begin();
 1266|  48.4k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 46.5k, False: 1.85k]
  ------------------
 1267|  46.5k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 11.3k, False: 35.2k]
  ------------------
 1268|  11.3k|            break;
 1269|  11.3k|        }
 1270|  46.5k|    }
 1271|  13.1k|    return it;
 1272|  13.1k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3045|  13.5k|    {
 3046|  13.5k|        SCN_UNLIKELY_ATTR
 3047|  13.5k|        m_msg = msg;
 3048|  13.5k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3050|   860k|    {
 3051|   860k|        return m_msg == nullptr;
 3052|   860k|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.22M|{
  458|  1.22M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.22M|        static_cast<unsigned char>(ch))];
  460|  1.22M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  33.4k|{
  469|  33.4k|    return static_cast<unsigned char>(ch) <= 127;
  470|  33.4k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  11.8k|{
  474|  11.8k|#if WCHAR_MIN < 0
  475|  11.8k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 10.6k, False: 1.20k]
  |  Branch (475:23): [True: 7.54k, False: 3.06k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  11.8k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   562k|{
  539|   562k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   562k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  3.32M|{
  784|  3.32M|    return e != eof_error::good;
  785|  3.32M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  11.7k|{
  798|  11.7k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  930|  11.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  11.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  11.7k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  11.7k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6046|   820k|{
 6047|   820k|    if (specs.width != 0) {
  ------------------
  |  Branch (6047:9): [True: 0, False: 820k]
  ------------------
 6048|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6048:13): [True: 0, False: 0]
  ------------------
 6049|      0|            return detail::unexpected_scan_error(
 6050|      0|                scan_error::length_too_short,
 6051|      0|                "Scanned value too narrow, width did not exceed what "
 6052|      0|                "was specified in the format string");
 6053|      0|        }
 6054|      0|    }
 6055|   820k|    if (specs.precision != 0) {
  ------------------
  |  Branch (6055:9): [True: 0, False: 820k]
  ------------------
 6056|       |        // Ensured by take_width_view
 6057|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6058|      0|                   specs.precision);
 6059|      0|    }
 6060|   820k|    return {};
 6061|   820k|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   305k|    {
  304|   305k|        ranges::advance(x, n);
  305|   305k|        return x;
  306|   305k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   305k|    {
  268|   305k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   305k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   305k|    {
  151|   305k|        i += n;
  152|   305k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   733k|    {
  108|   733k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   733k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   733k|    {
   87|   733k|        return s - i;
   88|   733k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.20M|    {
  108|  1.20M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.20M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.20M|    {
   87|  1.20M|        return s - i;
   88|  1.20M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 2992|   204k|    {
 2993|   204k|        return m_current;
 2994|   204k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 2992|  1.49M|    {
 2993|  1.49M|        return m_current;
 2994|  1.49M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|  96.1k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|  96.1k|                               detail::char_t<Range>>::forward_iterator>) {
  990|  96.1k|        auto beg = r.begin();
  991|  96.1k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 96.1k, False: 0]
  ------------------
  992|  96.1k|            return false;
  993|  96.1k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|  96.1k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  27.3k|    {
  763|  27.3k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  27.3k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  6.25k|        : m_fptr([](storage fn,
  743|  6.25k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.25k|              cvref<T> obj = *get<T>(fn);
  745|  6.25k|              if constexpr (std::is_void_v<R>) {
  746|  6.25k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.25k|              }
  748|  6.25k|              else {
  749|  6.25k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.25k|              }
  751|  6.25k|          }),
  752|  6.25k|          m_storage(std::addressof(f))
  753|  6.25k|    {
  754|  6.25k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  13.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.6k|              else {
  749|  13.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.6k|              }
  751|  13.6k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  13.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  13.6k|        else if constexpr (std::is_object_v<T>) {
  688|  13.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.6k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  6.25k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  6.25k|        {
  662|  6.25k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  63.1M|    {
  763|  63.1M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  63.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  63.1M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  1.91M|        : m_fptr([](storage fn,
  743|  1.91M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.91M|              cvref<T> obj = *get<T>(fn);
  745|  1.91M|              if constexpr (std::is_void_v<R>) {
  746|  1.91M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.91M|              }
  748|  1.91M|              else {
  749|  1.91M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.91M|              }
  751|  1.91M|          }),
  752|  1.91M|          m_storage(std::addressof(f))
  753|  1.91M|    {
  754|  1.91M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  4.52M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.52M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.52M|              else {
  749|  4.52M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.52M|              }
  751|  4.52M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  4.52M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.52M|        else if constexpr (std::is_object_v<T>) {
  688|  4.52M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.52M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  1.91M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.91M|        {
  662|  1.91M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|  39.6k|    {
 6075|  39.6k|        const bool need_skipped_width =
 6076|  39.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 39.6k]
  |  Branch (6076:33): [True: 0, False: 39.6k]
  ------------------
 6077|  39.6k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  39.6k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 39.6k]
  ------------------
 6081|  39.6k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 39.6k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  39.6k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 39.6k, False: 0]
  |  Branch (6085:56): [True: 37.5k, False: 2.08k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  37.5k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 37.5k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|  74.2k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  37.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  37.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  37.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  37.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 864, False: 36.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    864|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    864|    }                                                  \
  |  |  |  | 3939|  37.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  36.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|  74.2k|                            make_eof_scan_error));
 6096|       |
 6097|  74.2k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 36.6k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  36.6k|            return result_type{it, 0};
 6105|  74.2k|        }
 6106|       |
 6107|  2.08k|        return result_type{rng.begin(), 0};
 6108|  39.6k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.08k|{
 2075|  2.08k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  2.08k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  2.08k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  2.08k|    else {
 2060|  2.08k|        auto first = range.begin();
 2061|  4.63k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 4.55k, False: 76]
  ------------------
 2062|  4.55k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 2.00k, False: 2.54k]
  ------------------
 2063|  2.00k|                return first;
 2064|  2.00k|            }
 2065|  4.55k|        }
 2066|     76|        return first;
 2067|  2.08k|    }
 2068|  2.08k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  36.6k|    {
  108|  36.6k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  36.6k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  36.6k|    {
   94|  36.6k|        iter_difference_t<I> counter{0};
   95|   366k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 330k, False: 36.6k]
  ------------------
   96|   330k|            ++i;
   97|   330k|            ++counter;
   98|   330k|        }
   99|  36.6k|        return counter;
  100|  36.6k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   149k|{
  951|   149k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   149k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.02k, False: 147k]
  |  |  ------------------
  ------------------
  952|  2.02k|        return eof_error::eof;
  953|  2.02k|    }
  954|   147k|    return eof_error::good;
  955|   149k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.03M|{
  945|  1.03M|    return is_range_eof(r.begin(), r.end());
  946|  1.03M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.03M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.03M|    {
  938|  1.03M|        return begin == end;
  939|  1.03M|    }
  940|  1.03M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|  92.6k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|  92.6k|    else {
 1788|  92.6k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|  92.6k|    }
 1790|  92.6k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|  92.6k|    {
 1636|  92.6k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|  92.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|  92.6k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|  92.6k|    {
 1720|  92.6k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|  92.6k|                           ranges::common_range<Range>) {
 1737|  92.6k|            auto beg_seg = range.begin().contiguous_segment();
 1738|  92.6k|            auto end_seg = range.end().contiguous_segment();
 1739|  92.6k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|  92.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.73k, False: 89.8k]
  |  |  ------------------
  ------------------
 1740|  92.6k|                             detail::to_address(end_seg.end()))) {
 1741|  2.73k|                auto& str = m_storage.emplace();
 1742|  2.73k|                str.reserve(range.end().position() - range.begin().position());
 1743|  2.73k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  2.73k|                m_view = string_view_type{str};
 1745|  2.73k|                return;
 1746|  2.73k|            }
 1747|       |
 1748|  89.8k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|  89.8k|                                                            end_seg.data());
 1750|  89.8k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|  92.6k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   181k|    {
 1681|   181k|        return m_view;
 1682|   181k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|  92.6k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|  36.1k|    {
 6117|  36.1k|        const bool need_skipped_width =
 6118|  36.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 36.1k]
  |  Branch (6118:33): [True: 0, False: 36.1k]
  ------------------
 6119|  36.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  36.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 36.1k]
  ------------------
 6122|  36.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 36.1k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  36.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 36.1k, False: 0]
  ------------------
 6131|  36.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 536, False: 35.6k]
  ------------------
 6132|  36.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 536]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    536|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 536]
  ------------------
 6134|    536|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  36.1k|        return result_type{rng.begin(), 0};
 6156|  36.1k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   246k|{
  951|   246k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.17k, False: 243k]
  |  |  ------------------
  ------------------
  952|  3.17k|        return eof_error::eof;
  953|  3.17k|    }
  954|   243k|    return eof_error::good;
  955|   246k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   246k|{
  945|   246k|    return is_range_eof(r.begin(), r.end());
  946|   246k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   246k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   246k|    {
  938|   246k|        return begin == end;
  939|   246k|    }
  940|   246k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   152k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   152k|                  ranges::sized_range<Range>) {
 1785|   152k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   152k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   152k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   152k|    {
 1589|   152k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|   836k|    {
 1602|   836k|        return sv;
 1603|   836k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  4.16k|{
 2075|  4.16k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  4.16k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  4.16k|{
 2056|  4.16k|    if constexpr (ranges::common_range<Range>) {
 2057|  4.16k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  4.16k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|   153k|{
 3066|   153k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 153k, False: 0]
  ------------------
 3067|   153k|        auto it = read_while_classic_space(range);
 3068|   153k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   153k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   153k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.12k, False: 151k]
  |  |  ------------------
  ------------------
 3070|  2.12k|            return unexpected(e);
 3071|  2.12k|        }
 3072|       |
 3073|   151k|        return it;
 3074|   153k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   153k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|   153k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|   153k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|   153k|        auto buf = make_contiguous_buffer(range);
 2220|   153k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|   153k|        return ranges::next(range.begin(),
 2222|   153k|                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|       |    else {
 2225|       |        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|       |            return detail::is_cp_space(cp);
 2238|       |        });
 2239|       |    }
 2240|   153k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   305k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   305k|                  ranges::sized_range<Range>) {
 1785|   305k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|   305k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   305k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   305k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   305k|    {
 1589|   305k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  9.83k|    {
  304|  9.83k|        ranges::advance(x, n);
  305|  9.83k|        return x;
  306|  9.83k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   185k|    {
  268|   185k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   185k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   185k|    {
  181|   339k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 154k, False: 185k]
  ------------------
  182|   154k|            ++i;
  183|   154k|        }
  184|   185k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|  92.5k|    {
 1686|  92.5k|        return m_storage.has_value();
 1687|  92.5k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.66k|    {
 1691|  1.66k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.66k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.66k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.66k|        return *m_storage;
 1693|  1.66k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6226|  41.1k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|  41.1k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|  41.1k|            auto rd = make_reader<T, char_type>();
 6237|  41.1k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  41.1k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  41.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.51k, False: 39.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.51k|    }
  ------------------
 6238|       |
 6239|  39.6k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 39.6k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|  39.6k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|  39.6k|                return impl(rd, range, value);
 6242|  39.6k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  41.1k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5848|   178k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|   178k|                       std::is_same_v<T, std::wstring>) {
 5867|   178k|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   178k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5242|   259k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3155|   110k|    {
 3156|   110k|        reader_error_handler eh{};
 3157|   110k|        get_derived().check_specs_impl(specs, eh);
 3158|   110k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   110k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.53k, False: 105k]
  |  |  ------------------
  ------------------
 3159|  4.53k|            return detail::unexpected_scan_error(
 3160|  4.53k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  4.53k|        }
 3162|   105k|        return {};
 3163|   110k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3167|   110k|    {
 3168|   110k|        return static_cast<Derived&>(*this);
 3169|   110k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   110k|    {
 5247|   110k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   110k|        SCN_GCC_PUSH
 5250|   110k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   110k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   110k|        SCN_CLANG_PUSH
 5254|   110k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   110k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   110k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 110k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 110k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|  99.3k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 99.3k, False: 10.7k]
  ------------------
 5263|  99.3k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 99.3k]
  ------------------
 5264|  99.3k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 99.3k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|  99.3k|                else {
 5268|  99.3k|                    m_type = reader_type::word;
 5269|  99.3k|                }
 5270|  99.3k|                break;
 5271|      0|            }
 5272|       |
 5273|  4.53k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 4.53k, False: 105k]
  ------------------
 5274|  4.53k|                m_type = reader_type::character;
 5275|  4.53k|                break;
 5276|       |
 5277|  6.25k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 6.25k, False: 103k]
  ------------------
 5278|  6.25k|                m_type = reader_type::character_set;
 5279|  6.25k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 110k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 110k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   110k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   110k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|  39.6k|    {
 6162|  39.6k|        const bool need_skipped_width =
 6163|  39.6k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 39.6k]
  |  Branch (6163:33): [True: 0, False: 39.6k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  39.6k|        auto it = rng.begin();
 6167|  39.6k|        std::ptrdiff_t prefix_width = 0;
 6168|  39.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 39.6k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  39.6k|        else {
 6176|  39.6k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  39.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  39.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  39.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  39.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 864, False: 38.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    864|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    864|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    864|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    864|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    864|    }                                                  \
  |  |  |  | 3939|  39.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  38.7k|            std::tie(it, prefix_width) = prefix_result;
 6178|  38.7k|        }
 6179|  38.7k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  38.7k|        std::ptrdiff_t value_width = 0;
 6183|  38.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 38.7k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  38.7k|        else {
 6199|  38.7k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  38.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  38.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  38.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.15k, False: 36.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.15k|    }                                                  \
  |  | 3939|  38.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  38.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  36.6k|                                             specs, value, loc));
 6201|       |
 6202|  36.6k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 36.6k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  36.6k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  36.6k|        std::ptrdiff_t postfix_width = 0;
 6211|  36.6k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 36.1k, False: 452]
  ------------------
 6212|  36.1k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  36.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  36.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  36.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  36.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 36.1k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  36.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  36.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  36.1k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  36.1k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  36.1k|                                 value_width));
 6216|  36.1k|            std::tie(it, postfix_width) = postfix_result;
 6217|  36.1k|        }
 6218|       |
 6219|  36.6k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  36.6k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  36.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 36.6k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  36.6k|            specs, prefix_width, value_width, postfix_width));
 6221|  36.6k|        return it;
 6222|  36.6k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5295|   350k|    {
 5296|   350k|        return m_type == reader_type::word;
 5297|   350k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|   245k|{
 1242|   245k|    auto it = src.begin();
 1243|  1.54M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 1.30M, False: 239k]
  ------------------
 1244|  1.30M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  1.30M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 3.76k, False: 1.30M]
  ------------------
 1246|  3.76k|            return false;
 1247|  3.76k|        }
 1248|  1.30M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 531, False: 1.30M]
  ------------------
 1249|    531|            return false;
 1250|    531|        }
 1251|  1.30M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  1.30M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  1.30M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 1.83k, False: 1.30M]
  ------------------
 1254|  1.83k|            return false;
 1255|  1.83k|        }
 1256|  1.30M|        it += len;
 1257|  1.30M|    }
 1258|   239k|    return true;
 1259|   245k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|  90.8k|{
 3108|  90.8k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|  90.8k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.66k, False: 89.2k]
  ------------------
 3110|  1.66k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  1.66k|    static_cast<    \
  |  |  935|  1.66k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.66k|        }
 3112|  89.2k|        else {
 3113|  89.2k|            dest.assign(source.view());
 3114|  89.2k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|  90.8k|    return {};
 3121|  90.8k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5143|  6.25k|        {
 5144|  6.25k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 6.25k, False: 0]
  ------------------
 5145|  6.25k|                return {};
 5146|  6.25k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5116|  12.2k|        {
 5117|  12.2k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  12.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  12.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  12.2k|            const auto val =
 5119|  12.2k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  12.2k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  12.2k|                    (val % 8)) &
 5122|  12.2k|                   1u;
 5123|  12.2k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5167|  13.6k|        {
 5168|  13.6k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 1.43k, False: 12.2k]
  ------------------
 5169|  1.43k|                return false;
 5170|  1.43k|            }
 5171|       |
 5172|  12.2k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  13.6k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  6.25k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|  38.7k|    {
 5314|  38.7k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  38.7k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  38.7k|        return read_impl(range, specs, value);
 5316|  38.7k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|  38.7k|    {
 5332|  38.7k|        SCN_CLANG_PUSH
 5333|  38.7k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  38.7k|        switch (m_type) {
 5336|  36.6k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 36.6k, False: 2.08k]
  ------------------
 5337|  36.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 38.7k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 38.7k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.08k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.08k, False: 36.6k]
  ------------------
 5347|  2.08k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.08k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 38.7k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 38.7k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 38.7k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  38.7k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  38.7k|        }
 5368|       |
 5369|  38.7k|        SCN_CLANG_POP
 5370|  38.7k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|  92.0k|    {
 4861|  92.0k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|  92.0k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|  92.0k|{
 4795|  92.0k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  92.0k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  92.0k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 1.75k, False: 90.3k]
  ------------------
 4799|  1.75k|        return detail::unexpected_scan_error(
 4800|  1.75k|            scan_error::invalid_scanned_value,
 4801|  1.75k|            "Invalid encoding in scanned string");
 4802|  1.75k|    }
 4803|       |
 4804|  90.3k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  90.3k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  90.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 90.3k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|  90.3k|    return SCN_MOVE(result);
  ------------------
  |  |  934|  90.3k|    static_cast<    \
  |  |  935|  90.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|  90.3k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|  92.0k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  92.0k|    else {
 2196|  92.0k|        auto it = range.begin();
 2197|       |
 2198|  92.0k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|  92.0k|            auto seg = get_contiguous_beginning(range);
 2200|  92.0k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|  92.0k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2201:17): [True: 0, False: 92.0k]
  ------------------
 2202|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|      0|            }
 2204|  92.0k|            ranges::advance(it, seg.size());
 2205|  92.0k|        }
 2206|       |
 2207|      0|        return read_until_code_point(
 2208|  92.0k|            ranges::subrange{it, range.end()},
 2209|  92.0k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  92.0k|    }
 2211|  92.0k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   185k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   185k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   185k|        else {
 1055|   185k|            return r.begin().contiguous_segment();
 1056|   185k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   185k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|   175k|{
 2160|   175k|    auto it = range.begin();
 2161|   885k|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 882k, False: 3.53k]
  ------------------
 2162|   882k|        const auto val =
 2163|   882k|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|   882k|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|   882k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 869k, False: 12.9k]
  |  |  ------------------
  ------------------
 2165|   869k|            const auto cp = detail::decode_code_point_exhaustive(
 2166|   869k|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|   869k|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 172k, False: 697k]
  ------------------
 2168|   172k|                return it;
 2169|   172k|            }
 2170|   869k|        }
 2171|   710k|        it = val.iterator;
 2172|   710k|    }
 2173|       |
 2174|  3.53k|    return it;
 2175|   175k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|   882k|{
 1998|   882k|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|   882k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   882k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|   882k|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|   882k|    auto it = range.begin();
 2002|   882k|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|   882k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|   882k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 12.9k, False: 869k]
  |  |  ------------------
  ------------------
 2005|  12.9k|        ++it;
 2006|  12.9k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  12.9k|        return {it, {}};
 2008|  12.9k|    }
 2009|       |
 2010|   869k|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 818k, False: 50.6k]
  ------------------
 2011|   818k|        ++it;
 2012|   818k|        return {it, string_type(1, *range.begin())};
 2013|   818k|    }
 2014|       |
 2015|  50.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  50.6k|    return {it, string_type{range.begin(), it}};
 2017|   869k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  12.9k|{
 1265|  12.9k|    auto it = input.begin();
 1266|  24.3k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 23.7k, False: 548]
  ------------------
 1267|  23.7k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 12.4k, False: 11.3k]
  ------------------
 1268|  12.4k|            break;
 1269|  12.4k|        }
 1270|  23.7k|    }
 1271|  12.9k|    return it;
 1272|  12.9k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  50.6k|    {
  283|  50.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  50.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  50.6k|    {
  252|  50.6k|        constexpr iter_difference_t<I> zero{0};
  253|  50.6k|        iter_difference_t<I> counter{0};
  254|       |
  255|   185k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 134k, False: 50.2k]
  |  Branch (255:30): [True: 134k, False: 400]
  ------------------
  256|   134k|            ++i;
  257|   134k|            ++counter;
  258|   134k|        }
  259|       |
  260|  50.6k|        return counter;
  261|  50.6k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|   882k|    {
 1989|   882k|        return !codepoint.empty();
 1990|   882k|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  92.0k|        : m_fptr([](storage fn,
  743|  92.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  92.0k|              cvref<T> obj = *get<T>(fn);
  745|  92.0k|              if constexpr (std::is_void_v<R>) {
  746|  92.0k|                  obj(static_cast<decltype(args)>(args)...);
  747|  92.0k|              }
  748|  92.0k|              else {
  749|  92.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  92.0k|              }
  751|  92.0k|          }),
  752|  92.0k|          m_storage(std::addressof(f))
  753|  92.0k|    {
  754|  92.0k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   521k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   521k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   521k|              else {
  749|   521k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   521k|              }
  751|   521k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   521k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   521k|        else if constexpr (std::is_object_v<T>) {
  688|   521k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   521k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|   521k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  92.0k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  92.0k|        {
  662|  92.0k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  2.08k|    {
 5089|  2.08k|        auto it = read_source_impl(range, {specs});
 5090|  2.08k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.51k, False: 574]
  |  |  ------------------
  ------------------
 5091|  1.51k|            return unexpected(it.error());
 5092|  1.51k|        }
 5093|       |
 5094|    574|        return read_string_impl(range, *it, value);
 5095|  2.08k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  2.08k|    {
 5192|  2.08k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  2.08k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  2.08k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  2.08k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 2.08k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  2.08k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  2.08k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 2.08k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  2.08k|        const auto cb = [&](SourceCharT ch) {
 5213|  2.08k|            return cb_wrapper.on_ascii_only(ch);
 5214|  2.08k|        };
 5215|       |
 5216|  2.08k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 2.08k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  2.08k|        auto it = read_while_code_unit(range, cb);
 5221|  2.08k|        return check_nonempty(it, range);
 5222|  2.08k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  2.08k|    {
 5228|  2.08k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 1.51k, False: 574]
  ------------------
 5229|  1.51k|            return detail::unexpected_scan_error(
 5230|  1.51k|                scan_error::invalid_scanned_value,
 5231|  1.51k|                "No characters matched in [character set]");
 5232|  1.51k|        }
 5233|       |
 5234|    574|        return it;
 5235|  2.08k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|  83.5k|{
 2181|  83.5k|    return read_until_code_point(range, std::not_fn(pred));
 2182|  83.5k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.08k|        : m_fptr([](storage fn,
  743|  2.08k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.08k|              cvref<T> obj = *get<T>(fn);
  745|  2.08k|              if constexpr (std::is_void_v<R>) {
  746|  2.08k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.08k|              }
  748|  2.08k|              else {
  749|  2.08k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.08k|              }
  751|  2.08k|          }),
  752|  2.08k|          m_storage(std::addressof(f))
  753|  2.08k|    {
  754|  2.08k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  4.55k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.55k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.55k|              else {
  749|  4.55k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.55k|              }
  751|  4.55k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  4.55k|    {
  684|  4.55k|        if constexpr (std::is_const_v<T>) {
  685|  4.55k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.55k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5212|  4.55k|        const auto cb = [&](SourceCharT ch) {
 5213|  4.55k|            return cb_wrapper.on_ascii_only(ch);
 5214|  4.55k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.08k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.08k|        {
  667|  2.08k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    574|{
 4795|    574|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    574|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    574|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 574]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    574|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    574|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    574|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 574]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    574|    return SCN_MOVE(result);
  ------------------
  |  |  934|    574|    static_cast<    \
  |  |  935|    574|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    574|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|  32.3k|    {
 5314|  32.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  32.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  32.3k|        return read_impl(range, specs, value);
 5316|  32.3k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|  32.3k|    {
 5332|  32.3k|        SCN_CLANG_PUSH
 5333|  32.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  32.3k|        switch (m_type) {
 5336|  30.2k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 30.2k, False: 2.08k]
  ------------------
 5337|  30.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 32.3k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 32.3k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.08k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.08k, False: 30.2k]
  ------------------
 5347|  2.08k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.08k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 32.3k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 32.3k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 32.3k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  32.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  32.3k|        }
 5368|       |
 5369|  32.3k|        SCN_CLANG_POP
 5370|  32.3k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|  75.7k|    {
 4861|  75.7k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|  75.7k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|  75.7k|{
 4795|  75.7k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|  75.7k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|  75.7k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 2.19k, False: 73.5k]
  ------------------
 4799|  2.19k|        return detail::unexpected_scan_error(
 4800|  2.19k|            scan_error::invalid_scanned_value,
 4801|  2.19k|            "Invalid encoding in scanned string");
 4802|  2.19k|    }
 4803|       |
 4804|  73.5k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|  73.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  73.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 73.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|  73.5k|    return SCN_MOVE(result);
  ------------------
  |  |  934|  73.5k|    static_cast<    \
  |  |  935|  73.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|  73.5k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|  74.1k|{
 3128|  74.1k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|  74.1k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|  74.1k|    return {};
 3136|  74.1k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|   151k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|   151k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|   151k|        auto buf = make_contiguous_buffer(range);
 2191|   151k|        auto it = find_classic_space_narrow_fast(buf.view());
 2192|   151k|        return ranges::next(range.begin(),
 2193|   151k|                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|       |    else {
 2196|       |        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|       |        return read_until_code_point(
 2208|       |            ranges::subrange{it, range.end()},
 2209|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|       |    }
 2211|   151k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  2.08k|    {
 5089|  2.08k|        auto it = read_source_impl(range, {specs});
 5090|  2.08k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.51k, False: 574]
  |  |  ------------------
  ------------------
 5091|  1.51k|            return unexpected(it.error());
 5092|  1.51k|        }
 5093|       |
 5094|    574|        return read_string_impl(range, *it, value);
 5095|  2.08k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  4.16k|    {
 5192|  4.16k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  4.16k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  4.16k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  4.16k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  4.16k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 4.16k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  4.16k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  4.16k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 4.16k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  4.16k|        const auto cb = [&](SourceCharT ch) {
 5213|  4.16k|            return cb_wrapper.on_ascii_only(ch);
 5214|  4.16k|        };
 5215|       |
 5216|  4.16k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 4.16k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  4.16k|        auto it = read_while_code_unit(range, cb);
 5221|  4.16k|        return check_nonempty(it, range);
 5222|  4.16k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  4.16k|    {
 5228|  4.16k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.02k, False: 1.14k]
  ------------------
 5229|  3.02k|            return detail::unexpected_scan_error(
 5230|  3.02k|                scan_error::invalid_scanned_value,
 5231|  3.02k|                "No characters matched in [character set]");
 5232|  3.02k|        }
 5233|       |
 5234|  1.14k|        return it;
 5235|  4.16k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  4.16k|        : m_fptr([](storage fn,
  743|  4.16k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.16k|              cvref<T> obj = *get<T>(fn);
  745|  4.16k|              if constexpr (std::is_void_v<R>) {
  746|  4.16k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.16k|              }
  748|  4.16k|              else {
  749|  4.16k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.16k|              }
  751|  4.16k|          }),
  752|  4.16k|          m_storage(std::addressof(f))
  753|  4.16k|    {
  754|  4.16k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  9.10k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.10k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.10k|              else {
  749|  9.10k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.10k|              }
  751|  9.10k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  9.10k|    {
  684|  9.10k|        if constexpr (std::is_const_v<T>) {
  685|  9.10k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.10k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5212|  9.10k|        const auto cb = [&](SourceCharT ch) {
 5213|  9.10k|            return cb_wrapper.on_ascii_only(ch);
 5214|  9.10k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  4.16k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.16k|        {
  667|  4.16k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    574|{
 4795|    574|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    574|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    574|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 574]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    574|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    574|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    574|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 574]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    574|    return SCN_MOVE(result);
  ------------------
  |  |  934|    574|    static_cast<    \
  |  |  935|    574|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    574|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5848|  80.9k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|  80.9k|                       std::is_same_v<T, std::wstring_view>) {
 5863|  80.9k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  80.9k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|  32.3k|    {
 5314|  32.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  32.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|  32.3k|        return read_impl(range, specs, value);
 5316|  32.3k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|  32.3k|    {
 5332|  32.3k|        SCN_CLANG_PUSH
 5333|  32.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|  32.3k|        switch (m_type) {
 5336|  30.2k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 30.2k, False: 2.08k]
  ------------------
 5337|  30.2k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 32.3k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 32.3k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  2.08k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 2.08k, False: 30.2k]
  ------------------
 5347|  2.08k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  2.08k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 32.3k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 32.3k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 32.3k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|  32.3k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|  32.3k|        }
 5368|       |
 5369|  32.3k|        SCN_CLANG_POP
 5370|  32.3k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|  75.7k|    {
 4868|  75.7k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|  75.7k|                                     value);
 4870|  75.7k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|  75.7k|{
 4814|  75.7k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|  75.7k|    auto src = [&]() {
 4817|  75.7k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|  75.7k|            return make_contiguous_buffer(
 4819|  75.7k|                ranges::subrange{range.begin().base(), result.base()});
 4820|  75.7k|        }
 4821|  75.7k|        else {
 4822|  75.7k|            return make_contiguous_buffer(
 4823|  75.7k|                ranges::subrange{range.begin(), result});
 4824|  75.7k|        }
 4825|  75.7k|    }();
 4826|  75.7k|    using src_type = decltype(src);
 4827|       |
 4828|  75.7k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|  75.7k|    else {
 4841|  75.7k|        const auto view = src.view();
 4842|  75.7k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|  75.7k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 2.19k, False: 73.5k]
  ------------------
 4845|  2.19k|            return detail::unexpected_scan_error(
 4846|  2.19k|                scan_error::invalid_scanned_value,
 4847|  2.19k|                "Invalid encoding in scanned string_view");
 4848|  2.19k|        }
 4849|       |
 4850|  73.5k|        return SCN_MOVE(result);
  ------------------
  |  |  934|  73.5k|    static_cast<    \
  |  |  935|  73.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|  75.7k|    }
 4852|  75.7k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|  75.7k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|  75.7k|        else {
 4822|  75.7k|            return make_contiguous_buffer(
 4823|  75.7k|                ranges::subrange{range.begin(), result});
 4824|  75.7k|        }
 4825|  75.7k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  2.08k|    {
 5103|  2.08k|        auto it = read_source_impl(range, {specs});
 5104|  2.08k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  2.08k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.51k, False: 574]
  |  |  ------------------
  ------------------
 5105|  1.51k|            return unexpected(it.error());
 5106|  1.51k|        }
 5107|       |
 5108|    574|        return read_string_view_impl(range, *it, value);
 5109|  2.08k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    574|{
 4814|    574|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    574|    auto src = [&]() {
 4817|    574|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    574|            return make_contiguous_buffer(
 4819|    574|                ranges::subrange{range.begin().base(), result.base()});
 4820|    574|        }
 4821|    574|        else {
 4822|    574|            return make_contiguous_buffer(
 4823|    574|                ranges::subrange{range.begin(), result});
 4824|    574|        }
 4825|    574|    }();
 4826|    574|    using src_type = decltype(src);
 4827|       |
 4828|    574|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    574|    else {
 4841|    574|        const auto view = src.view();
 4842|    574|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    574|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 574]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    574|        return SCN_MOVE(result);
  ------------------
  |  |  934|    574|    static_cast<    \
  |  |  935|    574|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    574|    }
 4852|    574|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    574|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    574|        else {
 4822|    574|            return make_contiguous_buffer(
 4823|    574|                ranges::subrange{range.begin(), result});
 4824|    574|        }
 4825|    574|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|  93.4k|{
 3066|  93.4k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 93.4k, False: 0]
  ------------------
 3067|  93.4k|        auto it = read_while_classic_space(range);
 3068|  93.4k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  93.4k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  93.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.35k, False: 92.0k]
  |  |  ------------------
  ------------------
 3070|  1.35k|            return unexpected(e);
 3071|  1.35k|        }
 3072|       |
 3073|  92.0k|        return it;
 3074|  93.4k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  93.4k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|  93.4k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  93.4k|    else {
 2225|  93.4k|        auto it = range.begin();
 2226|       |
 2227|  93.4k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|  93.4k|            auto seg = get_contiguous_beginning(range);
 2229|  93.4k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|  93.4k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2230:17): [True: 9.83k, False: 83.5k]
  ------------------
 2231|  9.83k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|  9.83k|            }
 2233|  83.5k|            ranges::advance(it, seg.size());
 2234|  83.5k|        }
 2235|       |
 2236|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  93.4k|            return detail::is_cp_space(cp);
 2238|  93.4k|        });
 2239|  93.4k|    }
 2240|  93.4k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|  83.5k|        : m_fptr([](storage fn,
  743|  83.5k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  83.5k|              cvref<T> obj = *get<T>(fn);
  745|  83.5k|              if constexpr (std::is_void_v<R>) {
  746|  83.5k|                  obj(static_cast<decltype(args)>(args)...);
  747|  83.5k|              }
  748|  83.5k|              else {
  749|  83.5k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  83.5k|              }
  751|  83.5k|          }),
  752|  83.5k|          m_storage(std::addressof(f))
  753|  83.5k|    {
  754|  83.5k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   347k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   347k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   347k|              else {
  749|   347k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   347k|              }
  751|   347k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   347k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   347k|        else if constexpr (std::is_object_v<T>) {
  688|   347k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   347k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|   347k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   347k|            return detail::is_cp_space(cp);
 2238|   347k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|  83.5k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  83.5k|        {
  662|  83.5k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   613k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   613k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   613k|        auto beg = r.begin();
  991|   613k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 613k, False: 0]
  ------------------
  992|   613k|            return false;
  993|   613k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   613k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  23.6k|    {
  763|  23.6k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  936|  23.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  23.6k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  9.36k|        : m_fptr([](storage fn,
  743|  9.36k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.36k|              cvref<T> obj = *get<T>(fn);
  745|  9.36k|              if constexpr (std::is_void_v<R>) {
  746|  9.36k|                  obj(static_cast<decltype(args)>(args)...);
  747|  9.36k|              }
  748|  9.36k|              else {
  749|  9.36k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.36k|              }
  751|  9.36k|          }),
  752|  9.36k|          m_storage(std::addressof(f))
  753|  9.36k|    {
  754|  9.36k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  11.8k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  11.8k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  11.8k|              else {
  749|  11.8k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  11.8k|              }
  751|  11.8k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  11.8k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  11.8k|        else if constexpr (std::is_object_v<T>) {
  688|  11.8k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  11.8k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  9.36k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  9.36k|        {
  662|  9.36k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6074|   247k|    {
 6075|   247k|        const bool need_skipped_width =
 6076|   247k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 247k]
  |  Branch (6076:33): [True: 0, False: 247k]
  ------------------
 6077|   247k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   247k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 247k]
  ------------------
 6081|   247k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 247k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   247k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 247k, False: 0]
  |  Branch (6085:56): [True: 244k, False: 3.12k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   244k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 244k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   487k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   244k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   244k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   244k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 874, False: 243k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    874|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    874|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    874|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    874|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    874|    }                                                  \
  |  |  |  | 3939|   244k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   243k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   487k|                            make_eof_scan_error));
 6096|       |
 6097|   487k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 243k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   243k|            return result_type{it, 0};
 6105|   487k|        }
 6106|       |
 6107|  3.12k|        return result_type{rng.begin(), 0};
 6108|   247k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  3.12k|{
 2075|  3.12k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  3.12k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2055|  3.12k|{
 2056|       |    if constexpr (ranges::common_range<Range>) {
 2057|       |        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|  3.12k|    else {
 2060|  3.12k|        auto first = range.begin();
 2061|  3.99k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2061:16): [True: 3.93k, False: 56]
  ------------------
 2062|  3.93k|            if (pred(*first)) {
  ------------------
  |  Branch (2062:17): [True: 3.06k, False: 874]
  ------------------
 2063|  3.06k|                return first;
 2064|  3.06k|            }
 2065|  3.93k|        }
 2066|     56|        return first;
 2067|  3.12k|    }
 2068|  3.12k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   241k|    {
  108|   241k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   241k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   241k|    {
   94|   241k|        iter_difference_t<I> counter{0};
   95|  7.38M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 7.14M, False: 241k]
  ------------------
   96|  7.14M|            ++i;
   97|  7.14M|            ++counter;
   98|  7.14M|        }
   99|   241k|        return counter;
  100|   241k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   975k|{
  951|   975k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|   975k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.18k, False: 973k]
  |  |  ------------------
  ------------------
  952|  2.18k|        return eof_error::eof;
  953|  2.18k|    }
  954|   973k|    return eof_error::good;
  955|   975k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  20.2M|{
  945|  20.2M|    return is_range_eof(r.begin(), r.end());
  946|  20.2M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  20.2M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  20.2M|    {
  938|  20.2M|        return begin == end;
  939|  20.2M|    }
  940|  20.2M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|   608k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   608k|    else {
 1788|   608k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  936|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   608k|    }
 1790|   608k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   608k|    {
 1636|   608k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  936|   608k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   608k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   608k|    {
 1720|   608k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   608k|                           ranges::common_range<Range>) {
 1737|   608k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   608k|            auto end_seg = range.end().contiguous_segment();
 1739|   608k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  865|   608k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.97k, False: 605k]
  |  |  ------------------
  ------------------
 1740|   608k|                             detail::to_address(end_seg.end()))) {
 1741|  2.97k|                auto& str = m_storage.emplace();
 1742|  2.97k|                str.reserve(range.end().position() - range.begin().position());
 1743|  2.97k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  2.97k|                m_view = string_view_type{str};
 1745|  2.97k|                return;
 1746|  2.97k|            }
 1747|       |
 1748|   605k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   605k|                                                            end_seg.data());
 1750|   605k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   608k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  1.21M|    {
 1681|  1.21M|        return m_view;
 1682|  1.21M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|   608k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6116|   240k|    {
 6117|   240k|        const bool need_skipped_width =
 6118|   240k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 240k]
  |  Branch (6118:33): [True: 0, False: 240k]
  ------------------
 6119|   240k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   240k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 240k]
  ------------------
 6122|   240k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 240k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   240k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 240k, False: 0]
  ------------------
 6131|   240k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 72, False: 240k]
  ------------------
 6132|   240k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 72]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|     72|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 72]
  ------------------
 6134|     72|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   240k|        return result_type{rng.begin(), 0};
 6156|   240k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  38.4M|{
 1998|  38.4M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  38.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  38.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  38.4M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  38.4M|    auto it = range.begin();
 2002|  38.4M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  38.4M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  38.4M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 38.4M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  38.4M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 38.4M, False: 0]
  ------------------
 2011|  38.4M|        ++it;
 2012|  38.4M|        return {it, string_type(1, *range.begin())};
 2013|  38.4M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  38.4M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  40.4M|{
  945|  40.4M|    return is_range_eof(r.begin(), r.end());
  946|  40.4M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  40.4M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  40.4M|    {
  938|  40.4M|        return begin == end;
  939|  40.4M|    }
  940|  40.4M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  38.4M|    {
 1989|  38.4M|        return !codepoint.empty();
 1990|  38.4M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  1.95M|{
  951|  1.95M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  865|  1.95M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 4.37k, False: 1.94M]
  |  |  ------------------
  ------------------
  952|  4.37k|        return eof_error::eof;
  953|  4.37k|    }
  954|  1.94M|    return eof_error::good;
  955|  1.95M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  1.21M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.21M|                  ranges::sized_range<Range>) {
 1785|  1.21M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  936|  1.21M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.21M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.21M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.21M|    {
 1589|  1.21M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  1.81M|    {
 1602|  1.81M|        return sv;
 1603|  1.81M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  6.24k|{
 2075|  6.24k|    return read_until_code_unit(range, std::not_fn(pred));
 2076|  6.24k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2055|  6.24k|{
 2056|  6.24k|    if constexpr (ranges::common_range<Range>) {
 2057|  6.24k|        return std::find_if(range.begin(), range.end(), pred);
 2058|       |    }
 2059|       |    else {
 2060|       |        auto first = range.begin();
 2061|       |        for (; first != range.end(); ++first) {
 2062|       |            if (pred(*first)) {
 2063|       |                return first;
 2064|       |            }
 2065|       |        }
 2066|       |        return first;
 2067|       |    }
 2068|  6.24k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3065|  1.21M|{
 3066|  1.21M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 1.21M, False: 0]
  ------------------
 3067|  1.21M|        auto it = read_while_classic_space(range);
 3068|  1.21M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|  1.21M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  1.21M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.28k, False: 1.21M]
  |  |  ------------------
  ------------------
 3070|  2.28k|            return unexpected(e);
 3071|  2.28k|        }
 3072|       |
 3073|  1.21M|        return it;
 3074|  1.21M|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|  1.21M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2215|  1.21M|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|  1.21M|    else {
 2225|  1.21M|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|  1.21M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.21M|            return detail::is_cp_space(cp);
 2238|  1.21M|        });
 2239|  1.21M|    }
 2240|  1.21M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2180|  1.21M|{
 2181|  1.21M|    return read_until_code_point(range, std::not_fn(pred));
 2182|  1.21M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2159|  2.43M|{
 2160|  2.43M|    auto it = range.begin();
 2161|  38.5M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 38.4M, False: 11.2k]
  ------------------
 2162|  38.4M|        const auto val =
 2163|  38.4M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  38.4M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  38.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 38.4M, False: 0]
  |  |  ------------------
  ------------------
 2165|  38.4M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  38.4M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  38.4M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 2.42M, False: 36.0M]
  ------------------
 2168|  2.42M|                return it;
 2169|  2.42M|            }
 2170|  38.4M|        }
 2171|  36.0M|        it = val.iterator;
 2172|  36.0M|    }
 2173|       |
 2174|  11.2k|    return it;
 2175|  2.43M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.21M|        : m_fptr([](storage fn,
  743|  1.21M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.21M|              cvref<T> obj = *get<T>(fn);
  745|  1.21M|              if constexpr (std::is_void_v<R>) {
  746|  1.21M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.21M|              }
  748|  1.21M|              else {
  749|  1.21M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.21M|              }
  751|  1.21M|          }),
  752|  1.21M|          m_storage(std::addressof(f))
  753|  1.21M|    {
  754|  1.21M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  2.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.78M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.78M|              else {
  749|  2.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.78M|              }
  751|  2.78M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  2.78M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.78M|        else if constexpr (std::is_object_v<T>) {
  688|  2.78M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.78M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2236|  2.78M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  2.78M|            return detail::is_cp_space(cp);
 2238|  2.78M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.21M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.21M|        {
  662|  1.21M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   603k|    {
 1686|   603k|        return m_storage.has_value();
 1687|   603k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|  1.05k|    {
 1691|  1.05k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  930|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.05k|        return *m_storage;
 1693|  1.05k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5242|  1.84M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3155|   750k|    {
 3156|   750k|        reader_error_handler eh{};
 3157|   750k|        get_derived().check_specs_impl(specs, eh);
 3158|   750k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  865|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 9.06k, False: 741k]
  |  |  ------------------
  ------------------
 3159|  9.06k|            return detail::unexpected_scan_error(
 3160|  9.06k|                scan_error::invalid_format_string, eh.m_msg);
 3161|  9.06k|        }
 3162|   741k|        return {};
 3163|   750k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3167|   750k|    {
 3168|   750k|        return static_cast<Derived&>(*this);
 3169|   750k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5246|   750k|    {
 5247|   750k|        detail::check_string_type_specs(specs, eh);
 5248|       |
 5249|   750k|        SCN_GCC_PUSH
 5250|   750k|        SCN_GCC_IGNORE("-Wswitch")
 5251|   750k|        SCN_GCC_IGNORE("-Wswitch-default")
 5252|       |
 5253|   750k|        SCN_CLANG_PUSH
 5254|   750k|        SCN_CLANG_IGNORE("-Wswitch")
 5255|   750k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5256|       |
 5257|   750k|        switch (specs.type) {
  ------------------
  |  Branch (5257:17): [True: 0, False: 750k]
  ------------------
 5258|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5258:13): [True: 0, False: 750k]
  ------------------
 5259|      0|                m_type = reader_type::word;
 5260|      0|                break;
 5261|       |
 5262|   732k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5262:13): [True: 732k, False: 18.4k]
  ------------------
 5263|   732k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5263:21): [True: 0, False: 732k]
  ------------------
 5264|   732k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5264:21): [True: 0, False: 732k]
  ------------------
 5265|      0|                    m_type = reader_type::custom_word;
 5266|      0|                }
 5267|   732k|                else {
 5268|   732k|                    m_type = reader_type::word;
 5269|   732k|                }
 5270|   732k|                break;
 5271|      0|            }
 5272|       |
 5273|  9.06k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5273:13): [True: 9.06k, False: 741k]
  ------------------
 5274|  9.06k|                m_type = reader_type::character;
 5275|  9.06k|                break;
 5276|       |
 5277|  9.36k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5277:13): [True: 9.36k, False: 741k]
  ------------------
 5278|  9.36k|                m_type = reader_type::character_set;
 5279|  9.36k|                break;
 5280|       |
 5281|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5281:13): [True: 0, False: 750k]
  ------------------
 5282|      0|                m_type = reader_type::regex;
 5283|      0|                break;
 5284|       |
 5285|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5285:13): [True: 0, False: 750k]
  ------------------
 5286|      0|                m_type = reader_type::regex_escaped;
 5287|      0|                break;
 5288|   750k|        }
 5289|       |
 5290|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5291|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5292|   750k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5295|  2.56M|    {
 5296|  2.56M|        return m_type == reader_type::word;
 5297|  2.56M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  1.82M|{
 1242|  1.82M|    auto it = src.begin();
 1243|  53.0M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 51.2M, False: 1.80M]
  ------------------
 1244|  51.2M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  51.2M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 51.2M]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  51.2M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 51.2M]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  51.2M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  51.2M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  51.2M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 16.0k, False: 51.2M]
  ------------------
 1254|  16.0k|            return false;
 1255|  16.0k|        }
 1256|  51.2M|        it += len;
 1257|  51.2M|    }
 1258|  1.80M|    return true;
 1259|  1.82M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5143|  9.36k|        {
 5144|  9.36k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5144:17): [True: 9.36k, False: 0]
  ------------------
 5145|  9.36k|                return {};
 5146|  9.36k|            }
 5147|       |
 5148|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5149|      0|            auto it = detail::to_address(charset_string.begin());
 5150|      0|            auto set = detail::parse_presentation_set(
 5151|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5152|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3930|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5153|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5154|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  931|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5155|       |
 5156|      0|            std::sort(nonascii.extra_ranges.begin(),
 5157|      0|                      nonascii.extra_ranges.end());
 5158|      0|            return {};
 5159|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5116|  7.54k|        {
 5117|  7.54k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  930|  7.54k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  7.54k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5118|  7.54k|            const auto val =
 5119|  7.54k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5120|  7.54k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5121|  7.54k|                    (val % 8)) &
 5122|  7.54k|                   1u;
 5123|  7.54k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5167|  11.8k|        {
 5168|  11.8k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5168:17): [True: 4.26k, False: 7.54k]
  ------------------
 5169|  4.26k|                return false;
 5170|  4.26k|            }
 5171|       |
 5172|  7.54k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5173|  11.8k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5113|  9.36k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2186|   608k|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|   608k|    else {
 2196|   608k|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|   608k|        return read_until_code_point(
 2208|   608k|            ranges::subrange{it, range.end()},
 2209|   608k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|   608k|    }
 2211|   608k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2159|  1.21M|{
 2160|  1.21M|    auto it = range.begin();
 2161|  19.2M|    while (it != range.end()) {
  ------------------
  |  Branch (2161:12): [True: 19.2M, False: 5.63k]
  ------------------
 2162|  19.2M|        const auto val =
 2163|  19.2M|            read_code_point_into(ranges::subrange{it, range.end()});
 2164|  19.2M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  864|  19.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (864:25): [True: 19.2M, False: 0]
  |  |  ------------------
  ------------------
 2165|  19.2M|            const auto cp = detail::decode_code_point_exhaustive(
 2166|  19.2M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2167|  19.2M|            if (pred(cp)) {
  ------------------
  |  Branch (2167:17): [True: 1.21M, False: 18.0M]
  ------------------
 2168|  1.21M|                return it;
 2169|  1.21M|            }
 2170|  19.2M|        }
 2171|  18.0M|        it = val.iterator;
 2172|  18.0M|    }
 2173|       |
 2174|  5.63k|    return it;
 2175|  1.21M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  19.2M|{
 1998|  19.2M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  930|  19.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  19.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  19.2M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  19.2M|    auto it = range.begin();
 2002|  19.2M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  19.2M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  865|  19.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 0, False: 19.2M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  19.2M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 19.2M, False: 0]
  ------------------
 2011|  19.2M|        ++it;
 2012|  19.2M|        return {it, string_type(1, *range.begin())};
 2013|  19.2M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  19.2M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  19.2M|    {
 1989|  19.2M|        return !codepoint.empty();
 1990|  19.2M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   608k|        : m_fptr([](storage fn,
  743|   608k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   608k|              cvref<T> obj = *get<T>(fn);
  745|   608k|              if constexpr (std::is_void_v<R>) {
  746|   608k|                  obj(static_cast<decltype(args)>(args)...);
  747|   608k|              }
  748|   608k|              else {
  749|   608k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   608k|              }
  751|   608k|          }),
  752|   608k|          m_storage(std::addressof(f))
  753|   608k|    {
  754|   608k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  17.8M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  17.8M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  17.8M|              else {
  749|  17.8M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  17.8M|              }
  751|  17.8M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  17.8M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  17.8M|        else if constexpr (std::is_object_v<T>) {
  688|  17.8M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  17.8M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2209|  17.8M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   608k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   608k|        {
  662|   608k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5191|  3.12k|    {
 5192|  3.12k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  3.12k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  3.12k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  3.12k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 3.12k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  3.12k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  3.12k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 3.12k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  3.12k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.12k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.12k|        };
 5215|       |
 5216|  3.12k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 3.12k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  3.12k|        auto it = read_while_code_unit(range, cb);
 5221|  3.12k|        return check_nonempty(it, range);
 5222|  3.12k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5227|  3.12k|    {
 5228|  3.12k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 3.02k, False: 100]
  ------------------
 5229|  3.02k|            return detail::unexpected_scan_error(
 5230|  3.02k|                scan_error::invalid_scanned_value,
 5231|  3.02k|                "No characters matched in [character set]");
 5232|  3.02k|        }
 5233|       |
 5234|    100|        return it;
 5235|  3.12k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2180|   609k|{
 2181|   609k|    return read_until_code_point(range, std::not_fn(pred));
 2182|   609k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  3.12k|        : m_fptr([](storage fn,
  743|  3.12k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.12k|              cvref<T> obj = *get<T>(fn);
  745|  3.12k|              if constexpr (std::is_void_v<R>) {
  746|  3.12k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.12k|              }
  748|  3.12k|              else {
  749|  3.12k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.12k|              }
  751|  3.12k|          }),
  752|  3.12k|          m_storage(std::addressof(f))
  753|  3.12k|    {
  754|  3.12k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  3.93k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.93k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.93k|              else {
  749|  3.93k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.93k|              }
  751|  3.93k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  3.93k|    {
  684|  3.93k|        if constexpr (std::is_const_v<T>) {
  685|  3.93k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.93k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5212|  3.93k|        const auto cb = [&](SourceCharT ch) {
 5213|  3.93k|            return cb_wrapper.on_ascii_only(ch);
 5214|  3.93k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  3.12k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.12k|        {
  667|  3.12k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2186|  1.21M|{
 2187|       |    if constexpr (ranges::contiguous_range<Range> &&
 2188|       |                  ranges::sized_range<Range> &&
 2189|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2190|       |        auto buf = make_contiguous_buffer(range);
 2191|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2192|       |        return ranges::next(range.begin(),
 2193|       |                            ranges::distance(buf.view().begin(), it));
 2194|       |    }
 2195|  1.21M|    else {
 2196|  1.21M|        auto it = range.begin();
 2197|       |
 2198|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2199|       |            auto seg = get_contiguous_beginning(range);
 2200|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2201|       |                seg_it != seg.end()) {
 2202|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2203|       |            }
 2204|       |            ranges::advance(it, seg.size());
 2205|       |        }
 2206|       |
 2207|  1.21M|        return read_until_code_point(
 2208|  1.21M|            ranges::subrange{it, range.end()},
 2209|  1.21M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2210|  1.21M|    }
 2211|  1.21M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.21M|        : m_fptr([](storage fn,
  743|  1.21M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.21M|              cvref<T> obj = *get<T>(fn);
  745|  1.21M|              if constexpr (std::is_void_v<R>) {
  746|  1.21M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.21M|              }
  748|  1.21M|              else {
  749|  1.21M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.21M|              }
  751|  1.21M|          }),
  752|  1.21M|          m_storage(std::addressof(f))
  753|  1.21M|    {
  754|  1.21M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  35.7M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  35.7M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  35.7M|              else {
  749|  35.7M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  35.7M|              }
  751|  35.7M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  35.7M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  35.7M|        else if constexpr (std::is_object_v<T>) {
  688|  35.7M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  35.7M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2209|  35.7M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.21M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.21M|        {
  662|  1.21M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5191|  6.24k|    {
 5192|  6.24k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5193|  6.24k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5194|       |
 5195|  6.24k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3930|  6.24k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  6.24k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 6.24k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 5196|       |
 5197|  6.24k|        read_source_callback cb_wrapper{helper};
 5198|       |
 5199|  6.24k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5199:13): [True: 0, False: 6.24k]
  ------------------
 5200|      0|            const auto cb = [&](char32_t cp) {
 5201|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5202|      0|            };
 5203|       |
 5204|      0|            if (is_inverted) {
  ------------------
  |  Branch (5204:17): [True: 0, False: 0]
  ------------------
 5205|      0|                auto it = read_until_code_point(range, cb);
 5206|      0|                return check_nonempty(it, range);
 5207|      0|            }
 5208|      0|            auto it = read_while_code_point(range, cb);
 5209|      0|            return check_nonempty(it, range);
 5210|      0|        }
 5211|       |
 5212|  6.24k|        const auto cb = [&](SourceCharT ch) {
 5213|  6.24k|            return cb_wrapper.on_ascii_only(ch);
 5214|  6.24k|        };
 5215|       |
 5216|  6.24k|        if (is_inverted) {
  ------------------
  |  Branch (5216:13): [True: 0, False: 6.24k]
  ------------------
 5217|      0|            auto it = read_until_code_unit(range, cb);
 5218|      0|            return check_nonempty(it, range);
 5219|      0|        }
 5220|  6.24k|        auto it = read_while_code_unit(range, cb);
 5221|  6.24k|        return check_nonempty(it, range);
 5222|  6.24k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5227|  6.24k|    {
 5228|  6.24k|        if (it == range.begin()) {
  ------------------
  |  Branch (5228:13): [True: 6.04k, False: 200]
  ------------------
 5229|  6.04k|            return detail::unexpected_scan_error(
 5230|  6.04k|                scan_error::invalid_scanned_value,
 5231|  6.04k|                "No characters matched in [character set]");
 5232|  6.04k|        }
 5233|       |
 5234|    200|        return it;
 5235|  6.24k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  6.24k|        : m_fptr([](storage fn,
  743|  6.24k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.24k|              cvref<T> obj = *get<T>(fn);
  745|  6.24k|              if constexpr (std::is_void_v<R>) {
  746|  6.24k|                  obj(static_cast<decltype(args)>(args)...);
  747|  6.24k|              }
  748|  6.24k|              else {
  749|  6.24k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.24k|              }
  751|  6.24k|          }),
  752|  6.24k|          m_storage(std::addressof(f))
  753|  6.24k|    {
  754|  6.24k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  7.87k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.87k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.87k|              else {
  749|  7.87k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.87k|              }
  751|  7.87k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  7.87k|    {
  684|  7.87k|        if constexpr (std::is_const_v<T>) {
  685|  7.87k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.87k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5212|  7.87k|        const auto cb = [&](SourceCharT ch) {
 5213|  7.87k|            return cb_wrapper.on_ascii_only(ch);
 5214|  7.87k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  6.24k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  6.24k|        {
  667|  6.24k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6226|   250k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|       |                          basic_contiguous_scan_context<char_type>>) {
 6231|       |            auto rd = make_reader<T, char_type>();
 6232|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6233|       |            return impl(rd, range, value);
 6234|       |        }
 6235|   250k|        else if constexpr (!detail::is_type_disabled<T>) {
 6236|   250k|            auto rd = make_reader<T, char_type>();
 6237|   250k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   250k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.02k, False: 247k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.02k|    }
  ------------------
 6238|       |
 6239|   247k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6239:17): [True: 247k, False: 0]
  |  Branch (6239:50): [True: 0, False: 0]
  ------------------
 6240|   247k|                specs.width != 0) {
  ------------------
  |  Branch (6240:17): [True: 0, False: 0]
  ------------------
 6241|   247k|                return impl(rd, range, value);
 6242|   247k|            }
 6243|       |
 6244|      0|            auto crange = get_as_contiguous(range);
 6245|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|      0|            return ranges::next(range.begin(),
 6247|      0|                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   250k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5848|  1.23M|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|       |                       std::is_same_v<T, std::wstring_view>) {
 5863|       |        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|  1.23M|                       std::is_same_v<T, std::wstring>) {
 5867|  1.23M|        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|  1.23M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6161|   247k|    {
 6162|   247k|        const bool need_skipped_width =
 6163|   247k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 247k]
  |  Branch (6163:33): [True: 0, False: 247k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   247k|        auto it = rng.begin();
 6167|   247k|        std::ptrdiff_t prefix_width = 0;
 6168|   247k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 247k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   247k|        else {
 6176|   247k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 874, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    874|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    874|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    874|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    874|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    874|    }                                                  \
  |  |  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   246k|            std::tie(it, prefix_width) = prefix_result;
 6178|   246k|        }
 6179|   246k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   246k|        std::ptrdiff_t value_width = 0;
 6183|   246k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 246k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   246k|        else {
 6199|   246k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.16k, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  5.16k|    }                                                  \
  |  | 3939|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   241k|                                             specs, value, loc));
 6201|       |
 6202|   241k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 241k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   241k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   241k|        std::ptrdiff_t postfix_width = 0;
 6211|   241k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 240k, False: 722]
  ------------------
 6212|   240k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   240k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   240k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   240k|                                 value_width));
 6216|   240k|            std::tie(it, postfix_width) = postfix_result;
 6217|   240k|        }
 6218|       |
 6219|   241k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   241k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   241k|            specs, prefix_width, value_width, postfix_width));
 6221|   241k|        return it;
 6222|   241k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3107|   602k|{
 3108|   602k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3109|   602k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3109:13): [True: 1.05k, False: 601k]
  ------------------
 3110|  1.05k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  934|  1.05k|    static_cast<    \
  |  |  935|  1.05k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3111|  1.05k|        }
 3112|   601k|        else {
 3113|   601k|            dest.assign(source.view());
 3114|   601k|        }
 3115|       |    }
 3116|       |    else {
 3117|       |        return transcode_impl(source.view(), dest);
 3118|       |    }
 3119|       |
 3120|   602k|    return {};
 3121|   602k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5313|   246k|    {
 5314|   246k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   246k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   246k|        return read_impl(range, specs, value);
 5316|   246k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5331|   246k|    {
 5332|   246k|        SCN_CLANG_PUSH
 5333|   246k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   246k|        switch (m_type) {
 5336|   243k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 243k, False: 3.12k]
  ------------------
 5337|   243k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 246k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 246k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.12k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.12k, False: 243k]
  ------------------
 5347|  3.12k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.12k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 246k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 246k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 246k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   246k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   246k|        }
 5368|       |
 5369|   246k|        SCN_CLANG_POP
 5370|   246k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4860|   608k|    {
 4861|   608k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   608k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4794|   608k|{
 4795|   608k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   608k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   608k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 5.36k, False: 602k]
  ------------------
 4799|  5.36k|        return detail::unexpected_scan_error(
 4800|  5.36k|            scan_error::invalid_scanned_value,
 4801|  5.36k|            "Invalid encoding in scanned string");
 4802|  5.36k|    }
 4803|       |
 4804|   602k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   602k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 602k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   602k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   602k|    static_cast<    \
  |  |  935|   602k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   602k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5088|  3.12k|    {
 5089|  3.12k|        auto it = read_source_impl(range, {specs});
 5090|  3.12k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.02k, False: 100]
  |  |  ------------------
  ------------------
 5091|  3.02k|            return unexpected(it.error());
 5092|  3.02k|        }
 5093|       |
 5094|    100|        return read_string_impl(range, *it, value);
 5095|  3.12k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4794|    100|{
 4795|    100|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    100|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    100|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 100]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    100|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    100|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 100]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    100|    return SCN_MOVE(result);
  ------------------
  |  |  934|    100|    static_cast<    \
  |  |  935|    100|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    100|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5313|   246k|    {
 5314|   246k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   246k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   246k|        return read_impl(range, specs, value);
 5316|   246k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5331|   246k|    {
 5332|   246k|        SCN_CLANG_PUSH
 5333|   246k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   246k|        switch (m_type) {
 5336|   243k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 243k, False: 3.12k]
  ------------------
 5337|   243k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 246k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 246k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.12k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.12k, False: 243k]
  ------------------
 5347|  3.12k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.12k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 246k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 246k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 246k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   246k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   246k|        }
 5368|       |
 5369|   246k|        SCN_CLANG_POP
 5370|   246k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4860|   608k|    {
 4861|   608k|        return read_string_impl(range, read_until_classic_space(range), value);
 4862|   608k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4794|   608k|{
 4795|   608k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|   608k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|   608k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 5.36k, False: 602k]
  ------------------
 4799|  5.36k|        return detail::unexpected_scan_error(
 4800|  5.36k|            scan_error::invalid_scanned_value,
 4801|  5.36k|            "Invalid encoding in scanned string");
 4802|  5.36k|    }
 4803|       |
 4804|   602k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|   602k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   602k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 602k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|   602k|    return SCN_MOVE(result);
  ------------------
  |  |  934|   602k|    static_cast<    \
  |  |  935|   602k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|   602k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3127|   602k|{
 3128|   602k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3129|   602k|        dest.assign(source.view());
 3130|       |    }
 3131|       |    else {
 3132|       |        return transcode_impl(source.view(), dest);
 3133|       |    }
 3134|       |
 3135|   602k|    return {};
 3136|   602k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5088|  3.12k|    {
 5089|  3.12k|        auto it = read_source_impl(range, {specs});
 5090|  3.12k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.02k, False: 100]
  |  |  ------------------
  ------------------
 5091|  3.02k|            return unexpected(it.error());
 5092|  3.02k|        }
 5093|       |
 5094|    100|        return read_string_impl(range, *it, value);
 5095|  3.12k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4794|    100|{
 4795|    100|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4796|       |
 4797|    100|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4798|    100|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4798:9): [True: 0, False: 100]
  ------------------
 4799|      0|        return detail::unexpected_scan_error(
 4800|      0|            scan_error::invalid_scanned_value,
 4801|      0|            "Invalid encoding in scanned string");
 4802|      0|    }
 4803|       |
 4804|    100|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3930|    100|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|    100|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 100]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 4805|    100|    return SCN_MOVE(result);
  ------------------
  |  |  934|    100|    static_cast<    \
  |  |  935|    100|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4806|    100|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5848|   616k|{
 5849|       |    if constexpr (std::is_same_v<T, bool>) {
 5850|       |        return reader_impl_for_bool<CharT>{};
 5851|       |    }
 5852|       |    else if constexpr (std::is_same_v<T, char>) {
 5853|       |        return reader_impl_for_char<CharT>{};
 5854|       |    }
 5855|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5856|       |        return reader_impl_for_wchar<CharT>{};
 5857|       |    }
 5858|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5859|       |        return reader_impl_for_code_point<CharT>{};
 5860|       |    }
 5861|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5862|   616k|                       std::is_same_v<T, std::wstring_view>) {
 5863|   616k|        return reader_impl_for_string<CharT>{};
 5864|       |    }
 5865|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5866|       |                       std::is_same_v<T, std::wstring>) {
 5867|       |        return reader_impl_for_string<CharT>{};
 5868|       |    }
 5869|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5870|       |                       std::is_same_v<T, wregex_matches>) {
 5871|       |        return reader_impl_for_regex_matches<CharT>{};
 5872|       |    }
 5873|       |    else if constexpr (std::is_same_v<T, void*>) {
 5874|       |        return reader_impl_for_voidptr<CharT>{};
 5875|       |    }
 5876|       |    else if constexpr (std::is_floating_point_v<T>) {
 5877|       |        return reader_impl_for_float<CharT>{};
 5878|       |    }
 5879|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5880|       |                       !std::is_same_v<T, wchar_t> &&
 5881|       |                       !std::is_same_v<T, char32_t> &&
 5882|       |                       !std::is_same_v<T, bool>) {
 5883|       |        return reader_impl_for_int<CharT>{};
 5884|       |    }
 5885|       |    else {
 5886|       |        return reader_impl_for_monostate<CharT>{};
 5887|       |    }
 5888|   616k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5313|   246k|    {
 5314|   246k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   246k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5315|   246k|        return read_impl(range, specs, value);
 5316|   246k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5331|   246k|    {
 5332|   246k|        SCN_CLANG_PUSH
 5333|   246k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5334|       |
 5335|   246k|        switch (m_type) {
 5336|   243k|            case reader_type::word:
  ------------------
  |  Branch (5336:13): [True: 243k, False: 3.12k]
  ------------------
 5337|   243k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5338|       |
 5339|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5339:13): [True: 0, False: 246k]
  ------------------
 5340|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5341|      0|                                                                   value);
 5342|       |
 5343|      0|            case reader_type::character:
  ------------------
  |  Branch (5343:13): [True: 0, False: 246k]
  ------------------
 5344|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5345|       |
 5346|  3.12k|            case reader_type::character_set:
  ------------------
  |  Branch (5346:13): [True: 3.12k, False: 243k]
  ------------------
 5347|  3.12k|                return character_set_reader_impl<SourceCharT>{}.read(
 5348|  3.12k|                    range, specs, value);
 5349|       |
 5350|      0|#if !SCN_DISABLE_REGEX
 5351|      0|            case reader_type::regex:
  ------------------
  |  Branch (5351:13): [True: 0, False: 246k]
  ------------------
 5352|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5353|      0|                    range, specs.charset_string<SourceCharT>(),
 5354|      0|                    specs.regexp_flags, value);
 5355|       |
 5356|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5356:13): [True: 0, False: 246k]
  ------------------
 5357|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5358|      0|                    range,
 5359|      0|                    get_unescaped_regex_pattern(
 5360|      0|                        specs.charset_string<SourceCharT>()),
 5361|      0|                    specs.regexp_flags, value);
 5362|      0|#endif
 5363|       |
 5364|      0|            default:
  ------------------
  |  Branch (5364:13): [True: 0, False: 246k]
  ------------------
 5365|      0|                SCN_EXPECT(false);
  ------------------
  |  |  930|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5366|   246k|                SCN_UNREACHABLE;
  ------------------
  |  |  893|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5367|   246k|        }
 5368|       |
 5369|   246k|        SCN_CLANG_POP
 5370|   246k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4867|   608k|    {
 4868|   608k|        return read_string_view_impl(range, read_until_classic_space(range),
 4869|   608k|                                     value);
 4870|   608k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4813|   608k|{
 4814|   608k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|   608k|    auto src = [&]() {
 4817|   608k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|   608k|            return make_contiguous_buffer(
 4819|   608k|                ranges::subrange{range.begin().base(), result.base()});
 4820|   608k|        }
 4821|   608k|        else {
 4822|   608k|            return make_contiguous_buffer(
 4823|   608k|                ranges::subrange{range.begin(), result});
 4824|   608k|        }
 4825|   608k|    }();
 4826|   608k|    using src_type = decltype(src);
 4827|       |
 4828|   608k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|   608k|    else {
 4841|   608k|        const auto view = src.view();
 4842|   608k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|   608k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 5.36k, False: 602k]
  ------------------
 4845|  5.36k|            return detail::unexpected_scan_error(
 4846|  5.36k|                scan_error::invalid_scanned_value,
 4847|  5.36k|                "Invalid encoding in scanned string_view");
 4848|  5.36k|        }
 4849|       |
 4850|   602k|        return SCN_MOVE(result);
  ------------------
  |  |  934|   602k|    static_cast<    \
  |  |  935|   602k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|   608k|    }
 4852|   608k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4816|   608k|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|   608k|        else {
 4822|   608k|            return make_contiguous_buffer(
 4823|   608k|                ranges::subrange{range.begin(), result});
 4824|   608k|        }
 4825|   608k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5102|  3.12k|    {
 5103|  3.12k|        auto it = read_source_impl(range, {specs});
 5104|  3.12k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  865|  3.12k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 3.02k, False: 100]
  |  |  ------------------
  ------------------
 5105|  3.02k|            return unexpected(it.error());
 5106|  3.02k|        }
 5107|       |
 5108|    100|        return read_string_view_impl(range, *it, value);
 5109|  3.12k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4813|    100|{
 4814|    100|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4815|       |
 4816|    100|    auto src = [&]() {
 4817|    100|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|    100|            return make_contiguous_buffer(
 4819|    100|                ranges::subrange{range.begin().base(), result.base()});
 4820|    100|        }
 4821|    100|        else {
 4822|    100|            return make_contiguous_buffer(
 4823|    100|                ranges::subrange{range.begin(), result});
 4824|    100|        }
 4825|    100|    }();
 4826|    100|    using src_type = decltype(src);
 4827|       |
 4828|    100|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4828:9): [Folded - Ignored]
  ------------------
 4829|      0|        return detail::unexpected_scan_error(
 4830|      0|            scan_error::invalid_format_string,
 4831|      0|            "Cannot read a string_view from this source range (not "
 4832|      0|            "contiguous)");
 4833|      0|    }
 4834|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4835|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4836|       |                                             "Cannot read a string_view from "
 4837|       |                                             "this source range (would require "
 4838|       |                                             "transcoding)");
 4839|       |    }
 4840|    100|    else {
 4841|    100|        const auto view = src.view();
 4842|    100|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4843|       |
 4844|    100|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4844:13): [True: 0, False: 100]
  ------------------
 4845|      0|            return detail::unexpected_scan_error(
 4846|      0|                scan_error::invalid_scanned_value,
 4847|      0|                "Invalid encoding in scanned string_view");
 4848|      0|        }
 4849|       |
 4850|    100|        return SCN_MOVE(result);
  ------------------
  |  |  934|    100|    static_cast<    \
  |  |  935|    100|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4851|    100|    }
 4852|    100|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4816|    100|    auto src = [&]() {
 4817|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4818|       |            return make_contiguous_buffer(
 4819|       |                ranges::subrange{range.begin().base(), result.base()});
 4820|       |        }
 4821|    100|        else {
 4822|    100|            return make_contiguous_buffer(
 4823|    100|                ranges::subrange{range.begin(), result});
 4824|    100|        }
 4825|    100|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3065|   609k|{
 3066|   609k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3066:9): [True: 609k, False: 0]
  ------------------
 3067|   609k|        auto it = read_while_classic_space(range);
 3068|   609k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3069|   609k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   609k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.14k, False: 608k]
  |  |  ------------------
  ------------------
 3070|  1.14k|            return unexpected(e);
 3071|  1.14k|        }
 3072|       |
 3073|   608k|        return it;
 3074|   609k|    }
 3075|       |
 3076|      0|    return read_while_classic_space(range);
 3077|   609k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2215|   609k|{
 2216|       |    if constexpr (ranges::contiguous_range<Range> &&
 2217|       |                  ranges::sized_range<Range> &&
 2218|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2219|       |        auto buf = make_contiguous_buffer(range);
 2220|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2221|       |        return ranges::next(range.begin(),
 2222|       |                            ranges::distance(buf.view().begin(), it));
 2223|       |    }
 2224|   609k|    else {
 2225|   609k|        auto it = range.begin();
 2226|       |
 2227|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2228|       |            auto seg = get_contiguous_beginning(range);
 2229|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2230|       |                seg_it != seg.end()) {
 2231|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2232|       |            }
 2233|       |            ranges::advance(it, seg.size());
 2234|       |        }
 2235|       |
 2236|   609k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|   609k|            return detail::is_cp_space(cp);
 2238|   609k|        });
 2239|   609k|    }
 2240|   609k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   609k|        : m_fptr([](storage fn,
  743|   609k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   609k|              cvref<T> obj = *get<T>(fn);
  745|   609k|              if constexpr (std::is_void_v<R>) {
  746|   609k|                  obj(static_cast<decltype(args)>(args)...);
  747|   609k|              }
  748|   609k|              else {
  749|   609k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   609k|              }
  751|   609k|          }),
  752|   609k|          m_storage(std::addressof(f))
  753|   609k|    {
  754|   609k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.39M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.39M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.39M|              else {
  749|  1.39M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.39M|              }
  751|  1.39M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.39M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.39M|        else if constexpr (std::is_object_v<T>) {
  688|  1.39M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.39M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2236|  1.39M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2237|  1.39M|            return detail::is_cp_space(cp);
 2238|  1.39M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   609k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   609k|        {
  662|   609k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|  92.7k|{
 5835|  92.7k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  92.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.04k, False: 91.7k]
  |  |  ------------------
  ------------------
 5836|  1.04k|        return unexpected(e);
 5837|  1.04k|    }
 5838|       |
 5839|  91.7k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 91.7k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  91.7k|    return skip_classic_whitespace(range);
 5844|  91.7k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  46.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  46.3k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  46.3k|            auto rd = make_reader<T, char_type>();
 5916|  46.3k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  46.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|  46.3k|    {
 5903|  46.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  46.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 951, False: 45.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    951|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    951|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    951|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    951|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    951|    }                                                  \
  |  |  |  | 3939|  46.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  45.4k|                        .transform_error(make_eof_scan_error));
 5905|  45.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  46.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|  45.4k|    {
 5303|  45.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  45.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  45.4k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  45.4k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|  46.3k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|  46.3k|                          basic_contiguous_scan_context<char_type>>) {
 5915|  46.3k|            auto rd = make_reader<T, char_type>();
 5916|  46.3k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  46.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|  46.3k|    {
 5903|  46.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  46.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  46.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  46.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  46.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 951, False: 45.4k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    951|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    951|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    951|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    951|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    951|    }                                                  \
  |  |  |  | 3939|  46.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  45.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  45.4k|                        .transform_error(make_eof_scan_error));
 5905|  45.4k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  46.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|  45.4k|    {
 5303|  45.4k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  45.4k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  45.4k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  45.4k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|  56.5k|{
 5835|  56.5k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 666, False: 55.8k]
  |  |  ------------------
  ------------------
 5836|    666|        return unexpected(e);
 5837|    666|    }
 5838|       |
 5839|  55.8k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 55.8k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|  55.8k|    return skip_classic_whitespace(range);
 5844|  55.8k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5910|  56.5k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|  56.5k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|  56.5k|            auto rd = make_reader<T, char_type>();
 5920|  56.5k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 56.5k, False: 0]
  ------------------
 5921|  56.5k|                return impl(rd, range, value);
 5922|  56.5k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|  56.5k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|  56.5k|    {
 5903|  56.5k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|  56.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  56.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  56.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  56.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.15k, False: 55.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.15k|    }                                                  \
  |  |  |  | 3939|  56.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  55.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|  55.3k|                        .transform_error(make_eof_scan_error));
 5905|  55.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|  56.5k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|  55.3k|    {
 5303|  55.3k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|  55.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|  55.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|  55.3k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 2985|  75.0k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|  75.0k|    static_cast<    \
  |  |  935|  75.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|  75.0k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|  75.0k|          m_current(m_range.begin())
 2988|  75.0k|    {
 2989|  75.0k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 2997|   129k|    {
 2998|   129k|        return m_range.end();
 2999|   129k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3012|  59.9k|    {
 3013|  59.9k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|  59.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  59.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|  59.9k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|  59.9k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 59.9k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|  59.9k|        }
 3019|  59.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|  59.9k|    static_cast<    \
  |  |  935|  59.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|  59.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3002|  69.0k|    {
 3003|  69.0k|        return ranges::subrange{begin(), end()};
 3004|  69.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|  66.0k|    {
 6075|  66.0k|        const bool need_skipped_width =
 6076|  66.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 66.0k]
  |  Branch (6076:33): [True: 0, False: 66.0k]
  ------------------
 6077|  66.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|  66.0k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 66.0k]
  ------------------
 6081|  66.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 66.0k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|  66.0k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 66.0k, False: 0]
  |  Branch (6085:56): [True: 61.8k, False: 4.16k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|  61.8k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 61.8k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   122k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|  61.8k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  61.8k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  61.8k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  61.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.26k, False: 60.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.26k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.26k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.26k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.26k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.26k|    }                                                  \
  |  |  |  | 3939|  61.8k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  60.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   122k|                            make_eof_scan_error));
 6096|       |
 6097|   122k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 60.5k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|  60.5k|            return result_type{it, 0};
 6105|   122k|        }
 6106|       |
 6107|  4.16k|        return result_type{rng.begin(), 0};
 6108|  66.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|  59.2k|    {
 6117|  59.2k|        const bool need_skipped_width =
 6118|  59.2k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 59.2k]
  |  Branch (6118:33): [True: 0, False: 59.2k]
  ------------------
 6119|  59.2k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|  59.2k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 59.2k]
  ------------------
 6122|  59.2k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 59.2k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|  59.2k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 59.2k, False: 0]
  ------------------
 6131|  59.2k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 1.07k, False: 58.1k]
  ------------------
 6132|  59.2k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 1.07k]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|  1.07k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 1.07k]
  ------------------
 6134|  1.07k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|  59.2k|        return result_type{rng.begin(), 0};
 6156|  59.2k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  34.5k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  34.5k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  34.5k|            auto rd = make_reader<T, char_type>();
 6232|  34.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  34.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.51k, False: 33.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.51k|    }
  ------------------
 6233|  33.0k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  34.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|  33.0k|    {
 6162|  33.0k|        const bool need_skipped_width =
 6163|  33.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 33.0k]
  |  Branch (6163:33): [True: 0, False: 33.0k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  33.0k|        auto it = rng.begin();
 6167|  33.0k|        std::ptrdiff_t prefix_width = 0;
 6168|  33.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 33.0k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  33.0k|        else {
 6176|  33.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 634, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    634|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    634|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    634|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    634|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    634|    }                                                  \
  |  |  |  | 3939|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  32.3k|            std::tie(it, prefix_width) = prefix_result;
 6178|  32.3k|        }
 6179|  32.3k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  32.3k|        std::ptrdiff_t value_width = 0;
 6183|  32.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 32.3k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  32.3k|        else {
 6199|  32.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.38k, False: 29.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.38k|    }                                                  \
  |  | 3939|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  29.9k|                                             specs, value, loc));
 6201|       |
 6202|  29.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 29.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  29.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  29.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  29.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 29.6k, False: 386]
  ------------------
 6212|  29.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  29.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  29.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  29.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 29.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  29.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  29.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  29.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  29.6k|                                 value_width));
 6216|  29.6k|            std::tie(it, postfix_width) = postfix_result;
 6217|  29.6k|        }
 6218|       |
 6219|  29.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  29.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 29.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  29.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  29.9k|        return it;
 6222|  29.9k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|  34.5k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|  34.5k|                          basic_contiguous_scan_context<char_type>>) {
 6231|  34.5k|            auto rd = make_reader<T, char_type>();
 6232|  34.5k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|  34.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  34.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 1.51k, False: 33.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  1.51k|    }
  ------------------
 6233|  33.0k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|  34.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|  33.0k|    {
 6162|  33.0k|        const bool need_skipped_width =
 6163|  33.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 33.0k]
  |  Branch (6163:33): [True: 0, False: 33.0k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|  33.0k|        auto it = rng.begin();
 6167|  33.0k|        std::ptrdiff_t prefix_width = 0;
 6168|  33.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 33.0k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|  33.0k|        else {
 6176|  33.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|  33.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  33.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  33.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  33.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 634, False: 32.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    634|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    634|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    634|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    634|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    634|    }                                                  \
  |  |  |  | 3939|  33.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|  32.3k|            std::tie(it, prefix_width) = prefix_result;
 6178|  32.3k|        }
 6179|  32.3k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|  32.3k|        std::ptrdiff_t value_width = 0;
 6183|  32.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 32.3k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|  32.3k|        else {
 6199|  32.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|  32.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|  32.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|  32.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 2.38k, False: 29.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  2.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  2.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  2.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  2.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  2.38k|    }                                                  \
  |  | 3939|  32.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|  32.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|  29.9k|                                             specs, value, loc));
 6201|       |
 6202|  29.9k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 29.9k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|  29.9k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|  29.9k|        std::ptrdiff_t postfix_width = 0;
 6211|  29.9k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 29.6k, False: 386]
  ------------------
 6212|  29.6k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|  29.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|  29.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|  29.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|  29.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 29.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|  29.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|  29.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|  29.6k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|  29.6k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|  29.6k|                                 value_width));
 6216|  29.6k|            std::tie(it, postfix_width) = postfix_result;
 6217|  29.6k|        }
 6218|       |
 6219|  29.9k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|  29.9k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|  29.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 29.9k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|  29.9k|            specs, prefix_width, value_width, postfix_width));
 6221|  29.9k|        return it;
 6222|  29.9k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5834|   732k|{
 5835|   732k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   732k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 2.08k, False: 730k]
  |  |  ------------------
  ------------------
 5836|  2.08k|        return unexpected(e);
 5837|  2.08k|    }
 5838|       |
 5839|   730k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 730k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   730k|    return skip_classic_whitespace(range);
 5844|   730k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   366k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   366k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   366k|            auto rd = make_reader<T, char_type>();
 5916|   366k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   366k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5902|   366k|    {
 5903|   366k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.31k, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.31k|    }                                                  \
  |  |  |  | 3939|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   364k|                        .transform_error(make_eof_scan_error));
 5905|   364k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   366k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5302|   364k|    {
 5303|   364k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   364k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   364k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   364k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5910|   366k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|   366k|                          basic_contiguous_scan_context<char_type>>) {
 5915|   366k|            auto rd = make_reader<T, char_type>();
 5916|   366k|            return impl(rd, range, value);
 5917|       |        }
 5918|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5919|       |            auto rd = make_reader<T, char_type>();
 5920|       |            if (!is_segment_contiguous(range)) {
 5921|       |                return impl(rd, range, value);
 5922|       |            }
 5923|       |            auto crange = get_as_contiguous(range);
 5924|       |            SCN_TRY(it, impl(rd, crange, value));
 5925|       |            return ranges::next(range.begin(),
 5926|       |                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   366k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5902|   366k|    {
 5903|   366k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.31k, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.31k|    }                                                  \
  |  |  |  | 3939|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   364k|                        .transform_error(make_eof_scan_error));
 5905|   364k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   366k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5302|   364k|    {
 5303|   364k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   364k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   364k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   364k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 2985|   512k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  934|   512k|    static_cast<    \
  |  |  935|   512k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2986|   512k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 2987|   512k|          m_current(m_range.begin())
 2988|   512k|    {
 2989|   512k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 2997|   982k|    {
 2998|   982k|        return m_range.end();
 2999|   982k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3012|   482k|    {
 3013|   482k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  930|   482k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   482k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3014|   482k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3015|   482k|            if (it == nullptr) {
  ------------------
  |  Branch (3015:17): [True: 0, False: 482k]
  ------------------
 3016|      0|                it = end();
 3017|      0|            }
 3018|   482k|        }
 3019|   482k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  934|   482k|    static_cast<    \
  |  |  935|   482k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3020|   482k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3002|   500k|    {
 3003|   500k|        return ranges::subrange{begin(), end()};
 3004|   500k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6074|   494k|    {
 6075|   494k|        const bool need_skipped_width =
 6076|   494k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6076:13): [True: 0, False: 494k]
  |  Branch (6076:33): [True: 0, False: 494k]
  ------------------
 6077|   494k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6078|       |
 6079|       |        // Read prefix
 6080|   494k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6080:13): [True: 0, False: 494k]
  ------------------
 6081|   494k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6081:13): [True: 0, False: 494k]
  ------------------
 6082|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6083|      0|                             need_skipped_width);
 6084|      0|        }
 6085|   494k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6085:13): [True: 494k, False: 0]
  |  Branch (6085:56): [True: 488k, False: 6.24k]
  ------------------
 6086|       |            // Default alignment:
 6087|       |            // Skip preceding whitespace, if required by the reader
 6088|   488k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6088:17): [True: 0, False: 488k]
  ------------------
 6089|      0|                auto max_width_view = take_width(rng, specs.precision);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6093|      0|            }
 6094|   974k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3940|   488k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   488k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   488k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   488k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.74k, False: 486k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.74k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.74k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.74k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.74k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.74k|    }                                                  \
  |  |  |  | 3939|   488k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   486k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|   974k|                            make_eof_scan_error));
 6096|       |
 6097|   974k|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 486k]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|   486k|            return result_type{it, 0};
 6105|   974k|        }
 6106|       |
 6107|  6.24k|        return result_type{rng.begin(), 0};
 6108|   494k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6116|   480k|    {
 6117|   480k|        const bool need_skipped_width =
 6118|   480k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6118:13): [True: 0, False: 480k]
  |  Branch (6118:33): [True: 0, False: 480k]
  ------------------
 6119|   480k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6120|       |
 6121|   480k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6121:13): [True: 0, False: 480k]
  ------------------
 6122|   480k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6122:13): [True: 0, False: 480k]
  ------------------
 6123|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6123:17): [True: 0, False: 0]
  ------------------
 6124|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6124:17): [True: 0, False: 0]
  ------------------
 6125|      0|                return result_type{rng.begin(), 0};
 6126|      0|            }
 6127|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6128|      0|                             specs.fill, need_skipped_width);
 6129|      0|        }
 6130|   480k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6130:13): [True: 480k, False: 0]
  ------------------
 6131|   480k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6131:13): [True: 144, False: 480k]
  ------------------
 6132|   480k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6132:15): [True: 0, False: 144]
  |  Branch (6132:35): [True: 0, False: 0]
  ------------------
 6133|    144|             (specs.precision != 0 &&
  ------------------
  |  Branch (6133:15): [True: 0, False: 144]
  ------------------
 6134|    144|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6134:15): [True: 0, False: 0]
  ------------------
 6135|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                const auto initial_width =
 6137|      0|                    specs.precision - prefix_width - value_width;
 6138|      0|                auto max_width_view = take_width(rng, initial_width);
 6139|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6140|      0|                                  .transform_error(make_eof_scan_error));
 6141|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6142|      0|            }
 6143|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6144|      0|                            make_eof_scan_error));
 6145|       |
 6146|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6146:17): [True: 0, False: 0]
  ------------------
 6147|      0|                return result_type{
 6148|      0|                    it,
 6149|      0|                    calculate_text_width(make_contiguous_buffer(
 6150|      0|                                             ranges::subrange{rng.begin(), it})
 6151|      0|                                             .view())};
 6152|      0|            }
 6153|      0|            return result_type{it, 0};
 6154|      0|        }
 6155|   480k|        return result_type{rng.begin(), 0};
 6156|   480k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   250k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   250k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   250k|            auto rd = make_reader<T, char_type>();
 6232|   250k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   250k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.02k, False: 247k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.02k|    }
  ------------------
 6233|   247k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   250k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6161|   247k|    {
 6162|   247k|        const bool need_skipped_width =
 6163|   247k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 247k]
  |  Branch (6163:33): [True: 0, False: 247k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   247k|        auto it = rng.begin();
 6167|   247k|        std::ptrdiff_t prefix_width = 0;
 6168|   247k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 247k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   247k|        else {
 6176|   247k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 874, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    874|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    874|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    874|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    874|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    874|    }                                                  \
  |  |  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   246k|            std::tie(it, prefix_width) = prefix_result;
 6178|   246k|        }
 6179|   246k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   246k|        std::ptrdiff_t value_width = 0;
 6183|   246k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 246k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   246k|        else {
 6199|   246k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.16k, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  5.16k|    }                                                  \
  |  | 3939|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   241k|                                             specs, value, loc));
 6201|       |
 6202|   241k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 241k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   241k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   241k|        std::ptrdiff_t postfix_width = 0;
 6211|   241k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 240k, False: 722]
  ------------------
 6212|   240k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   240k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   240k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   240k|                                 value_width));
 6216|   240k|            std::tie(it, postfix_width) = postfix_result;
 6217|   240k|        }
 6218|       |
 6219|   241k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   241k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   241k|            specs, prefix_width, value_width, postfix_width));
 6221|   241k|        return it;
 6222|   241k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6226|   250k|    {
 6227|       |        if constexpr (!detail::is_type_disabled<T> &&
 6228|       |                      std::is_same_v<
 6229|       |                          context_type,
 6230|   250k|                          basic_contiguous_scan_context<char_type>>) {
 6231|   250k|            auto rd = make_reader<T, char_type>();
 6232|   250k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3930|   250k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   250k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 3.02k, False: 247k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|  3.02k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|  3.02k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  3.02k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  3.02k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|  3.02k|    }
  ------------------
 6233|   247k|            return impl(rd, range, value);
 6234|       |        }
 6235|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6236|       |            auto rd = make_reader<T, char_type>();
 6237|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6238|       |
 6239|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6240|       |                specs.width != 0) {
 6241|       |                return impl(rd, range, value);
 6242|       |            }
 6243|       |
 6244|       |            auto crange = get_as_contiguous(range);
 6245|       |            SCN_TRY(it, impl(rd, crange, value));
 6246|       |            return ranges::next(range.begin(),
 6247|       |                                ranges::distance(crange.begin(), it));
 6248|       |        }
 6249|       |        else {
 6250|       |            SCN_EXPECT(false);
 6251|       |            SCN_UNREACHABLE;
 6252|       |        }
 6253|   250k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6161|   247k|    {
 6162|   247k|        const bool need_skipped_width =
 6163|   247k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6163:13): [True: 0, False: 247k]
  |  Branch (6163:33): [True: 0, False: 247k]
  ------------------
 6164|       |
 6165|       |        // Read prefix
 6166|   247k|        auto it = rng.begin();
 6167|   247k|        std::ptrdiff_t prefix_width = 0;
 6168|   247k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6168:13): [True: 0, False: 247k]
  ------------------
 6169|      0|            auto max_width_view = take_width(rng, specs.precision);
 6170|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6171|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6172|      0|            it = prefix_result.first.base();
 6173|      0|            prefix_width = prefix_result.second;
 6174|      0|        }
 6175|   247k|        else {
 6176|   247k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3940|   247k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   247k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   247k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   247k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 874, False: 246k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|    874|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|    874|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|    874|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|    874|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|    874|    }                                                  \
  |  |  |  | 3939|   247k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6177|   246k|            std::tie(it, prefix_width) = prefix_result;
 6178|   246k|        }
 6179|   246k|        auto prefix_end_it = it;
 6180|       |
 6181|       |        // Read value
 6182|   246k|        std::ptrdiff_t value_width = 0;
 6183|   246k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6183:13): [True: 0, False: 246k]
  ------------------
 6184|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6184:17): [True: 0, False: 0]
  ------------------
 6185|      0|                return detail::unexpected_scan_error(
 6186|      0|                    scan_error::invalid_fill,
 6187|      0|                    "Too many fill characters before value, "
 6188|      0|                    "precision exceeded before reading value");
 6189|      0|            }
 6190|       |
 6191|      0|            const auto initial_width = specs.precision - prefix_width;
 6192|      0|            auto max_width_view =
 6193|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6194|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6195|      0|            it = w_it.base();
 6196|      0|            value_width = initial_width - w_it.count();
 6197|      0|        }
 6198|   246k|        else {
 6199|   246k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3935|   246k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3936|   246k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  865|   246k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 5.16k, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3937|  5.16k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3927|  5.16k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|  5.16k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|  5.16k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3938|  5.16k|    }                                                  \
  |  | 3939|   246k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  936|   246k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6200|   241k|                                             specs, value, loc));
 6201|       |
 6202|   241k|            if (need_skipped_width) {
  ------------------
  |  Branch (6202:17): [True: 0, False: 241k]
  ------------------
 6203|      0|                value_width = calculate_text_width(
 6204|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6205|      0|                        .view());
 6206|      0|            }
 6207|   241k|        }
 6208|       |
 6209|       |        // Read postfix
 6210|   241k|        std::ptrdiff_t postfix_width = 0;
 6211|   241k|        if (it != rng.end()) {
  ------------------
  |  Branch (6211:13): [True: 240k, False: 722]
  ------------------
 6212|   240k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3940|   240k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   240k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   240k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   240k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 240k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|   240k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|   240k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6214|   240k|                                 rd.skip_ws_before_read(), prefix_width,
 6215|   240k|                                 value_width));
 6216|   240k|            std::tie(it, postfix_width) = postfix_result;
 6217|   240k|        }
 6218|       |
 6219|   241k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3930|   241k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  |  865|   241k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (865:25): [True: 0, False: 241k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3931|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3932|      0|    }
  ------------------
 6220|   241k|            specs, prefix_width, value_width, postfix_width));
 6221|   241k|        return it;
 6222|   241k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5834|   366k|{
 5835|   366k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (865:25): [True: 1.04k, False: 365k]
  |  |  ------------------
  ------------------
 5836|  1.04k|        return unexpected(e);
 5837|  1.04k|    }
 5838|       |
 5839|   365k|    if (!is_required) {
  ------------------
  |  Branch (5839:9): [True: 0, False: 365k]
  ------------------
 5840|      0|        return range.begin();
 5841|      0|    }
 5842|       |
 5843|   365k|    return skip_classic_whitespace(range);
 5844|   365k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5910|   366k|    {
 5911|       |        if constexpr (!detail::is_type_disabled<T> &&
 5912|       |                      std::is_same_v<
 5913|       |                          context_type,
 5914|       |                          basic_contiguous_scan_context<char_type>>) {
 5915|       |            auto rd = make_reader<T, char_type>();
 5916|       |            return impl(rd, range, value);
 5917|       |        }
 5918|   366k|        else if constexpr (!detail::is_type_disabled<T>) {
 5919|   366k|            auto rd = make_reader<T, char_type>();
 5920|   366k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5920:17): [True: 366k, False: 0]
  ------------------
 5921|   366k|                return impl(rd, range, value);
 5922|   366k|            }
 5923|      0|            auto crange = get_as_contiguous(range);
 5924|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3940|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|      0|    }                                                  \
  |  |  |  | 3939|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5925|      0|            return ranges::next(range.begin(),
 5926|      0|                                ranges::distance(crange.begin(), it));
 5927|       |        }
 5928|       |        else {
 5929|       |            SCN_EXPECT(false);
 5930|       |            SCN_UNREACHABLE;
 5931|       |        }
 5932|   366k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5902|   366k|    {
 5903|   366k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3940|   366k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3935|   366k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3936|   366k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  865|   366k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (865:25): [True: 1.31k, False: 364k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3937|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3927|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3926|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3925|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3938|  1.31k|    }                                                  \
  |  |  |  | 3939|   366k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  936|   364k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5904|   364k|                        .transform_error(make_eof_scan_error));
 5905|   364k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5906|   366k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5302|   364k|    {
 5303|   364k|        SCN_UNUSED(loc);
  ------------------
  |  |  915|   364k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5304|   364k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5305|   364k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    755|{
   53|    755|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  930|    755|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|    755|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    755|    string_buffer.resize(size);
   57|    755|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    755|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    755|    const auto wsv_reinterpret_size =
   62|    755|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 144, False: 611]
  ------------------
   63|    755|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    755|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    755|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    755|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    755|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    755|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    755|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    755|{
  123|    755|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    755|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    755|    buf.resize(sizeof...(Args));
  126|    755|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    755|    return buf;
  128|    755|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    755|{
  109|    755|    if constexpr (std::is_same_v<CharT, char>) {
  110|    755|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    755|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    755|{
  186|    755|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    755|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    755|                                   format_strings);
  189|    755|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|    755|{
  134|       |    // Regular scan
  135|  4.53k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 4.53k, False: 755]
  ------------------
  136|  4.53k|        auto it = scn::ranges::begin(source);
  137|  34.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  34.2k|            auto result = scn::scan<T>(
  140|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  34.2k|                scn::runtime_format(f));
  142|  34.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 4.53k, False: 29.7k]
  ------------------
  143|  4.53k|                break;
  144|  4.53k|            }
  145|  29.7k|            it = result->begin();
  146|  29.7k|        }
  147|  4.53k|    }
  148|       |
  149|       |    // scan localized
  150|  4.53k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 4.53k, False: 755]
  ------------------
  151|  4.53k|        auto it = scn::ranges::begin(source);
  152|  34.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  34.2k|            auto result = scn::scan<T>(
  155|  34.2k|                global_locale,
  156|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.2k|                scn::runtime_format(f));
  158|  34.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 4.53k, False: 29.7k]
  ------------------
  159|  4.53k|                break;
  160|  4.53k|            }
  161|  29.7k|            it = result->begin();
  162|  29.7k|        }
  163|  4.53k|    }
  164|       |
  165|       |    // scan_value
  166|    755|    {
  167|    755|        auto it = scn::ranges::begin(source);
  168|  15.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.4k|            auto result = scn::scan_value<T>(
  171|  15.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 755, False: 14.7k]
  ------------------
  173|    755|                break;
  174|    755|            }
  175|  14.7k|            it = result->begin();
  176|  14.7k|        }
  177|    755|    }
  178|    755|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    755|{
  134|       |    // Regular scan
  135|  4.53k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 4.53k, False: 755]
  ------------------
  136|  4.53k|        auto it = scn::ranges::begin(source);
  137|  34.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  34.2k|            auto result = scn::scan<T>(
  140|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  34.2k|                scn::runtime_format(f));
  142|  34.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 4.53k, False: 29.7k]
  ------------------
  143|  4.53k|                break;
  144|  4.53k|            }
  145|  29.7k|            it = result->begin();
  146|  29.7k|        }
  147|  4.53k|    }
  148|       |
  149|       |    // scan localized
  150|  4.53k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 4.53k, False: 755]
  ------------------
  151|  4.53k|        auto it = scn::ranges::begin(source);
  152|  34.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  34.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  34.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  34.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  34.2k|            auto result = scn::scan<T>(
  155|  34.2k|                global_locale,
  156|  34.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  34.2k|                scn::runtime_format(f));
  158|  34.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 4.53k, False: 29.7k]
  ------------------
  159|  4.53k|                break;
  160|  4.53k|            }
  161|  29.7k|            it = result->begin();
  162|  29.7k|        }
  163|  4.53k|    }
  164|       |
  165|       |    // scan_value
  166|    755|    {
  167|    755|        auto it = scn::ranges::begin(source);
  168|  15.4k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  15.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  15.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  15.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  15.4k|            auto result = scn::scan_value<T>(
  171|  15.4k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  15.4k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 755, False: 14.7k]
  ------------------
  173|    755|                break;
  174|    755|            }
  175|  14.7k|            it = result->begin();
  176|  14.7k|        }
  177|    755|    }
  178|    755|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|    755|{
  134|       |    // Regular scan
  135|  4.53k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 4.53k, False: 755]
  ------------------
  136|  4.53k|        auto it = scn::ranges::begin(source);
  137|  40.9k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  40.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  40.9k|            auto result = scn::scan<T>(
  140|  40.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  40.9k|                scn::runtime_format(f));
  142|  40.9k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 4.53k, False: 36.3k]
  ------------------
  143|  4.53k|                break;
  144|  4.53k|            }
  145|  36.3k|            it = result->begin();
  146|  36.3k|        }
  147|  4.53k|    }
  148|       |
  149|       |    // scan localized
  150|  4.53k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 4.53k, False: 755]
  ------------------
  151|  4.53k|        auto it = scn::ranges::begin(source);
  152|  40.9k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  40.9k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  40.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  40.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  40.9k|            auto result = scn::scan<T>(
  155|  40.9k|                global_locale,
  156|  40.9k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  40.9k|                scn::runtime_format(f));
  158|  40.9k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 4.53k, False: 36.3k]
  ------------------
  159|  4.53k|                break;
  160|  4.53k|            }
  161|  36.3k|            it = result->begin();
  162|  36.3k|        }
  163|  4.53k|    }
  164|       |
  165|       |    // scan_value
  166|    755|    {
  167|    755|        auto it = scn::ranges::begin(source);
  168|  18.8k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  18.8k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|  18.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|  18.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  18.8k|            auto result = scn::scan_value<T>(
  171|  18.8k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  18.8k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 755, False: 18.0k]
  ------------------
  173|    755|                break;
  174|    755|            }
  175|  18.0k|            it = result->begin();
  176|  18.0k|        }
  177|    755|    }
  178|    755|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    755|{
   91|    755|    using char_type = ranges::range_value_t<Source>;
   92|    755|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    755|    deque.clear();
   94|    755|    std::copy(ranges::begin(source), ranges::end(source),
   95|    755|              std::back_inserter(deque));
   96|    755|    return deque;
   97|    755|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    755|{
   80|    755|    if constexpr (std::is_same_v<CharT, char>) {
   81|    755|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    755|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    755|{
  123|    755|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    755|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    755|    buf.resize(sizeof...(Args));
  126|    755|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    755|    return buf;
  128|    755|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    755|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    755|    else {
  113|    755|        return wformat_string_view_buffer;
  114|    755|    }
  115|    755|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.51k|{
  186|  1.51k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.51k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.51k|                                   format_strings);
  189|  1.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.51k|{
  134|       |    // Regular scan
  135|  9.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 9.06k, False: 1.51k]
  ------------------
  136|  9.06k|        auto it = scn::ranges::begin(source);
  137|   250k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   250k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   250k|            auto result = scn::scan<T>(
  140|   250k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   250k|                scn::runtime_format(f));
  142|   250k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 9.06k, False: 241k]
  ------------------
  143|  9.06k|                break;
  144|  9.06k|            }
  145|   241k|            it = result->begin();
  146|   241k|        }
  147|  9.06k|    }
  148|       |
  149|       |    // scan localized
  150|  9.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 9.06k, False: 1.51k]
  ------------------
  151|  9.06k|        auto it = scn::ranges::begin(source);
  152|   250k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   250k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   250k|            auto result = scn::scan<T>(
  155|   250k|                global_locale,
  156|   250k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   250k|                scn::runtime_format(f));
  158|   250k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 9.06k, False: 241k]
  ------------------
  159|  9.06k|                break;
  160|  9.06k|            }
  161|   241k|            it = result->begin();
  162|   241k|        }
  163|  9.06k|    }
  164|       |
  165|       |    // scan_value
  166|  1.51k|    {
  167|  1.51k|        auto it = scn::ranges::begin(source);
  168|   122k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   122k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   122k|            auto result = scn::scan_value<T>(
  171|   122k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   122k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.51k, False: 120k]
  ------------------
  173|  1.51k|                break;
  174|  1.51k|            }
  175|   120k|            it = result->begin();
  176|   120k|        }
  177|  1.51k|    }
  178|  1.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.51k|{
  134|       |    // Regular scan
  135|  9.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 9.06k, False: 1.51k]
  ------------------
  136|  9.06k|        auto it = scn::ranges::begin(source);
  137|   250k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   250k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   250k|            auto result = scn::scan<T>(
  140|   250k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   250k|                scn::runtime_format(f));
  142|   250k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 9.06k, False: 241k]
  ------------------
  143|  9.06k|                break;
  144|  9.06k|            }
  145|   241k|            it = result->begin();
  146|   241k|        }
  147|  9.06k|    }
  148|       |
  149|       |    // scan localized
  150|  9.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 9.06k, False: 1.51k]
  ------------------
  151|  9.06k|        auto it = scn::ranges::begin(source);
  152|   250k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   250k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   250k|            auto result = scn::scan<T>(
  155|   250k|                global_locale,
  156|   250k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   250k|                scn::runtime_format(f));
  158|   250k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 9.06k, False: 241k]
  ------------------
  159|  9.06k|                break;
  160|  9.06k|            }
  161|   241k|            it = result->begin();
  162|   241k|        }
  163|  9.06k|    }
  164|       |
  165|       |    // scan_value
  166|  1.51k|    {
  167|  1.51k|        auto it = scn::ranges::begin(source);
  168|   122k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   122k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   122k|            auto result = scn::scan_value<T>(
  171|   122k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   122k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.51k, False: 120k]
  ------------------
  173|  1.51k|                break;
  174|  1.51k|            }
  175|   120k|            it = result->begin();
  176|   120k|        }
  177|  1.51k|    }
  178|  1.51k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.51k|{
  134|       |    // Regular scan
  135|  9.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 9.06k, False: 1.51k]
  ------------------
  136|  9.06k|        auto it = scn::ranges::begin(source);
  137|   250k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   250k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   250k|            auto result = scn::scan<T>(
  140|   250k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   250k|                scn::runtime_format(f));
  142|   250k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 9.06k, False: 241k]
  ------------------
  143|  9.06k|                break;
  144|  9.06k|            }
  145|   241k|            it = result->begin();
  146|   241k|        }
  147|  9.06k|    }
  148|       |
  149|       |    // scan localized
  150|  9.06k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 9.06k, False: 1.51k]
  ------------------
  151|  9.06k|        auto it = scn::ranges::begin(source);
  152|   250k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   250k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   250k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   250k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   250k|            auto result = scn::scan<T>(
  155|   250k|                global_locale,
  156|   250k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   250k|                scn::runtime_format(f));
  158|   250k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 9.06k, False: 241k]
  ------------------
  159|  9.06k|                break;
  160|  9.06k|            }
  161|   241k|            it = result->begin();
  162|   241k|        }
  163|  9.06k|    }
  164|       |
  165|       |    // scan_value
  166|  1.51k|    {
  167|  1.51k|        auto it = scn::ranges::begin(source);
  168|   122k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   122k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  930|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  927|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   122k|            auto result = scn::scan_value<T>(
  171|   122k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   122k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.51k, False: 120k]
  ------------------
  173|  1.51k|                break;
  174|  1.51k|            }
  175|   120k|            it = result->begin();
  176|   120k|        }
  177|  1.51k|    }
  178|  1.51k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.51k|{
   91|  1.51k|    using char_type = ranges::range_value_t<Source>;
   92|  1.51k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.51k|    deque.clear();
   94|  1.51k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.51k|              std::back_inserter(deque));
   96|  1.51k|    return deque;
   97|  1.51k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.51k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.51k|    else {
   84|  1.51k|        return wnoncontiguous_buffer;
   85|  1.51k|    }
   86|  1.51k|}

LLVMFuzzerTestOneInput:
   57|    756|{
   58|    756|    scn::fuzz::run(data, size);
   59|    756|    return 0;
   60|    756|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    756|{
   36|    756|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 755]
  |  Branch (36:35): [True: 0, False: 755]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    755|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    755|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    755|                                             "{:64U}", "{:[A-Za-z]}");
   44|    755|    do_basic_run(sv, f);
   45|       |
   46|    755|    const auto& wf = get_format_strings<wchar_t>(
   47|    755|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    755|    do_basic_run(wsv_reinterpret, wf);
   49|    755|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 755, False: 0]
  ------------------
   50|    755|        do_basic_run(wsv_transcode, wf);
   51|    755|    }
   52|    755|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    755|{
   25|    755|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    755|                                                           format_strings);
   27|    755|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    755|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    755|            source, format_strings);
   30|    755|    }
   31|    755|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    755|{
   25|    755|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    755|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    755|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.51k|{
   25|  1.51k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.51k|                                                           format_strings);
   27|  1.51k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.51k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.51k|            source, format_strings);
   30|  1.51k|    }
   31|  1.51k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.51k|{
   25|  1.51k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.51k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.51k|}

