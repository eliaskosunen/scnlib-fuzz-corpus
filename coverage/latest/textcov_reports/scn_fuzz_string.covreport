_ZN3scn2v36detail39code_point_length_by_starting_code_unitIcEEmT_:
 3802|  5.02M|{
 3803|  5.02M|    if constexpr (sizeof(U) == 1) {
 3804|  5.02M|        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|       |    else {
 3810|       |        // utf-32
 3811|       |        static_assert(sizeof(U) == 4);
 3812|       |        SCN_UNUSED(ch);
 3813|       |        return 1;
 3814|       |    }
 3815|  5.02M|}
_ZN3scn2v36detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 3766|  5.02M|{
 3767|  5.02M|    static_assert(sizeof(U8) == 1);
 3768|       |
 3769|  5.02M|    SCN_GCC_COMPAT_PUSH
 3770|  5.02M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 3771|  5.02M|    constexpr char lengths[] =
 3772|  5.02M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 3773|  5.02M|        "\1\1\1\1\1\1\1\1"
 3774|  5.02M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 3775|       |                            // byte
 3776|  5.02M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 3777|  5.02M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 3778|  5.02M|        "\4";               // highest bits 11110 -> 4-byte cp
 3779|  5.02M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 3780|  5.02M|    SCN_GCC_COMPAT_POP
 3781|  5.02M|}
_ZN3scn2v36detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|  4.82M|{
 4009|  4.82M|    if constexpr (sizeof(CharT) == 1) {
 4010|  4.82M|        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|       |    else {
 4016|       |        SCN_EXPECT(input.size() == 1);
 4017|       |        auto cp = static_cast<char32_t>(input.front());
 4018|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4019|       |            return invalid_code_point;
 4020|       |        }
 4021|       |        return cp;
 4022|       |    }
 4023|  4.82M|}
_ZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 3821|  4.82M|{
 3822|  4.82M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  |  924|  4.82M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.82M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3823|       |
 3824|  4.82M|    const auto is_trailing_code_unit = [](char ch) {
 3825|  4.82M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|  4.82M|    };
 3827|       |
 3828|  4.82M|    if (input.size() == 1) {
  ------------------
  |  Branch (3828:9): [True: 4.43M, False: 392k]
  ------------------
 3829|  4.43M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (3829:13): [True: 297, False: 4.43M]
  ------------------
 3830|    297|            SCN_UNLIKELY_ATTR
 3831|    297|            return invalid_code_point;
 3832|    297|        }
 3833|  4.43M|        return static_cast<char32_t>(input[0]);
 3834|  4.43M|    }
 3835|       |
 3836|   392k|    if (input.size() == 2) {
  ------------------
  |  Branch (3836:9): [True: 106k, False: 285k]
  ------------------
 3837|   106k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (3837:13): [True: 182, False: 106k]
  ------------------
 3838|    182|            SCN_UNLIKELY_ATTR
 3839|    182|            return invalid_code_point;
 3840|    182|        }
 3841|   106k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (3841:13): [True: 15.6k, False: 90.7k]
  ------------------
 3842|  15.6k|            SCN_UNLIKELY_ATTR
 3843|  15.6k|            return invalid_code_point;
 3844|  15.6k|        }
 3845|       |
 3846|  90.7k|        char32_t cp{};
 3847|  90.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 3848|  90.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 3849|  90.7k|        return cp;
 3850|   106k|    }
 3851|       |
 3852|   285k|    if (input.size() == 3) {
  ------------------
  |  Branch (3852:9): [True: 269k, False: 15.8k]
  ------------------
 3853|   269k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (3853:13): [True: 22, False: 269k]
  ------------------
 3854|     22|            SCN_UNLIKELY_ATTR
 3855|     22|            return invalid_code_point;
 3856|     22|        }
 3857|   269k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3857:13): [True: 4.58k, False: 265k]
  ------------------
 3858|   269k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (3858:13): [True: 1.03k, False: 264k]
  ------------------
 3859|  5.61k|            SCN_UNLIKELY_ATTR
 3860|  5.61k|            return invalid_code_point;
 3861|  5.61k|        }
 3862|       |
 3863|   264k|        char32_t cp{};
 3864|   264k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 3865|   264k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 3866|   264k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 3867|   264k|        return cp;
 3868|   269k|    }
 3869|       |
 3870|  15.8k|    if (input.size() == 4) {
  ------------------
  |  Branch (3870:9): [True: 15.8k, False: 0]
  ------------------
 3871|  15.8k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (3871:13): [True: 0, False: 15.8k]
  ------------------
 3872|      0|            SCN_UNLIKELY_ATTR
 3873|      0|            return invalid_code_point;
 3874|      0|        }
 3875|  15.8k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (3875:13): [True: 9.34k, False: 6.54k]
  ------------------
 3876|  9.34k|            SCN_UNLIKELY_ATTR
 3877|  9.34k|            return invalid_code_point;
 3878|  9.34k|        }
 3879|  6.54k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (3879:13): [True: 2.02k, False: 4.52k]
  ------------------
 3880|  6.54k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (3880:13): [True: 119, False: 4.40k]
  ------------------
 3881|  6.54k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (3881:13): [True: 101, False: 4.30k]
  ------------------
 3882|  2.24k|            SCN_UNLIKELY_ATTR
 3883|  2.24k|            return invalid_code_point;
 3884|  2.24k|        }
 3885|       |
 3886|  4.30k|        char32_t cp{};
 3887|  4.30k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 3888|  4.30k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 3889|  4.30k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 3890|  4.30k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 3891|  4.30k|        return cp;
 3892|  6.54k|    }
 3893|       |
 3894|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 3895|       |    // gcc 7 thinks we'll get here, even when we won't
 3896|      0|    SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3897|      0|#endif
 3898|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 3899|      0|}
_ZZN3scn2v36detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 3824|   657k|    const auto is_trailing_code_unit = [](char ch) {
 3825|   657k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 3826|   657k|    };
_ZN3scn2v36detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  4.14M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  4.14M|    else {
 3701|  4.14M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  4.14M|                                       to_address(first), to_address(last)))};
 3703|  4.14M|    }
 3704|  4.14M|}
_ZN3scn2v36detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  12.7M|{
  326|  12.7M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  12.7M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  12.7M|}
_ZN3scn2v36detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  303|  14.0M|{
  304|  14.0M|    return p;
  305|  14.0M|}
_ZN3scn2v36detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 3725|  2.07M|{
 3726|       |    if constexpr (std::is_constructible_v<
 3727|       |                      typename std::basic_string_view<CharT>::iterator,
 3728|       |                      decltype(it)> &&
 3729|  2.07M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 3730|  2.07M|        SCN_UNUSED(sv);
  ------------------
  |  |  909|  2.07M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3731|  2.07M|        return it;
 3732|       |    }
 3733|       |    else {
 3734|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 3735|       |    }
 3736|  2.07M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  28.3k|    {
 2724|  28.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  28.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  28.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  28.3k|    {
 2705|  28.3k|        return decay_copy(t.begin());
 2706|  28.3k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 1948|  2.15M|{
 1949|  2.15M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.15M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.15M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   505k|    {
 2781|   505k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   505k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   505k|    {
 2763|   505k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   505k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   505k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 8877|  51.3k|{
 8878|  51.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  51.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  51.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.3k|    static_cast<    \
  |  |  929|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.3k|    static_cast<    \
  |  |  929|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  51.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEEEDav:
 5405|   235k|{
 5406|   235k|    detail::check_scan_arg_types<Args...>();
 5407|   235k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   235k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEvv:
 5144|   289k|{
 5145|   289k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   289k|                  "Scan argument types must be default constructible");
 5147|   289k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   289k|                  "Scan argument types must be Destructible");
 5149|   289k|    static_assert(
 5150|   289k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   289k|        "Scan argument types must not be references");
 5152|   289k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEC2Ev:
 5357|   235k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   235k|    {
 5359|   235k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   235k|    {
 5370|   235k|        return {detail::make_arg<
 5371|   235k|            kind, Context,
 5372|   235k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   235k|                                 typename Context::char_type>::value>(args)...};
 5374|   235k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE21ENSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEvEEPvRT2_:
 5179|   235k|{
 5180|   235k|    return make_value<Context>(value).ref_value;
 5181|   235k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEEDaRT0_:
 5129|   289k|{
 5130|   289k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   289k|                                  needs_context_tag>) {
 5134|   289k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   289k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   289k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 4968|   289k|    {                                                                        \
 4969|   289k|        return val;                                                          \
 4970|   289k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEDaOT_:
 5098|   289k|{
 5099|   289k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   289k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   289k|    constexpr bool scannable_char =
 5103|   289k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   289k|    static_assert(scannable_char,
 5105|   289k|                  "Cannot scan an argument of an unsupported character "
 5106|   289k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   289k|    constexpr bool scannable_const =
 5109|   289k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   289k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   289k|    constexpr bool scannable_disabled =
 5113|   289k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   289k|    static_assert(scannable_disabled,
 5115|   289k|                  "Cannot scan an argument that has been disabled by "
 5116|   289k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   289k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   289k|    static_assert(
 5120|   289k|        scannable,
 5121|   289k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   289k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   289k|    return arg_value{arg};
 5125|   289k|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 4909|   289k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   289k|    {
 4911|   289k|    }
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|   102k|{
 8665|   102k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|   102k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   102k|{
 8602|   102k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   102k|    auto result = vscan_impl(buffer, format, args);
 8605|   102k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 90.1k]
  |  |  ------------------
  ------------------
 8606|  12.6k|        return unexpected(result.error());
 8607|  12.6k|    }
 8608|  90.1k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  90.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   102k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 4728|   252k|{
 4729|   252k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   252k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   252k|                  "\n"
 4733|   252k|                  "Unsupported range type given as input to a scanning "
 4734|   252k|                  "function.\n"
 4735|   252k|                  "A range needs to have a character type (value type) "
 4736|   252k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   252k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   252k|                  "to be included.\n"
 4739|   252k|                  "See the scnlib documentation for more details.");
 4740|   252k|    static_assert(
 4741|   252k|        !std::is_same_v<T, custom_char_traits>,
 4742|   252k|        "\n"
 4743|   252k|        "Unsupported range type given as input to a scanning "
 4744|   252k|        "function.\n"
 4745|   252k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   252k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   252k|        "not supported.");
 4748|   252k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   252k|                  "\n"
 4750|   252k|                  "Unsupported range type given as input to a scanning "
 4751|   252k|                  "function.\n"
 4752|   252k|                  "file_marker_found cannot be used as an "
 4753|   252k|                  "source range type to scn::scan.\n"
 4754|   252k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   252k|                  "and do not provide an explicit source range, "
 4756|   252k|                  "or use scn::scan with a FILE* directly.");
 4757|   252k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   252k|                  "\n"
 4759|   252k|                  "Unsupported range type given as input to a scanning "
 4760|   252k|                  "function.\n"
 4761|   252k|                  "In order to be scannable, a range needs to satisfy "
 4762|   252k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   252k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   252k|                  "\n"
 4765|   252k|                  "Unsupported range type given as input to a scanning "
 4766|   252k|                  "function.\n"
 4767|   252k|                  "A range needs to model forward_range and have a valid "
 4768|   252k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   252k|                  "Examples of scannable ranges are std::string, "
 4770|   252k|                  "std::string_view, "
 4771|   252k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   252k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   252k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   252k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|   252k|{
 4668|   252k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|   252k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|   252k|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   252k|    {
 2855|   252k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   252k|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   252k|    {
 2836|   252k|        return t.data();
 2837|   252k|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3228|   252k|    {
 3229|   252k|        return detail::to_address(ranges::begin(derived()));
 3230|   252k|    }
_ZN3scn2v36detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  1.25M|{
  326|  1.25M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  1.25M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  1.25M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   477k|    {
 2724|   477k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   477k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   477k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   477k|    {
 2705|   477k|        return decay_copy(t.begin());
 2706|   477k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3325|  2.78M|    {
 3326|  2.78M|        return m_iterator;
 3327|  2.78M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3184|   252k|    {
 3185|   252k|        return static_cast<const D&>(*this);
 3186|   252k|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|   252k|    {
 2930|   252k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|   252k|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|   252k|    {
 2896|   252k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|   252k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|   252k|    }
_ZN3scn2v36ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 1948|  2.05M|{
 1949|  2.05M|    return SCN_FWD(t);
  ------------------
  |  |  930|  2.05M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  2.05M|}
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|   946k|    {
 3342|   946k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|   946k|    }
_ZNK3scn2v38expectedIlNS0_10scan_errorEEcvbEv:
 1597|  4.17M|    {
 1598|  4.17M|        return has_value();
 1599|  4.17M|    }
_ZNK3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  484|  8.31M|    {
  485|  8.31M|        return m_has_value;
  486|  8.31M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5errorEv:
 1603|   122k|    {
 1604|   122k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|   122k|        return this->get_unexpected().error();
 1606|   122k|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|   122k|    {
  468|   122k|        return m_unexpected;
  469|   122k|    }
_ZNR3scn2v310unexpectedINS0_10scan_errorEE5errorEv:
  360|   913k|    {
  361|   913k|        return m_unexpected;
  362|   913k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  345|   459k|        : m_unexpected(std::forward<Err>(e))
  346|   459k|    {
  347|   459k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   459k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|   459k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  27.3k|        : base(unexpect, std::move(e.error())),
 1474|  27.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.3k|    {
 1476|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  27.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  27.3k|          m_has_value(false)
  446|  27.3k|    {
  447|  27.3k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  354|   525k|        : m_unexpected(std::forward<Args>(args)...)
  355|   525k|    {
  356|   525k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|   525k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|   525k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   252k|    {
 1177|   252k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|   224k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   224k|                      ranges::iterator_t<SourceRange>>) {
 5935|   224k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   224k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   918k|    {
 2724|   918k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   918k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   918k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   918k|    {
 2705|   918k|        return decay_copy(t.begin());
 2706|   918k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 5919|   224k|{
 5920|   224k|    return ranges::end(source);
 5921|   224k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   224k|    {
 2781|   224k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   224k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   224k|    {
 2763|   224k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   224k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   224k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3329|  1.44M|    {
 3330|  1.44M|        return m_sentinel;
 3331|  1.44M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1652|  4.01M|    {
 1653|  4.01M|        return value();
 1654|  4.01M|    }
_ZNR3scn2v38expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1626|  4.01M|    {
 1627|  4.01M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.01M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.01M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.01M|        return this->get_value();
 1629|  4.01M|    }
_ZNR3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.01M|    {
  451|  4.01M|        return m_value;
  452|  4.01M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   224k|        : base(std::in_place, std::forward<U>(val)),
 1428|   224k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   224k|    {
 1430|   224k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|   224k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   224k|    {
  437|   224k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 7985|   102k|    {
 7986|   102k|        return m_str;
 7987|   102k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   235k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   235k|    {
 5436|   235k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE12arg_pointersEv:
 5388|   235k|    {
 5389|   235k|        return m_argptrs;
 5390|   235k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2EmPPv:
 5486|   337k|        : m_desc(desc), m_builtin_values(data)
 5487|   337k|    {
 5488|   337k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|   102k|{
 8831|   102k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 90.1k]
  |  |  ------------------
  ------------------
 8832|  12.6k|        return unexpected(result.error());
 8833|  12.6k|    }
 8834|  90.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  90.1k|    static_cast<    \
  |  |  929|  90.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  90.1k|    static_cast<    \
  |  |  929|  90.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   102k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1597|   252k|    {
 1598|   252k|        return has_value();
 1599|   252k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   504k|    {
  485|   504k|        return m_has_value;
  486|   504k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1603|  27.3k|    {
 1604|  27.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  27.3k|        return this->get_unexpected().error();
 1606|  27.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  27.3k|    {
  468|  27.3k|        return m_unexpected;
  469|  27.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  13.6k|        : base(unexpect, std::move(e.error())),
 1474|  13.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.6k|    {
 1476|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  13.6k|        : m_has_value(false)
  625|  13.6k|    {
  626|  13.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  13.6k|    {
  689|  13.6k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.6k|                                  std::forward<Args>(args)...);
  691|  13.6k|        m_has_value = false;
  692|  13.6k|    }
_ZN3scn2v36detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  391|  81.9k|{
  392|  81.9k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|  81.9k|        T(std::forward<Args>(args)...);
  394|  81.9k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  27.3k|    {
  718|  27.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  27.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  27.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  27.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   126k|    {
 1177|   126k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|   180k|    {
 1653|   180k|        return value();
 1654|   180k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|   224k|    {
 1627|   224k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   224k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   224k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   224k|        return this->get_value();
 1629|   224k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   224k|    {
  451|   224k|        return m_value;
  452|   224k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|   112k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   112k|    {
 5840|   112k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2EOS9_:
 5689|   224k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   224k|    static_cast<    \
  |  |  929|   224k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   224k|    {
 5691|   224k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|   261k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   261k|    static_cast<    \
  |  |  929|   261k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   261k|    {
 5626|   261k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   112k|        : base(std::in_place, std::forward<U>(val)),
 1428|   112k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   112k|    {
 1430|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   112k|        : m_has_value(true)
  615|   112k|    {
  616|   112k|        construct(std::forward<Args>(args)...);
  617|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   112k|    {
  682|   112k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   112k|        m_has_value = true;
  684|   112k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   112k|{
  392|   112k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   112k|        T(std::forward<Args>(args)...);
  394|   112k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2EOSG_:
 5831|   112k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   337k|    {
  706|   337k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   337k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   337k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 5835|   224k|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEE4argsEv:
 5383|   235k|    {
 5384|   235k|        return m_args;
 5385|   235k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEED2Ev:
 5380|   235k|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  1.62M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.62M|    static_cast<    \
  |  |  929|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.62M|    static_cast<    \
  |  |  929|  1.62M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.62M|    {
 3312|  1.62M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 7701|   337k|{
 7702|   337k|    return s;
 7703|   337k|}
_ZN3scn2v36detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 7678|   337k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   102k|        : m_str(r.str)
 7981|   102k|    {
 7982|   102k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   126k|    {
 1598|   126k|        return has_value();
 1599|   126k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   364k|    {
  675|   364k|        return m_has_value;
  676|   364k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   112k|    {
 1673|   112k|        return &value();
 1674|   112k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   112k|    {
 1627|   112k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   112k|        return this->get_value();
 1629|   112k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   112k|    {
  641|   112k|        return *value_ptr();
  642|   112k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 5707|   224k|    {
 5708|   224k|        return ranges::begin(m_range);
 5709|   224k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   126k|    {
  631|   126k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 112k, False: 13.6k]
  ------------------
  632|   112k|            destroy_value();
  633|   112k|        }
  634|  13.6k|        else {
  635|  13.6k|            destroy_unexpected();
  636|  13.6k|        }
  637|   126k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   112k|    {
  696|   112k|        scn::detail::destroy_at(value_ptr());
  697|   112k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  397|   112k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   112k|    else {
  404|   112k|        p->~T();
  405|   112k|    }
  406|   112k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.6k|    {
  700|  13.6k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.6k|    }
_ZN3scn2v36detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  397|  81.9k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|  81.9k|    else {
  404|  81.9k|        p->~T();
  405|  81.9k|    }
  406|  81.9k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 8944|  51.3k|{
 8945|  51.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  51.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  51.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.3k|    static_cast<    \
  |  |  929|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.3k|    static_cast<    \
  |  |  929|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  51.3k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|   102k|{
 8683|   102k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   102k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|   102k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   102k|{
 8618|   102k|#if !SCN_DISABLE_LOCALE
 8619|   102k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   102k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   102k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   102k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   102k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 90.1k]
  |  |  ------------------
  ------------------
 8626|  12.6k|        return unexpected(result.error());
 8627|  12.6k|    }
 8628|  90.1k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  90.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   102k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
 8983|  23.3k|{
 8984|  23.3k|    T value;
 8985|  23.3k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  23.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 22.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.05k|    }                                                  \
  |  |  |  | 3667|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  22.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.3k|    static_cast<    \
  |  |  929|  22.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.3k|    static_cast<    \
  |  |  929|  22.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  23.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__112basic_stringIcNS5_11char_traitsIcEENS5_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  54.0k|{
 5165|  54.0k|    check_scan_arg_types<T>();
 5166|       |
 5167|  54.0k|    basic_scan_arg<Context> arg;
 5168|  54.0k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  54.0k|    arg.m_value = make_value<Context>(value);
 5170|  54.0k|    return arg;
 5171|  54.0k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEC2Ev:
 5250|   415k|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail9arg_valueC2Ev:
 4906|  3.11M|    arg_value() = default;
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  46.7k|{
 8696|  46.7k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  46.7k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  46.7k|{
 8642|  46.7k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  46.7k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  46.7k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  46.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 44.6k]
  |  |  ------------------
  ------------------
 8646|  2.10k|        return unexpected(result.error());
 8647|  2.10k|    }
 8648|  44.6k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  44.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  46.7k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|  44.6k|    {
 1663|  44.6k|        return std::move(value());
 1664|  44.6k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 8877|  51.3k|{
 8878|  51.3k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  51.3k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  51.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.3k|    static_cast<    \
  |  |  929|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.3k|    static_cast<    \
  |  |  929|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  51.3k|}
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEEDav:
 5405|   102k|{
 5406|   102k|    detail::check_scan_arg_types<Args...>();
 5407|   102k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   102k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEvv:
 5144|   126k|{
 5145|   126k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   126k|                  "Scan argument types must be default constructible");
 5147|   126k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   126k|                  "Scan argument types must be Destructible");
 5149|   126k|    static_assert(
 5150|   126k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   126k|        "Scan argument types must not be references");
 5152|   126k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEC2Ev:
 5357|   102k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   102k|    {
 5359|   102k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   102k|    {
 5370|   102k|        return {detail::make_arg<
 5371|   102k|            kind, Context,
 5372|   102k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   102k|                                 typename Context::char_type>::value>(args)...};
 5374|   102k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIcEELNS1_8arg_typeE19ENSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEvEEPvRT2_:
 5179|   102k|{
 5180|   102k|    return make_value<Context>(value).ref_value;
 5181|   102k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEEDaRT0_:
 5129|   126k|{
 5130|   126k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   126k|                                  needs_context_tag>) {
 5134|   126k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   126k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   126k|}
_ZN3scn2v36detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 4968|   126k|    {                                                                        \
 4969|   126k|        return val;                                                          \
 4970|   126k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDaOT_:
 5098|   126k|{
 5099|   126k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   126k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   126k|    constexpr bool scannable_char =
 5103|   126k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   126k|    static_assert(scannable_char,
 5105|   126k|                  "Cannot scan an argument of an unsupported character "
 5106|   126k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   126k|    constexpr bool scannable_const =
 5109|   126k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   126k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   126k|    constexpr bool scannable_disabled =
 5113|   126k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   126k|    static_assert(scannable_disabled,
 5115|   126k|                  "Cannot scan an argument that has been disabled by "
 5116|   126k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   126k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   126k|    static_assert(
 5120|   126k|        scannable,
 5121|   126k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   126k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   126k|    return arg_value{arg};
 5125|   126k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 4909|   126k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   126k|    {
 4911|   126k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 7985|   102k|    {
 7986|   102k|        return m_str;
 7987|   102k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2IJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   102k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   102k|    {
 5436|   102k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE12arg_pointersEv:
 5388|   102k|    {
 5389|   102k|        return m_argptrs;
 5390|   102k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|   102k|{
 8831|   102k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   102k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 90.1k]
  |  |  ------------------
  ------------------
 8832|  12.6k|        return unexpected(result.error());
 8833|  12.6k|    }
 8834|  90.1k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  90.1k|    static_cast<    \
  |  |  929|  90.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|  90.1k|    static_cast<    \
  |  |  929|  90.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   102k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  13.6k|        : base(unexpect, std::move(e.error())),
 1474|  13.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.6k|    {
 1476|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  13.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  13.6k|          m_has_value(false)
  446|  13.6k|    {
  447|  13.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   126k|    {
 1177|   126k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|   112k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   112k|    {
 5840|   112k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|   112k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   112k|    {
 5626|   112k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   112k|        : base(std::in_place, std::forward<U>(val)),
 1428|   112k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   112k|    {
 1430|   112k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   112k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   112k|    {
  437|   112k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIcEEJNSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEE4argsEv:
 5383|   102k|    {
 5384|   102k|        return m_args;
 5385|   102k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   102k|        : m_str(r.str)
 7981|   102k|    {
 7982|   102k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   126k|    {
 1598|   126k|        return has_value();
 1599|   126k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|   238k|    {
  485|   238k|        return m_has_value;
  486|   238k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   112k|    {
 1673|   112k|        return &value();
 1674|   112k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   112k|    {
 1627|   112k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   112k|        return this->get_value();
 1629|   112k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   112k|    {
  451|   112k|        return m_value;
  452|   112k|    }
_ZN3scn2v34scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 8944|  51.3k|{
 8945|  51.3k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  51.3k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  51.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  51.3k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.3k|    static_cast<    \
  |  |  929|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  51.3k|    static_cast<    \
  |  |  929|  51.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  51.3k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
 8983|  23.3k|{
 8984|  23.3k|    T value;
 8985|  23.3k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  23.3k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  23.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  23.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  23.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  23.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 22.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.05k|    }                                                  \
  |  |  |  | 3667|  23.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  22.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  22.3k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.3k|    static_cast<    \
  |  |  929|  22.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  22.3k|    static_cast<    \
  |  |  929|  22.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  23.3k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|  23.3k|{
 5165|  23.3k|    check_scan_arg_types<T>();
 5166|       |
 5167|  23.3k|    basic_scan_arg<Context> arg;
 5168|  23.3k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|  23.3k|    arg.m_value = make_value<Context>(value);
 5170|  23.3k|    return arg;
 5171|  23.3k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  13.6k|    {
 2724|  13.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  13.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  13.6k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  13.6k|    {
 2705|  13.6k|        return decay_copy(t.begin());
 2706|  13.6k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 1948|  6.79M|{
 1949|  6.79M|    return SCN_FWD(t);
  ------------------
  |  |  930|  6.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  6.79M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   325k|    {
 2781|   325k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   325k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   325k|    {
 2763|   325k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   325k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   325k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 8877|  66.1k|{
 8878|  66.1k|    auto args = make_scan_args<scan_context, Args...>();
 8879|  66.1k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8880|  66.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.1k|    static_cast<    \
  |  |  929|  66.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.1k|    static_cast<    \
  |  |  929|  66.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8881|  66.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8664|  66.1k|{
 8665|  66.1k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8666|  66.1k|}
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|  66.1k|{
 8602|  66.1k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|  66.1k|    auto result = vscan_impl(buffer, format, args);
 8605|  66.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.30k, False: 59.8k]
  |  |  ------------------
  ------------------
 8606|  6.30k|        return unexpected(result.error());
 8607|  6.30k|    }
 8608|  59.8k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|  66.1k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4728|   162k|{
 4729|   162k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   162k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   162k|                  "\n"
 4733|   162k|                  "Unsupported range type given as input to a scanning "
 4734|   162k|                  "function.\n"
 4735|   162k|                  "A range needs to have a character type (value type) "
 4736|   162k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   162k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   162k|                  "to be included.\n"
 4739|   162k|                  "See the scnlib documentation for more details.");
 4740|   162k|    static_assert(
 4741|   162k|        !std::is_same_v<T, custom_char_traits>,
 4742|   162k|        "\n"
 4743|   162k|        "Unsupported range type given as input to a scanning "
 4744|   162k|        "function.\n"
 4745|   162k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   162k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   162k|        "not supported.");
 4748|   162k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   162k|                  "\n"
 4750|   162k|                  "Unsupported range type given as input to a scanning "
 4751|   162k|                  "function.\n"
 4752|   162k|                  "file_marker_found cannot be used as an "
 4753|   162k|                  "source range type to scn::scan.\n"
 4754|   162k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   162k|                  "and do not provide an explicit source range, "
 4756|   162k|                  "or use scn::scan with a FILE* directly.");
 4757|   162k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   162k|                  "\n"
 4759|   162k|                  "Unsupported range type given as input to a scanning "
 4760|   162k|                  "function.\n"
 4761|   162k|                  "In order to be scannable, a range needs to satisfy "
 4762|   162k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   162k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   162k|                  "\n"
 4765|   162k|                  "Unsupported range type given as input to a scanning "
 4766|   162k|                  "function.\n"
 4767|   162k|                  "A range needs to model forward_range and have a valid "
 4768|   162k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   162k|                  "Examples of scannable ranges are std::string, "
 4770|   162k|                  "std::string_view, "
 4771|   162k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   162k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   162k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   162k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   162k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   162k|    else {
 4714|   162k|        return make_forward_scan_buffer(r);
 4715|   162k|    }
 4716|   162k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 4532|   162k|{
 4533|   162k|    return basic_scan_forward_buffer_impl(range);
 4534|   162k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   162k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   162k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   162k|          m_cursor(ranges::begin(*m_range))
 4419|   162k|    {
 4420|   162k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4389|   162k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   162k|    {
 4391|   162k|    }
_ZN3scn2v36detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4157|   162k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   162k|    {
 4159|   162k|    }
_ZN3scn2v36detail17basic_scan_bufferIcED2Ev:
 4073|   162k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   312k|    {
 2724|   312k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   312k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   312k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   312k|    {
 2705|   312k|        return decay_copy(t.begin());
 2706|   312k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3325|   461k|    {
 3326|   461k|        return m_iterator;
 3327|   461k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4423|  1.95M|    {
 4424|  1.95M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 19.3k, False: 1.94M]
  ------------------
 4425|  19.3k|            return false;
 4426|  19.3k|        }
 4427|  1.94M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  1.94M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  1.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  1.94M|        }
 4430|  1.94M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 1.78M, False: 155k]
  ------------------
 4431|  1.78M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  1.78M|                                          this->m_current_view.begin(),
 4433|  1.78M|                                          this->m_current_view.end());
 4434|  1.78M|        }
 4435|  1.94M|        m_latest = *m_cursor;
 4436|  1.94M|        ++m_cursor;
 4437|  1.94M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  1.94M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  1.94M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  1.94M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.94M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  1.94M|        }
 4441|  1.94M|        return true;
 4442|  1.95M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  5.84M|    {
 2781|  5.84M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  5.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  5.84M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  5.84M|    {
 2763|  5.84M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  5.84M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  5.84M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3329|  5.98M|    {
 3330|  5.98M|        return m_sentinel;
 3331|  5.98M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE4syncEl:
 4078|   162k|    {
 4079|   162k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   162k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   162k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  13.6k|        : base(unexpect, std::move(e.error())),
 1474|  13.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.6k|    {
 1476|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  13.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  13.6k|          m_has_value(false)
  446|  13.6k|    {
  447|  13.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   162k|    {
 1177|   162k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   149k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   149k|                      ranges::iterator_t<SourceRange>>) {
 5935|   149k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   149k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   149k|    {
 2724|   149k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   149k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   149k|    {
 2705|   149k|        return decay_copy(t.begin());
 2706|   149k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 5919|   149k|{
 5920|   149k|    return ranges::end(source);
 5921|   149k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   149k|    {
 2781|   149k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   149k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   149k|    {
 2763|   149k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   149k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   149k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   149k|        : base(std::in_place, std::forward<U>(val)),
 1428|   149k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   149k|    {
 1430|   149k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   149k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   149k|    {
  437|   149k|    }
_ZNK3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 7985|   132k|    {
 7986|   132k|        return m_str;
 7987|   132k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8830|   132k|{
 8831|   132k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   132k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 119k]
  |  |  ------------------
  ------------------
 8832|  12.6k|        return unexpected(result.error());
 8833|  12.6k|    }
 8834|   119k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   119k|    static_cast<    \
  |  |  929|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   119k|    static_cast<    \
  |  |  929|   119k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   132k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   162k|    {
 1598|   162k|        return has_value();
 1599|   162k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|   325k|    {
  485|   325k|        return m_has_value;
  486|   325k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  13.6k|    {
 1604|  13.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  13.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  13.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  13.6k|        return this->get_unexpected().error();
 1606|  13.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  13.6k|    {
  468|  13.6k|        return m_unexpected;
  469|  13.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  13.6k|        : base(unexpect, std::move(e.error())),
 1474|  13.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  13.6k|    {
 1476|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  13.6k|        : m_has_value(false)
  625|  13.6k|    {
  626|  13.6k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  13.6k|    {
  689|  13.6k|        scn::detail::construct_at(unexpected_ptr(),
  690|  13.6k|                                  std::forward<Args>(args)...);
  691|  13.6k|        m_has_value = false;
  692|  13.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  27.3k|    {
  718|  27.3k|        return reinterpret_cast<unexpected<E>*>(
  719|  27.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  27.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  27.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   162k|    {
 1177|   162k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   119k|    {
 1653|   119k|        return value();
 1654|   119k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   149k|    {
 1627|   149k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   149k|        return this->get_value();
 1629|   149k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   149k|    {
  451|   149k|        return m_value;
  452|   149k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|   149k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   149k|    {
 5840|   149k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2EOSF_:
 5689|   149k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   149k|    static_cast<    \
  |  |  929|   149k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   149k|    {
 5691|   149k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   149k|        : base(std::in_place, std::forward<U>(val)),
 1428|   149k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   149k|    {
 1430|   149k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   149k|        : m_has_value(true)
  615|   149k|    {
  616|   149k|        construct(std::forward<Args>(args)...);
  617|   149k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   149k|    {
  682|   149k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   149k|        m_has_value = true;
  684|   149k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   149k|{
  392|   149k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   149k|        T(std::forward<Args>(args)...);
  394|   149k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2EOSL_:
 5831|   149k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|   447k|    {
  706|   447k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|   447k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|   447k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 5835|   298k|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|   312k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   312k|    static_cast<    \
  |  |  929|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   312k|    static_cast<    \
  |  |  929|   312k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   312k|    {
 3312|   312k|    }
_ZN3scn2v324basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 7980|   132k|        : m_str(r.str)
 7981|   132k|    {
 7982|   132k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   162k|    {
 1598|   162k|        return has_value();
 1599|   162k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|   475k|    {
  675|   475k|        return m_has_value;
  676|   475k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1672|   149k|    {
 1673|   149k|        return &value();
 1674|   149k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   149k|    {
 1627|   149k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   149k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   149k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   149k|        return this->get_value();
 1629|   149k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   149k|    {
  641|   149k|        return *value_ptr();
  642|   149k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 5707|   149k|    {
 5708|   149k|        return ranges::begin(m_range);
 5709|   149k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   162k|    {
  631|   162k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 149k, False: 13.6k]
  ------------------
  632|   149k|            destroy_value();
  633|   149k|        }
  634|  13.6k|        else {
  635|  13.6k|            destroy_unexpected();
  636|  13.6k|        }
  637|   162k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   149k|    {
  696|   149k|        scn::detail::destroy_at(value_ptr());
  697|   149k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  397|   149k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   149k|    else {
  404|   149k|        p->~T();
  405|   149k|    }
  406|   149k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  13.6k|    {
  700|  13.6k|        scn::detail::destroy_at(unexpected_ptr());
  701|  13.6k|    }
_ZN3scn2v34scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 8944|  66.1k|{
 8945|  66.1k|    auto args = make_scan_args<scan_context, Args...>();
 8946|  66.1k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8947|  66.1k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.1k|    static_cast<    \
  |  |  929|  66.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|  66.1k|    static_cast<    \
  |  |  929|  66.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8948|  66.1k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 8682|  66.1k|{
 8683|  66.1k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|  66.1k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8684|  66.1k|}
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|  66.1k|{
 8618|  66.1k|#if !SCN_DISABLE_LOCALE
 8619|  66.1k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|  66.1k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|  66.1k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|  66.1k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|  66.1k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  66.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.30k, False: 59.8k]
  |  |  ------------------
  ------------------
 8626|  6.30k|        return unexpected(result.error());
 8627|  6.30k|    }
 8628|  59.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  59.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|  66.1k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
 8983|  30.6k|{
 8984|  30.6k|    T value;
 8985|  30.6k|    auto arg = detail::make_arg<scan_context>(value);
 8986|  30.6k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|  30.6k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  30.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  30.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.05k, False: 29.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.05k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.05k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.05k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.05k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.05k|    }                                                  \
  |  |  |  | 3667|  30.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 8987|  29.5k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.5k|    static_cast<    \
  |  |  929|  29.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|  29.5k|    static_cast<    \
  |  |  929|  29.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8988|  30.6k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 8695|  30.6k|{
 8696|  30.6k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8697|  30.6k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|  30.6k|{
 8642|  30.6k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|  30.6k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|  30.6k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|  30.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.05k, False: 29.5k]
  |  |  ------------------
  ------------------
 8646|  1.05k|        return unexpected(result.error());
 8647|  1.05k|    }
 8648|  29.5k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|  29.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|  30.6k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|  29.5k|    {
 1663|  29.5k|        return std::move(value());
 1664|  29.5k|    }
_ZNK3scn2v36ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  56.7k|    {
 2724|  56.7k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  56.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  56.7k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  56.7k|    {
 2705|  56.7k|        return decay_copy(t.begin());
 2706|  56.7k|    }
_ZN3scn2v36ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 1948|  12.4M|{
 1949|  12.4M|    return SCN_FWD(t);
  ------------------
  |  |  930|  12.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  12.4M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  3.60M|    {
 2781|  3.60M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  3.60M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  3.60M|    {
 2763|  3.60M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  3.60M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  3.60M|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEEEDav:
 5405|  1.44M|{
 5406|  1.44M|    detail::check_scan_arg_types<Args...>();
 5407|  1.44M|    return detail::scan_arg_store<Context, Args...>{};
 5408|  1.44M|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEvv:
 5144|  1.79M|{
 5145|  1.79M|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|  1.79M|                  "Scan argument types must be default constructible");
 5147|  1.79M|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|  1.79M|                  "Scan argument types must be Destructible");
 5149|  1.79M|    static_assert(
 5150|  1.79M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|  1.79M|        "Scan argument types must not be references");
 5152|  1.79M|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEC2Ev:
 5357|  1.44M|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|  1.44M|    {
 5359|  1.44M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12make_argptrsIJSB_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|  1.44M|    {
 5370|  1.44M|        return {detail::make_arg<
 5371|  1.44M|            kind, Context,
 5372|  1.44M|            mapped_type_constant<remove_cvref_t<A>,
 5373|  1.44M|                                 typename Context::char_type>::value>(args)...};
 5374|  1.44M|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE22ENSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEvEEPvRT2_:
 5179|  1.44M|{
 5180|  1.44M|    return make_value<Context>(value).ref_value;
 5181|  1.44M|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEEDaRT0_:
 5129|  1.79M|{
 5130|  1.79M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|  1.79M|                                  needs_context_tag>) {
 5134|  1.79M|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|  1.79M|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 4968|  1.79M|    {                                                                        \
 4969|  1.79M|        return val;                                                          \
 4970|  1.79M|    }
_ZN3scn2v36detail15make_value_implIRNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEDaOT_:
 5098|  1.79M|{
 5099|  1.79M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|  1.79M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|  1.79M|    constexpr bool scannable_char =
 5103|  1.79M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|  1.79M|    static_assert(scannable_char,
 5105|  1.79M|                  "Cannot scan an argument of an unsupported character "
 5106|  1.79M|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|  1.79M|    constexpr bool scannable_const =
 5109|  1.79M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|  1.79M|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|  1.79M|    constexpr bool scannable_disabled =
 5113|  1.79M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|  1.79M|    static_assert(scannable_disabled,
 5115|  1.79M|                  "Cannot scan an argument that has been disabled by "
 5116|  1.79M|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|  1.79M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|  1.79M|    static_assert(
 5120|  1.79M|        scannable,
 5121|  1.79M|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|  1.79M|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|  1.79M|    return arg_value{arg};
 5125|  1.79M|}
_ZN3scn2v36detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 4909|  1.79M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|  1.79M|    {
 4911|  1.79M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISQ_EEEE:
 8601|   723k|{
 8602|   723k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   723k|    auto result = vscan_impl(buffer, format, args);
 8605|   723k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.2k, False: 698k]
  |  |  ------------------
  ------------------
 8606|  25.2k|        return unexpected(result.error());
 8607|  25.2k|    }
 8608|   698k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   698k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   723k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 4728|  1.79M|{
 4729|  1.79M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|  1.79M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|  1.79M|                  "\n"
 4733|  1.79M|                  "Unsupported range type given as input to a scanning "
 4734|  1.79M|                  "function.\n"
 4735|  1.79M|                  "A range needs to have a character type (value type) "
 4736|  1.79M|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|  1.79M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|  1.79M|                  "to be included.\n"
 4739|  1.79M|                  "See the scnlib documentation for more details.");
 4740|  1.79M|    static_assert(
 4741|  1.79M|        !std::is_same_v<T, custom_char_traits>,
 4742|  1.79M|        "\n"
 4743|  1.79M|        "Unsupported range type given as input to a scanning "
 4744|  1.79M|        "function.\n"
 4745|  1.79M|        "String types (std::basic_string, and std::basic_string_view) "
 4746|  1.79M|        "need to use std::char_traits. Strings with custom Traits are "
 4747|  1.79M|        "not supported.");
 4748|  1.79M|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|  1.79M|                  "\n"
 4750|  1.79M|                  "Unsupported range type given as input to a scanning "
 4751|  1.79M|                  "function.\n"
 4752|  1.79M|                  "file_marker_found cannot be used as an "
 4753|  1.79M|                  "source range type to scn::scan.\n"
 4754|  1.79M|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|  1.79M|                  "and do not provide an explicit source range, "
 4756|  1.79M|                  "or use scn::scan with a FILE* directly.");
 4757|  1.79M|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|  1.79M|                  "\n"
 4759|  1.79M|                  "Unsupported range type given as input to a scanning "
 4760|  1.79M|                  "function.\n"
 4761|  1.79M|                  "In order to be scannable, a range needs to satisfy "
 4762|  1.79M|                  "`forward_range`. `input_range` is not sufficient.");
 4763|  1.79M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|  1.79M|                  "\n"
 4765|  1.79M|                  "Unsupported range type given as input to a scanning "
 4766|  1.79M|                  "function.\n"
 4767|  1.79M|                  "A range needs to model forward_range and have a valid "
 4768|  1.79M|                  "character type (char or wchar_t) to be scannable.\n"
 4769|  1.79M|                  "Examples of scannable ranges are std::string, "
 4770|  1.79M|                  "std::string_view, "
 4771|  1.79M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|  1.79M|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|  1.79M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|  1.79M|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 4667|  1.79M|{
 4668|  1.79M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 4669|  1.79M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 4670|       |    }
 4671|       |    else {
 4672|       |        return invalid_char_type{};
 4673|       |    }
 4674|  1.79M|}
_ZNK3scn2v36ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.79M|    {
 2855|  1.79M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.79M|    }
_ZN3scn2v36ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.79M|    {
 2836|  1.79M|        return t.data();
 2837|  1.79M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3228|  1.79M|    {
 3229|  1.79M|        return detail::to_address(ranges::begin(derived()));
 3230|  1.79M|    }
_ZN3scn2v36detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|  5.32M|{
  326|  5.32M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|  5.32M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|  5.32M|}
_ZN3scn2v36detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  303|   223M|{
  304|   223M|    return p;
  305|   223M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.54M|    {
 2724|  3.54M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.54M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.54M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.54M|    {
 2705|  3.54M|        return decay_copy(t.begin());
 2706|  3.54M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3325|   186M|    {
 3326|   186M|        return m_iterator;
 3327|   186M|    }
_ZNK3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3184|  1.79M|    {
 3185|  1.79M|        return static_cast<const D&>(*this);
 3186|  1.79M|    }
_ZNK3scn2v36ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 2929|  1.79M|    {
 2930|  1.79M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 2931|  1.79M|    }
_ZN3scn2v36ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 2895|  1.79M|    {
 2896|  1.79M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2897|  1.79M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3341|  3.56M|    {
 3342|  3.56M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3343|  3.56M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1473|  54.6k|        : base(unexpect, std::move(e.error())),
 1474|  54.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  54.6k|    {
 1476|  54.6k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  444|  54.6k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  54.6k|          m_has_value(false)
  446|  54.6k|    {
  447|  54.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.79M|    {
 1177|  1.79M|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 5932|  1.74M|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|  1.74M|                      ranges::iterator_t<SourceRange>>) {
 5935|  1.74M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|  1.74M|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  3.50M|    {
 2724|  3.50M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  3.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  3.50M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  3.50M|    {
 2705|  3.50M|        return decay_copy(t.begin());
 2706|  3.50M|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 5919|  1.74M|{
 5920|  1.74M|    return ranges::end(source);
 5921|  1.74M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.74M|    {
 2781|  1.74M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.74M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.74M|    {
 2763|  1.74M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.74M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.74M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3329|   178M|    {
 3330|   178M|        return m_sentinel;
 3331|   178M|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|  1.74M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.74M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.74M|    {
 1430|  1.74M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  435|  1.74M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.74M|    {
  437|  1.74M|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 7985|   723k|    {
 7986|   723k|        return m_str;
 7987|   723k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|  1.44M|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|  1.44M|    {
 5436|  1.44M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE12arg_pointersEv:
 5388|  1.44M|    {
 5389|  1.44M|        return m_argptrs;
 5390|  1.44M|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2EmPPv:
 5486|  2.17M|        : m_desc(desc), m_builtin_values(data)
 5487|  2.17M|    {
 5488|  2.17M|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSG_ISI_EEONS9_5tupleIJSK_EEE:
 8830|   723k|{
 8831|   723k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.2k, False: 698k]
  |  |  ------------------
  ------------------
 8832|  25.2k|        return unexpected(result.error());
 8833|  25.2k|    }
 8834|   698k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   723k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1597|  1.79M|    {
 1598|  1.79M|        return has_value();
 1599|  1.79M|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  3.59M|    {
  485|  3.59M|        return m_has_value;
  486|  3.59M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1603|  54.6k|    {
 1604|  54.6k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  54.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  54.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  54.6k|        return this->get_unexpected().error();
 1606|  54.6k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  54.6k|    {
  468|  54.6k|        return m_unexpected;
  469|  54.6k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1473|  27.3k|        : base(unexpect, std::move(e.error())),
 1474|  27.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.3k|    {
 1476|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  624|  27.3k|        : m_has_value(false)
  625|  27.3k|    {
  626|  27.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  688|  27.3k|    {
  689|  27.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  27.3k|                                  std::forward<Args>(args)...);
  691|  27.3k|        m_has_value = false;
  692|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  54.6k|    {
  718|  54.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  54.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  54.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  54.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   899k|    {
 1177|   899k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1652|  1.39M|    {
 1653|  1.39M|        return value();
 1654|  1.39M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1626|  1.74M|    {
 1627|  1.74M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.74M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.74M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.74M|        return this->get_value();
 1629|  1.74M|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.74M|    {
  451|  1.74M|        return m_value;
  452|  1.74M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ES8_ONS9_5tupleIJSF_EEE:
 5838|   872k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   872k|    {
 5840|   872k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2EOS9_:
 5689|  1.74M|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|  1.74M|    static_cast<    \
  |  |  929|  1.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|  1.74M|    {
 5691|  1.74M|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2EONS3_5tupleIJS9_EEE:
 5624|  1.74M|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|  1.74M|    static_cast<    \
  |  |  929|  1.74M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|  1.74M|    {
 5626|  1.74M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISH_vEEOT_:
 1427|   872k|        : base(std::in_place, std::forward<U>(val)),
 1428|   872k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   872k|    {
 1430|   872k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSI_EvEENSB_10in_place_tEDpOT_:
  614|   872k|        : m_has_value(true)
  615|   872k|    {
  616|   872k|        construct(std::forward<Args>(args)...);
  617|   872k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSI_EEEvDpOT_:
  681|   872k|    {
  682|   872k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   872k|        m_has_value = true;
  684|   872k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJSI_EEEPT_SK_DpOT0_:
  391|   872k|{
  392|   872k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   872k|        T(std::forward<Args>(args)...);
  394|   872k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2EOSG_:
 5831|   872k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.61M|    {
  706|  2.61M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.61M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.61M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 5835|  1.74M|    ~scan_result() = default;
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEE4argsEv:
 5383|  1.44M|    {
 5384|  1.44M|        return m_args;
 5385|  1.44M|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEED2Ev:
 5380|  1.44M|    ~scan_arg_store() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3310|  69.0M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  69.0M|    static_cast<    \
  |  |  929|  69.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  69.0M|    static_cast<    \
  |  |  929|  69.0M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  69.0M|    {
 3312|  69.0M|    }
_ZN3scn2v314runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 7706|  2.17M|{
 7707|  2.17M|    return s;
 7708|  2.17M|}
_ZN3scn2v36detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 7678|  2.17M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   723k|        : m_str(r.str)
 7981|   723k|    {
 7982|   723k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   899k|    {
 1598|   899k|        return has_value();
 1599|   899k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.67M|    {
  675|  2.67M|        return m_has_value;
  676|  2.67M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   872k|    {
 1673|   872k|        return &value();
 1674|   872k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1626|   872k|    {
 1627|   872k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   872k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   872k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   872k|        return this->get_value();
 1629|   872k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   872k|    {
  641|   872k|        return *value_ptr();
  642|   872k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 5707|  1.74M|    {
 5708|  1.74M|        return ranges::begin(m_range);
 5709|  1.74M|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   899k|    {
  631|   899k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 872k, False: 27.3k]
  ------------------
  632|   872k|            destroy_value();
  633|   872k|        }
  634|  27.3k|        else {
  635|  27.3k|            destroy_unexpected();
  636|  27.3k|        }
  637|   899k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   872k|    {
  696|   872k|        scn::detail::destroy_at(value_ptr());
  697|   872k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  397|   872k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   872k|    else {
  404|   872k|        p->~T();
  405|   872k|    }
  406|   872k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  27.3k|    {
  700|  27.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  27.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISU_EEEE:
 8617|   723k|{
 8618|   723k|#if !SCN_DISABLE_LOCALE
 8619|   723k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   723k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   723k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   723k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   723k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.2k, False: 698k]
  |  |  ------------------
  ------------------
 8626|  25.2k|        return unexpected(result.error());
 8627|  25.2k|    }
 8628|   698k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   698k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   723k|}
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__112basic_stringIwNS5_11char_traitsIwEENS5_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   353k|{
 5165|   353k|    check_scan_arg_types<T>();
 5166|       |
 5167|   353k|    basic_scan_arg<Context> arg;
 5168|   353k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   353k|    arg.m_value = make_value<Context>(value);
 5170|   353k|    return arg;
 5171|   353k|}
_ZN3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEC2Ev:
 5250|  2.69M|    constexpr basic_scan_arg() = default;
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   353k|{
 8642|   353k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   353k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   353k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 349k]
  |  |  ------------------
  ------------------
 8646|  4.20k|        return unexpected(result.error());
 8647|  4.20k|    }
 8648|   349k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   353k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSE_v:
 1662|   349k|    {
 1663|   349k|        return std::move(value());
 1664|   349k|    }
_ZN3scn2v314make_scan_argsINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEEEDav:
 5405|   723k|{
 5406|   723k|    detail::check_scan_arg_types<Args...>();
 5407|   723k|    return detail::scan_arg_store<Context, Args...>{};
 5408|   723k|}
_ZN3scn2v36detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEvv:
 5144|   899k|{
 5145|   899k|    static_assert(std::conjunction_v<std::is_default_constructible<Args>...>,
 5146|   899k|                  "Scan argument types must be default constructible");
 5147|   899k|    static_assert(std::conjunction_v<std::is_destructible<Args>...>,
 5148|   899k|                  "Scan argument types must be Destructible");
 5149|   899k|    static_assert(
 5150|   899k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>,
 5151|   899k|        "Scan argument types must not be references");
 5152|   899k|}
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEC2Ev:
 5357|   723k|        : m_argptrs(std::apply(make_argptrs<Args...>, m_args))
 5358|   723k|    {
 5359|   723k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12make_argptrsIJS9_EEENS5_5arrayIPvLm1EEEDpRT_:
 5369|   723k|    {
 5370|   723k|        return {detail::make_arg<
 5371|   723k|            kind, Context,
 5372|   723k|            mapped_type_constant<remove_cvref_t<A>,
 5373|   723k|                                 typename Context::char_type>::value>(args)...};
 5374|   723k|    }
_ZN3scn2v36detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextIwEELNS1_8arg_typeE20ENSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEvEEPvRT2_:
 5179|   723k|{
 5180|   723k|    return make_value<Context>(value).ref_value;
 5181|   723k|}
_ZN3scn2v36detail10make_valueINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEEDaRT0_:
 5129|   899k|{
 5130|   899k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5131|       |
 5132|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5133|   899k|                                  needs_context_tag>) {
 5134|   899k|        return make_value_impl(SCN_FWD(arg));
  ------------------
  |  |  930|   899k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5135|       |    }
 5136|       |    else {
 5137|       |        return make_value_impl(arg_mapper<typename Context::char_type>().map(
 5138|       |            value, context_tag<Context>{}));
 5139|       |    }
 5140|   899k|}
_ZN3scn2v36detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 4968|   899k|    {                                                                        \
 4969|   899k|        return val;                                                          \
 4970|   899k|    }
_ZN3scn2v36detail15make_value_implIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEDaOT_:
 5098|   899k|{
 5099|   899k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5100|   899k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5101|       |
 5102|   899k|    constexpr bool scannable_char =
 5103|   899k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5104|   899k|    static_assert(scannable_char,
 5105|   899k|                  "Cannot scan an argument of an unsupported character "
 5106|   899k|                  "type (i.e. char from a wchar_t source)");
 5107|       |
 5108|   899k|    constexpr bool scannable_const =
 5109|   899k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5110|   899k|    static_assert(scannable_const, "Cannot scan a const argument");
 5111|       |
 5112|   899k|    constexpr bool scannable_disabled =
 5113|   899k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5114|   899k|    static_assert(scannable_disabled,
 5115|   899k|                  "Cannot scan an argument that has been disabled by "
 5116|   899k|                  "flag (SCN_DISABLE_TYPE_*)");
 5117|       |
 5118|   899k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5119|   899k|    static_assert(
 5120|   899k|        scannable,
 5121|   899k|        "Cannot scan an argument. To make a type T scannable, provide "
 5122|   899k|        "a scn::scanner<T, CharT> specialization.");
 5123|       |
 5124|   899k|    return arg_value{arg};
 5125|   899k|}
_ZN3scn2v36detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 4909|   899k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 4910|   899k|    {
 4911|   899k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 7985|   723k|    {
 7986|   723k|        return m_str;
 7987|   723k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2IJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEERNS0_6detail14scan_arg_storeIS3_JDpT_EEE:
 5434|   723k|        : basic_scan_args(store.desc, store.arg_pointers().data())
 5435|   723k|    {
 5436|   723k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE12arg_pointersEv:
 5388|   723k|    {
 5389|   723k|        return m_argptrs;
 5390|   723k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSE_ISG_EEONS9_5tupleIJSI_EEE:
 8830|   723k|{
 8831|   723k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.2k, False: 698k]
  |  |  ------------------
  ------------------
 8832|  25.2k|        return unexpected(result.error());
 8833|  25.2k|    }
 8834|   698k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   723k|}
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1473|  27.3k|        : base(unexpect, std::move(e.error())),
 1474|  27.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.3k|    {
 1476|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  444|  27.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  27.3k|          m_has_value(false)
  446|  27.3k|    {
  447|  27.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   899k|    {
 1177|   899k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ES8_ONS9_5tupleIJSD_EEE:
 5838|   872k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   872k|    {
 5840|   872k|    }
_ZN3scn2v36detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2EONS3_5tupleIJS7_EEE:
 5624|   872k|        : m_values(SCN_MOVE(values))
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5625|   872k|    {
 5626|   872k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISF_vEEOT_:
 1427|   872k|        : base(std::in_place, std::forward<U>(val)),
 1428|   872k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   872k|    {
 1430|   872k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSG_EvEENSB_10in_place_tEDpOT_:
  435|   872k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   872k|    {
  437|   872k|    }
_ZN3scn2v36detail14scan_arg_storeINS0_18basic_scan_contextIwEEJNSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEE4argsEv:
 5383|   723k|    {
 5384|   723k|        return m_args;
 5385|   723k|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   723k|        : m_str(r.str)
 7981|   723k|    {
 7982|   723k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   899k|    {
 1598|   899k|        return has_value();
 1599|   899k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.77M|    {
  485|  1.77M|        return m_has_value;
  486|  1.77M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   872k|    {
 1673|   872k|        return &value();
 1674|   872k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1626|   872k|    {
 1627|   872k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   872k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   872k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   872k|        return this->get_value();
 1629|   872k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  450|   872k|    {
  451|   872k|        return m_value;
  452|   872k|    }
_ZN3scn2v36detail8make_argINS0_18basic_scan_contextIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5164|   176k|{
 5165|   176k|    check_scan_arg_types<T>();
 5166|       |
 5167|   176k|    basic_scan_arg<Context> arg;
 5168|   176k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5169|   176k|    arg.m_value = make_value<Context>(value);
 5170|   176k|    return arg;
 5171|   176k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  27.3k|    {
 2724|  27.3k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  27.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  27.3k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  27.3k|    {
 2705|  27.3k|        return decay_copy(t.begin());
 2706|  27.3k|    }
_ZN3scn2v36ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 1948|  88.2M|{
 1949|  88.2M|    return SCN_FWD(t);
  ------------------
  |  |  930|  88.2M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1950|  88.2M|}
_ZNK3scn2v36ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  1.79M|    {
 2781|  1.79M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  1.79M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  1.79M|    {
 2763|  1.79M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  1.79M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  1.79M|    }
_ZN3scn2v36detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISV_EEEE:
 8601|   361k|{
 8602|   361k|    auto buffer = make_scan_buffer(range);
 8603|       |
 8604|   361k|    auto result = vscan_impl(buffer, format, args);
 8605|   361k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 349k]
  |  |  ------------------
  ------------------
 8606|  12.6k|        return unexpected(result.error());
 8607|  12.6k|    }
 8608|   349k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8609|   361k|}
_ZN3scn2v36detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4728|   899k|{
 4729|   899k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 4730|       |
 4731|   899k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 4732|   899k|                  "\n"
 4733|   899k|                  "Unsupported range type given as input to a scanning "
 4734|   899k|                  "function.\n"
 4735|   899k|                  "A range needs to have a character type (value type) "
 4736|   899k|                  "of either `char` or `wchar_t` to be scannable.\n"
 4737|   899k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 4738|   899k|                  "to be included.\n"
 4739|   899k|                  "See the scnlib documentation for more details.");
 4740|   899k|    static_assert(
 4741|   899k|        !std::is_same_v<T, custom_char_traits>,
 4742|   899k|        "\n"
 4743|   899k|        "Unsupported range type given as input to a scanning "
 4744|   899k|        "function.\n"
 4745|   899k|        "String types (std::basic_string, and std::basic_string_view) "
 4746|   899k|        "need to use std::char_traits. Strings with custom Traits are "
 4747|   899k|        "not supported.");
 4748|   899k|    static_assert(!std::is_same_v<T, file_marker_found>,
 4749|   899k|                  "\n"
 4750|   899k|                  "Unsupported range type given as input to a scanning "
 4751|   899k|                  "function.\n"
 4752|   899k|                  "file_marker_found cannot be used as an "
 4753|   899k|                  "source range type to scn::scan.\n"
 4754|   899k|                  "To read from stdin, use scn::input or scn::prompt, "
 4755|   899k|                  "and do not provide an explicit source range, "
 4756|   899k|                  "or use scn::scan with a FILE* directly.");
 4757|   899k|    static_assert(!std::is_same_v<T, insufficient_range>,
 4758|   899k|                  "\n"
 4759|   899k|                  "Unsupported range type given as input to a scanning "
 4760|   899k|                  "function.\n"
 4761|   899k|                  "In order to be scannable, a range needs to satisfy "
 4762|   899k|                  "`forward_range`. `input_range` is not sufficient.");
 4763|   899k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 4764|   899k|                  "\n"
 4765|   899k|                  "Unsupported range type given as input to a scanning "
 4766|   899k|                  "function.\n"
 4767|   899k|                  "A range needs to model forward_range and have a valid "
 4768|   899k|                  "character type (char or wchar_t) to be scannable.\n"
 4769|   899k|                  "Examples of scannable ranges are std::string, "
 4770|   899k|                  "std::string_view, "
 4771|   899k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 4772|   899k|                  "See the scnlib documentation for more details.");
 4773|       |
 4774|   899k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 4775|   899k|}
_ZN3scn2v36detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 4698|   899k|{
 4699|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 4700|       |        return file_marker_found{};
 4701|       |    }
 4702|       |    else if constexpr (!ranges::forward_range<Range>) {
 4703|       |        if constexpr (ranges::range<Range>) {
 4704|       |            return insufficient_range{};
 4705|       |        }
 4706|       |        else {
 4707|       |            return invalid_input_range{};
 4708|       |        }
 4709|       |    }
 4710|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 4711|       |        return invalid_char_type{};
 4712|       |    }
 4713|   899k|    else {
 4714|   899k|        return make_forward_scan_buffer(r);
 4715|   899k|    }
 4716|   899k|}
_ZN3scn2v36detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 4532|   899k|{
 4533|   899k|    return basic_scan_forward_buffer_impl(range);
 4534|   899k|}
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4417|   899k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  |  930|   899k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4418|   899k|          m_cursor(ranges::begin(*m_range))
 4419|   899k|    {
 4420|   899k|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4389|   899k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4390|   899k|    {
 4391|   899k|    }
_ZN3scn2v36detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4157|   899k|        : m_current_view(sv), m_is_contiguous(false)
 4158|   899k|    {
 4159|   899k|    }
_ZN3scn2v36detail17basic_scan_bufferIwED2Ev:
 4073|   899k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v36ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|  1.77M|    {
 2724|  1.77M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  1.77M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|  1.77M|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|  1.77M|    {
 2705|  1.77M|        return decay_copy(t.begin());
 2706|  1.77M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3325|  2.64M|    {
 3326|  2.64M|        return m_iterator;
 3327|  2.64M|    }
_ZN3scn2v36detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4423|  27.6M|    {
 4424|  27.6M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4424:13): [True: 25.7k, False: 27.6M]
  ------------------
 4425|  25.7k|            return false;
 4426|  25.7k|        }
 4427|  27.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4428|  27.6M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  |  924|  27.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4429|  27.6M|        }
 4430|  27.6M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4430:13): [True: 26.7M, False: 884k]
  ------------------
 4431|  26.7M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4432|  26.7M|                                          this->m_current_view.begin(),
 4433|  26.7M|                                          this->m_current_view.end());
 4434|  26.7M|        }
 4435|  27.6M|        m_latest = *m_cursor;
 4436|  27.6M|        ++m_cursor;
 4437|  27.6M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4438|  27.6M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4439|  27.6M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  |  924|  27.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4440|  27.6M|        }
 4441|  27.6M|        return true;
 4442|  27.6M|    }
_ZNK3scn2v36ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|  82.8M|    {
 2781|  82.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|  82.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|  82.8M|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|  82.8M|    {
 2763|  82.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|  82.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|  82.8M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3329|  83.7M|    {
 3330|  83.7M|        return m_sentinel;
 3331|  83.7M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE4syncEl:
 4078|   899k|    {
 4079|   899k|        SCN_UNUSED(position);
  ------------------
  |  |  909|   899k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4080|   899k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1473|  27.3k|        : base(unexpect, std::move(e.error())),
 1474|  27.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.3k|    {
 1476|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  444|  27.3k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  27.3k|          m_has_value(false)
  446|  27.3k|    {
  447|  27.3k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   899k|    {
 1177|   899k|    }
_ZN3scn2v36detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 5932|   872k|{
 5933|       |    if constexpr (ranges::random_access_iterator<
 5934|   872k|                      ranges::iterator_t<SourceRange>>) {
 5935|   872k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 5936|       |    }
 5937|       |    else {
 5938|       |        auto it = ranges::begin(source);
 5939|       |        while (n > 0) {
 5940|       |            --n;
 5941|       |            ++it;
 5942|       |        }
 5943|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 5944|       |    }
 5945|   872k|}
_ZNK3scn2v36ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2723|   872k|    {
 2724|   872k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   872k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2725|   872k|    }
_ZN3scn2v36ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2704|   872k|    {
 2705|   872k|        return decay_copy(t.begin());
 2706|   872k|    }
_ZN3scn2v36detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 5919|   872k|{
 5920|   872k|    return ranges::end(source);
 5921|   872k|}
_ZNK3scn2v36ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2780|   872k|    {
 2781|   872k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  |  930|   872k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2782|   872k|    }
_ZN3scn2v36ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2762|   872k|    {
 2763|   872k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  |  930|   872k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2764|   872k|    }
_ZN3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1427|   872k|        : base(std::in_place, std::forward<U>(val)),
 1428|   872k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   872k|    {
 1430|   872k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  435|   872k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   872k|    {
  437|   872k|    }
_ZNK3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 7985|   723k|    {
 7986|   723k|        return m_str;
 7987|   723k|    }
_ZN3scn2v316make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEENS0_13scan_expectedINS0_11scan_resultIT_JDpT0_EEEEEONSL_ISN_EEONS6_5tupleIJSP_EEE:
 8830|   723k|{
 8831|   723k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.2k, False: 698k]
  |  |  ------------------
  ------------------
 8832|  25.2k|        return unexpected(result.error());
 8833|  25.2k|    }
 8834|   698k|    return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(*result), SCN_MOVE(args)};
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8835|   723k|}
_ZNK3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1597|   899k|    {
 1598|   899k|        return has_value();
 1599|   899k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.79M|    {
  485|  1.79M|        return m_has_value;
  486|  1.79M|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1603|  27.3k|    {
 1604|  27.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  27.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  27.3k|        return this->get_unexpected().error();
 1606|  27.3k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  27.3k|    {
  468|  27.3k|        return m_unexpected;
  469|  27.3k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1473|  27.3k|        : base(unexpect, std::move(e.error())),
 1474|  27.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  27.3k|    {
 1476|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  624|  27.3k|        : m_has_value(false)
  625|  27.3k|    {
  626|  27.3k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  627|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  688|  27.3k|    {
  689|  27.3k|        scn::detail::construct_at(unexpected_ptr(),
  690|  27.3k|                                  std::forward<Args>(args)...);
  691|  27.3k|        m_has_value = false;
  692|  27.3k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  717|  54.6k|    {
  718|  54.6k|        return reinterpret_cast<unexpected<E>*>(
  719|  54.6k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  |  894|  54.6k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  720|  54.6k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   899k|    {
 1177|   899k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1652|   698k|    {
 1653|   698k|        return value();
 1654|   698k|    }
_ZNR3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1626|   872k|    {
 1627|   872k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   872k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   872k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   872k|        return this->get_value();
 1629|   872k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  450|   872k|    {
  451|   872k|        return m_value;
  452|   872k|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ESE_ONS6_5tupleIJSK_EEE:
 5838|   872k|        : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : range_base(SCN_MOVE(r)), value_base(SCN_MOVE(values))
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5839|   872k|    {
 5840|   872k|    }
_ZN3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2EOSF_:
 5689|   872k|    constexpr scan_result_range_storage(range_type&& r) : m_range(SCN_MOVE(r))
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 5690|   872k|    {
 5691|   872k|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISM_vEEOT_:
 1427|   872k|        : base(std::in_place, std::forward<U>(val)),
 1428|   872k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   872k|    {
 1430|   872k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSN_EvEENS8_10in_place_tEDpOT_:
  614|   872k|        : m_has_value(true)
  615|   872k|    {
  616|   872k|        construct(std::forward<Args>(args)...);
  617|   872k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJSN_EEEvDpOT_:
  681|   872k|    {
  682|   872k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  683|   872k|        m_has_value = true;
  684|   872k|    }
_ZN3scn2v36detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJSN_EEEPT_SP_DpOT0_:
  391|   872k|{
  392|   872k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  393|   872k|        T(std::forward<Args>(args)...);
  394|   872k|}
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2EOSL_:
 5831|   872k|    constexpr scan_result(scan_result&&) = default;
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  705|  2.61M|    {
  706|  2.61M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  |  894|  2.61M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  707|  2.61M|    }
_ZN3scn2v311scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 5835|  1.74M|    ~scan_result() = default;
_ZN3scn2v36ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3310|  1.77M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.77M|    static_cast<    \
  |  |  929|  1.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  1.77M|    static_cast<    \
  |  |  929|  1.77M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  1.77M|    {
 3312|  1.77M|    }
_ZN3scn2v324basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 7980|   723k|        : m_str(r.str)
 7981|   723k|    {
 7982|   723k|    }
_ZNK3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1597|   899k|    {
 1598|   899k|        return has_value();
 1599|   899k|    }
_ZNK3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  674|  2.67M|    {
  675|  2.67M|        return m_has_value;
  676|  2.67M|    }
_ZN3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1672|   872k|    {
 1673|   872k|        return &value();
 1674|   872k|    }
_ZNR3scn2v38expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1626|   872k|    {
 1627|   872k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   872k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   872k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   872k|        return this->get_value();
 1629|   872k|    }
_ZNR3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  640|   872k|    {
  641|   872k|        return *value_ptr();
  642|   872k|    }
_ZNK3scn2v36detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 5707|   872k|    {
 5708|   872k|        return ranges::begin(m_range);
 5709|   872k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  630|   899k|    {
  631|   899k|        if (has_value()) {
  ------------------
  |  Branch (631:13): [True: 872k, False: 27.3k]
  ------------------
  632|   872k|            destroy_value();
  633|   872k|        }
  634|  27.3k|        else {
  635|  27.3k|            destroy_unexpected();
  636|  27.3k|        }
  637|   899k|    }
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  695|   872k|    {
  696|   872k|        scn::detail::destroy_at(value_ptr());
  697|   872k|    }
_ZN3scn2v36detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  397|   872k|{
  398|       |    if constexpr (std::is_array_v<T>) {
  399|       |        for (auto& elem : *p) {
  400|       |            scn::detail::destroy_at(&elem);
  401|       |        }
  402|       |    }
  403|   872k|    else {
  404|   872k|        p->~T();
  405|   872k|    }
  406|   872k|}
_ZN3scn2v36detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  699|  27.3k|    {
  700|  27.3k|        scn::detail::destroy_at(unexpected_ptr());
  701|  27.3k|    }
_ZN3scn2v36detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextISZ_EEEE:
 8617|   361k|{
 8618|   361k|#if !SCN_DISABLE_LOCALE
 8619|   361k|    auto buffer = detail::make_scan_buffer(range);
 8620|       |
 8621|   361k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 8622|   361k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 8623|   361k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 8624|       |
 8625|   361k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 349k]
  |  |  ------------------
  ------------------
 8626|  12.6k|        return unexpected(result.error());
 8627|  12.6k|    }
 8628|   349k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   349k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8629|       |#else
 8630|       |    static_assert(dependent_false<Locale>::value,
 8631|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 8632|       |
 8633|       |    return {};
 8634|       |#endif
 8635|   361k|}
_ZN3scn2v36detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 8641|   176k|{
 8642|   176k|    auto buffer = detail::make_scan_buffer(range);
 8643|       |
 8644|   176k|    auto result = detail::vscan_value_impl(buffer, arg);
 8645|   176k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 174k]
  |  |  ------------------
  ------------------
 8646|  2.10k|        return unexpected(result.error());
 8647|  2.10k|    }
 8648|   174k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 8649|   176k|}
_ZNO3scn2v38expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSJ_v:
 1662|   174k|    {
 1663|   174k|        return std::move(value());
 1664|   174k|    }
_ZN3scn2v310scan_errorC2ENS1_4codeEPKc:
 3562|   160k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3563|   160k|    {
 3564|   160k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  |  909|   160k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3565|   160k|    }
_ZNK3scn2v310scan_errorcvbEv:
 3569|  9.68M|    {
 3570|  9.68M|        return m_code == good;
 3571|  9.68M|    }
_ZNK3scn2v310scan_error4codeEv:
 3580|  56.7k|    {
 3581|  56.7k|        return m_code;
 3582|  56.7k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  6.50M|    {
 3326|  6.50M|        return m_iterator;
 3327|  6.50M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3325|  90.6M|    {
 3326|  90.6M|        return m_iterator;
 3327|  90.6M|    }
_ZN3scn2v36detail12specs_setterC2ERNS1_12format_specsE:
 6269|  1.29M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v36detail12specs_setter8on_widthEi:
 6292|  37.8k|    {
 6293|  37.8k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (6293:13): [True: 0, False: 37.8k]
  |  Branch (6293:39): [True: 0, False: 0]
  ------------------
 6294|       |            // clang-format off
 6295|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 6296|       |            // clang-format on
 6297|      0|        }
 6298|       |
 6299|  37.8k|        m_specs.width = width;
 6300|  37.8k|    }
_ZN3scn2v36detail12specs_setter7on_typeENS1_17presentation_typeE:
 6313|  1.25M|    {
 6314|  1.25M|        m_specs.type = type;
 6315|  1.25M|    }
_ZN3scn2v36detail12specs_setter16on_charset_rangeEDiDi:
 6330|  43.5k|    {
 6331|  43.5k|        const auto begin_value = static_cast<unsigned>(begin);
 6332|  43.5k|        const auto end_value = static_cast<unsigned>(end);
 6333|  43.5k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  |  924|  43.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  43.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6334|       |
 6335|  43.5k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  |  858|  43.5k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 43.5k, False: 0]
  |  |  ------------------
  ------------------
 6336|       |            // No need to bit-twiddle with a mask, because with the
 6337|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 6338|  43.5k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  |  878|  43.5k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 6339|  1.17M|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (6339:40): [True: 1.13M, False: 43.5k]
  ------------------
 6340|  1.13M|                m_specs.charset_literals[v / 8] |=
 6341|  1.13M|                    static_cast<unsigned char>(1ul << (v % 8));
 6342|  1.13M|            }
 6343|  43.5k|        }
 6344|      0|        else {
 6345|      0|            m_specs.charset_has_nonascii = true;
 6346|      0|        }
 6347|  43.5k|    }
_ZN3scn2v36detail12specs_setter8on_errorEPKc:
 6375|  37.8k|    {
 6376|  37.8k|        SCN_UNLIKELY_ATTR
 6377|  37.8k|        m_error = scan_error{scan_error::invalid_format_string, msg};
 6378|  37.8k|    }
_ZNK3scn2v36detail12specs_settercvbEv:
 6386|  1.35M|    {
 6387|  1.35M|        return static_cast<bool>(m_error);
 6388|  1.35M|    }
_ZN3scn2v3eqENS0_10scan_errorENS1_4codeE:
 3604|  56.7k|{
 3605|  56.7k|    return a.code() == b;
 3606|  56.7k|}
_ZN3scn2v3neENS0_10scan_errorENS1_4codeE:
 3608|  56.7k|{
 3609|  56.7k|    return !(a == b);
 3610|  56.7k|}
_ZN3scn2v36detail11is_cp_spaceEDi:
 4042|  84.8M|{
 4043|       |    // Pattern_White_Space property
 4044|  84.8M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4044:13): [True: 17.5M, False: 67.3M]
  |  Branch (4044:27): [True: 2.88M, False: 14.6M]
  ------------------
 4045|  84.8M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4045:12): [True: 2.72M, False: 79.2M]
  ------------------
 4046|  84.8M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4046:12): [True: 532k, False: 78.7M]
  ------------------
 4047|  84.8M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4047:12): [True: 217k, False: 78.5M]
  ------------------
 4048|  84.8M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4048:12): [True: 243k, False: 78.2M]
  ------------------
 4049|  84.8M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4049:12): [True: 160k, False: 78.1M]
  ------------------
 4050|  84.8M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4050:12): [True: 90, False: 78.1M]
  ------------------
 4051|  84.8M|}
_ZN3scn2v36detail25get_category_for_arg_typeENS1_8arg_typeE:
 7073|  18.9k|{
 7074|  18.9k|    switch (type) {
 7075|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7075:9): [True: 0, False: 18.9k]
  ------------------
 7076|      0|            return arg_type_category::none;
 7077|       |
 7078|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7078:9): [True: 0, False: 18.9k]
  ------------------
 7079|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7079:9): [True: 0, False: 18.9k]
  ------------------
 7080|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7080:9): [True: 0, False: 18.9k]
  ------------------
 7081|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7081:9): [True: 0, False: 18.9k]
  ------------------
 7082|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7082:9): [True: 0, False: 18.9k]
  ------------------
 7083|      0|            return arg_type_category::integer;
 7084|       |
 7085|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7085:9): [True: 0, False: 18.9k]
  ------------------
 7086|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7086:9): [True: 0, False: 18.9k]
  ------------------
 7087|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7087:9): [True: 0, False: 18.9k]
  ------------------
 7088|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7088:9): [True: 0, False: 18.9k]
  ------------------
 7089|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7089:9): [True: 0, False: 18.9k]
  ------------------
 7090|      0|            return arg_type_category::unsigned_integer;
 7091|       |
 7092|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7092:9): [True: 0, False: 18.9k]
  ------------------
 7093|      0|            return arg_type_category::pointer;
 7094|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7094:9): [True: 0, False: 18.9k]
  ------------------
 7095|      0|            return arg_type_category::boolean;
 7096|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7096:9): [True: 0, False: 18.9k]
  ------------------
 7097|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7097:9): [True: 0, False: 18.9k]
  ------------------
 7098|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7098:9): [True: 0, False: 18.9k]
  ------------------
 7099|      0|            return arg_type_category::character;
 7100|       |
 7101|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7101:9): [True: 0, False: 18.9k]
  ------------------
 7102|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7102:9): [True: 0, False: 18.9k]
  ------------------
 7103|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7103:9): [True: 0, False: 18.9k]
  ------------------
 7104|      0|            return arg_type_category::floating;
 7105|       |
 7106|  2.10k|        case arg_type::narrow_string_view_type:
  ------------------
  |  Branch (7106:9): [True: 2.10k, False: 16.8k]
  ------------------
 7107|  6.30k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7107:9): [True: 4.20k, False: 14.7k]
  ------------------
 7108|  10.5k|        case arg_type::wide_string_view_type:
  ------------------
  |  Branch (7108:9): [True: 4.20k, False: 14.7k]
  ------------------
 7109|  18.9k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7109:9): [True: 8.40k, False: 10.5k]
  ------------------
 7110|  18.9k|            return arg_type_category::string;
 7111|       |
 7112|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7112:9): [True: 0, False: 18.9k]
  ------------------
 7113|      0|            return arg_type_category::custom;
 7114|       |
 7115|      0|            SCN_CLANG_PUSH
 7116|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7117|      0|        default:
  ------------------
  |  Branch (7117:9): [True: 0, False: 18.9k]
  ------------------
 7118|      0|            SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7119|  18.9k|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7120|  18.9k|            SCN_CLANG_POP
 7121|  18.9k|    }
 7122|       |
 7123|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7124|  18.9k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA41_KcEEEDaDpOT_:
 3649|  18.9k|{
 3650|  18.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  18.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  18.9k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA35_KcEEEDaDpOT_:
 3649|  21.3k|{
 3650|  21.3k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  21.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  21.3k|}
_ZN3scn2v321unexpected_scan_errorIJNS0_10scan_error4codeERA40_KcEEEDaDpOT_:
 3649|  10.9k|{
 3650|  10.9k|    return unexpected(scan_error{SCN_FWD(args)...});
  ------------------
  |  |  930|  10.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3651|  10.9k|}
_ZN3scn2v36detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 7215|  1.25M|{
 7216|  1.25M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (7216:9): [True: 0, False: 1.25M]
  ------------------
 7217|  1.25M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (7217:9): [True: 1.21M, False: 40.7k]
  ------------------
 7218|  1.25M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (7218:9): [True: 21.7k, False: 18.9k]
  ------------------
 7219|  1.25M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (7219:9): [True: 0, False: 18.9k]
  ------------------
 7220|  1.25M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (7220:9): [True: 0, False: 18.9k]
  ------------------
 7221|  1.23M|        return;
 7222|  1.23M|    }
 7223|  18.9k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (7223:9): [True: 18.9k, False: 0]
  ------------------
 7224|  18.9k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  |  859|  18.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 18.9k, False: 0]
  |  |  ------------------
  ------------------
 7225|       |            // clang-format off
 7226|  18.9k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 7227|       |            // clang-format on
 7228|  18.9k|        }
 7229|      0|        return;
 7230|  18.9k|    }
 7231|      0|    SCN_UNLIKELY_ATTR
 7232|      0|    handler.on_error("Invalid type specifier for string");
 7233|      0|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4202|  35.2M|    {
 4203|  35.2M|        assert(m_begin);
 4204|  35.2M|        return m_end == nullptr;
 4205|  35.2M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   148k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   148k|    else {
 3716|   148k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   148k|    }
 3718|   148k|}
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4219|   764k|    {
 4220|   764k|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 764k]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|   764k|        return parent()->get_segment_starting_at(position());
 4226|   764k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4213|  20.5M|    {
 4214|  20.5M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|  20.5M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.5M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|  20.5M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|  20.5M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4108|   764k|    {
 4109|   764k|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|   764k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 438k, False: 326k]
  |  |  ------------------
  ------------------
 4110|   764k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|   438k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|   438k|        }
 4113|   326k|        const auto start = pos - m_putback_buffer.size();
 4114|   326k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   326k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   326k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   326k|        return m_current_view.substr(start);
 4116|   326k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4197|   860k|    {
 4198|   860k|        return m_position;
 4199|   860k|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE13is_contiguousEv:
 4130|   488k|    {
 4131|   488k|        return m_is_contiguous;
 4132|   488k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4202|   501M|    {
 4203|   501M|        assert(m_begin);
 4204|   501M|        return m_end == nullptr;
 4205|   501M|    }
_ZN3scn2v36detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3710|   876k|{
 3711|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3712|       |                                          const CharT*, const CharT*>) {
 3713|       |        return {first, last};
 3714|       |    }
 3715|   876k|    else {
 3716|   876k|        return {first, static_cast<size_t>(std::distance(first, last))};
 3717|   876k|    }
 3718|   876k|}
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4219|  2.64M|    {
 4220|  2.64M|        if (!stores_parent()) {
  ------------------
  |  Branch (4220:13): [True: 0, False: 2.64M]
  ------------------
 4221|      0|            return make_string_view_from_pointers(
 4222|      0|                static_cast<const CharT*>(m_begin) + position(),
 4223|      0|                static_cast<const CharT*>(m_end));
 4224|      0|        }
 4225|  2.64M|        return parent()->get_segment_starting_at(position());
 4226|  2.64M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4213|   291M|    {
 4214|   291M|        SCN_EXPECT(stores_parent());
  ------------------
  |  |  924|   291M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   291M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4215|   291M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4216|   291M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4108|  2.64M|    {
 4109|  2.64M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  2.64M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.75M, False: 896k]
  |  |  ------------------
  ------------------
 4110|  2.64M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4111|  1.75M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4112|  1.75M|        }
 4113|   896k|        const auto start = pos - m_putback_buffer.size();
 4114|   896k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  |  924|   896k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   896k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4115|   896k|        return m_current_view.substr(start);
 4116|   896k|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4197|  3.17M|    {
 4198|  3.17M|        return m_position;
 4199|  3.17M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE13is_contiguousEv:
 4130|  2.69M|    {
 4131|  2.69M|        return m_is_contiguous;
 4132|  2.69M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3179|   693k|    {
 3180|   693k|        return static_cast<D&>(*this);
 3181|   693k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3220|   693k|    {
 3221|   693k|        return detail::to_address(ranges::begin(derived()));
 3222|   693k|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3179|  1.76M|    {
 3180|  1.76M|        return static_cast<D&>(*this);
 3181|  1.76M|    }
_ZN3scn2v36ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3220|  1.76M|    {
 3221|  1.76M|        return detail::to_address(ranges::begin(derived()));
 3222|  1.76M|    }
_ZNK3scn2v318basic_scan_contextIcE5rangeEv:
 8179|  66.8k|    {
 8180|  66.8k|        return ranges::subrange{begin(), end()};
 8181|  66.8k|    }
_ZNK3scn2v318basic_scan_contextIcE5beginEv:
 8163|   198k|    {
 8164|   198k|        return m_current;
 8165|   198k|    }
_ZNK3scn2v318basic_scan_contextIcE3endEv:
 8171|  66.8k|    {
 8172|  66.8k|        return ranges::default_sentinel;
 8173|  66.8k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  2.38M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.38M|    static_cast<    \
  |  |  929|  2.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  2.38M|    static_cast<    \
  |  |  929|  2.38M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  2.38M|    {
 3312|  2.38M|    }
_ZN3scn2v36detail10locale_refC2Ev:
 8001|  3.09M|    constexpr locale_ref() = default;
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   153k|    {
 1837|   153k|        return detail::transform_error_impl(std::move(*this),
 1838|   153k|                                            std::forward<F>(f));
 1839|   153k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   153k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   153k|    else {
 1333|   153k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   153k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   153k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 151k, False: 2.45k]
  |  |  ------------------
  ------------------
 1335|   153k|                   ? result(*std::forward<Exp>(exp))
 1336|   153k|                   : result(unexpect,
 1337|  2.45k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.45k|                                           std::forward<Exp>(exp).error()));
 1339|   153k|    }
 1340|   153k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   307k|    {
  485|   307k|        return m_has_value;
  486|   307k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   151k|    {
 1663|   151k|        return std::move(value());
 1664|   151k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   151k|    {
 1627|   151k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   151k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   151k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   151k|        return this->get_value();
 1629|   151k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   151k|    {
  451|   151k|        return m_value;
  452|   151k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|   361k|        : base(std::in_place, std::forward<U>(val)),
 1428|   361k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   361k|    {
 1430|   361k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   361k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   361k|    {
  437|   361k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   379k|    {
 1177|   379k|    }
_ZN3scn2v36detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1210|  15.0k|{
 1211|  15.0k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1212|  15.0k|}
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.45k|    {
 1614|  2.45k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.45k|        return std::move(this->get_unexpected().error());
 1616|  2.45k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.45k|    {
  468|  2.45k|        return m_unexpected;
  469|  2.45k|    }
_ZNR3scn2v310unexpectedINS0_4impl9eof_errorEE5errorEv:
  360|  30.0k|    {
  361|  30.0k|        return m_unexpected;
  362|  30.0k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.45k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.45k|    {
 1486|  2.45k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  17.1k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  17.1k|          m_has_value(false)
  446|  17.1k|    {
  447|  17.1k|    }
_ZNK3scn2v318basic_scan_contextIwE5rangeEv:
 8179|   361k|    {
 8180|   361k|        return ranges::subrange{begin(), end()};
 8181|   361k|    }
_ZNK3scn2v318basic_scan_contextIwE5beginEv:
 8163|  1.08M|    {
 8164|  1.08M|        return m_current;
 8165|  1.08M|    }
_ZNK3scn2v318basic_scan_contextIwE3endEv:
 8171|   361k|    {
 8172|   361k|        return ranges::default_sentinel;
 8173|   361k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3310|  31.8M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  31.8M|    static_cast<    \
  |  |  929|  31.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|  31.8M|    static_cast<    \
  |  |  929|  31.8M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|  31.8M|    {
 3312|  31.8M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1836|   883k|    {
 1837|   883k|        return detail::transform_error_impl(std::move(*this),
 1838|   883k|                                            std::forward<F>(f));
 1839|   883k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1322|   883k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   883k|    else {
 1333|   883k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   883k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   883k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 880k, False: 2.93k]
  |  |  ------------------
  ------------------
 1335|   883k|                   ? result(*std::forward<Exp>(exp))
 1336|   883k|                   : result(unexpect,
 1337|  2.93k|                            trivial_invoke(std::forward<F>(f),
 1338|  2.93k|                                           std::forward<Exp>(exp).error()));
 1339|   883k|    }
 1340|   883k|}
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  1.76M|    {
  485|  1.76M|        return m_has_value;
  486|  1.76M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1662|   880k|    {
 1663|   880k|        return std::move(value());
 1664|   880k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1626|   880k|    {
 1627|   880k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   880k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   880k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   880k|        return this->get_value();
 1629|   880k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   880k|    {
  451|   880k|        return m_value;
  452|   880k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1427|  2.10M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.10M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.10M|    {
 1430|  2.10M|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|  2.10M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.10M|    {
  437|  2.10M|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  2.13M|    {
 1177|  2.13M|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1613|  2.93k|    {
 1614|  2.93k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.93k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.93k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  2.93k|        return std::move(this->get_unexpected().error());
 1616|  2.93k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  2.93k|    {
  468|  2.93k|        return m_unexpected;
  469|  2.93k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1483|  2.93k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  2.93k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  2.93k|    {
 1486|  2.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  33.2k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.2k|          m_has_value(false)
  446|  33.2k|    {
  447|  33.2k|    }
_ZN3scn2v310unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  345|  51.1k|        : m_unexpected(std::forward<Err>(e))
  346|  51.1k|    {
  347|  51.1k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  51.1k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  51.1k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  30.0k|        : base(unexpect, std::move(e.error())),
 1474|  30.0k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.0k|    {
 1476|  30.0k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  33.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  33.7k|          m_has_value(false)
  446|  33.7k|    {
  447|  33.7k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   581k|    {
 1177|   581k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|   545k|        : base(std::in_place, std::forward<U>(val)),
 1428|   545k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   545k|    {
 1430|   545k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   545k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   545k|    {
  437|   545k|    }
_ZNK3scn2v38expectedIPKcNS0_10scan_errorEEcvbEv:
 1597|   581k|    {
 1598|   581k|        return has_value();
 1599|   581k|    }
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  484|  1.16M|    {
  485|  1.16M|        return m_has_value;
  486|  1.16M|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5errorEv:
 1603|  33.7k|    {
 1604|  33.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  33.7k|        return this->get_unexpected().error();
 1606|  33.7k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  33.7k|    {
  468|  33.7k|        return m_unexpected;
  469|  33.7k|    }
_ZNO3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|   454k|    {
 1663|   454k|        return std::move(value());
 1664|   454k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|   547k|    {
 1627|   547k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   547k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   547k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   547k|        return this->get_value();
 1629|   547k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  450|   547k|    {
  451|   547k|        return m_value;
  452|   547k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1473|  60.7k|        : base(unexpect, std::move(e.error())),
 1474|  60.7k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  60.7k|    {
 1476|  60.7k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  444|  66.5k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  66.5k|          m_has_value(false)
  446|  66.5k|    {
  447|  66.5k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  4.27M|    {
 1177|  4.27M|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1427|  4.20M|        : base(std::in_place, std::forward<U>(val)),
 1428|  4.20M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  4.20M|    {
 1430|  4.20M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  4.20M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  4.20M|    {
  437|  4.20M|    }
_ZNK3scn2v38expectedIPKwNS0_10scan_errorEEcvbEv:
 1597|  4.27M|    {
 1598|  4.27M|        return has_value();
 1599|  4.27M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  484|  8.54M|    {
  485|  8.54M|        return m_has_value;
  486|  8.54M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5errorEv:
 1603|  66.5k|    {
 1604|  66.5k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  66.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  66.5k|        return this->get_unexpected().error();
 1606|  66.5k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  66.5k|    {
  468|  66.5k|        return m_unexpected;
  469|  66.5k|    }
_ZNO3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1662|  3.50M|    {
 1663|  3.50M|        return std::move(value());
 1664|  3.50M|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1626|  4.20M|    {
 1627|  4.20M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  4.20M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.20M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  4.20M|        return this->get_value();
 1629|  4.20M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  450|  4.20M|    {
  451|  4.20M|        return m_value;
  452|  4.20M|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|   233k|    {
 1837|   233k|        return detail::transform_error_impl(std::move(*this),
 1838|   233k|                                            std::forward<F>(f));
 1839|   233k|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|   233k|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|   233k|    else {
 1333|   233k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|   233k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|   233k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 229k, False: 3.78k]
  |  |  ------------------
  ------------------
 1335|   233k|                   ? result(*std::forward<Exp>(exp))
 1336|   233k|                   : result(unexpect,
 1337|  3.78k|                            trivial_invoke(std::forward<F>(f),
 1338|  3.78k|                                           std::forward<Exp>(exp).error()));
 1339|   233k|    }
 1340|   233k|}
_ZNK3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|   467k|    {
  485|   467k|        return m_has_value;
  486|   467k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|   229k|    {
 1663|   229k|        return std::move(value());
 1664|   229k|    }
_ZNR3scn2v38expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|   229k|    {
 1627|   229k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   229k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   229k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   229k|        return this->get_value();
 1629|   229k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|   229k|    {
  451|   229k|        return m_value;
  452|   229k|    }
_ZNO3scn2v38expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1613|  3.78k|    {
 1614|  3.78k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  3.78k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.78k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  3.78k|        return std::move(this->get_unexpected().error());
 1616|  3.78k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  3.78k|    {
  468|  3.78k|        return m_unexpected;
  469|  3.78k|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  3.78k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  3.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  3.78k|    {
 1486|  3.78k|    }
_ZN3scn2v310scan_errorC2Ev:
 3558|  7.07M|    constexpr scan_error() noexcept = default;
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  14.6k|        : base(unexpect, std::move(e.error())),
 1474|  14.6k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  14.6k|    {
 1476|  14.6k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  1.85M|    {
 4289|  1.85M|        return x.is_at_end();
 4290|  1.85M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4332|  3.80M|    {
 4333|  3.80M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 3.80M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  3.80M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 3.80M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  3.80M|        return !read_at_position();
 4340|  3.80M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4312|  10.4M|    {
 4313|  10.4M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  10.4M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  10.4M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|  10.4M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 10.4M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|  10.4M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|  10.4M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.47M, False: 1.95M]
  |  |  ------------------
  ------------------
 4320|  8.47M|            return true;
 4321|  8.47M|        }
 4322|       |
 4323|  3.90M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 1.95M, False: 1.94M]
  ------------------
 4324|  1.95M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 19.3k, False: 1.94M]
  ------------------
 4325|  19.3k|                return false;
 4326|  19.3k|            }
 4327|  1.95M|        }
 4328|  1.94M|        return true;
 4329|  1.95M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE15chars_availableEv:
 4088|  14.3M|    {
 4089|  14.3M|        return m_putback_buffer.size() + m_current_view.size();
 4090|  14.3M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4247|  3.48M|    {
 4248|  3.48M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  3.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  3.48M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 3.48M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  3.48M|        auto res = read_at_position();
 4257|  3.48M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  3.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  3.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  3.48M|        return parent()->get_character_at(m_position);
 4259|  3.48M|    }
_ZNK3scn2v36detail17basic_scan_bufferIcE16get_character_atEl:
 4119|  3.48M|    {
 4120|  3.48M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  3.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.89M, False: 1.59M]
  |  |  ------------------
  ------------------
 4121|  3.48M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  1.89M|            return m_putback_buffer[pos];
 4123|  1.89M|        }
 4124|  1.59M|        const auto start = pos - m_putback_buffer.size();
 4125|  1.59M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  1.59M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.59M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  1.59M|        return m_current_view[start];
 4127|  1.59M|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   151k|        : base(std::in_place, std::forward<U>(val)),
 1428|   151k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   151k|    {
 1430|   151k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   151k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   151k|    {
  437|   151k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   153k|    {
 1177|   153k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  2.45k|        : base(unexpect, std::move(e.error())),
 1474|  2.45k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.45k|    {
 1476|  2.45k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  2.45k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.45k|          m_has_value(false)
  446|  2.45k|    {
  447|  2.45k|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  354|  15.0k|        : m_unexpected(std::forward<Args>(args)...)
  355|  15.0k|    {
  356|  15.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  357|  15.0k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4282|  1.33M|    {
 4283|  1.33M|        return !(lhs == rhs);
 4284|  1.33M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4277|  1.33M|    {
 4278|  1.33M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 1.33M, False: 0]
  |  Branch (4278:46): [True: 218k, False: 1.12M]
  ------------------
 4279|  1.33M|    }
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4233|  3.14M|    {
 4234|  3.14M|        ++m_position;
 4235|  3.14M|        (void)read_at_position();
 4236|  3.14M|        return *this;
 4237|  3.14M|    }
_ZN3scn2v310unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  345|  15.0k|        : m_unexpected(std::forward<Err>(e))
  346|  15.0k|    {
  347|  15.0k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  |  909|  15.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  348|  15.0k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.06k|        : base(unexpect, std::move(e.error())),
 1474|  1.06k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.06k|    {
 1476|  1.06k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.06k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.06k|          m_has_value(false)
  446|  1.06k|    {
  447|  1.06k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   124k|    {
 1177|   124k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   123k|        : base(std::in_place, std::forward<U>(val)),
 1428|   123k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   123k|    {
 1430|   123k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   123k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   123k|    {
  437|   123k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   124k|    {
 1598|   124k|        return has_value();
 1599|   124k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|   249k|    {
  485|   249k|        return m_has_value;
  486|   249k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.06k|    {
 1604|  1.06k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.06k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.06k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.06k|        return this->get_unexpected().error();
 1606|  1.06k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.06k|    {
  468|  1.06k|        return m_unexpected;
  469|  1.06k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   123k|    {
 1663|   123k|        return std::move(value());
 1664|   123k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   123k|    {
 1627|   123k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   123k|        return this->get_value();
 1629|   123k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   123k|    {
  451|   123k|        return m_value;
  452|   123k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  5.81M|    {
 3330|  5.81M|        return m_sentinel;
 3331|  5.81M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3325|   159k|    {
 3326|   159k|        return m_iterator;
 3327|   159k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3329|   159k|    {
 3330|   159k|        return m_sentinel;
 3331|   159k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|   379k|    {
 1598|   379k|        return has_value();
 1599|   379k|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|   758k|    {
  485|   758k|        return m_has_value;
  486|   758k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  17.1k|    {
 1604|  17.1k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  17.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  17.1k|        return this->get_unexpected().error();
 1606|  17.1k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  17.1k|    {
  468|  17.1k|        return m_unexpected;
  469|  17.1k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   300k|    {
 1663|   300k|        return std::move(value());
 1664|   300k|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   361k|    {
 1627|   361k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   361k|        return this->get_value();
 1629|   361k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|   361k|    {
  451|   361k|        return m_value;
  452|   361k|    }
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   152k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   152k|    static_cast<    \
  |  |  929|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   152k|    {
 3312|   152k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  1.94M|    {
 4300|  1.94M|        return !x.is_at_end();
 4301|  1.94M|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  3.78k|        : base(unexpect, std::move(e.error())),
 1474|  3.78k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  3.78k|    {
 1476|  3.78k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  3.78k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  3.78k|          m_has_value(false)
  446|  3.78k|    {
  447|  3.78k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   233k|    {
 1177|   233k|    }
_ZN3scn2v38expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|   229k|        : base(std::in_place, std::forward<U>(val)),
 1428|   229k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   229k|    {
 1430|   229k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|   229k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   229k|    {
  437|   229k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  1.51k|        : base(unexpect, std::move(e.error())),
 1474|  1.51k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.51k|    {
 1476|  1.51k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  1.51k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.51k|          m_has_value(false)
  446|  1.51k|    {
  447|  1.51k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   189k|    {
 1177|   189k|    }
_ZN3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|   187k|        : base(std::in_place, std::forward<U>(val)),
 1428|   187k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   187k|    {
 1430|   187k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|   187k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   187k|    {
  437|   187k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1597|   189k|    {
 1598|   189k|        return has_value();
 1599|   189k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  484|   378k|    {
  485|   378k|        return m_has_value;
  486|   378k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1603|  1.51k|    {
 1604|  1.51k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.51k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.51k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.51k|        return this->get_unexpected().error();
 1606|  1.51k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.51k|    {
  468|  1.51k|        return m_unexpected;
  469|  1.51k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|   187k|    {
 1663|   187k|        return std::move(value());
 1664|   187k|    }
_ZNR3scn2v38expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|   187k|    {
 1627|   187k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   187k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   187k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   187k|        return this->get_value();
 1629|   187k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  450|   187k|    {
  451|   187k|        return m_value;
  452|   187k|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|   693k|    {
 2855|   693k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|   693k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|   693k|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|   693k|    {
 2836|   693k|        return t.data();
 2837|   693k|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1473|   122k|        : base(unexpect, std::move(e.error())),
 1474|   122k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|   122k|    {
 1476|   122k|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  444|   122k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|   122k|          m_has_value(false)
  446|   122k|    {
  447|   122k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  3.11M|    {
 1177|  3.11M|    }
_ZN3scn2v38expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1427|  2.99M|        : base(std::in_place, std::forward<U>(val)),
 1428|  2.99M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  2.99M|    {
 1430|  2.99M|    }
_ZN3scn2v36detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  435|  2.99M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  2.99M|    {
  437|  2.99M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|  61.3k|    {
 1653|  61.3k|        return value();
 1654|  61.3k|    }
_ZNR3scn2v38expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|  92.7k|    {
 1653|  92.7k|        return value();
 1654|  92.7k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|    860|        : base(std::in_place, std::forward<U>(val)),
 1428|    860|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    860|    {
 1430|    860|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|    860|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    860|    {
  437|    860|    }
_ZN3scn2v38expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|  1.72k|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.72k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.72k|    {
 1430|  1.72k|    }
_ZN3scn2v36detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.72k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.72k|    {
  437|  1.72k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  30.3k|        : base(unexpect, std::move(e.error())),
 1474|  30.3k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  30.3k|    {
 1476|  30.3k|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4288|  29.0M|    {
 4289|  29.0M|        return x.is_at_end();
 4290|  29.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4332|  57.0M|    {
 4333|  57.0M|        if (m_end) {
  ------------------
  |  Branch (4333:13): [True: 0, False: 57.0M]
  ------------------
 4334|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4335|      0|        }
 4336|  57.0M|        if (!m_begin) {
  ------------------
  |  Branch (4336:13): [True: 0, False: 57.0M]
  ------------------
 4337|      0|            return true;
 4338|      0|        }
 4339|  57.0M|        return !read_at_position();
 4340|  57.0M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4312|   150M|    {
 4313|   150M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|   150M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   150M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4314|       |
 4315|   150M|        if (!stores_parent()) {
  ------------------
  |  Branch (4315:13): [True: 0, False: 150M]
  ------------------
 4316|      0|            return true;
 4317|      0|        }
 4318|       |
 4319|   150M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  |  858|   150M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 123M, False: 27.6M]
  |  |  ------------------
  ------------------
 4320|   123M|            return true;
 4321|   123M|        }
 4322|       |
 4323|  55.2M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4323:16): [True: 27.6M, False: 27.6M]
  ------------------
 4324|  27.6M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4324:17): [True: 25.7k, False: 27.6M]
  ------------------
 4325|  25.7k|                return false;
 4326|  25.7k|            }
 4327|  27.6M|        }
 4328|  27.6M|        return true;
 4329|  27.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE15chars_availableEv:
 4088|   206M|    {
 4089|   206M|        return m_putback_buffer.size() + m_current_view.size();
 4090|   206M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4247|  55.6M|    {
 4248|  55.6M|        SCN_EXPECT(m_begin);
  ------------------
  |  |  924|  55.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4249|       |
 4250|  55.6M|        if (!stores_parent()) {
  ------------------
  |  Branch (4250:13): [True: 0, False: 55.6M]
  ------------------
 4251|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4252|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4253|      0|            return *ptr;
 4254|      0|        }
 4255|       |
 4256|  55.6M|        auto res = read_at_position();
 4257|  55.6M|        SCN_EXPECT(res);
  ------------------
  |  |  924|  55.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4258|  55.6M|        return parent()->get_character_at(m_position);
 4259|  55.6M|    }
_ZNK3scn2v36detail17basic_scan_bufferIwE16get_character_atEl:
 4119|  55.6M|    {
 4120|  55.6M|        if (SCN_UNLIKELY(
  ------------------
  |  |  859|  55.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 28.8M, False: 26.7M]
  |  |  ------------------
  ------------------
 4121|  55.6M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4122|  28.8M|            return m_putback_buffer[pos];
 4123|  28.8M|        }
 4124|  26.7M|        const auto start = pos - m_putback_buffer.size();
 4125|  26.7M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  |  924|  26.7M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  26.7M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4126|  26.7M|        return m_current_view[start];
 4127|  26.7M|    }
_ZN3scn2v36detail39code_point_length_by_starting_code_unitIwEEmT_:
 3802|   155M|{
 3803|       |    if constexpr (sizeof(U) == 1) {
 3804|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 3805|       |    }
 3806|       |    else if constexpr (sizeof(U) == 2) {
 3807|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 3808|       |    }
 3809|   155M|    else {
 3810|       |        // utf-32
 3811|   155M|        static_assert(sizeof(U) == 4);
 3812|   155M|        SCN_UNUSED(ch);
  ------------------
  |  |  909|   155M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3813|   155M|        return 1;
 3814|   155M|    }
 3815|   155M|}
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1427|   880k|        : base(std::in_place, std::forward<U>(val)),
 1428|   880k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   880k|    {
 1430|   880k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  435|   880k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   880k|    {
  437|   880k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   883k|    {
 1177|   883k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1473|  2.93k|        : base(unexpect, std::move(e.error())),
 1474|  2.93k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.93k|    {
 1476|  2.93k|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  444|  2.93k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.93k|          m_has_value(false)
  446|  2.93k|    {
  447|  2.93k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4282|  10.9M|    {
 4283|  10.9M|        return !(lhs == rhs);
 4284|  10.9M|    }
_ZN3scn2v36detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4277|  10.9M|    {
 4278|  10.9M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4278:16): [True: 10.9M, False: 0]
  |  Branch (4278:46): [True: 357k, False: 10.5M]
  ------------------
 4279|  10.9M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4233|  38.1M|    {
 4234|  38.1M|        ++m_position;
 4235|  38.1M|        (void)read_at_position();
 4236|  38.1M|        return *this;
 4237|  38.1M|    }
_ZN3scn2v36detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4008|   155M|{
 4009|       |    if constexpr (sizeof(CharT) == 1) {
 4010|       |        return decode_utf8_code_point_exhaustive(input);
 4011|       |    }
 4012|       |    else if constexpr (sizeof(CharT) == 2) {
 4013|       |        return decode_utf16_code_point_exhaustive(input);
 4014|       |    }
 4015|   155M|    else {
 4016|   155M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  |  924|   155M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   155M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4017|   155M|        auto cp = static_cast<char32_t>(input.front());
 4018|   155M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|   155M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.04M, False: 154M]
  |  |  ------------------
  ------------------
 4019|  1.04M|            return invalid_code_point;
 4020|  1.04M|        }
 4021|   154M|        return cp;
 4022|   155M|    }
 4023|   155M|}
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1473|  1.17k|        : base(unexpect, std::move(e.error())),
 1474|  1.17k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  1.17k|    {
 1476|  1.17k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  444|  1.17k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  1.17k|          m_has_value(false)
  446|  1.17k|    {
  447|  1.17k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|   705k|    {
 1177|   705k|    }
_ZN3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1427|   704k|        : base(std::in_place, std::forward<U>(val)),
 1428|   704k|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|   704k|    {
 1430|   704k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  435|   704k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|   704k|    {
  437|   704k|    }
_ZNK3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1597|   705k|    {
 1598|   705k|        return has_value();
 1599|   705k|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  484|  1.41M|    {
  485|  1.41M|        return m_has_value;
  486|  1.41M|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1603|  1.17k|    {
 1604|  1.17k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  1.17k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.17k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  1.17k|        return this->get_unexpected().error();
 1606|  1.17k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  1.17k|    {
  468|  1.17k|        return m_unexpected;
  469|  1.17k|    }
_ZNO3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1662|   704k|    {
 1663|   704k|        return std::move(value());
 1664|   704k|    }
_ZNR3scn2v38expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1626|   704k|    {
 1627|   704k|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|   704k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   704k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|   704k|        return this->get_value();
 1629|   704k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  450|   704k|    {
  451|   704k|        return m_value;
  452|   704k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3329|  87.6M|    {
 3330|  87.6M|        return m_sentinel;
 3331|  87.6M|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3325|   888k|    {
 3326|   888k|        return m_iterator;
 3327|   888k|    }
_ZNK3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3329|   888k|    {
 3330|   888k|        return m_sentinel;
 3331|   888k|    }
_ZNK3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1597|  2.13M|    {
 1598|  2.13M|        return has_value();
 1599|  2.13M|    }
_ZNK3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  484|  4.27M|    {
  485|  4.27M|        return m_has_value;
  486|  4.27M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1603|  33.2k|    {
 1604|  33.2k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  33.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  33.2k|        return this->get_unexpected().error();
 1606|  33.2k|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  33.2k|    {
  468|  33.2k|        return m_unexpected;
  469|  33.2k|    }
_ZNO3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.75M|    {
 1663|  1.75M|        return std::move(value());
 1664|  1.75M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  2.10M|    {
 1627|  2.10M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  2.10M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.10M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  2.10M|        return this->get_value();
 1629|  2.10M|    }
_ZNR3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  450|  2.10M|    {
  451|  2.10M|        return m_value;
  452|  2.10M|    }
_ZN3scn2v36detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3694|  72.8M|{
 3695|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3696|       |                                          decltype(first), decltype(last)> &&
 3697|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3698|       |        return {first, last};
 3699|       |    }
 3700|  72.8M|    else {
 3701|  72.8M|        return {to_address(first), static_cast<size_t>(std::distance(
 3702|  72.8M|                                       to_address(first), to_address(last)))};
 3703|  72.8M|    }
 3704|  72.8M|}
_ZN3scn2v36detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  325|   218M|{
  326|   218M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  |  930|   218M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  327|   218M|}
_ZN3scn2v36ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3310|   880k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   880k|    static_cast<    \
  |  |  929|   880k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  |  928|   880k|    static_cast<    \
  |  |  929|   880k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3311|   880k|    {
 3312|   880k|    }
_ZN3scn2v36detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4299|  27.9M|    {
 4300|  27.9M|        return !x.is_at_end();
 4301|  27.9M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1473|  5.87k|        : base(unexpect, std::move(e.error())),
 1474|  5.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  5.87k|    {
 1476|  5.87k|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  444|  5.87k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  5.87k|          m_has_value(false)
  446|  5.87k|    {
  447|  5.87k|    }
_ZN3scn2v36detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.76M|    {
 1177|  1.76M|    }
_ZN3scn2v38expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1427|  1.76M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.76M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.76M|    {
 1430|  1.76M|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  435|  1.76M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.76M|    {
  437|  1.76M|    }
_ZNK3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  484|  3.53M|    {
  485|  3.53M|        return m_has_value;
  486|  3.53M|    }
_ZNR3scn2v38expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1626|  1.76M|    {
 1627|  1.76M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.76M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.76M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.76M|        return this->get_value();
 1629|  1.76M|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  450|  1.76M|    {
  451|  1.76M|        return m_value;
  452|  1.76M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1473|  2.34k|        : base(unexpect, std::move(e.error())),
 1474|  2.34k|          ctor_base(detail::non_default_ctor_tag_t{})
 1475|  2.34k|    {
 1476|  2.34k|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  444|  2.34k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  445|  2.34k|          m_has_value(false)
  446|  2.34k|    {
  447|  2.34k|    }
_ZN3scn2v36detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1176|  1.41M|    {
 1177|  1.41M|    }
_ZN3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1427|  1.40M|        : base(std::in_place, std::forward<U>(val)),
 1428|  1.40M|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|  1.40M|    {
 1430|  1.40M|    }
_ZN3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  435|  1.40M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|  1.40M|    {
  437|  1.40M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1836|  1.76M|    {
 1837|  1.76M|        return detail::transform_error_impl(std::move(*this),
 1838|  1.76M|                                            std::forward<F>(f));
 1839|  1.76M|    }
_ZN3scn2v36detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1322|  1.76M|{
 1323|       |    if constexpr (std::is_void_v<Ret>) {
 1324|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1325|       |        if (SCN_LIKELY(exp.has_value())) {
 1326|       |            return result(*std::forward<Exp>(exp));
 1327|       |        }
 1328|       |
 1329|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1330|       |        return result(unexpect, monostate{});
 1331|       |    }
 1332|  1.76M|    else {
 1333|  1.76M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1334|  1.76M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  |  858|  1.76M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.76M, False: 5.87k]
  |  |  ------------------
  ------------------
 1335|  1.76M|                   ? result(*std::forward<Exp>(exp))
 1336|  1.76M|                   : result(unexpect,
 1337|  5.87k|                            trivial_invoke(std::forward<F>(f),
 1338|  5.87k|                                           std::forward<Exp>(exp).error()));
 1339|  1.76M|    }
 1340|  1.76M|}
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1662|  1.76M|    {
 1663|  1.76M|        return std::move(value());
 1664|  1.76M|    }
_ZNO3scn2v38expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1613|  5.87k|    {
 1614|  5.87k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  5.87k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.87k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1615|  5.87k|        return std::move(this->get_unexpected().error());
 1616|  5.87k|    }
_ZNR3scn2v36detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  467|  5.87k|    {
  468|  5.87k|        return m_unexpected;
  469|  5.87k|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1483|  5.87k|        : base(unexpect, std::forward<Args>(args)...),
 1484|  5.87k|          ctor_base(detail::non_default_ctor_tag_t{})
 1485|  5.87k|    {
 1486|  5.87k|    }
_ZNK3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1597|  1.41M|    {
 1598|  1.41M|        return has_value();
 1599|  1.41M|    }
_ZNK3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  484|  2.82M|    {
  485|  2.82M|        return m_has_value;
  486|  2.82M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1603|  2.34k|    {
 1604|  2.34k|        SCN_EXPECT(!has_value());
  ------------------
  |  |  924|  2.34k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.34k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1605|  2.34k|        return this->get_unexpected().error();
 1606|  2.34k|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  467|  2.34k|    {
  468|  2.34k|        return m_unexpected;
  469|  2.34k|    }
_ZNO3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1662|  1.40M|    {
 1663|  1.40M|        return std::move(value());
 1664|  1.40M|    }
_ZNR3scn2v38expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1626|  1.40M|    {
 1627|  1.40M|        SCN_EXPECT(has_value());
  ------------------
  |  |  924|  1.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1628|  1.40M|        return this->get_value();
 1629|  1.40M|    }
_ZNR3scn2v36detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  450|  1.40M|    {
  451|  1.40M|        return m_value;
  452|  1.40M|    }
_ZNK3scn2v36ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 2854|  1.76M|    {
 2855|  1.76M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  |  930|  1.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2856|  1.76M|    }
_ZN3scn2v36ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2835|  1.76M|    {
 2836|  1.76M|        return t.data();
 2837|  1.76M|    }
_ZNR3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1652|   349k|    {
 1653|   349k|        return value();
 1654|   349k|    }
_ZNR3scn2v38expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1652|   698k|    {
 1653|   698k|        return value();
 1654|   698k|    }
_ZN3scn2v38expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1427|     98|        : base(std::in_place, std::forward<U>(val)),
 1428|     98|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|     98|    {
 1430|     98|    }
_ZN3scn2v36detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  435|     98|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|     98|    {
  437|     98|    }
_ZN3scn2v38expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1427|    196|        : base(std::in_place, std::forward<U>(val)),
 1428|    196|          ctor_base(detail::non_default_ctor_tag_t{})
 1429|    196|    {
 1430|    196|    }
_ZN3scn2v36detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  435|    196|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  436|    196|    {
  437|    196|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4sizeEv:
 5475|   337k|    {
 5476|   337k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 337k]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|   337k|        return static_cast<std::size_t>(m_desc &
 5481|   337k|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|   337k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE9is_packedEv:
 5500|   675k|    {
 5501|   675k|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|   675k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE3getEm:
 5443|   337k|    {
 5444|   337k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 337k]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|   337k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 337k]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|   337k|        const auto t = type(id);
 5456|   337k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|   337k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 337k]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|   337k|        basic_scan_arg<Context> arg;
 5461|   337k|        arg.m_type = t;
 5462|   337k|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 337k, False: 0]
  ------------------
 5463|   337k|            arg.m_value.ref_value = m_builtin_values[id];
 5464|   337k|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|   337k|        return arg;
 5469|   337k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE4typeEm:
 5509|   337k|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|   337k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|   337k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|   337k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|   337k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEE15is_only_builtinEv:
 5504|   337k|    {
 5505|   337k|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|   337k|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEEcvbEv:
 5256|   585k|    {
 5257|   585k|        return m_type != detail::arg_type::none_type;
 5258|   585k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   140k|{
 8428|   140k|#define SCN_VISIT(Type)                                         \
 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   140k|    }                                                           \
 8432|   140k|    else {                                                      \
 8433|   140k|        return vis(monostate_val);                              \
 8434|   140k|    }
 8435|       |
 8436|   140k|    monostate monostate_val{};
 8437|       |
 8438|   140k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 140k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 140k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 140k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 140k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 140k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 140k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 140k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 140k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 140k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 140k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 140k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 140k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 140k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 140k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 140k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 140k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 140k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 140k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|  70.1k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 70.1k, False: 70.1k]
  ------------------
 8476|  70.1k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  70.1k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  70.1k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  70.1k|    }                                                           \
  |  | 8432|  70.1k|    else {                                                      \
  |  | 8433|  70.1k|        return vis(monostate_val);                              \
  |  | 8434|  70.1k|    }
  ------------------
 8477|   140k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 70.1k, False: 70.1k]
  ------------------
 8478|   140k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8479|   140k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 140k]
  ------------------
 8480|   140k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8481|   140k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 140k]
  ------------------
 8482|   140k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8483|   140k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 140k]
  ------------------
 8484|   140k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8485|   140k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 140k]
  ------------------
 8486|   140k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   140k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   140k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   140k|    }                                                           \
  |  | 8432|   140k|    else {                                                      \
  |  | 8433|   140k|        return vis(monostate_val);                              \
  |  | 8434|   140k|    }
  ------------------
 8487|       |
 8488|   140k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 140k]
  ------------------
 8489|   140k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   140k|            return vis(
 8491|   140k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 140k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 140k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   140k|            SCN_CLANG_POP
 8506|   140k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIcEC2ENSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEi:
 5553|   183k|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|   183k|    {
 5555|   183k|    }
_ZN3scn2v318basic_scan_contextIcEC2ENS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|  71.0k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|  71.0k|    {
 8149|  71.0k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEEC2ES6_NS1_10locale_refE:
 8065|   183k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   183k|    static_cast<    \
  |  |  929|   183k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|   183k|    static_cast<    \
  |  |  929|   183k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|   183k|    {
 8067|   183k|    }
_ZN3scn2v36detail17basic_scan_bufferIcE3getEv:
 4352|   162k|{
 4353|   162k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 162k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   162k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   162k|                            ranges::default_sentinel};
 4359|   162k|}
_ZN3scn2v36detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4183|   162k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   162k|    {
 4185|   162k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   162k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   162k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   162k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   162k|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  91.9k|{
 8428|  91.9k|#define SCN_VISIT(Type)                                         \
 8429|  91.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  91.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  91.9k|    }                                                           \
 8432|  91.9k|    else {                                                      \
 8433|  91.9k|        return vis(monostate_val);                              \
 8434|  91.9k|    }
 8435|       |
 8436|  91.9k|    monostate monostate_val{};
 8437|       |
 8438|  91.9k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 91.9k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 91.9k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 91.9k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 91.9k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 91.9k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 91.9k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 91.9k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 91.9k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 91.9k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 91.9k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 91.9k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 91.9k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 91.9k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 91.9k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 91.9k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 91.9k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 91.9k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 91.9k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 91.9k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|  91.9k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 91.9k, False: 0]
  ------------------
 8478|  91.9k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  91.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  91.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  91.9k|    }                                                           \
  |  | 8432|  91.9k|    else {                                                      \
  |  | 8433|  91.9k|        return vis(monostate_val);                              \
  |  | 8434|  91.9k|    }
  ------------------
 8479|  91.9k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 91.9k]
  ------------------
 8480|  91.9k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  91.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  91.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  91.9k|    }                                                           \
  |  | 8432|  91.9k|    else {                                                      \
  |  | 8433|  91.9k|        return vis(monostate_val);                              \
  |  | 8434|  91.9k|    }
  ------------------
 8481|  91.9k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 91.9k]
  ------------------
 8482|  91.9k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  91.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  91.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  91.9k|    }                                                           \
  |  | 8432|  91.9k|    else {                                                      \
  |  | 8433|  91.9k|        return vis(monostate_val);                              \
  |  | 8434|  91.9k|    }
  ------------------
 8483|  91.9k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 91.9k]
  ------------------
 8484|  91.9k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  91.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  91.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  91.9k|    }                                                           \
  |  | 8432|  91.9k|    else {                                                      \
  |  | 8433|  91.9k|        return vis(monostate_val);                              \
  |  | 8434|  91.9k|    }
  ------------------
 8485|  91.9k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 91.9k]
  ------------------
 8486|  91.9k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  91.9k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  91.9k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  91.9k|    }                                                           \
  |  | 8432|  91.9k|    else {                                                      \
  |  | 8433|  91.9k|        return vis(monostate_val);                              \
  |  | 8434|  91.9k|    }
  ------------------
 8487|       |
 8488|  91.9k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 91.9k]
  ------------------
 8489|  91.9k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  91.9k|            return vis(
 8491|  91.9k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 91.9k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 91.9k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  91.9k|            SCN_CLANG_POP
 8506|  91.9k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   112k|{
 7055|   112k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   112k|    handler.check_args_exhausted();
 7057|   112k|    return handler.get_error();
 7058|   112k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   112k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   112k|    auto begin = format.data();
 7024|   112k|    auto it = begin;
 7025|   112k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   203k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 112k, False: 91.0k]
  ------------------
 7028|   112k|        const auto ch = *it++;
 7029|   112k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 112k, False: 0]
  ------------------
 7030|   112k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   112k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   112k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 21.0k, False: 91.0k]
  ------------------
 7034|  21.0k|                return;
 7035|  21.0k|            }
 7036|   112k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   112k|    }
 7047|       |
 7048|  91.0k|    handler.on_literal_text(begin, end);
 7049|  91.0k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 6952|   112k|{
 6953|   112k|    struct id_adapter {
 6954|   112k|        constexpr void operator()()
 6955|   112k|        {
 6956|   112k|            arg_id = handler.on_arg_id();
 6957|   112k|        }
 6958|   112k|        constexpr void operator()(std::size_t id)
 6959|   112k|        {
 6960|   112k|            arg_id = handler.on_arg_id(id);
 6961|   112k|        }
 6962|       |
 6963|   112k|        constexpr void on_error(const char* msg)
 6964|   112k|        {
 6965|   112k|            SCN_UNLIKELY_ATTR
 6966|   112k|            handler.on_error(msg);
 6967|   112k|        }
 6968|       |
 6969|   112k|        Handler& handler;
 6970|   112k|        std::size_t arg_id;
 6971|   112k|    };
 6972|       |
 6973|   112k|    ++begin;
 6974|   112k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   112k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 112k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   112k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 112k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   112k|    else {
 6986|   112k|        auto adapter = id_adapter{handler, 0};
 6987|   112k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   112k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   112k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 112k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   112k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 112k, False: 0]
  ------------------
 6998|   112k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   112k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   112k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   224k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.40k, False: 103k]
  |  |  |  Branch (859:45): [True: 0, False: 112k]
  |  |  |  Branch (859:45): [True: 8.40k, False: 103k]
  |  |  ------------------
  ------------------
 7004|  8.40k|                handler.on_error("Unknown format specifier");
 7005|  8.40k|                return begin;
 7006|  8.40k|            }
 7007|   112k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   112k|    }
 7014|   103k|    return begin + 1;
 7015|   112k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE3argEm:
 8049|   183k|    {
 8050|   183k|        return m_args.get(id);
 8051|   183k|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEEE6localeEv:
 8059|   170k|    {
 8060|   170k|        return m_locale;
 8061|   170k|    }
_ZN3scn2v324basic_scan_parse_contextIcE11next_arg_idEv:
 5575|   183k|    {
 5576|   183k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|   183k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 183k]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|   183k|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|   183k|        do_check_arg_id(id);
 5584|   183k|        return id;
 5585|   183k|    }
_ZN3scn2v324basic_scan_parse_contextIcE15do_check_arg_idEm:
 6063|   183k|{
 6064|   183k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|   183k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|   183k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   112k|{
 6454|   112k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   112k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 112k, False: 0]
  |  Branch (6455:26): [True: 0, False: 112k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   112k|    handler();
 6460|   112k|    return begin;
 6461|   112k|}
_ZN3scn2v36detail16parse_simple_intIcEEiRPKT_S5_:
 6402|  12.6k|{
 6403|  12.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  12.6k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  12.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  12.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  12.6k|    unsigned long long value = 0;
 6407|  25.2k|    do {
 6408|  25.2k|        value *= 10;
 6409|  25.2k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  25.2k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 0, False: 25.2k]
  ------------------
 6411|  25.2k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|      0|            return -1;
 6413|      0|        }
 6414|  25.2k|        ++begin;
 6415|  25.2k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 25.2k, False: 0]
  |  Branch (6415:30): [True: 25.2k, False: 0]
  |  Branch (6415:47): [True: 12.6k, False: 12.6k]
  ------------------
 6416|  12.6k|    return static_cast<int>(value);
 6417|  12.6k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   112k|        {
 6956|   112k|            arg_id = handler.on_arg_id();
 6957|   112k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIcEEE4typeEv:
 5261|   366k|    {
 5262|   366k|        return m_type;
 5263|   366k|    }
_ZN3scn2v324basic_scan_parse_contextIcE10advance_toEPKc:
 5570|   170k|    {
 5571|   170k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|   170k|    }
_ZNK3scn2v324basic_scan_parse_contextIcE5beginEv:
 5559|   353k|    {
 5560|   353k|        return m_format.data();
 5561|   353k|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   112k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   112k|    {
 7133|   112k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   112k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   112k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   112k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6868|   112k|{
 6869|   112k|    auto do_presentation = [&]() -> const CharT* {
 6870|   112k|        if (*begin == CharT{'['}) {
 6871|   112k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   112k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   112k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   112k|                return begin;
 6877|   112k|            }
 6878|   112k|            handler.on_character_set_string(set);
 6879|   112k|            return begin;
 6880|   112k|        }
 6881|   112k|        if (*begin == CharT{'/'}) {
 6882|   112k|            return parse_presentation_regex(begin, end, handler);
 6883|   112k|        }
 6884|   112k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   112k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   112k|            handler.on_error("Invalid type specifier in format string");
 6887|   112k|            return begin;
 6888|   112k|        }
 6889|   112k|        handler.on_type(type);
 6890|   112k|        return begin;
 6891|   112k|    };
 6892|       |
 6893|   112k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 112k, False: 0]
  |  Branch (6893:28): [True: 97.6k, False: 14.3k]
  ------------------
 6894|   112k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 97.6k, False: 0]
  |  Branch (6894:36): [True: 93.4k, False: 4.20k]
  ------------------
 6895|  93.4k|        return do_presentation();
 6896|  93.4k|    }
 6897|       |
 6898|  18.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  18.5k|    begin = parse_align(begin, end, handler);
 6904|  18.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  18.5k|    begin = parse_width(begin, end, handler);
 6910|  18.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  18.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 18.5k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  18.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 4.20k, False: 14.3k]
  ------------------
 6929|  4.20k|        handler.on_localized();
 6930|  4.20k|        ++begin;
 6931|  4.20k|    }
 6932|  18.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  18.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 18.5k, False: 0]
  |  Branch (6937:25): [True: 14.3k, False: 4.20k]
  ------------------
 6938|  14.3k|        do_presentation();
 6939|  14.3k|    }
 6940|  18.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  18.5k|    return begin;
 6946|  18.5k|}
_ZN3scn2v36detail15is_ascii_letterIcEEbT_:
 6517|   161k|{
 6518|   161k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 155k, False: 6.30k]
  |  Branch (6518:33): [True: 155k, False: 0]
  ------------------
 6519|   161k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 6.30k, False: 0]
  |  Branch (6519:33): [True: 6.30k, False: 0]
  ------------------
 6520|   161k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   107k|    auto do_presentation = [&]() -> const CharT* {
 6870|   107k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 5.92k, False: 101k]
  ------------------
 6871|  5.92k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  5.92k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.92k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  5.92k|            handler.on_character_set_string(set);
 6879|  5.92k|            return begin;
 6880|  5.92k|        }
 6881|   101k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 101k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   101k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   101k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   101k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 97.6k]
  |  |  ------------------
  ------------------
 6886|  4.20k|            handler.on_error("Invalid type specifier in format string");
 6887|  4.20k|            return begin;
 6888|  4.20k|        }
 6889|  97.6k|        handler.on_type(type);
 6890|  97.6k|        return begin;
 6891|   101k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  5.92k|{
 6708|  5.92k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  5.92k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  5.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  5.92k|    auto start = begin;
 6712|  5.92k|    ++begin;
 6713|       |
 6714|  5.92k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.92k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  5.92k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 5.92k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  5.92k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 5.92k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  17.7k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 17.7k, False: 0]
  ------------------
 6739|  17.7k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  17.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.7k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  17.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 5.92k, False: 11.8k]
  ------------------
 6744|  5.92k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  5.92k|        }
 6746|       |
 6747|  11.8k|        parse_presentation_set_literal(begin, end, handler);
 6748|  11.8k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  5.92k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEvRPKT_SE_OT0_:
 6671|  11.8k|{
 6672|  11.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  11.8k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  11.8k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  11.8k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 11.8k, False: 0]
  |  Branch (6679:25): [True: 11.8k, False: 0]
  |  Branch (6679:49): [True: 11.8k, False: 0]
  ------------------
 6680|  11.8k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 11.8k, False: 0]
  ------------------
 6681|  11.8k|        ++begin;
 6682|       |
 6683|  11.8k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  11.8k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  11.8k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  11.8k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  11.8k|        return;
 6697|  11.8k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEDiRPKT_SE_OT0_:
 6647|  23.6k|{
 6648|  23.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  23.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  23.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  23.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  47.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.6k]
  |  |  |  Branch (859:45): [True: 0, False: 23.6k]
  |  |  |  Branch (859:45): [True: 0, False: 23.6k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  23.6k|    const auto cp =
 6657|  23.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  23.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 23.6k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  23.6k|    begin += len;
 6664|  23.6k|    return cp;
 6665|  23.6k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  8.88k|    {
 6357|  8.88k|        m_specs.charset_string_data = fmt.data();
 6358|  8.88k|        m_specs.charset_string_size = fmt.size();
 6359|  8.88k|        on_type(presentation_type::string_set);
 6360|  8.88k|    }
_ZN3scn2v36detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 6465|   167k|{
 6466|   167k|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 167k]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 167k]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 167k]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 167k]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 167k]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 167k]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 167k]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 167k]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 167k]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 167k]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 167k]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 167k]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 167k]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 167k]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 167k]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 167k]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 167k]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 167k]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|   155k|        case 's':
  ------------------
  |  Branch (6496:9): [True: 155k, False: 12.6k]
  ------------------
 6497|   155k|            return presentation_type::string;
 6498|  6.30k|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 6.30k, False: 161k]
  ------------------
 6499|  6.30k|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 167k]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 167k]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 167k]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 167k]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  6.30k|        default:
  ------------------
  |  Branch (6510:9): [True: 6.30k, False: 161k]
  ------------------
 6511|  6.30k|            return presentation_type::none;
 6512|   167k|    }
 6513|   167k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6542|  18.5k|{
 6543|  18.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  18.5k|    auto check_align = [](wchar_t ch) {
 6546|  18.5k|        switch (ch) {
 6547|  18.5k|            case L'<':
 6548|  18.5k|                return align_type::left;
 6549|  18.5k|            case L'>':
 6550|  18.5k|                return align_type::right;
 6551|  18.5k|            case L'^':
 6552|  18.5k|                return align_type::center;
 6553|  18.5k|            default:
 6554|  18.5k|                return align_type::none;
 6555|  18.5k|        }
 6556|  18.5k|    };
 6557|       |
 6558|  18.5k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  18.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  37.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.5k]
  |  |  |  Branch (859:45): [True: 0, False: 18.5k]
  |  |  |  Branch (859:45): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
 6560|  18.5k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  18.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  18.5k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  18.5k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  18.5k|    const auto begin_before_fill = begin;
 6570|  18.5k|    begin += potential_fill_len;
 6571|       |
 6572|  18.5k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 18.5k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  18.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  18.5k|    const auto begin_after_fill = begin;
 6578|  18.5k|    ++begin;
 6579|       |
 6580|  18.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 18.5k, False: 0]
  ------------------
 6581|  18.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 18.5k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  18.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 5.92k, False: 12.6k]
  ------------------
 6586|  5.92k|            return begin_before_fill;
 6587|  5.92k|        }
 6588|  18.5k|    }
 6589|       |
 6590|  12.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 12.6k, False: 0]
  ------------------
 6591|  12.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 12.6k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  12.6k|        return begin_before_fill;
 6596|  12.6k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  12.6k|}
_ZN3scn2v36detail17code_point_lengthIcEEiPKT_S5_:
 6524|  27.8k|{
 6525|  27.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  27.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|       |    if constexpr (sizeof(CharT) != 1) {
 6527|       |        return 1;
 6528|       |    }
 6529|  27.8k|    else {
 6530|  27.8k|        const auto lengths =
 6531|  27.8k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|  27.8k|            "\3\4";
 6533|  27.8k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|  27.8k|        return len;
 6535|  27.8k|    }
 6536|  27.8k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  37.0k|    auto check_align = [](wchar_t ch) {
 6546|  37.0k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 37.0k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 37.0k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 37.0k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  37.0k|            default:
  ------------------
  |  Branch (6553:13): [True: 37.0k, False: 0]
  ------------------
 6554|  37.0k|                return align_type::none;
 6555|  37.0k|        }
 6556|  37.0k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEEEEEPKT_SE_SE_OT0_:
 6607|  18.5k|{
 6608|  18.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  18.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  18.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  18.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 18.5k, False: 0]
  |  Branch (6610:33): [True: 8.40k, False: 10.1k]
  ------------------
 6611|  8.40k|        int width = parse_simple_int(begin, end);
 6612|  8.40k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.40k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.40k, False: 0]
  |  |  ------------------
  ------------------
 6613|  8.40k|            handler.on_width(width);
 6614|  8.40k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  8.40k|    }
 6620|  18.5k|    return begin;
 6621|  18.5k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEEE12on_localizedEv:
 7137|  4.20k|    {
 7138|  4.20k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  4.20k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 4.20k, False: 0]
  ------------------
 7140|  4.20k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 4.20k, False: 0]
  ------------------
 7141|  4.20k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 4.20k, False: 0]
  ------------------
 7142|  4.20k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 4.20k, False: 0]
  ------------------
 7143|  4.20k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  4.20k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  4.20k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIcEEEENS0_18basic_scan_contextIcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   103k|{
 8428|   103k|#define SCN_VISIT(Type)                                         \
 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   103k|    }                                                           \
 8432|   103k|    else {                                                      \
 8433|   103k|        return vis(monostate_val);                              \
 8434|   103k|    }
 8435|       |
 8436|   103k|    monostate monostate_val{};
 8437|       |
 8438|   103k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 103k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 103k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 103k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 103k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 103k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 103k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 103k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 103k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 103k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 103k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 103k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 103k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 103k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 103k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 103k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 103k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 103k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 103k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|  51.8k|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 51.8k, False: 51.8k]
  ------------------
 8476|  51.8k|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|  51.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  51.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  51.8k|    }                                                           \
  |  | 8432|  51.8k|    else {                                                      \
  |  | 8433|  51.8k|        return vis(monostate_val);                              \
  |  | 8434|  51.8k|    }
  ------------------
 8477|   103k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 51.8k, False: 51.8k]
  ------------------
 8478|   103k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8479|   103k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 103k]
  ------------------
 8480|   103k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8481|   103k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 103k]
  ------------------
 8482|   103k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8483|   103k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 103k]
  ------------------
 8484|   103k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8485|   103k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 103k]
  ------------------
 8486|   103k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   103k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   103k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   103k|    }                                                           \
  |  | 8432|   103k|    else {                                                      \
  |  | 8433|   103k|        return vis(monostate_val);                              \
  |  | 8434|   103k|    }
  ------------------
 8487|       |
 8488|   103k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 103k]
  ------------------
 8489|   103k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   103k|            return vis(
 8491|   103k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 103k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 103k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   103k|            SCN_CLANG_POP
 8506|   103k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|  71.0k|{
 7055|  71.0k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|  71.0k|    handler.check_args_exhausted();
 7057|  71.0k|    return handler.get_error();
 7058|  71.0k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|  71.0k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|  71.0k|    auto begin = format.data();
 7024|  71.0k|    auto it = begin;
 7025|  71.0k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   131k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 71.0k, False: 60.5k]
  ------------------
 7028|  71.0k|        const auto ch = *it++;
 7029|  71.0k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 71.0k, False: 0]
  ------------------
 7030|  71.0k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|  71.0k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|  71.0k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 10.5k, False: 60.5k]
  ------------------
 7034|  10.5k|                return;
 7035|  10.5k|            }
 7036|  71.0k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|  71.0k|    }
 7047|       |
 7048|  60.5k|    handler.on_literal_text(begin, end);
 7049|  60.5k|}
_ZN3scn2v318basic_scan_contextIcE10advance_toENS0_6detail17basic_scan_bufferIcE16forward_iteratorE:
 8185|  60.5k|    {
 8186|  60.5k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  60.5k|    static_cast<    \
  |  |  929|  60.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|  60.5k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 6952|  71.0k|{
 6953|  71.0k|    struct id_adapter {
 6954|  71.0k|        constexpr void operator()()
 6955|  71.0k|        {
 6956|  71.0k|            arg_id = handler.on_arg_id();
 6957|  71.0k|        }
 6958|  71.0k|        constexpr void operator()(std::size_t id)
 6959|  71.0k|        {
 6960|  71.0k|            arg_id = handler.on_arg_id(id);
 6961|  71.0k|        }
 6962|       |
 6963|  71.0k|        constexpr void on_error(const char* msg)
 6964|  71.0k|        {
 6965|  71.0k|            SCN_UNLIKELY_ATTR
 6966|  71.0k|            handler.on_error(msg);
 6967|  71.0k|        }
 6968|       |
 6969|  71.0k|        Handler& handler;
 6970|  71.0k|        std::size_t arg_id;
 6971|  71.0k|    };
 6972|       |
 6973|  71.0k|    ++begin;
 6974|  71.0k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.0k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|  71.0k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 71.0k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|  71.0k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 71.0k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|  71.0k|    else {
 6986|  71.0k|        auto adapter = id_adapter{handler, 0};
 6987|  71.0k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|  71.0k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.0k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|  71.0k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 71.0k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|  71.0k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 71.0k, False: 0]
  ------------------
 6998|  71.0k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.0k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|  71.0k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|  71.0k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 66.8k]
  |  |  |  Branch (859:45): [True: 0, False: 71.0k]
  |  |  |  Branch (859:45): [True: 4.20k, False: 66.8k]
  |  |  ------------------
  ------------------
 7004|  4.20k|                handler.on_error("Unknown format specifier");
 7005|  4.20k|                return begin;
 7006|  4.20k|            }
 7007|  71.0k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|  71.0k|    }
 7014|  66.8k|    return begin + 1;
 7015|  71.0k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|  71.0k|{
 6454|  71.0k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|  71.0k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 71.0k, False: 0]
  |  Branch (6455:26): [True: 0, False: 71.0k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|  71.0k|    handler();
 6460|  71.0k|    return begin;
 6461|  71.0k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|  71.0k|        {
 6956|  71.0k|            arg_id = handler.on_arg_id();
 6957|  71.0k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|  71.0k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|  71.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|  71.0k|    {
 7133|  71.0k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|  71.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  71.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|  71.0k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6868|  71.0k|{
 6869|  71.0k|    auto do_presentation = [&]() -> const CharT* {
 6870|  71.0k|        if (*begin == CharT{'['}) {
 6871|  71.0k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  71.0k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|  71.0k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|  71.0k|                return begin;
 6877|  71.0k|            }
 6878|  71.0k|            handler.on_character_set_string(set);
 6879|  71.0k|            return begin;
 6880|  71.0k|        }
 6881|  71.0k|        if (*begin == CharT{'/'}) {
 6882|  71.0k|            return parse_presentation_regex(begin, end, handler);
 6883|  71.0k|        }
 6884|  71.0k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  71.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|  71.0k|            handler.on_error("Invalid type specifier in format string");
 6887|  71.0k|            return begin;
 6888|  71.0k|        }
 6889|  71.0k|        handler.on_type(type);
 6890|  71.0k|        return begin;
 6891|  71.0k|    };
 6892|       |
 6893|  71.0k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 71.0k, False: 0]
  |  Branch (6893:28): [True: 63.8k, False: 7.16k]
  ------------------
 6894|  71.0k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 63.8k, False: 0]
  |  Branch (6894:36): [True: 61.7k, False: 2.10k]
  ------------------
 6895|  61.7k|        return do_presentation();
 6896|  61.7k|    }
 6897|       |
 6898|  9.26k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.26k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  9.26k|    begin = parse_align(begin, end, handler);
 6904|  9.26k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.26k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  9.26k|    begin = parse_width(begin, end, handler);
 6910|  9.26k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.26k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  9.26k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 9.26k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  9.26k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 2.10k, False: 7.16k]
  ------------------
 6929|  2.10k|        handler.on_localized();
 6930|  2.10k|        ++begin;
 6931|  2.10k|    }
 6932|  9.26k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.26k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  9.26k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 9.26k, False: 0]
  |  Branch (6937:25): [True: 7.16k, False: 2.10k]
  ------------------
 6938|  7.16k|        do_presentation();
 6939|  7.16k|    }
 6940|  9.26k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  9.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.26k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  9.26k|    return begin;
 6946|  9.26k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|  68.9k|    auto do_presentation = [&]() -> const CharT* {
 6870|  68.9k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 2.96k, False: 65.9k]
  ------------------
 6871|  2.96k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  2.96k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.96k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  2.96k|            handler.on_character_set_string(set);
 6879|  2.96k|            return begin;
 6880|  2.96k|        }
 6881|  65.9k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 65.9k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|  65.9k|        presentation_type type = parse_presentation_type(*begin++);
 6885|  65.9k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|  65.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 63.8k]
  |  |  ------------------
  ------------------
 6886|  2.10k|            handler.on_error("Invalid type specifier in format string");
 6887|  2.10k|            return begin;
 6888|  2.10k|        }
 6889|  63.8k|        handler.on_type(type);
 6890|  63.8k|        return begin;
 6891|  65.9k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6707|  2.96k|{
 6708|  2.96k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  2.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  2.96k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  2.96k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.96k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  2.96k|    auto start = begin;
 6712|  2.96k|    ++begin;
 6713|       |
 6714|  2.96k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.96k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  2.96k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 2.96k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  2.96k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 2.96k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  8.88k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 8.88k, False: 0]
  ------------------
 6739|  8.88k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  8.88k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.88k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  8.88k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 2.96k, False: 5.92k]
  ------------------
 6744|  2.96k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  2.96k|        }
 6746|       |
 6747|  5.92k|        parse_presentation_set_literal(begin, end, handler);
 6748|  5.92k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  2.96k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEvRPKT_SD_OT0_:
 6671|  5.92k|{
 6672|  5.92k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  5.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  5.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  5.92k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  5.92k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.92k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  5.92k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 5.92k, False: 0]
  |  Branch (6679:25): [True: 5.92k, False: 0]
  |  Branch (6679:49): [True: 5.92k, False: 0]
  ------------------
 6680|  5.92k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 5.92k, False: 0]
  ------------------
 6681|  5.92k|        ++begin;
 6682|       |
 6683|  5.92k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  5.92k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.92k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  5.92k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.92k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  5.92k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  5.92k|        return;
 6697|  5.92k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEDiRPKT_SD_OT0_:
 6647|  11.8k|{
 6648|  11.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  11.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  11.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  11.8k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  11.8k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  23.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  |  Branch (859:45): [True: 0, False: 11.8k]
  |  |  |  Branch (859:45): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  11.8k|    const auto cp =
 6657|  11.8k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  11.8k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  11.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 11.8k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  11.8k|    begin += len;
 6664|  11.8k|    return cp;
 6665|  11.8k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6542|  9.26k|{
 6543|  9.26k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  9.26k|    auto check_align = [](wchar_t ch) {
 6546|  9.26k|        switch (ch) {
 6547|  9.26k|            case L'<':
 6548|  9.26k|                return align_type::left;
 6549|  9.26k|            case L'>':
 6550|  9.26k|                return align_type::right;
 6551|  9.26k|            case L'^':
 6552|  9.26k|                return align_type::center;
 6553|  9.26k|            default:
 6554|  9.26k|                return align_type::none;
 6555|  9.26k|        }
 6556|  9.26k|    };
 6557|       |
 6558|  9.26k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  9.26k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  18.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.26k]
  |  |  |  Branch (859:45): [True: 0, False: 9.26k]
  |  |  |  Branch (859:45): [True: 0, False: 9.26k]
  |  |  ------------------
  ------------------
 6560|  9.26k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  9.26k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  9.26k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  9.26k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  9.26k|    const auto begin_before_fill = begin;
 6570|  9.26k|    begin += potential_fill_len;
 6571|       |
 6572|  9.26k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 9.26k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  9.26k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  9.26k|    const auto begin_after_fill = begin;
 6578|  9.26k|    ++begin;
 6579|       |
 6580|  9.26k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 9.26k, False: 0]
  ------------------
 6581|  9.26k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  9.26k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 9.26k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  9.26k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 2.96k, False: 6.30k]
  ------------------
 6586|  2.96k|            return begin_before_fill;
 6587|  2.96k|        }
 6588|  9.26k|    }
 6589|       |
 6590|  6.30k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 6.30k, False: 0]
  ------------------
 6591|  6.30k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 6.30k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  6.30k|        return begin_before_fill;
 6596|  6.30k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  6.30k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|  18.5k|    auto check_align = [](wchar_t ch) {
 6546|  18.5k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 18.5k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 18.5k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 18.5k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  18.5k|            default:
  ------------------
  |  Branch (6553:13): [True: 18.5k, False: 0]
  ------------------
 6554|  18.5k|                return align_type::none;
 6555|  18.5k|        }
 6556|  18.5k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEEEEEPKT_SD_SD_OT0_:
 6607|  9.26k|{
 6608|  9.26k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  9.26k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  9.26k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  9.26k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 9.26k, False: 0]
  |  Branch (6610:33): [True: 4.20k, False: 5.06k]
  ------------------
 6611|  4.20k|        int width = parse_simple_int(begin, end);
 6612|  4.20k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  4.20k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 4.20k, False: 0]
  |  |  ------------------
  ------------------
 6613|  4.20k|            handler.on_width(width);
 6614|  4.20k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  4.20k|    }
 6620|  9.26k|    return begin;
 6621|  9.26k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEEE12on_localizedEv:
 7137|  2.10k|    {
 7138|  2.10k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  2.10k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 2.10k, False: 0]
  ------------------
 7140|  2.10k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 2.10k, False: 0]
  ------------------
 7141|  2.10k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 2.10k, False: 0]
  ------------------
 7142|  2.10k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 2.10k, False: 0]
  ------------------
 7143|  2.10k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  2.10k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  2.10k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  66.8k|{
 8428|  66.8k|#define SCN_VISIT(Type)                                         \
 8429|  66.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  66.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  66.8k|    }                                                           \
 8432|  66.8k|    else {                                                      \
 8433|  66.8k|        return vis(monostate_val);                              \
 8434|  66.8k|    }
 8435|       |
 8436|  66.8k|    monostate monostate_val{};
 8437|       |
 8438|  66.8k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 66.8k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 66.8k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 66.8k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 66.8k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 66.8k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 66.8k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 66.8k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 66.8k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 66.8k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 66.8k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 66.8k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 66.8k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 66.8k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 66.8k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 66.8k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 66.8k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 66.8k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 66.8k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 66.8k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|  66.8k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 66.8k, False: 0]
  ------------------
 8478|  66.8k|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|  66.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  66.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  66.8k|    }                                                           \
  |  | 8432|  66.8k|    else {                                                      \
  |  | 8433|  66.8k|        return vis(monostate_val);                              \
  |  | 8434|  66.8k|    }
  ------------------
 8479|  66.8k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 66.8k]
  ------------------
 8480|  66.8k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|  66.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  66.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  66.8k|    }                                                           \
  |  | 8432|  66.8k|    else {                                                      \
  |  | 8433|  66.8k|        return vis(monostate_val);                              \
  |  | 8434|  66.8k|    }
  ------------------
 8481|  66.8k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 0, False: 66.8k]
  ------------------
 8482|  66.8k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  66.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  66.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  66.8k|    }                                                           \
  |  | 8432|  66.8k|    else {                                                      \
  |  | 8433|  66.8k|        return vis(monostate_val);                              \
  |  | 8434|  66.8k|    }
  ------------------
 8483|  66.8k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 66.8k]
  ------------------
 8484|  66.8k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  66.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  66.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  66.8k|    }                                                           \
  |  | 8432|  66.8k|    else {                                                      \
  |  | 8433|  66.8k|        return vis(monostate_val);                              \
  |  | 8434|  66.8k|    }
  ------------------
 8485|  66.8k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 66.8k]
  ------------------
 8486|  66.8k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  66.8k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  66.8k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  66.8k|    }                                                           \
  |  | 8432|  66.8k|    else {                                                      \
  |  | 8433|  66.8k|        return vis(monostate_val);                              \
  |  | 8434|  66.8k|    }
  ------------------
 8487|       |
 8488|  66.8k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 66.8k]
  ------------------
 8489|  66.8k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  66.8k|            return vis(
 8491|  66.8k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 66.8k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 66.8k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  66.8k|            SCN_CLANG_POP
 8506|  66.8k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIcE8sync_allEv:
 4083|  13.6k|    {
 4084|  13.6k|        sync(0);
 4085|  13.6k|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4sizeEv:
 5475|  2.17M|    {
 5476|  2.17M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 5477|      0|            return max_size();
 5478|      0|        }
 5479|       |
 5480|  2.17M|        return static_cast<std::size_t>(m_desc &
 5481|  2.17M|                                        ((1 << detail::packed_arg_bits) - 1));
 5482|  2.17M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE9is_packedEv:
 5500|  4.34M|    {
 5501|  4.34M|        return (m_desc & detail::is_unpacked_bit) == 0;
 5502|  4.34M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE3getEm:
 5443|  2.17M|    {
 5444|  2.17M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 5445|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  |  858|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5446|      0|                return m_args[id];
 5447|      0|            }
 5448|      0|            return {};
 5449|      0|        }
 5450|       |
 5451|  2.17M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 5452|      0|            return {};
 5453|      0|        }
 5454|       |
 5455|  2.17M|        const auto t = type(id);
 5456|  2.17M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  |  859|  2.17M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.17M]
  |  |  ------------------
  ------------------
 5457|      0|            return {};
 5458|      0|        }
 5459|       |
 5460|  2.17M|        basic_scan_arg<Context> arg;
 5461|  2.17M|        arg.m_type = t;
 5462|  2.17M|        if (is_only_builtin()) {
  ------------------
  |  Branch (5462:13): [True: 2.17M, False: 0]
  ------------------
 5463|  2.17M|            arg.m_value.ref_value = m_builtin_values[id];
 5464|  2.17M|        }
 5465|      0|        else {
 5466|      0|            arg.m_value = m_values[id];
 5467|      0|        }
 5468|  2.17M|        return arg;
 5469|  2.17M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE4typeEm:
 5509|  2.17M|    {
 5510|       |        // First (0th) index is size, types start after that
 5511|  2.17M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 5512|  2.17M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 5513|  2.17M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 5514|  2.17M|    }
_ZNK3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEE15is_only_builtinEv:
 5504|  2.17M|    {
 5505|  2.17M|        return (m_desc & detail::has_custom_types_bit) == 0;
 5506|  2.17M|    }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEEcvbEv:
 5256|  3.78M|    {
 5257|  3.78M|        return m_type != detail::arg_type::none_type;
 5258|  3.78M|    }
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|  1.05M|{
 8428|  1.05M|#define SCN_VISIT(Type)                                         \
 8429|  1.05M|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|  1.05M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|  1.05M|    }                                                           \
 8432|  1.05M|    else {                                                      \
 8433|  1.05M|        return vis(monostate_val);                              \
 8434|  1.05M|    }
 8435|       |
 8436|  1.05M|    monostate monostate_val{};
 8437|       |
 8438|  1.05M|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 1.05M]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 1.05M]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 1.05M]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 1.05M]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 1.05M]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 1.05M]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 1.05M]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 1.05M]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 1.05M]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 1.05M]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 1.05M]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 1.05M]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 1.05M]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 1.05M]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 1.05M]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 1.05M]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 1.05M]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 1.05M]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 1.05M]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 1.05M]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|   529k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 529k, False: 529k]
  ------------------
 8480|   529k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   529k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   529k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   529k|    }                                                           \
  |  | 8432|   529k|    else {                                                      \
  |  | 8433|   529k|        return vis(monostate_val);                              \
  |  | 8434|   529k|    }
  ------------------
 8481|  1.05M|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 529k, False: 529k]
  ------------------
 8482|  1.05M|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|  1.05M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.05M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.05M|    }                                                           \
  |  | 8432|  1.05M|    else {                                                      \
  |  | 8433|  1.05M|        return vis(monostate_val);                              \
  |  | 8434|  1.05M|    }
  ------------------
 8483|  1.05M|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 1.05M]
  ------------------
 8484|  1.05M|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|  1.05M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.05M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.05M|    }                                                           \
  |  | 8432|  1.05M|    else {                                                      \
  |  | 8433|  1.05M|        return vis(monostate_val);                              \
  |  | 8434|  1.05M|    }
  ------------------
 8485|  1.05M|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 1.05M]
  ------------------
 8486|  1.05M|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|  1.05M|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|  1.05M|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|  1.05M|    }                                                           \
  |  | 8432|  1.05M|    else {                                                      \
  |  | 8433|  1.05M|        return vis(monostate_val);                              \
  |  | 8434|  1.05M|    }
  ------------------
 8487|       |
 8488|  1.05M|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 1.05M]
  ------------------
 8489|  1.05M|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|  1.05M|            return vis(
 8491|  1.05M|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 1.05M]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 1.05M]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|  1.05M|            SCN_CLANG_POP
 8506|  1.05M|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v324basic_scan_parse_contextIwEC2ENSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEi:
 5553|  1.11M|        : m_format{format}, m_next_arg_id{next_arg_id}
 5554|  1.11M|    {
 5555|  1.11M|    }
_ZN3scn2v318basic_scan_contextIwEC2ENS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS2_EENS3_10locale_refE:
 8147|   370k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8148|   370k|    {
 8149|   370k|    }
_ZN3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEEC2ES6_NS1_10locale_refE:
 8065|  1.11M|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  |  928|  1.11M|    static_cast<    \
  |  |  929|  1.11M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8066|  1.11M|    {
 8067|  1.11M|    }
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   740k|{
 7055|   740k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   740k|    handler.check_args_exhausted();
 7057|   740k|    return handler.get_error();
 7058|   740k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   740k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   740k|    auto begin = format.data();
 7024|   740k|    auto it = begin;
 7025|   740k|    const auto end = format.data() + format.size();
 7026|       |
 7027|  1.43M|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 740k, False: 698k]
  ------------------
 7028|   740k|        const auto ch = *it++;
 7029|   740k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 740k, False: 0]
  ------------------
 7030|   740k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   740k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   740k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 42.0k, False: 698k]
  ------------------
 7034|  42.0k|                return;
 7035|  42.0k|            }
 7036|   740k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   740k|    }
 7047|       |
 7048|   698k|    handler.on_literal_text(begin, end);
 7049|   698k|}
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 6952|   740k|{
 6953|   740k|    struct id_adapter {
 6954|   740k|        constexpr void operator()()
 6955|   740k|        {
 6956|   740k|            arg_id = handler.on_arg_id();
 6957|   740k|        }
 6958|   740k|        constexpr void operator()(std::size_t id)
 6959|   740k|        {
 6960|   740k|            arg_id = handler.on_arg_id(id);
 6961|   740k|        }
 6962|       |
 6963|   740k|        constexpr void on_error(const char* msg)
 6964|   740k|        {
 6965|   740k|            SCN_UNLIKELY_ATTR
 6966|   740k|            handler.on_error(msg);
 6967|   740k|        }
 6968|       |
 6969|   740k|        Handler& handler;
 6970|   740k|        std::size_t arg_id;
 6971|   740k|    };
 6972|       |
 6973|   740k|    ++begin;
 6974|   740k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 740k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   740k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 740k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   740k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 740k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   740k|    else {
 6986|   740k|        auto adapter = id_adapter{handler, 0};
 6987|   740k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   740k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 740k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   740k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 740k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   740k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 740k, False: 0]
  ------------------
 6998|   740k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 740k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   740k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   740k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|  1.48M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 723k]
  |  |  |  Branch (859:45): [True: 0, False: 740k]
  |  |  |  Branch (859:45): [True: 16.8k, False: 723k]
  |  |  ------------------
  ------------------
 7004|  16.8k|                handler.on_error("Unknown format specifier");
 7005|  16.8k|                return begin;
 7006|  16.8k|            }
 7007|   740k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   740k|    }
 7014|   723k|    return begin + 1;
 7015|   740k|}
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE3argEm:
 8049|  1.11M|    {
 8050|  1.11M|        return m_args.get(id);
 8051|  1.11M|    }
_ZNK3scn2v36detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEEE6localeEv:
 8059|  1.08M|    {
 8060|  1.08M|        return m_locale;
 8061|  1.08M|    }
_ZN3scn2v324basic_scan_parse_contextIwE11next_arg_idEv:
 5575|  1.11M|    {
 5576|  1.11M|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  |  859|  1.11M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.11M]
  |  |  ------------------
  ------------------
 5577|      0|            on_error(
 5578|      0|                "Cannot switch from manual to automatic argument indexing");
 5579|      0|            return 0;
 5580|      0|        }
 5581|       |
 5582|  1.11M|        auto id = static_cast<size_t>(m_next_arg_id++);
 5583|  1.11M|        do_check_arg_id(id);
 5584|  1.11M|        return id;
 5585|  1.11M|    }
_ZN3scn2v324basic_scan_parse_contextIwE15do_check_arg_idEm:
 6063|  1.11M|{
 6064|  1.11M|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6064:9): [Folded - Ignored]
  ------------------
 6065|  1.11M|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  236|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6065:10): [Folded - Ignored]
  |  Branch (6065:22): [Folded - Ignored]
  ------------------
 6066|       |        // The cast below will cause an error on gcc pre-12
 6067|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6068|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6068:13): [True: 0, False: 0]
  ------------------
 6069|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6070|      0|            SCN_UNLIKELY_ATTR
 6071|      0|            on_error("Argument not found");
 6072|      0|        }
 6073|      0|    }
 6074|  1.11M|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   740k|{
 6454|   740k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   740k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 740k, False: 0]
  |  Branch (6455:26): [True: 0, False: 740k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   740k|    handler();
 6460|   740k|    return begin;
 6461|   740k|}
_ZN3scn2v36detail16parse_simple_intIwEEiRPKT_S5_:
 6402|  25.2k|{
 6403|  25.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  25.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6404|  25.2k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  |  924|  25.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  25.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6405|       |
 6406|  25.2k|    unsigned long long value = 0;
 6407|  50.4k|    do {
 6408|  50.4k|        value *= 10;
 6409|  50.4k|        value += static_cast<unsigned long long>(*begin - '0');
 6410|  50.4k|        if (value >
  ------------------
  |  Branch (6410:13): [True: 0, False: 50.4k]
  ------------------
 6411|  50.4k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 6412|      0|            return -1;
 6413|      0|        }
 6414|  50.4k|        ++begin;
 6415|  50.4k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (6415:14): [True: 50.4k, False: 0]
  |  Branch (6415:30): [True: 50.4k, False: 0]
  |  Branch (6415:47): [True: 25.2k, False: 25.2k]
  ------------------
 6416|  25.2k|    return static_cast<int>(value);
 6417|  25.2k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   740k|        {
 6956|   740k|            arg_id = handler.on_arg_id();
 6957|   740k|        }
_ZNK3scn2v314basic_scan_argINS0_18basic_scan_contextIwEEE4typeEv:
 5261|  2.22M|    {
 5262|  2.22M|        return m_type;
 5263|  2.22M|    }
_ZN3scn2v324basic_scan_parse_contextIwE10advance_toEPKw:
 5570|  1.08M|    {
 5571|  1.08M|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 5572|  1.08M|    }
_ZN3scn2v36detail17basic_scan_bufferIwE3getEv:
 4352|   899k|{
 4353|   899k|    if (is_contiguous()) {
  ------------------
  |  Branch (4353:9): [True: 0, False: 899k]
  ------------------
 4354|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4355|      0|                                ranges::default_sentinel};
 4356|      0|    }
 4357|   899k|    return ranges::subrange{forward_iterator{this, 0},
 4358|   899k|                            ranges::default_sentinel};
 4359|   899k|}
_ZN3scn2v36detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4183|   899k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4184|   899k|    {
 4185|   899k|        SCN_EXPECT(parent);
  ------------------
  |  |  924|   899k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   899k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4186|   899k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  |  924|   899k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   899k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4187|   899k|    }
_ZNK3scn2v324basic_scan_parse_contextIwE5beginEv:
 5559|  2.19M|    {
 5560|  2.19M|        return m_format.data();
 5561|  2.19M|    }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7131|   740k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   740k|    {
 7133|   740k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   740k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   740k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   740k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6868|   740k|{
 6869|   740k|    auto do_presentation = [&]() -> const CharT* {
 6870|   740k|        if (*begin == CharT{'['}) {
 6871|   740k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   740k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   740k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   740k|                return begin;
 6877|   740k|            }
 6878|   740k|            handler.on_character_set_string(set);
 6879|   740k|            return begin;
 6880|   740k|        }
 6881|   740k|        if (*begin == CharT{'/'}) {
 6882|   740k|            return parse_presentation_regex(begin, end, handler);
 6883|   740k|        }
 6884|   740k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   740k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   740k|            handler.on_error("Invalid type specifier in format string");
 6887|   740k|            return begin;
 6888|   740k|        }
 6889|   740k|        handler.on_type(type);
 6890|   740k|        return begin;
 6891|   740k|    };
 6892|       |
 6893|   740k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 740k, False: 0]
  |  Branch (6893:28): [True: 714k, False: 25.4k]
  ------------------
 6894|   740k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 714k, False: 0]
  |  Branch (6894:36): [True: 706k, False: 8.40k]
  ------------------
 6895|   706k|        return do_presentation();
 6896|   706k|    }
 6897|       |
 6898|  33.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.8k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  33.8k|    begin = parse_align(begin, end, handler);
 6904|  33.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.8k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  33.8k|    begin = parse_width(begin, end, handler);
 6910|  33.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.8k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  33.8k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 33.8k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  33.8k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 8.40k, False: 25.4k]
  ------------------
 6929|  8.40k|        handler.on_localized();
 6930|  8.40k|        ++begin;
 6931|  8.40k|    }
 6932|  33.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.8k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  33.8k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 33.8k, False: 0]
  |  Branch (6937:25): [True: 25.4k, False: 8.40k]
  ------------------
 6938|  25.4k|        do_presentation();
 6939|  25.4k|    }
 6940|  33.8k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.8k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  33.8k|    return begin;
 6946|  33.8k|}
_ZN3scn2v36detail15is_ascii_letterIwEEbT_:
 6517|  1.07M|{
 6518|  1.07M|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (6518:13): [True: 1.05M, False: 12.6k]
  |  Branch (6518:33): [True: 1.05M, False: 0]
  ------------------
 6519|  1.07M|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (6519:13): [True: 12.6k, False: 0]
  |  Branch (6519:33): [True: 12.6k, False: 0]
  ------------------
 6520|  1.07M|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 6869|   731k|    auto do_presentation = [&]() -> const CharT* {
 6870|   731k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 8.60k, False: 723k]
  ------------------
 6871|  8.60k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  8.60k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  8.60k|            handler.on_character_set_string(set);
 6879|  8.60k|            return begin;
 6880|  8.60k|        }
 6881|   723k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 723k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   723k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   723k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.40k, False: 714k]
  |  |  ------------------
  ------------------
 6886|  8.40k|            handler.on_error("Invalid type specifier in format string");
 6887|  8.40k|            return begin;
 6888|  8.40k|        }
 6889|   714k|        handler.on_type(type);
 6890|   714k|        return begin;
 6891|   723k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 6707|  8.60k|{
 6708|  8.60k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  8.60k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  8.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  8.60k|    auto start = begin;
 6712|  8.60k|    ++begin;
 6713|       |
 6714|  8.60k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  8.60k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 8.60k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  8.60k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 8.60k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  25.8k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 25.8k, False: 0]
  ------------------
 6739|  25.8k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  25.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 25.8k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  25.8k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 8.60k, False: 17.2k]
  ------------------
 6744|  8.60k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  8.60k|        }
 6746|       |
 6747|  17.2k|        parse_presentation_set_literal(begin, end, handler);
 6748|  17.2k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  8.60k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEvRPKT_SE_OT0_:
 6671|  17.2k|{
 6672|  17.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  17.2k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  17.2k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  17.2k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 17.2k, False: 0]
  |  Branch (6679:25): [True: 17.2k, False: 0]
  |  Branch (6679:49): [True: 17.2k, False: 0]
  ------------------
 6680|  17.2k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 17.2k, False: 0]
  ------------------
 6681|  17.2k|        ++begin;
 6682|       |
 6683|  17.2k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  17.2k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  17.2k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  17.2k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  17.2k|        return;
 6697|  17.2k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEDiRPKT_SE_OT0_:
 6647|  34.4k|{
 6648|  34.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  34.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  34.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  34.4k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  34.4k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  68.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34.4k]
  |  |  |  Branch (859:45): [True: 0, False: 34.4k]
  |  |  |  Branch (859:45): [True: 0, False: 34.4k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  34.4k|    const auto cp =
 6657|  34.4k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  34.4k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  34.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 34.4k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  34.4k|    begin += len;
 6664|  34.4k|    return cp;
 6665|  34.4k|}
_ZN3scn2v36detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 6356|  12.9k|    {
 6357|  12.9k|        m_specs.charset_string_data = fmt.data();
 6358|  12.9k|        m_specs.charset_string_size = fmt.size();
 6359|  12.9k|        on_type(presentation_type::string_set);
 6360|  12.9k|    }
_ZN3scn2v36detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 6465|  1.08M|{
 6466|  1.08M|    switch (type) {
 6467|      0|        case 'b':
  ------------------
  |  Branch (6467:9): [True: 0, False: 1.08M]
  ------------------
 6468|      0|        case 'B':
  ------------------
  |  Branch (6468:9): [True: 0, False: 1.08M]
  ------------------
 6469|      0|            return presentation_type::int_binary;
 6470|      0|        case 'd':
  ------------------
  |  Branch (6470:9): [True: 0, False: 1.08M]
  ------------------
 6471|      0|            return presentation_type::int_decimal;
 6472|      0|        case 'i':
  ------------------
  |  Branch (6472:9): [True: 0, False: 1.08M]
  ------------------
 6473|      0|            return presentation_type::int_generic;
 6474|      0|        case 'u':
  ------------------
  |  Branch (6474:9): [True: 0, False: 1.08M]
  ------------------
 6475|      0|            return presentation_type::int_unsigned_decimal;
 6476|      0|        case 'o':
  ------------------
  |  Branch (6476:9): [True: 0, False: 1.08M]
  ------------------
 6477|      0|            return presentation_type::int_octal;
 6478|      0|        case 'x':
  ------------------
  |  Branch (6478:9): [True: 0, False: 1.08M]
  ------------------
 6479|      0|        case 'X':
  ------------------
  |  Branch (6479:9): [True: 0, False: 1.08M]
  ------------------
 6480|      0|            return presentation_type::int_hex;
 6481|      0|        case 'r':
  ------------------
  |  Branch (6481:9): [True: 0, False: 1.08M]
  ------------------
 6482|      0|        case 'R':
  ------------------
  |  Branch (6482:9): [True: 0, False: 1.08M]
  ------------------
 6483|      0|            return presentation_type::int_arbitrary_base;
 6484|      0|        case 'a':
  ------------------
  |  Branch (6484:9): [True: 0, False: 1.08M]
  ------------------
 6485|      0|        case 'A':
  ------------------
  |  Branch (6485:9): [True: 0, False: 1.08M]
  ------------------
 6486|      0|            return presentation_type::float_hex;
 6487|      0|        case 'e':
  ------------------
  |  Branch (6487:9): [True: 0, False: 1.08M]
  ------------------
 6488|      0|        case 'E':
  ------------------
  |  Branch (6488:9): [True: 0, False: 1.08M]
  ------------------
 6489|      0|            return presentation_type::float_scientific;
 6490|      0|        case 'f':
  ------------------
  |  Branch (6490:9): [True: 0, False: 1.08M]
  ------------------
 6491|      0|        case 'F':
  ------------------
  |  Branch (6491:9): [True: 0, False: 1.08M]
  ------------------
 6492|      0|            return presentation_type::float_fixed;
 6493|      0|        case 'g':
  ------------------
  |  Branch (6493:9): [True: 0, False: 1.08M]
  ------------------
 6494|      0|        case 'G':
  ------------------
  |  Branch (6494:9): [True: 0, False: 1.08M]
  ------------------
 6495|      0|            return presentation_type::float_general;
 6496|  1.05M|        case 's':
  ------------------
  |  Branch (6496:9): [True: 1.05M, False: 25.2k]
  ------------------
 6497|  1.05M|            return presentation_type::string;
 6498|  12.6k|        case 'c':
  ------------------
  |  Branch (6498:9): [True: 12.6k, False: 1.07M]
  ------------------
 6499|  12.6k|            return presentation_type::character;
 6500|      0|        case '?':
  ------------------
  |  Branch (6500:9): [True: 0, False: 1.08M]
  ------------------
 6501|      0|            return presentation_type::escaped_character;
 6502|      0|        case 'p':
  ------------------
  |  Branch (6502:9): [True: 0, False: 1.08M]
  ------------------
 6503|      0|            return presentation_type::pointer;
 6504|      0|        case '[':
  ------------------
  |  Branch (6504:9): [True: 0, False: 1.08M]
  ------------------
 6505|      0|        case '/':
  ------------------
  |  Branch (6505:9): [True: 0, False: 1.08M]
  ------------------
 6506|       |            // Should be handled by parse_presentation_set and
 6507|       |            // parse_presentation_regex
 6508|      0|            SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6509|      0|            SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 6510|  12.6k|        default:
  ------------------
  |  Branch (6510:9): [True: 12.6k, False: 1.07M]
  ------------------
 6511|  12.6k|            return presentation_type::none;
 6512|  1.08M|    }
 6513|  1.08M|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6542|  33.8k|{
 6543|  33.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  33.8k|    auto check_align = [](wchar_t ch) {
 6546|  33.8k|        switch (ch) {
 6547|  33.8k|            case L'<':
 6548|  33.8k|                return align_type::left;
 6549|  33.8k|            case L'>':
 6550|  33.8k|                return align_type::right;
 6551|  33.8k|            case L'^':
 6552|  33.8k|                return align_type::center;
 6553|  33.8k|            default:
 6554|  33.8k|                return align_type::none;
 6555|  33.8k|        }
 6556|  33.8k|    };
 6557|       |
 6558|  33.8k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  33.8k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  67.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.8k]
  |  |  |  Branch (859:45): [True: 0, False: 33.8k]
  |  |  |  Branch (859:45): [True: 0, False: 33.8k]
  |  |  ------------------
  ------------------
 6560|  33.8k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  33.8k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  33.8k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  33.8k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  33.8k|    const auto begin_before_fill = begin;
 6570|  33.8k|    begin += potential_fill_len;
 6571|       |
 6572|  33.8k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 33.8k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  33.8k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  33.8k|    const auto begin_after_fill = begin;
 6578|  33.8k|    ++begin;
 6579|       |
 6580|  33.8k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 33.8k, False: 0]
  ------------------
 6581|  33.8k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 33.8k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  33.8k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 8.60k, False: 25.2k]
  ------------------
 6586|  8.60k|            return begin_before_fill;
 6587|  8.60k|        }
 6588|  33.8k|    }
 6589|       |
 6590|  25.2k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 25.2k, False: 0]
  ------------------
 6591|  25.2k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 25.2k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  25.2k|        return begin_before_fill;
 6596|  25.2k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  25.2k|}
_ZN3scn2v36detail17code_point_lengthIwEEiPKT_S5_:
 6524|  50.7k|{
 6525|  50.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  50.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  50.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6526|  50.7k|    if constexpr (sizeof(CharT) != 1) {
 6527|  50.7k|        return 1;
 6528|       |    }
 6529|       |    else {
 6530|       |        const auto lengths =
 6531|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 6532|       |            "\3\4";
 6533|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 6534|       |        return len;
 6535|       |    }
 6536|  50.7k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 6545|  67.6k|    auto check_align = [](wchar_t ch) {
 6546|  67.6k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 67.6k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 67.6k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 67.6k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  67.6k|            default:
  ------------------
  |  Branch (6553:13): [True: 67.6k, False: 0]
  ------------------
 6554|  67.6k|                return align_type::none;
 6555|  67.6k|        }
 6556|  67.6k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEEEEEPKT_SE_SE_OT0_:
 6607|  33.8k|{
 6608|  33.8k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  33.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  33.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  33.8k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 33.8k, False: 0]
  |  Branch (6610:33): [True: 16.8k, False: 17.0k]
  ------------------
 6611|  16.8k|        int width = parse_simple_int(begin, end);
 6612|  16.8k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  16.8k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 16.8k, False: 0]
  |  |  ------------------
  ------------------
 6613|  16.8k|            handler.on_width(width);
 6614|  16.8k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  16.8k|    }
 6620|  33.8k|    return begin;
 6621|  33.8k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEEE12on_localizedEv:
 7137|  8.40k|    {
 7138|  8.40k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  8.40k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 8.40k, False: 0]
  ------------------
 7140|  8.40k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 8.40k, False: 0]
  ------------------
 7141|  8.40k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 8.40k, False: 0]
  ------------------
 7142|  8.40k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 8.40k, False: 0]
  ------------------
 7143|  8.40k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  8.40k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  8.40k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS2_29basic_contiguous_scan_contextIwEEEENS0_18basic_scan_contextIwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   723k|{
 8428|   723k|#define SCN_VISIT(Type)                                         \
 8429|   723k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   723k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   723k|    }                                                           \
 8432|   723k|    else {                                                      \
 8433|   723k|        return vis(monostate_val);                              \
 8434|   723k|    }
 8435|       |
 8436|   723k|    monostate monostate_val{};
 8437|       |
 8438|   723k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 723k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 723k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 723k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 723k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 723k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 723k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 723k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 723k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 723k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 723k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 723k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 723k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 723k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 723k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 723k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 723k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 723k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 723k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 723k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 723k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|   361k|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 361k, False: 361k]
  ------------------
 8480|   361k|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8481|   723k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 361k, False: 361k]
  ------------------
 8482|   723k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   723k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   723k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   723k|    }                                                           \
  |  | 8432|   723k|    else {                                                      \
  |  | 8433|   723k|        return vis(monostate_val);                              \
  |  | 8434|   723k|    }
  ------------------
 8483|   723k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 723k]
  ------------------
 8484|   723k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   723k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   723k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   723k|    }                                                           \
  |  | 8432|   723k|    else {                                                      \
  |  | 8433|   723k|        return vis(monostate_val);                              \
  |  | 8434|   723k|    }
  ------------------
 8485|   723k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 723k]
  ------------------
 8486|   723k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   723k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   723k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   723k|    }                                                           \
  |  | 8432|   723k|    else {                                                      \
  |  | 8433|   723k|        return vis(monostate_val);                              \
  |  | 8434|   723k|    }
  ------------------
 8487|       |
 8488|   723k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 723k]
  ------------------
 8489|   723k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   723k|            return vis(
 8491|   723k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 723k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 723k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   723k|            SCN_CLANG_POP
 8506|   723k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v314visit_scan_argINS0_4impl18default_arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   529k|{
 8428|   529k|#define SCN_VISIT(Type)                                         \
 8429|   529k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   529k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   529k|    }                                                           \
 8432|   529k|    else {                                                      \
 8433|   529k|        return vis(monostate_val);                              \
 8434|   529k|    }
 8435|       |
 8436|   529k|    monostate monostate_val{};
 8437|       |
 8438|   529k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 529k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 529k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 529k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 529k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 529k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 529k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 529k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 529k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 529k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 529k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 529k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 529k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 529k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 529k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 529k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 529k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 529k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 529k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 529k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 529k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 529k]
  ------------------
 8480|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8481|   529k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 529k, False: 0]
  ------------------
 8482|   529k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   529k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   529k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   529k|    }                                                           \
  |  | 8432|   529k|    else {                                                      \
  |  | 8433|   529k|        return vis(monostate_val);                              \
  |  | 8434|   529k|    }
  ------------------
 8483|   529k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 529k]
  ------------------
 8484|   529k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   529k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   529k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   529k|    }                                                           \
  |  | 8432|   529k|    else {                                                      \
  |  | 8433|   529k|        return vis(monostate_val);                              \
  |  | 8434|   529k|    }
  ------------------
 8485|   529k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 529k]
  ------------------
 8486|   529k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   529k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   529k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   529k|    }                                                           \
  |  | 8432|   529k|    else {                                                      \
  |  | 8433|   529k|        return vis(monostate_val);                              \
  |  | 8434|   529k|    }
  ------------------
 8487|       |
 8488|   529k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 529k]
  ------------------
 8489|   529k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   529k|            return vis(
 8491|   529k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 529k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 529k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   529k|            SCN_CLANG_POP
 8506|   529k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
impl.cpp:_ZN3scn2v36detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_10scan_errorENSt3__117basic_string_viewIT0_NS8_11char_traitsISA_EEEEOT1_:
 7054|   370k|{
 7055|   370k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7056|   370k|    handler.check_args_exhausted();
 7057|   370k|    return handler.get_error();
 7058|   370k|}
impl.cpp:_ZN3scn2v36detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7020|   370k|{
 7021|       |    // TODO: memchr fast path with a larger (> 32) format string
 7022|       |
 7023|   370k|    auto begin = format.data();
 7024|   370k|    auto it = begin;
 7025|   370k|    const auto end = format.data() + format.size();
 7026|       |
 7027|   719k|    while (it != end) {
  ------------------
  |  Branch (7027:12): [True: 370k, False: 349k]
  ------------------
 7028|   370k|        const auto ch = *it++;
 7029|   370k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7029:13): [True: 370k, False: 0]
  ------------------
 7030|   370k|            handler.on_literal_text(begin, it - 1);
 7031|       |
 7032|   370k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7033|   370k|            if (!handler) {
  ------------------
  |  Branch (7033:17): [True: 21.0k, False: 349k]
  ------------------
 7034|  21.0k|                return;
 7035|  21.0k|            }
 7036|   370k|        }
 7037|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7037:18): [True: 0, False: 0]
  ------------------
 7038|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  |  Branch (859:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7039|      0|                handler.on_error("Unmatched '}' in format string");
 7040|      0|                return;
 7041|      0|            }
 7042|       |
 7043|      0|            handler.on_literal_text(begin, it);
 7044|      0|            begin = ++it;
 7045|      0|        }
 7046|   370k|    }
 7047|       |
 7048|   349k|    handler.on_literal_text(begin, end);
 7049|   349k|}
_ZN3scn2v318basic_scan_contextIwE10advance_toENS0_6detail17basic_scan_bufferIwE16forward_iteratorE:
 8185|   349k|    {
 8186|   349k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   349k|    static_cast<    \
  |  |  929|   349k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8187|   349k|    }
impl.cpp:_ZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 6952|   370k|{
 6953|   370k|    struct id_adapter {
 6954|   370k|        constexpr void operator()()
 6955|   370k|        {
 6956|   370k|            arg_id = handler.on_arg_id();
 6957|   370k|        }
 6958|   370k|        constexpr void operator()(std::size_t id)
 6959|   370k|        {
 6960|   370k|            arg_id = handler.on_arg_id(id);
 6961|   370k|        }
 6962|       |
 6963|   370k|        constexpr void on_error(const char* msg)
 6964|   370k|        {
 6965|   370k|            SCN_UNLIKELY_ATTR
 6966|   370k|            handler.on_error(msg);
 6967|   370k|        }
 6968|       |
 6969|   370k|        Handler& handler;
 6970|   370k|        std::size_t arg_id;
 6971|   370k|    };
 6972|       |
 6973|   370k|    ++begin;
 6974|   370k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 6975|      0|        handler.on_error("Unexpected end of replacement field");
 6976|      0|        return begin;
 6977|      0|    }
 6978|       |
 6979|   370k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6979:9): [True: 0, False: 370k]
  ------------------
 6980|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 6981|      0|    }
 6982|   370k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (6982:14): [True: 0, False: 370k]
  ------------------
 6983|      0|        handler.on_literal_text(begin, begin + 1);
 6984|      0|    }
 6985|   370k|    else {
 6986|   370k|        auto adapter = id_adapter{handler, 0};
 6987|   370k|        begin = parse_arg_id(begin, end, adapter);
 6988|       |
 6989|   370k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 6990|      0|            handler.on_error("Missing '}' in format string");
 6991|      0|            return begin;
 6992|      0|        }
 6993|       |
 6994|   370k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (6994:13): [True: 0, False: 370k]
  ------------------
 6995|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 6996|      0|        }
 6997|   370k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (6997:18): [True: 370k, False: 0]
  ------------------
 6998|   370k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 6999|      0|                handler.on_error("Unexpected end of replacement field");
 7000|      0|                return begin;
 7001|      0|            }
 7002|   370k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7003|   370k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.40k, False: 361k]
  |  |  |  Branch (859:45): [True: 0, False: 370k]
  |  |  |  Branch (859:45): [True: 8.40k, False: 361k]
  |  |  ------------------
  ------------------
 7004|  8.40k|                handler.on_error("Unknown format specifier");
 7005|  8.40k|                return begin;
 7006|  8.40k|            }
 7007|   370k|        }
 7008|      0|        else {
 7009|      0|            SCN_UNLIKELY_ATTR
 7010|      0|            handler.on_error("Missing '}' in format string");
 7011|      0|            return begin;
 7012|      0|        }
 7013|   370k|    }
 7014|   361k|    return begin + 1;
 7015|   370k|}
impl.cpp:_ZN3scn2v36detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 6453|   370k|{
 6454|   370k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6455|   370k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (6455:9): [True: 370k, False: 0]
  |  Branch (6455:26): [True: 0, False: 370k]
  ------------------
 6456|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 6457|      0|    }
 6458|       |
 6459|   370k|    handler();
 6460|   370k|    return begin;
 6461|   370k|}
impl.cpp:_ZZN3scn2v36detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 6955|   370k|        {
 6956|   370k|            arg_id = handler.on_arg_id();
 6957|   370k|        }
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEC2IS7_EEOT_NS1_8arg_typeE:
 7131|   370k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7132|   370k|    {
 7133|   370k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  |  924|   370k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   370k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7134|   370k|    }
impl.cpp:_ZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6868|   370k|{
 6869|   370k|    auto do_presentation = [&]() -> const CharT* {
 6870|   370k|        if (*begin == CharT{'['}) {
 6871|   370k|            auto set = parse_presentation_set(begin, end, handler);
 6872|   370k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 6873|       |                // clang-format off
 6874|   370k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|   370k|                return begin;
 6877|   370k|            }
 6878|   370k|            handler.on_character_set_string(set);
 6879|   370k|            return begin;
 6880|   370k|        }
 6881|   370k|        if (*begin == CharT{'/'}) {
 6882|   370k|            return parse_presentation_regex(begin, end, handler);
 6883|   370k|        }
 6884|   370k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   370k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 6886|   370k|            handler.on_error("Invalid type specifier in format string");
 6887|   370k|            return begin;
 6888|   370k|        }
 6889|   370k|        handler.on_type(type);
 6890|   370k|        return begin;
 6891|   370k|    };
 6892|       |
 6893|   370k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (6893:9): [True: 370k, False: 0]
  |  Branch (6893:28): [True: 357k, False: 12.7k]
  ------------------
 6894|   370k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (6894:9): [True: 357k, False: 0]
  |  Branch (6894:36): [True: 353k, False: 4.20k]
  ------------------
 6895|   353k|        return do_presentation();
 6896|   353k|    }
 6897|       |
 6898|  16.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
 6899|      0|        handler.on_error("Unexpected end of format string");
 6900|      0|        return begin;
 6901|      0|    }
 6902|       |
 6903|  16.9k|    begin = parse_align(begin, end, handler);
 6904|  16.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
 6905|      0|        handler.on_error("Unexpected end of format string");
 6906|      0|        return begin;
 6907|      0|    }
 6908|       |
 6909|  16.9k|    begin = parse_width(begin, end, handler);
 6910|  16.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
 6911|      0|        handler.on_error("Unexpected end of format string");
 6912|      0|        return begin;
 6913|      0|    }
 6914|       |
 6915|  16.9k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (6915:9): [True: 0, False: 16.9k]
  ------------------
 6916|      0|        ++begin;
 6917|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6918|      0|            handler.on_error("Unexpected end of format string");
 6919|      0|            return begin;
 6920|      0|        }
 6921|      0|        begin = parse_precision(begin, end, handler);
 6922|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6923|      0|            handler.on_error("Unexpected end of format string");
 6924|      0|            return begin;
 6925|      0|        }
 6926|      0|    }
 6927|       |
 6928|  16.9k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (6928:9): [True: 4.20k, False: 12.7k]
  ------------------
 6929|  4.20k|        handler.on_localized();
 6930|  4.20k|        ++begin;
 6931|  4.20k|    }
 6932|  16.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
 6933|      0|        handler.on_error("Unexpected end of format string");
 6934|      0|        return begin;
 6935|      0|    }
 6936|       |
 6937|  16.9k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (6937:9): [True: 16.9k, False: 0]
  |  Branch (6937:25): [True: 12.7k, False: 4.20k]
  ------------------
 6938|  12.7k|        do_presentation();
 6939|  12.7k|    }
 6940|  16.9k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
 6941|      0|        handler.on_error("Unexpected end of format string");
 6942|      0|        return begin;
 6943|      0|    }
 6944|       |
 6945|  16.9k|    return begin;
 6946|  16.9k|}
impl.cpp:_ZZN3scn2v36detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlvE_clEv:
 6869|   365k|    auto do_presentation = [&]() -> const CharT* {
 6870|   365k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (6870:13): [True: 4.30k, False: 361k]
  ------------------
 6871|  4.30k|            auto set = parse_presentation_set(begin, end, handler);
 6872|  4.30k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.30k]
  |  |  ------------------
  ------------------
 6873|       |                // clang-format off
 6874|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 6875|       |                // clang-format on
 6876|      0|                return begin;
 6877|      0|            }
 6878|  4.30k|            handler.on_character_set_string(set);
 6879|  4.30k|            return begin;
 6880|  4.30k|        }
 6881|   361k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (6881:13): [True: 0, False: 361k]
  ------------------
 6882|      0|            return parse_presentation_regex(begin, end, handler);
 6883|      0|        }
 6884|   361k|        presentation_type type = parse_presentation_type(*begin++);
 6885|   361k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 357k]
  |  |  ------------------
  ------------------
 6886|  4.20k|            handler.on_error("Invalid type specifier in format string");
 6887|  4.20k|            return begin;
 6888|  4.20k|        }
 6889|   357k|        handler.on_type(type);
 6890|   357k|        return begin;
 6891|   361k|    };
impl.cpp:_ZN3scn2v36detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEENSt3__117basic_string_viewIT_NSB_11char_traitsISD_EEEERPKSD_SI_OT0_:
 6707|  4.30k|{
 6708|  4.30k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  4.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6709|  4.30k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  |  924|  4.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  4.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6710|       |
 6711|  4.30k|    auto start = begin;
 6712|  4.30k|    ++begin;
 6713|       |
 6714|  4.30k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.30k]
  |  |  ------------------
  ------------------
 6715|       |        // clang-format off
 6716|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 6717|       |        // clang-format on
 6718|      0|        return {};
 6719|      0|    }
 6720|  4.30k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (6720:9): [True: 0, False: 4.30k]
  ------------------
 6721|      0|        handler.on_charset_inverted();
 6722|      0|        ++begin;
 6723|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6724|       |            // clang-format off
 6725|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 6726|       |            // clang-format on
 6727|      0|            return {};
 6728|      0|        }
 6729|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6729:13): [True: 0, False: 0]
  ------------------
 6730|      0|            handler.on_charset_single(char32_t{']'});
 6731|      0|            ++begin;
 6732|      0|        }
 6733|      0|    }
 6734|  4.30k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6734:14): [True: 0, False: 4.30k]
  ------------------
 6735|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6736|      0|    }
 6737|       |
 6738|  12.9k|    while (begin != end) {
  ------------------
  |  Branch (6738:12): [True: 12.9k, False: 0]
  ------------------
 6739|  12.9k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  12.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 12.9k]
  |  |  ------------------
  ------------------
 6740|      0|            break;
 6741|      0|        }
 6742|       |
 6743|  12.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (6743:13): [True: 4.30k, False: 8.60k]
  ------------------
 6744|  4.30k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 6745|  4.30k|        }
 6746|       |
 6747|  8.60k|        parse_presentation_set_literal(begin, end, handler);
 6748|  8.60k|    }
 6749|       |
 6750|      0|    SCN_UNLIKELY_ATTR
 6751|      0|    handler.on_error("Invalid [character set] specifier in format string");
 6752|      0|    return {};
 6753|  4.30k|}
impl.cpp:_ZN3scn2v36detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEvRPKT_SD_OT0_:
 6671|  8.60k|{
 6672|  8.60k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  8.60k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  8.60k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6673|       |
 6674|  8.60k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 6675|  8.60k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  |  859|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60k]
  |  |  ------------------
  ------------------
 6676|      0|        return;
 6677|      0|    }
 6678|       |
 6679|  8.60k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (6679:9): [True: 8.60k, False: 0]
  |  Branch (6679:25): [True: 8.60k, False: 0]
  |  Branch (6679:49): [True: 8.60k, False: 0]
  ------------------
 6680|  8.60k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (6680:9): [True: 8.60k, False: 0]
  ------------------
 6681|  8.60k|        ++begin;
 6682|       |
 6683|  8.60k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 6684|  8.60k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  |  859|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60k]
  |  |  ------------------
  ------------------
 6685|      0|            return;
 6686|      0|        }
 6687|       |
 6688|  8.60k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  |  859|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60k]
  |  |  ------------------
  ------------------
 6689|       |            // clang-format off
 6690|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 6691|       |            // clang-format on
 6692|      0|            return;
 6693|      0|        }
 6694|       |
 6695|  8.60k|        handler.on_charset_range(cp_first, cp_second + 1);
 6696|  8.60k|        return;
 6697|  8.60k|    }
 6698|       |
 6699|      0|    handler.on_charset_single(cp_first);
 6700|      0|}
impl.cpp:_ZN3scn2v36detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEDiRPKT_SD_OT0_:
 6647|  17.2k|{
 6648|  17.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  17.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  17.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6649|       |
 6650|  17.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 6651|  17.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  |  859|  34.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  |  Branch (859:45): [True: 0, False: 17.2k]
  |  |  |  Branch (859:45): [True: 0, False: 17.2k]
  |  |  ------------------
  ------------------
 6652|      0|        handler.on_error("Invalid encoding in format string");
 6653|      0|        return invalid_code_point;
 6654|      0|    }
 6655|       |
 6656|  17.2k|    const auto cp =
 6657|  17.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 6658|  17.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  |  859|  17.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 17.2k]
  |  |  ------------------
  ------------------
 6659|      0|        handler.on_error("Invalid encoding in format string");
 6660|      0|        return invalid_code_point;
 6661|      0|    }
 6662|       |
 6663|  17.2k|    begin += len;
 6664|  17.2k|    return cp;
 6665|  17.2k|}
impl.cpp:_ZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6542|  16.9k|{
 6543|  16.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6544|       |
 6545|  16.9k|    auto check_align = [](wchar_t ch) {
 6546|  16.9k|        switch (ch) {
 6547|  16.9k|            case L'<':
 6548|  16.9k|                return align_type::left;
 6549|  16.9k|            case L'>':
 6550|  16.9k|                return align_type::right;
 6551|  16.9k|            case L'^':
 6552|  16.9k|                return align_type::center;
 6553|  16.9k|            default:
 6554|  16.9k|                return align_type::none;
 6555|  16.9k|        }
 6556|  16.9k|    };
 6557|       |
 6558|  16.9k|    auto potential_fill_len = code_point_length(begin, end);
 6559|  16.9k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  |  859|  33.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  |  Branch (859:45): [True: 0, False: 16.9k]
  |  |  |  Branch (859:45): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
 6560|  16.9k|                     std::distance(begin, end) < potential_fill_len)) {
 6561|      0|        handler.on_error("Invalid encoding in fill character");
 6562|      0|        return begin;
 6563|      0|    }
 6564|       |
 6565|  16.9k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 6566|       |
 6567|  16.9k|    auto potential_fill = std::basic_string_view<CharT>{
 6568|  16.9k|        begin, static_cast<size_t>(potential_fill_len)};
 6569|  16.9k|    const auto begin_before_fill = begin;
 6570|  16.9k|    begin += potential_fill_len;
 6571|       |
 6572|  16.9k|    if (begin == end) {
  ------------------
  |  Branch (6572:9): [True: 0, False: 16.9k]
  ------------------
 6573|      0|        return begin_before_fill;
 6574|      0|    }
 6575|       |
 6576|  16.9k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 6577|  16.9k|    const auto begin_after_fill = begin;
 6578|  16.9k|    ++begin;
 6579|       |
 6580|  16.9k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (6580:9): [True: 16.9k, False: 0]
  ------------------
 6581|  16.9k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  |  859|  16.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 16.9k]
  |  |  ------------------
  ------------------
 6582|      0|            handler.on_error("Invalid fill character '{' in format string");
 6583|      0|            return begin;
 6584|      0|        }
 6585|  16.9k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (6585:13): [True: 4.30k, False: 12.6k]
  ------------------
 6586|  4.30k|            return begin_before_fill;
 6587|  4.30k|        }
 6588|  16.9k|    }
 6589|       |
 6590|  12.6k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (6590:9): [True: 12.6k, False: 0]
  ------------------
 6591|  12.6k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (6591:13): [True: 0, False: 12.6k]
  ------------------
 6592|      0|            handler.on_align(potential_align_on_fill);
 6593|      0|            return begin_after_fill;
 6594|      0|        }
 6595|  12.6k|        return begin_before_fill;
 6596|  12.6k|    }
 6597|       |
 6598|      0|    handler.on_fill(potential_fill);
 6599|      0|    handler.on_align(potential_align_after_fill);
 6600|      0|    return begin;
 6601|  12.6k|}
impl.cpp:_ZZN3scn2v36detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_ENKUlwE_clEw:
 6545|  33.8k|    auto check_align = [](wchar_t ch) {
 6546|  33.8k|        switch (ch) {
 6547|      0|            case L'<':
  ------------------
  |  Branch (6547:13): [True: 0, False: 33.8k]
  ------------------
 6548|      0|                return align_type::left;
 6549|      0|            case L'>':
  ------------------
  |  Branch (6549:13): [True: 0, False: 33.8k]
  ------------------
 6550|      0|                return align_type::right;
 6551|      0|            case L'^':
  ------------------
  |  Branch (6551:13): [True: 0, False: 33.8k]
  ------------------
 6552|      0|                return align_type::center;
 6553|  33.8k|            default:
  ------------------
  |  Branch (6553:13): [True: 33.8k, False: 0]
  ------------------
 6554|  33.8k|                return align_type::none;
 6555|  33.8k|        }
 6556|  33.8k|    };
impl.cpp:_ZN3scn2v36detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEEEEEPKT_SD_SD_OT0_:
 6607|  16.9k|{
 6608|  16.9k|    SCN_EXPECT(begin != end);
  ------------------
  |  |  924|  16.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  16.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6609|       |
 6610|  16.9k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (6610:9): [True: 16.9k, False: 0]
  |  Branch (6610:33): [True: 8.40k, False: 8.50k]
  ------------------
 6611|  8.40k|        int width = parse_simple_int(begin, end);
 6612|  8.40k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  |  858|  8.40k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 8.40k, False: 0]
  |  |  ------------------
  ------------------
 6613|  8.40k|            handler.on_width(width);
 6614|  8.40k|        }
 6615|      0|        else {
 6616|      0|            handler.on_error("Invalid field width");
 6617|      0|            return begin;
 6618|      0|        }
 6619|  8.40k|    }
 6620|  16.9k|    return begin;
 6621|  16.9k|}
impl.cpp:_ZN3scn2v36detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEEE12on_localizedEv:
 7137|  4.20k|    {
 7138|  4.20k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7139|  4.20k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7139:13): [True: 4.20k, False: 0]
  ------------------
 7140|  4.20k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7140:13): [True: 4.20k, False: 0]
  ------------------
 7141|  4.20k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7141:13): [True: 4.20k, False: 0]
  ------------------
 7142|  4.20k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7142:13): [True: 4.20k, False: 0]
  ------------------
 7143|  4.20k|            SCN_UNLIKELY_ATTR
 7144|       |            // clang-format off
 7145|  4.20k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7146|       |            // clang-format on
 7147|  4.20k|        }
 7148|       |
 7149|      0|        Handler::on_localized();
 7150|      0|    }
_ZN3scn2v314visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEES5_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 8427|   361k|{
 8428|   361k|#define SCN_VISIT(Type)                                         \
 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
 8431|   361k|    }                                                           \
 8432|   361k|    else {                                                      \
 8433|   361k|        return vis(monostate_val);                              \
 8434|   361k|    }
 8435|       |
 8436|   361k|    monostate monostate_val{};
 8437|       |
 8438|   361k|    switch (arg.m_type) {
 8439|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (8439:9): [True: 0, False: 361k]
  ------------------
 8440|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8441|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (8441:9): [True: 0, False: 361k]
  ------------------
 8442|      0|            SCN_VISIT(short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8443|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (8443:9): [True: 0, False: 361k]
  ------------------
 8444|      0|            SCN_VISIT(int);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8445|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (8445:9): [True: 0, False: 361k]
  ------------------
 8446|      0|            SCN_VISIT(long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8447|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (8447:9): [True: 0, False: 361k]
  ------------------
 8448|      0|            SCN_VISIT(long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8449|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (8449:9): [True: 0, False: 361k]
  ------------------
 8450|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8451|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (8451:9): [True: 0, False: 361k]
  ------------------
 8452|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8453|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (8453:9): [True: 0, False: 361k]
  ------------------
 8454|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8455|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (8455:9): [True: 0, False: 361k]
  ------------------
 8456|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8457|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (8457:9): [True: 0, False: 361k]
  ------------------
 8458|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8459|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (8459:9): [True: 0, False: 361k]
  ------------------
 8460|      0|            SCN_VISIT(void*);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8461|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (8461:9): [True: 0, False: 361k]
  ------------------
 8462|      0|            SCN_VISIT(bool);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8463|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (8463:9): [True: 0, False: 361k]
  ------------------
 8464|      0|            SCN_VISIT(char);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8465|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (8465:9): [True: 0, False: 361k]
  ------------------
 8466|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8467|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (8467:9): [True: 0, False: 361k]
  ------------------
 8468|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8469|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (8469:9): [True: 0, False: 361k]
  ------------------
 8470|      0|            SCN_VISIT(float);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8471|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (8471:9): [True: 0, False: 361k]
  ------------------
 8472|      0|            SCN_VISIT(double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8473|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (8473:9): [True: 0, False: 361k]
  ------------------
 8474|      0|            SCN_VISIT(long double);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8475|      0|        case detail::arg_type::narrow_string_view_type:
  ------------------
  |  Branch (8475:9): [True: 0, False: 361k]
  ------------------
 8476|      0|            SCN_VISIT(std::string_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8477|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (8477:9): [True: 0, False: 361k]
  ------------------
 8478|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8479|      0|        case detail::arg_type::wide_string_view_type:
  ------------------
  |  Branch (8479:9): [True: 0, False: 361k]
  ------------------
 8480|      0|            SCN_VISIT(std::wstring_view);
  ------------------
  |  | 8429|      0|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|      0|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|      0|    }                                                           \
  |  | 8432|      0|    else {                                                      \
  |  | 8433|      0|        return vis(monostate_val);                              \
  |  | 8434|      0|    }
  ------------------
 8481|   361k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (8481:9): [True: 361k, False: 0]
  ------------------
 8482|   361k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8483|   361k|        case detail::arg_type::narrow_regex_matches_type:
  ------------------
  |  Branch (8483:9): [True: 0, False: 361k]
  ------------------
 8484|   361k|            SCN_VISIT(regex_matches);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8485|   361k|        case detail::arg_type::wide_regex_matches_type:
  ------------------
  |  Branch (8485:9): [True: 0, False: 361k]
  ------------------
 8486|   361k|            SCN_VISIT(wregex_matches);
  ------------------
  |  | 8429|   361k|    if constexpr (!detail::is_type_disabled<Type>) {            \
  |  | 8430|   361k|        return vis(*static_cast<Type*>(arg.m_value.ref_value)); \
  |  | 8431|   361k|    }                                                           \
  |  | 8432|   361k|    else {                                                      \
  |  | 8433|   361k|        return vis(monostate_val);                              \
  |  | 8434|   361k|    }
  ------------------
 8487|       |
 8488|   361k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (8488:9): [True: 0, False: 361k]
  ------------------
 8489|   361k|#if !SCN_DISABLE_TYPE_CUSTOM
 8490|   361k|            return vis(
 8491|   361k|                typename Ctx::arg_type::handle(arg.m_value.custom_value));
 8492|       |#else
 8493|       |            return vis(monostate_val);
 8494|       |#endif
 8495|       |
 8496|      0|            SCN_CLANG_PUSH
 8497|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 8498|       |
 8499|      0|            SCN_UNLIKELY_ATTR
 8500|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (8500:9): [True: 0, False: 361k]
  ------------------
 8501|      0|        default: {
  ------------------
  |  Branch (8501:9): [True: 0, False: 361k]
  ------------------
 8502|      0|            return vis(monostate_val);
 8503|      0|        }
 8504|       |
 8505|   361k|            SCN_CLANG_POP
 8506|   361k|    }
 8507|       |
 8508|      0|#undef SCN_VISIT
 8509|       |
 8510|      0|    SCN_ENSURE(false);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 8511|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 8512|      0|}
_ZN3scn2v36detail17basic_scan_bufferIwE8sync_allEv:
 4083|  27.3k|    {
 4084|  27.3k|        sync(0);
 4085|  27.3k|    }
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIcEEEC2Ev:
 5429|  77.3k|    constexpr basic_scan_args() = default;
_ZN3scn2v315basic_scan_argsINS0_18basic_scan_contextIwEEEC2Ev:
 5429|   529k|    constexpr basic_scan_args() = default;

_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   361k|{
   89|   361k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   361k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   361k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   723k|{
   44|   723k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   723k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   723k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  126|   361k|{
  127|   361k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   361k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   361k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   723k|{
   60|   723k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   723k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   723k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  162|   176k|{
  163|   176k|    T value;
  164|   176k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   176k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.10k, False: 174k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.10k|    }                                                  \
  |  |  |  | 3667|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   174k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   176k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   353k|{
   72|   353k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   353k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   361k|{
   89|   361k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   361k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   361k|}
_ZN3scn2v34scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  126|   361k|{
  127|   361k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   361k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   361k|}
_ZN3scn2v310scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  162|   176k|{
  163|   176k|    T value;
  164|   176k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   176k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.10k, False: 174k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.10k|    }                                                  \
  |  |  |  | 3667|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   174k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   176k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   361k|{
   89|   361k|    auto args = make_scan_args<wscan_context, Args...>();
   90|   361k|    auto result = vscan(SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   91|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
   92|   361k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   43|   361k|{
   44|   361k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   361k|}
_ZN3scn2v34scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  126|   361k|{
  127|   361k|    auto args = make_scan_args<wscan_context, Args...>();
  128|   361k|    auto result = vscan(loc, SCN_FWD(source), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  129|   361k|    return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return make_scan_result(SCN_MOVE(result), SCN_MOVE(args.args()));
  ------------------
  |  |  928|   361k|    static_cast<    \
  |  |  929|   361k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  130|   361k|}
_ZN3scn2v35vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
   59|   361k|{
   60|   361k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   361k|}
_ZN3scn2v310scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  162|   176k|{
  163|   176k|    T value;
  164|   176k|    auto arg = detail::make_arg<wscan_context>(value);
  165|   176k|    SCN_TRY(it, vscan_value(SCN_FWD(source), arg));
  ------------------
  |  | 3668|   176k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   176k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   176k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   176k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.10k, False: 174k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.10k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.10k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.10k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.10k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.10k|    }                                                  \
  |  |  |  | 3667|   176k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   174k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
  166|   174k|    return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                  return scan_result{SCN_MOVE(it), std::tuple{SCN_MOVE(value)}};
  ------------------
  |  |  928|   174k|    static_cast<    \
  |  |  929|   174k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
  167|   176k|}
_ZN3scn2v311vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
   71|   176k|{
   72|   176k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   176k|}

_ZN3scn2v36detail10locale_refC2INSt3__16localeEEERKT_:
  651|  1.25M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  652|  1.25M|{
  653|  1.25M|    static_assert(std::is_same_v<Locale, std::locale>);
  654|  1.25M|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2183|   102k|{
 2184|   102k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2185|   102k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2191|  66.1k|{
 2192|  66.1k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2193|  66.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  66.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 59.8k, False: 6.30k]
  |  |  ------------------
  ------------------
 2194|  59.8k|        source.sync(*n);
 2195|  59.8k|    }
 2196|  6.30k|    else {
 2197|  6.30k|        source.sync_all();
 2198|  6.30k|    }
 2199|  66.1k|    return n;
 2200|  66.1k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2207|   723k|{
 2208|   723k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2209|   723k|}
_ZN3scn2v36detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2215|   361k|{
 2216|   361k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2217|   361k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   361k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 349k, False: 12.6k]
  |  |  ------------------
  ------------------
 2218|   349k|        source.sync(*n);
 2219|   349k|    }
 2220|  12.6k|    else {
 2221|  12.6k|        source.sync_all();
 2222|  12.6k|    }
 2223|   361k|    return n;
 2224|   361k|}
_ZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  193|   381k|{
  194|   381k|    return find_classic_impl(
  195|   381k|        source, [](char ch) { return is_ascii_space(ch); },
  196|   381k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  197|   381k|}
_ZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  201|   385k|{
  202|   385k|    return find_classic_impl(
  203|   385k|        source, [](char ch) { return !is_ascii_space(ch); },
  204|   385k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  205|   385k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2140|   102k|{
 2141|   102k|    return vscan_internal(source, format, args);
 2142|   102k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEE:
 2146|  66.1k|{
 2147|  66.1k|    auto n = vscan_internal(source, format, args);
 2148|  66.1k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  66.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 59.8k, False: 6.30k]
  |  |  ------------------
  ------------------
 2149|  59.8k|        source.sync(*n);
 2150|  59.8k|    }
 2151|  6.30k|    else {
 2152|  6.30k|        source.sync_all();
 2153|  6.30k|    }
 2154|  66.1k|    return n;
 2155|  66.1k|}
_ZN3scn2v36detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2160|   723k|{
 2161|   723k|    return vscan_internal(source, format, args);
 2162|   723k|}
_ZN3scn2v36detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEE:
 2166|   361k|{
 2167|   361k|    auto n = vscan_internal(source, format, args);
 2168|   361k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   361k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 349k, False: 12.6k]
  |  |  ------------------
  ------------------
 2169|   349k|        source.sync(*n);
 2170|   349k|    }
 2171|  12.6k|    else {
 2172|  12.6k|        source.sync_all();
 2173|  12.6k|    }
 2174|   361k|    return n;
 2175|   361k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2250|  46.7k|{
 2251|  46.7k|    return vscan_value_internal(source, arg);
 2252|  46.7k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 2255|  30.6k|{
 2256|  30.6k|    auto n = vscan_value_internal(source, arg);
 2257|  30.6k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|  30.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 29.5k, False: 1.05k]
  |  |  ------------------
  ------------------
 2258|  29.5k|        source.sync(*n);
 2259|  29.5k|    }
 2260|  1.05k|    else {
 2261|  1.05k|        source.sync_all();
 2262|  1.05k|    }
 2263|  30.6k|    return n;
 2264|  30.6k|}
_ZN3scn2v36detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2269|   353k|{
 2270|   353k|    return vscan_value_internal(source, arg);
 2271|   353k|}
_ZN3scn2v36detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 2275|   176k|{
 2276|   176k|    auto n = vscan_value_internal(source, arg);
 2277|   176k|    if (SCN_LIKELY(n)) {
  ------------------
  |  |  858|   176k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 174k, False: 2.10k]
  |  |  ------------------
  ------------------
 2278|   174k|        source.sync(*n);
 2279|   174k|    }
 2280|  2.10k|    else {
 2281|  2.10k|        source.sync_all();
 2282|  2.10k|    }
 2283|   176k|    return n;
 2284|   176k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   381k|{
  118|   381k|    auto it = source.begin();
  119|       |
  120|   698k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 541k, False: 156k]
  ------------------
  121|   541k|        auto sv =
  122|   541k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   541k|                .substr(0, 8);
  124|       |
  125|   541k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 406k, False: 134k]
  ------------------
  126|   406k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   406k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   406k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 173k, False: 233k]
  ------------------
  129|   173k|                break;
  130|   173k|            }
  131|   233k|            continue;
  132|   406k|        }
  133|       |
  134|   407k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 323k, False: 83.7k]
  ------------------
  135|   323k|            auto tmp =
  136|   323k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   323k|            auto res = get_next_code_point(tmp);
  138|   323k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 51.1k, False: 272k]
  ------------------
  139|  51.1k|                return it;
  140|  51.1k|            }
  141|   272k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|   272k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|   272k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|   272k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|   272k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|   272k|        }
  145|   134k|    }
  146|       |
  147|   330k|    return detail::make_string_view_iterator(source, it);
  148|   381k|}
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  104|   910k|{
  105|   910k|    static_assert(sizeof(*source.data()) == 1);
  106|   910k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  |  924|   910k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   910k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  107|   910k|    uint64_t word{};
  108|   910k|    std::memcpy(&word, source.data(), source.size());
  109|       |
  110|   910k|    return has_byte_greater(word, 127) != 0;
  111|   910k|}
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  195|  1.61M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  196|   323k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v34impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  117|   385k|{
  118|   385k|    auto it = source.begin();
  119|       |
  120|   512k|    while (it != source.end()) {
  ------------------
  |  Branch (120:12): [True: 369k, False: 143k]
  ------------------
  121|   369k|        auto sv =
  122|   369k|            detail::make_string_view_from_iterators<char>(it, source.end())
  123|   369k|                .substr(0, 8);
  124|       |
  125|   369k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (125:13): [True: 302k, False: 66.0k]
  ------------------
  126|   302k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  127|   302k|            it = detail::make_string_view_iterator(source, tmp_it);
  128|   302k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (128:17): [True: 177k, False: 125k]
  ------------------
  129|   177k|                break;
  130|   177k|            }
  131|   125k|            continue;
  132|   302k|        }
  133|       |
  134|   125k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (134:28): [True: 123k, False: 2.23k]
  ------------------
  135|   123k|            auto tmp =
  136|   123k|                detail::make_string_view_from_iterators<char>(it, source.end());
  137|   123k|            auto res = get_next_code_point(tmp);
  138|   123k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (138:17): [True: 63.8k, False: 59.8k]
  ------------------
  139|  63.8k|                return it;
  140|  63.8k|            }
  141|  59.8k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  142|  59.8k|            it = detail::make_string_view_iterator(source, res.iterator);
  143|  59.8k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  |  925|  59.8k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|  59.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  144|  59.8k|        }
  145|  66.0k|    }
  146|       |
  147|   321k|    return detail::make_string_view_iterator(source, it);
  148|   385k|}
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  203|   868k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v34impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  204|   123k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   132k|{
 2073|   132k|    const auto argcount = args.size();
 2074|   132k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 61.2k, False: 71.0k]
  |  Branch (2074:60): [True: 61.2k, False: 0]
  ------------------
 2075|  61.2k|        auto arg = args.get(0);
 2076|  61.2k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  61.2k|    static_cast<    \
  |  |  929|  61.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|  61.2k|    }
 2078|       |
 2079|  71.0k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 71.0k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|  71.0k|    SCN_UNLIKELY_ATTR
 2087|  71.0k|    {
 2088|  71.0k|        auto handler = format_handler<false, CharT>{
 2089|  71.0k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|  71.0k|        return vscan_parse_format_string(format, handler);
 2091|  71.0k|    }
 2092|  71.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|   337k|{
 1625|   337k|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 183k, False: 154k]
  ------------------
 1626|   183k|        return false;
 1627|   183k|    }
 1628|   154k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 154k, False: 0]
  |  Branch (1628:39): [True: 154k, False: 0]
  ------------------
 1629|   337k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|  91.9k|{
 1658|  91.9k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 91.9k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|  91.9k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|  91.9k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 91.9k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|  91.9k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|  91.9k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|  91.9k|    static_cast<    \
  |  |  929|  91.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|  91.9k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 3.15k, False: 88.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  3.15k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  3.15k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  3.15k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  3.15k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  3.15k|    }                                                  \
  |  |  |  | 3667|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  88.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|  88.7k|    return it.position();
 1675|  91.9k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refEm:
 1899|   112k|        : format_handler_base{argcount},
 1900|   112k|          parse_ctx{format},
 1901|   112k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   112k|    {
 1903|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_baseC2Em:
 1720|  1.29M|    format_handler_base(size_t argcount) : args_count(argcount)
 1721|  1.29M|    {
 1722|  1.29M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
 1723|      0|            visited_args_upper.resize((args_count - 64) / 8);
 1724|      0|        }
 1725|  1.29M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 1851|   112k|        : contiguous_ctx(source, args, loc)
 1852|   112k|    {
 1853|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   112k|{
 2038|   112k|    const auto beg = handler.get_ctx().begin();
 2039|   112k|    detail::parse_format_string<false>(format, handler);
 2040|   112k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.0k, False: 91.0k]
  |  |  ------------------
  ------------------
 2041|  21.0k|        return unexpected(handler.error);
 2042|  21.0k|    }
 2043|  91.0k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   112k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2021|   725k|    {
 2022|   725k|        return ctx.get();
 2023|   725k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 1856|   725k|    {
 1857|   725k|        return contiguous_ctx;
 1858|   725k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 1906|   203k|    {
 1907|   203k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 203k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   203k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIcEEmNS1_14format_handlerILb1EcEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   112k|{
 1681|   112k|    auto arg = ctx.arg(id);
 1682|   112k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 112k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   112k|    return arg;
 1686|   112k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 1796|  1.29M|    {
 1797|  1.29M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
 1798|      0|            on_error("Invalid out-of-range argument ID");
 1799|      0|            return;
 1800|      0|        }
 1801|       |
 1802|  1.29M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
 1803|      0|            return on_error("Argument with this ID has already been scanned");
 1804|      0|        }
 1805|       |
 1806|  1.29M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.29M, False: 0]
  |  |  ------------------
  ------------------
 1807|  1.29M|            visited_args_lower64 |= (1ull << id);
 1808|  1.29M|            return;
 1809|  1.29M|        }
 1810|       |
 1811|      0|        id -= 64;
 1812|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 1813|      0|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 1781|  1.29M|    {
 1782|  1.29M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  |  859|  1.29M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.29M]
  |  |  ------------------
  ------------------
 1783|      0|            on_error("Invalid out-of-range argument ID");
 1784|      0|            return false;
 1785|      0|        }
 1786|       |
 1787|  1.29M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  |  858|  1.29M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.29M, False: 0]
  |  |  ------------------
  ------------------
 1788|  1.29M|            return (visited_args_lower64 >> id) & 1ull;
 1789|  1.29M|        }
 1790|       |
 1791|      0|        id -= 64;
 1792|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 1793|  1.29M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 1765|  56.7k|    {
 1766|  56.7k|        if (SCN_UNLIKELY(err != scan_error::good)) {
  ------------------
  |  |  859|  56.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 56.7k, False: 0]
  |  |  ------------------
  ------------------
 1767|  56.7k|            error = err;
 1768|  56.7k|        }
 1769|  56.7k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 1943|   112k|    {
 1944|   112k|        return parse_ctx.next_arg_id();
 1945|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 1984|   112k|    {
 1985|   112k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   112k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   112k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 112k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   112k|        auto specs = detail::format_specs{};
 1998|   112k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   112k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   112k|            arg.type()};
 2001|       |
 2002|   112k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   112k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 112k]
  |  Branch (2003:29): [True: 0, False: 112k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   112k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   112k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.40k, False: 103k]
  |  |  ------------------
  ------------------
 2009|  8.40k|            return parse_ctx.begin();
 2010|  8.40k|        }
 2011|   103k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   103k|        on_visit_scan_arg(
 2014|   103k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   103k|                                           get_ctx().locale()},
 2016|   103k|            arg);
 2017|   103k|        return parse_ctx.begin();
 2018|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS5_:
 1699|   112k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   112k|    {
 1701|   112k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIcEEEE:
 1955|   103k|    {
 1956|   103k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 103k]
  |  Branch (1956:23): [True: 0, False: 103k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   103k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   103k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   103k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   103k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 91.0k]
  |  |  ------------------
  ------------------
 1963|  12.6k|            on_error(r.error());
 1964|  12.6k|        }
 1965|  91.0k|        else {
 1966|  91.0k|            get_ctx().advance_to(*r);
 1967|  91.0k|        }
 1968|   103k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base8on_errorEPKc:
 1760|  37.8k|    {
 1761|  37.8k|        SCN_UNLIKELY_ATTR
 1762|  37.8k|        error = scan_error{scan_error::invalid_format_string, msg};
 1763|  37.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 1728|  1.29M|    {
 1729|  1.29M|        {
 1730|  1.29M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (1730:45): [True: 0, False: 1.29M]
  ------------------
 1731|  1.29M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (1731:35): [True: 0, False: 1.29M]
  ------------------
 1732|  1.29M|                                      ? std::numeric_limits<uint64_t>::max()
 1733|  1.29M|                                      : (1ull << args_count_lower64) - 1;
 1734|       |
 1735|  1.29M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (1735:17): [True: 0, False: 1.29M]
  ------------------
 1736|      0|                return on_error("Argument list not exhausted");
 1737|      0|            }
 1738|  1.29M|        }
 1739|       |
 1740|  1.29M|        if (args_count < 64) {
  ------------------
  |  Branch (1740:13): [True: 1.29M, False: 0]
  ------------------
 1741|  1.29M|            return;
 1742|  1.29M|        }
 1743|       |
 1744|      0|        auto last_args_count = args_count - 64;
 1745|      0|        for (auto it = visited_args_upper.begin();
 1746|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (1746:14): [True: 0, False: 0]
  ------------------
 1747|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (1747:17): [True: 0, False: 0]
  ------------------
 1748|      0|                return on_error("Argument list not exhausted");
 1749|      0|            }
 1750|      0|            last_args_count -= 8;
 1751|      0|        }
 1752|       |
 1753|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 1754|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (1754:13): [True: 0, False: 0]
  ------------------
 1755|      0|            return on_error("Argument list not exhausted");
 1756|      0|        }
 1757|      0|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_base9get_errorEv:
 1776|  1.29M|    {
 1777|  1.29M|        return error;
 1778|  1.29M|    }
impl.cpp:_ZNK3scn2v312_GLOBAL__N_119format_handler_basecvbEv:
 1772|  3.84M|    {
 1773|  3.84M|        return static_cast<bool>(error);
 1774|  3.84M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS5_10locale_refEm:
 1899|  71.0k|        : format_handler_base{argcount},
 1900|  71.0k|          parse_ctx{format},
 1901|  71.0k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|  71.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|  71.0k|    {
 1903|  71.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS4_10locale_refE:
 1828|  71.0k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|  71.0k|    static_cast<    \
  |  |  929|  71.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|  71.0k|    {
 1830|  71.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|  71.0k|{
 2038|  71.0k|    const auto beg = handler.get_ctx().begin();
 2039|  71.0k|    detail::parse_format_string<false>(format, handler);
 2040|  71.0k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 10.5k, False: 60.5k]
  |  |  ------------------
  ------------------
 2041|  10.5k|        return unexpected(handler.error);
 2042|  10.5k|    }
 2043|  60.5k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|  71.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2021|   467k|    {
 2022|   467k|        return ctx.get();
 2023|   467k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 1833|   467k|    {
 1834|   467k|        return ctx;
 1835|   467k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 1906|   131k|    {
 1907|   131k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 131k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   131k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIcEEmNS1_14format_handlerILb0EcEEEENT_8arg_typeERS7_T0_RT1_:
 1680|  71.0k|{
 1681|  71.0k|    auto arg = ctx.arg(id);
 1682|  71.0k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 71.0k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|  71.0k|    return arg;
 1686|  71.0k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 1943|  71.0k|    {
 1944|  71.0k|        return parse_ctx.next_arg_id();
 1945|  71.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 1984|  71.0k|    {
 1985|  71.0k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|  71.0k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|  71.0k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 71.0k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|  71.0k|        auto specs = detail::format_specs{};
 1998|  71.0k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|  71.0k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|  71.0k|            arg.type()};
 2001|       |
 2002|  71.0k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|  71.0k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 71.0k]
  |  Branch (2003:29): [True: 0, False: 71.0k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|  71.0k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|  71.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 66.8k]
  |  |  ------------------
  ------------------
 2009|  4.20k|            return parse_ctx.begin();
 2010|  4.20k|        }
 2011|  66.8k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|  66.8k|        on_visit_scan_arg(
 2014|  66.8k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|  66.8k|                                           get_ctx().locale()},
 2016|  66.8k|            arg);
 2017|  66.8k|        return parse_ctx.begin();
 2018|  71.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERS4_:
 1699|  71.0k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|  71.0k|    {
 1701|  71.0k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIcEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|  66.8k|    {
 1956|  66.8k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 66.8k]
  |  Branch (1956:23): [True: 0, False: 66.8k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|  66.8k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|  66.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|  66.8k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.30k, False: 60.5k]
  |  |  ------------------
  ------------------
 1963|  6.30k|            on_error(r.error());
 1964|  6.30k|        }
 1965|  60.5k|        else {
 1966|  60.5k|            get_ctx().advance_to(*r);
 1967|  60.5k|        }
 1968|  66.8k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|   205k|{
 2053|   205k|    const auto argcount = args.size();
 2054|   205k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 93.4k, False: 112k]
  |  Branch (2054:60): [True: 93.4k, False: 0]
  ------------------
 2055|  93.4k|        auto arg = args.get(0);
 2056|  93.4k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|  93.4k|    static_cast<    \
  |  |  929|  93.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|  93.4k|    }
 2058|       |
 2059|   112k|    auto handler = format_handler<true, CharT>{
 2060|   112k|        ranges::subrange<const CharT*>{source.data(),
 2061|   112k|                                       source.data() + source.size()},
 2062|   112k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   112k|    return vscan_parse_format_string(format, handler);
 2064|   205k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|   140k|{
 1638|   140k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 140k]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|   140k|    auto reader =
 1644|   140k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|   140k|            ranges::subrange<const CharT*>{source.data(),
 1646|   140k|                                           source.data() + source.size()},
 1647|   140k|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|   140k|    static_cast<    \
  |  |  929|   140k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|   140k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   140k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   140k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   140k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.30k, False: 133k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.30k|    }                                                  \
  |  |  |  | 3667|   140k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|   133k|    return ranges::distance(source.data(), it);
 1650|   140k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_6detail10locale_refE:
 2052|  1.44M|{
 2053|  1.44M|    const auto argcount = args.size();
 2054|  1.44M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2054:9): [True: 706k, False: 740k]
  |  Branch (2054:60): [True: 706k, False: 0]
  ------------------
 2055|   706k|        auto arg = args.get(0);
 2056|   706k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   706k|    static_cast<    \
  |  |  929|   706k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2057|   706k|    }
 2058|       |
 2059|   740k|    auto handler = format_handler<true, CharT>{
 2060|   740k|        ranges::subrange<const CharT*>{source.data(),
 2061|   740k|                                       source.data() + source.size()},
 2062|   740k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   740k|    static_cast<    \
  |  |  929|   740k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   740k|    static_cast<    \
  |  |  929|   740k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2063|   740k|    return vscan_parse_format_string(format, handler);
 2064|  1.44M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1624|  2.17M|{
 1625|  2.17M|    if (format.size() != 2) {
  ------------------
  |  Branch (1625:9): [True: 1.11M, False: 1.05M]
  ------------------
 1626|  1.11M|        return false;
 1627|  1.11M|    }
 1628|  1.05M|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (1628:12): [True: 1.05M, False: 0]
  |  Branch (1628:39): [True: 1.05M, False: 0]
  ------------------
 1629|  2.17M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISD_EENS0_6detail10locale_refE:
 1637|  1.05M|{
 1638|  1.05M|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 1.05M]
  |  |  ------------------
  ------------------
 1639|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1640|      0|                                     "Argument #0 not found");
 1641|      0|    }
 1642|       |
 1643|  1.05M|    auto reader =
 1644|  1.05M|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 1645|  1.05M|            ranges::subrange<const CharT*>{source.data(),
 1646|  1.05M|                                           source.data() + source.size()},
 1647|  1.05M|            SCN_MOVE(args), loc};
  ------------------
  |  |  928|  1.05M|    static_cast<    \
  |  |  929|  1.05M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1648|  1.05M|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|  1.05M|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  1.05M|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  1.05M|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 12.6k, False: 1.04M]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  12.6k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  12.6k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  12.6k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  12.6k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  12.6k|    }                                                  \
  |  |  |  | 3667|  1.05M|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  1.04M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1649|  1.04M|    return ranges::distance(source.data(), it);
 1650|  1.05M|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refEm:
 1899|   740k|        : format_handler_base{argcount},
 1900|   740k|          parse_ctx{format},
 1901|   740k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   740k|    static_cast<    \
  |  |  929|   740k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   740k|    static_cast<    \
  |  |  929|   740k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   740k|    {
 1903|   740k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 1851|   740k|        : contiguous_ctx(source, args, loc)
 1852|   740k|    {
 1853|   740k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   740k|{
 2038|   740k|    const auto beg = handler.get_ctx().begin();
 2039|   740k|    detail::parse_format_string<false>(format, handler);
 2040|   740k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 42.0k, False: 698k]
  |  |  ------------------
  ------------------
 2041|  42.0k|        return unexpected(handler.error);
 2042|  42.0k|    }
 2043|   698k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   740k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2021|  5.06M|    {
 2022|  5.06M|        return ctx.get();
 2023|  5.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 1856|  5.06M|    {
 1857|  5.06M|        return contiguous_ctx;
 1858|  5.06M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 1906|  1.43M|    {
 1907|  1.43M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 1.43M]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|  1.43M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_4impl29basic_contiguous_scan_contextIwEEmNS1_14format_handlerILb1EwEEEENT_8arg_typeERS8_T0_RT1_:
 1680|   740k|{
 1681|   740k|    auto arg = ctx.arg(id);
 1682|   740k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 740k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   740k|    return arg;
 1686|   740k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 1943|   740k|    {
 1944|   740k|        return parse_ctx.next_arg_id();
 1945|   740k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 1984|   740k|    {
 1985|   740k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   740k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   740k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 740k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   740k|        auto specs = detail::format_specs{};
 1998|   740k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   740k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   740k|            arg.type()};
 2001|       |
 2002|   740k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   740k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 740k]
  |  Branch (2003:29): [True: 0, False: 740k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   740k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   740k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 16.8k, False: 723k]
  |  |  ------------------
  ------------------
 2009|  16.8k|            return parse_ctx.begin();
 2010|  16.8k|        }
 2011|   723k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   723k|        on_visit_scan_arg(
 2014|   723k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   723k|                                           get_ctx().locale()},
 2016|   723k|            arg);
 2017|   723k|        return parse_ctx.begin();
 2018|   740k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_4impl29basic_contiguous_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS5_:
 1699|   740k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   740k|    {
 1701|   740k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS5_29basic_contiguous_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argINS0_18basic_scan_contextIwEEEE:
 1955|   723k|    {
 1956|   723k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 723k]
  |  Branch (1956:23): [True: 0, False: 723k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   723k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   723k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   723k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   723k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 25.2k, False: 698k]
  |  |  ------------------
  ------------------
 1963|  25.2k|            on_error(r.error());
 1964|  25.2k|        }
 1965|   698k|        else {
 1966|   698k|            get_ctx().advance_to(*r);
 1967|   698k|        }
 1968|   723k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS5_10locale_refE:
 2072|   723k|{
 2073|   723k|    const auto argcount = args.size();
 2074|   723k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2074:9): [True: 353k, False: 370k]
  |  Branch (2074:60): [True: 353k, False: 0]
  ------------------
 2075|   353k|        auto arg = args.get(0);
 2076|   353k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  |  928|   353k|    static_cast<    \
  |  |  929|   353k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2077|   353k|    }
 2078|       |
 2079|   370k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2079:9): [True: 0, False: 370k]
  ------------------
 2080|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2081|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2082|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2083|      0|        return vscan_parse_format_string(format, handler);
 2084|      0|    }
 2085|       |
 2086|   370k|    SCN_UNLIKELY_ATTR
 2087|   370k|    {
 2088|   370k|        auto handler = format_handler<false, CharT>{
 2089|   370k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2090|   370k|        return vscan_parse_format_string(format, handler);
 2091|   370k|    }
 2092|   370k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextIS7_EEEENS0_14basic_scan_argISC_EENS5_10locale_refE:
 1657|   529k|{
 1658|   529k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 529k]
  |  |  ------------------
  ------------------
 1659|      0|        return unexpected_scan_error(scan_error::invalid_format_string,
 1660|      0|                                     "Argument #0 not found");
 1661|      0|    }
 1662|       |
 1663|   529k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  |  858|   529k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 0, False: 529k]
  |  |  ------------------
  ------------------
 1664|      0|        auto reader = impl::default_arg_reader<
 1665|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 1666|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  |  928|      0|    static_cast<    \
  |  |  929|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1667|      0|        SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1668|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 1669|      0|    }
 1670|       |
 1671|   529k|    auto reader = impl::default_arg_reader<basic_scan_context<CharT>>{
 1672|   529k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  |  928|   529k|    static_cast<    \
  |  |  929|   529k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1673|   529k|    SCN_TRY(it, visit_scan_arg(SCN_MOVE(reader), arg));
  ------------------
  |  | 3668|   529k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   529k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   529k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 6.30k, False: 523k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  6.30k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  6.30k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  6.30k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  6.30k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  6.30k|    }                                                  \
  |  |  |  | 3667|   529k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   523k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 1674|   523k|    return it.position();
 1675|   529k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS5_10locale_refEm:
 1899|   370k|        : format_handler_base{argcount},
 1900|   370k|          parse_ctx{format},
 1901|   370k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  930|   370k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1902|   370k|    {
 1903|   370k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS4_10locale_refE:
 1828|   370k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  |  928|   370k|    static_cast<    \
  |  |  929|   370k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 1829|   370k|    {
 1830|   370k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2037|   370k|{
 2038|   370k|    const auto beg = handler.get_ctx().begin();
 2039|   370k|    detail::parse_format_string<false>(format, handler);
 2040|   370k|    if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 21.0k, False: 349k]
  |  |  ------------------
  ------------------
 2041|  21.0k|        return unexpected(handler.error);
 2042|  21.0k|    }
 2043|   349k|    return ranges::distance(beg, handler.get_ctx().begin());
 2044|   370k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2021|  2.53M|    {
 2022|  2.53M|        return ctx.get();
 2023|  2.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 1833|  2.53M|    {
 1834|  2.53M|        return ctx;
 1835|  2.53M|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 1906|   719k|    {
 1907|   719k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (1907:16): [True: 0, False: 719k]
  ------------------
 1908|      0|            auto it = get_ctx().begin();
 1909|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (1909:17): [True: 0, False: 0]
  ------------------
 1910|      0|                SCN_UNLIKELY_ATTR
 1911|      0|                return on_error("Unexpected end of source");
 1912|      0|            }
 1913|       |
 1914|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 1915|      0|                    detail::make_string_view_from_pointers(begin, end));
 1916|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (1916:17): [True: 0, False: 0]
  ------------------
 1917|      0|                SCN_UNLIKELY_ATTR
 1918|      0|                return on_error("Invalid encoding in format string");
 1919|      0|            }
 1920|      0|            else if (is_space) {
  ------------------
  |  Branch (1920:22): [True: 0, False: 0]
  ------------------
 1921|       |                // Skip all whitespace in input
 1922|      0|                get_ctx().advance_to(
 1923|      0|                    impl::read_while_classic_space(get_ctx().range()));
 1924|       |                // And, skip all whitespace in the format string
 1925|      0|                auto begin_it = impl::read_while_classic_space(
 1926|      0|                    detail::make_string_view_from_pointers(
 1927|      0|                        detail::to_address(after_space_it),
 1928|      0|                        detail::to_address(end)));
 1929|       |                // (-1 because of the for loop ++begin)
 1930|      0|                begin = detail::to_address(begin_it) - 1;
 1931|      0|                continue;
 1932|      0|            }
 1933|       |
 1934|      0|            if (*it != *begin) {
  ------------------
  |  Branch (1934:17): [True: 0, False: 0]
  ------------------
 1935|      0|                SCN_UNLIKELY_ATTR
 1936|      0|                return on_error("Unexpected literal character in source");
 1937|      0|            }
 1938|      0|            get_ctx().advance_to(ranges::next(it));
 1939|      0|        }
 1940|   719k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_17get_argINS0_18basic_scan_contextIwEEmNS1_14format_handlerILb0EwEEEENT_8arg_typeERS7_T0_RT1_:
 1680|   370k|{
 1681|   370k|    auto arg = ctx.arg(id);
 1682|   370k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 370k]
  |  |  ------------------
  ------------------
 1683|      0|        handler.on_error("Failed to find argument with ID");
 1684|      0|    }
 1685|   370k|    return arg;
 1686|   370k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 1943|   370k|    {
 1944|   370k|        return parse_ctx.next_arg_id();
 1945|   370k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 1984|   370k|    {
 1985|   370k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 1986|   370k|        set_arg_as_visited(arg_id);
 1987|       |
 1988|   370k|        if (arg.type() == detail::arg_type::custom_type) {
  ------------------
  |  Branch (1988:13): [True: 0, False: 370k]
  ------------------
 1989|      0|            parse_ctx.advance_to(begin);
 1990|      0|            on_visit_scan_arg(
 1991|      0|                impl::custom_reader<basic_scan_context<char_type>>{
 1992|      0|                    parse_ctx, get_custom_ctx()},
 1993|      0|                arg);
 1994|      0|            return parse_ctx.begin();
 1995|      0|        }
 1996|       |
 1997|   370k|        auto specs = detail::format_specs{};
 1998|   370k|        detail::specs_checker<specs_handler<context_type>> handler{
 1999|   370k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2000|   370k|            arg.type()};
 2001|       |
 2002|   370k|        begin = detail::parse_format_specs(begin, end, handler);
 2003|   370k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2003:13): [True: 0, False: 370k]
  |  Branch (2003:29): [True: 0, False: 370k]
  ------------------
 2004|      0|            SCN_UNLIKELY_ATTR
 2005|      0|            on_error("Missing '}' in format string");
 2006|      0|            return parse_ctx.begin();
 2007|      0|        }
 2008|   370k|        if (SCN_UNLIKELY(!handler)) {
  ------------------
  |  |  859|   370k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 8.40k, False: 361k]
  |  |  ------------------
  ------------------
 2009|  8.40k|            return parse_ctx.begin();
 2010|  8.40k|        }
 2011|   361k|        parse_ctx.advance_to(begin);
 2012|       |
 2013|   361k|        on_visit_scan_arg(
 2014|   361k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2015|   361k|                                           get_ctx().locale()},
 2016|   361k|            arg);
 2017|   361k|        return parse_ctx.begin();
 2018|   370k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextIwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERS4_:
 1699|   370k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 1700|   370k|    {
 1701|   370k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextIwEEEEEEvOT_NS0_14basic_scan_argIS8_EE:
 1955|   361k|    {
 1956|   361k|        if (!*this || !arg) {
  ------------------
  |  Branch (1956:13): [True: 0, False: 361k]
  |  Branch (1956:23): [True: 0, False: 361k]
  ------------------
 1957|      0|            SCN_UNLIKELY_ATTR
 1958|      0|            return;
 1959|      0|        }
 1960|       |
 1961|   361k|        auto r = visit_scan_arg(SCN_FWD(visitor), arg);
  ------------------
  |  |  930|   361k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1962|   361k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 349k]
  |  |  ------------------
  ------------------
 1963|  12.6k|            on_error(r.error());
 1964|  12.6k|        }
 1965|   349k|        else {
 1966|   349k|            get_ctx().advance_to(*r);
 1967|   349k|        }
 1968|   361k|    }
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  46.7k|{
 2099|  46.7k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  46.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  46.7k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|  30.6k|{
 2099|  30.6k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|  30.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|  30.6k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   353k|{
 2099|   353k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   353k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   353k|}
impl.cpp:_ZN3scn2v312_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextIT0_EEEE:
 2098|   176k|{
 2099|   176k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  |  930|   176k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2100|   176k|}

_ZN3scn2v34impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1350|  1.05k|{
 1351|  1.05k|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1352|       |
 1353|  1.05k|    if constexpr (sizeof(SourceCharT) == 1) {
 1354|       |        if constexpr (sizeof(DestCharT) == 2) {
 1355|       |            std::u32string tmp;
 1356|       |            transcode_to_string_impl_to32(src, tmp);
 1357|       |            return transcode_to_string_impl_32to16<false>(
 1358|       |                std::u32string_view{tmp}, dest);
 1359|       |        }
 1360|  1.05k|        else if constexpr (sizeof(DestCharT) == 4) {
 1361|  1.05k|            return transcode_to_string_impl_to32(src, dest);
 1362|  1.05k|        }
 1363|       |    }
 1364|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1365|       |        if constexpr (sizeof(DestCharT) == 1) {
 1366|       |            std::u32string tmp;
 1367|       |            transcode_to_string_impl_to32(src, tmp);
 1368|       |            return transcode_to_string_impl_32to8<false>(
 1369|       |                std::u32string_view{tmp}, dest);
 1370|       |        }
 1371|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1372|       |            return trasncode_to_string_impl_to32(src, dest);
 1373|       |        }
 1374|       |    }
 1375|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1376|       |        if constexpr (sizeof(DestCharT) == 1) {
 1377|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1378|       |        }
 1379|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1380|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1381|       |        }
 1382|       |    }
 1383|       |
 1384|  1.05k|    SCN_EXPECT(false);
  ------------------
  |  |  924|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1385|      0|    SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1386|  1.05k|}
_ZN3scn2v34impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1243|  1.05k|{
 1244|  1.05k|    static_assert(sizeof(DestCharT) == 4);
 1245|       |
 1246|  1.05k|    auto it = src.begin();
 1247|   382k|    while (it != src.end()) {
  ------------------
  |  Branch (1247:12): [True: 381k, False: 1.05k]
  ------------------
 1248|   381k|        auto res = get_next_code_point(
 1249|   381k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1250|   381k|                                                                 src.end()));
 1251|   381k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  |  859|   381k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.69k, False: 377k]
  |  |  ------------------
  ------------------
 1252|  4.69k|            dest.push_back(DestCharT{0xfffd});
 1253|  4.69k|        }
 1254|   377k|        else {
 1255|   377k|            dest.push_back(res.value);
 1256|   377k|        }
 1257|   381k|        it = detail::make_string_view_iterator(src, res.iterator);
 1258|   381k|    }
 1259|  1.05k|}
_ZN3scn2v34impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1168|   829k|{
 1169|   829k|    SCN_EXPECT(!input.empty());
  ------------------
  |  |  924|   829k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   829k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1170|       |
 1171|   829k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1172|   829k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|   829k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 22.6k, False: 806k]
  |  |  ------------------
  ------------------
 1173|  22.6k|        return {get_start_for_next_code_point(input),
 1174|  22.6k|                detail::invalid_code_point};
 1175|  22.6k|    }
 1176|   806k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  |  859|   806k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 19.5k, False: 787k]
  |  |  ------------------
  ------------------
 1177|  19.5k|        return {input.end(), detail::invalid_code_point};
 1178|  19.5k|    }
 1179|       |
 1180|   787k|    return {input.begin() + len,
 1181|   787k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1182|   806k|}
_ZN3scn2v34impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1154|  22.6k|{
 1155|  22.6k|    auto it = input.begin();
 1156|  97.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 95.3k, False: 2.41k]
  ------------------
 1157|  95.3k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 20.2k, False: 75.1k]
  ------------------
 1158|  20.2k|            break;
 1159|  20.2k|        }
 1160|  95.3k|    }
 1161|  22.6k|    return it;
 1162|  22.6k|}
_ZN3scn2v34impl20reader_error_handler8on_errorEPKc:
 2919|  18.9k|    {
 2920|  18.9k|        SCN_UNLIKELY_ATTR
 2921|  18.9k|        m_msg = msg;
 2922|  18.9k|    }
_ZNK3scn2v34impl20reader_error_handlercvbEv:
 2924|  1.25M|    {
 2925|  1.25M|        return m_msg == nullptr;
 2926|  1.25M|    }
_ZN3scn2v34impl14is_ascii_spaceEc:
  457|  2.48M|{
  458|  2.48M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  2.48M|        static_cast<unsigned char>(ch))];
  460|  2.48M|}
_ZN3scn2v34impl13is_ascii_charEc:
  468|  51.2k|{
  469|  51.2k|    return static_cast<unsigned char>(ch) <= 127;
  470|  51.2k|}
_ZN3scn2v34impl13is_ascii_charEw:
  473|  13.7k|{
  474|  13.7k|#if WCHAR_MIN < 0
  475|  13.7k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 12.3k, False: 1.40k]
  |  Branch (475:23): [True: 7.92k, False: 4.38k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  13.7k|}
_ZN3scn2v34impl16has_byte_greaterEmh:
  538|   910k|{
  539|   910k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   910k|}
_ZN3scn2v34implntENS1_9eof_errorE:
  783|  4.85M|{
  784|  4.85M|    return e != eof_error::good;
  785|  4.85M|}
_ZN3scn2v34impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  15.0k|{
  798|  15.0k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  |  924|  15.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  15.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  15.0k|    return scan_error{scan_error::end_of_range, "EOF"};
  800|  15.0k|}
_ZN3scn2v34impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 5996|  1.19M|{
 5997|  1.19M|    if (specs.width != 0) {
  ------------------
  |  Branch (5997:9): [True: 0, False: 1.19M]
  ------------------
 5998|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (5998:13): [True: 0, False: 0]
  ------------------
 5999|      0|            return {scan_error::invalid_scanned_value,
 6000|      0|                    "Scanned value too narrow, width did not exceed what "
 6001|      0|                    "was specified in the format string"};
 6002|      0|        }
 6003|      0|    }
 6004|  1.19M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6004:9): [True: 0, False: 1.19M]
  ------------------
 6005|      0|        if (prefix_width + value_width + postfix_width > specs.precision) {
  ------------------
  |  Branch (6005:13): [True: 0, False: 0]
  ------------------
 6006|      0|            return {scan_error::invalid_scanned_value,
 6007|      0|                    "Scanned value too wide, width exceeded the specified "
 6008|      0|                    "precision"};
 6009|      0|        }
 6010|      0|    }
 6011|  1.19M|    return {};
 6012|  1.19M|}
_ZNK3scn2v36ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   462k|    {
  304|   462k|        ranges::advance(x, n);
  305|   462k|        return x;
  306|   462k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   462k|    {
  268|   462k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   462k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   462k|    {
  151|   462k|        i += n;
  152|   462k|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.03M|    {
  108|  1.03M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.03M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.03M|    {
   87|  1.03M|        return s - i;
   88|  1.03M|    }
_ZNK3scn2v36ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.74M|    {
  108|  1.74M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.74M|    }
_ZN3scn2v36ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.74M|    {
   87|  1.74M|        return s - i;
   88|  1.74M|    }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   156k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   156k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   156k|        auto beg = r.begin();
  990|   156k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 156k, False: 0]
  ------------------
  991|   156k|            return false;
  992|   156k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   156k|}
_ZNK3scn2v34impl12function_refIFbcES3_EclEc:
  762|  45.2k|    {
  763|  45.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  45.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  45.2k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  8.88k|        : m_fptr([](storage fn,
  743|  8.88k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.88k|              cvref<T> obj = *get<T>(fn);
  745|  8.88k|              if constexpr (std::is_void_v<R>) {
  746|  8.88k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.88k|              }
  748|  8.88k|              else {
  749|  8.88k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.88k|              }
  751|  8.88k|          }),
  752|  8.88k|          m_storage(std::addressof(f))
  753|  8.88k|    {
  754|  8.88k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  22.6k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  22.6k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  22.6k|              else {
  749|  22.6k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  22.6k|              }
  751|  22.6k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  22.6k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  22.6k|        else if constexpr (std::is_object_v<T>) {
  688|  22.6k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  22.6k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  8.88k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  8.88k|        {
  662|  8.88k|        }
_ZNK3scn2v34impl12function_refIFbDiES3_EclEDi:
  762|  91.1M|    {
  763|  91.1M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  91.1M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  91.1M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.78M|        : m_fptr([](storage fn,
  743|  2.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.78M|              cvref<T> obj = *get<T>(fn);
  745|  2.78M|              if constexpr (std::is_void_v<R>) {
  746|  2.78M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.78M|              }
  748|  2.78M|              else {
  749|  2.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.78M|              }
  751|  2.78M|          }),
  752|  2.78M|          m_storage(std::addressof(f))
  753|  2.78M|    {
  754|  2.78M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  6.66M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  6.66M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  6.66M|              else {
  749|  6.66M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  6.66M|              }
  751|  6.66M|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  6.66M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  6.66M|        else if constexpr (std::is_object_v<T>) {
  688|  6.66M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  6.66M|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.78M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.78M|        {
  662|  2.78M|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|  64.7k|    {
 6026|  64.7k|        const bool need_skipped_width =
 6027|  64.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 64.7k]
  |  Branch (6027:33): [True: 0, False: 64.7k]
  ------------------
 6028|  64.7k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  64.7k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 64.7k]
  ------------------
 6032|  64.7k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 64.7k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  64.7k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 64.7k, False: 0]
  |  Branch (6036:56): [True: 61.7k, False: 2.96k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  61.7k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 61.7k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   122k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  61.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  61.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  61.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  61.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.06k, False: 60.7k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.06k|    }                                                  \
  |  |  |  | 3667|  61.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  60.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   122k|                            make_eof_scan_error));
 6047|       |
 6048|   122k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 60.7k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  60.7k|            return result_type{it, 0};
 6056|   122k|        }
 6057|       |
 6058|  2.96k|        return result_type{rng.begin(), 0};
 6059|  64.7k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  2.96k|{
 1964|  2.96k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  2.96k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  2.96k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  2.96k|    else {
 1949|  2.96k|        auto first = range.begin();
 1950|  7.61k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 7.54k, False: 76]
  ------------------
 1951|  7.54k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 2.88k, False: 4.65k]
  ------------------
 1952|  2.88k|                return first;
 1953|  2.88k|            }
 1954|  7.54k|        }
 1955|     76|        return first;
 1956|  2.96k|    }
 1957|  2.96k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  60.5k|    {
  108|  60.5k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  60.5k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  60.5k|    {
   94|  60.5k|        iter_difference_t<I> counter{0};
   95|   669k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 608k, False: 60.5k]
  ------------------
   96|   608k|            ++i;
   97|   608k|            ++counter;
   98|   608k|        }
   99|  60.5k|        return counter;
  100|  60.5k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|   244k|{
  950|   244k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   244k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.45k, False: 242k]
  |  |  ------------------
  ------------------
  951|  2.45k|        return eof_error::eof;
  952|  2.45k|    }
  953|   242k|    return eof_error::good;
  954|   244k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  1.85M|{
  944|  1.85M|    return is_range_eof(r.begin(), r.end());
  945|  1.85M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  1.85M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  1.85M|    {
  937|  1.85M|        return begin == end;
  938|  1.85M|    }
  939|  1.85M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1670|   152k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   152k|    else {
 1677|   152k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   152k|    }
 1679|   152k|}
_ZN3scn2v34impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   152k|    {
 1525|   152k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   152k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   152k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1608|   152k|    {
 1609|   152k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   152k|                           ranges::common_range<Range>) {
 1626|   152k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   152k|            auto end_seg = range.end().contiguous_segment();
 1628|   152k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.58k, False: 148k]
  |  |  ------------------
  ------------------
 1629|   152k|                             detail::to_address(end_seg.end()))) {
 1630|  3.58k|                auto& str = m_storage.emplace();
 1631|  3.58k|                str.reserve(range.end().position() - range.begin().position());
 1632|  3.58k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  3.58k|                m_view = string_view_type{str};
 1634|  3.58k|                return;
 1635|  3.58k|            }
 1636|       |
 1637|   148k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   148k|                                                            end_seg.data());
 1639|   148k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   152k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE4viewEv:
 1569|   299k|    {
 1570|   299k|        return m_view;
 1571|   299k|    }
_ZN3scn2v34impl24contiguous_range_factoryIcED2Ev:
 1559|   152k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|  59.9k|    {
 6068|  59.9k|        const bool need_skipped_width =
 6069|  59.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 59.9k]
  |  Branch (6069:33): [True: 0, False: 59.9k]
  ------------------
 6070|  59.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  59.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 59.9k]
  ------------------
 6073|  59.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 59.9k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  59.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 59.9k, False: 0]
  ------------------
 6082|  59.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 822, False: 59.1k]
  ------------------
 6083|  59.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 822]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    822|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 822]
  ------------------
 6085|    822|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  59.9k|        return result_type{rng.begin(), 0};
 6107|  59.9k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  949|   372k|{
  950|   372k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|   372k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 3.78k, False: 368k]
  |  |  ------------------
  ------------------
  951|  3.78k|        return eof_error::eof;
  952|  3.78k|    }
  953|   368k|    return eof_error::good;
  954|   372k|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  943|   372k|{
  944|   372k|    return is_range_eof(r.begin(), r.end());
  945|   372k|}
_ZN3scn2v34impl12is_range_eofIPKcS4_EEbT_T0_:
  927|   372k|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|   372k|    {
  937|   372k|        return begin == end;
  938|   372k|    }
  939|   372k|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   231k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   231k|                  ranges::sized_range<Range>) {
 1674|   231k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   231k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   231k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|   231k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   231k|    {
 1478|   231k|    }
_ZNK3scn2v34impl19string_view_wrapperIcE4viewEv:
 1490|  1.26M|    {
 1491|  1.26M|        return sv;
 1492|  1.26M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  5.92k|{
 1964|  5.92k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  5.92k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  5.92k|{
 1945|  5.92k|    if constexpr (ranges::common_range<Range>) {
 1946|  5.92k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  5.92k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|   232k|{
 2940|   232k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 232k, False: 0]
  ------------------
 2941|   232k|        auto it = read_while_classic_space(range);
 2942|   232k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   232k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   232k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.31k, False: 229k]
  |  |  ------------------
  ------------------
 2944|  2.31k|            return unexpected(e);
 2945|  2.31k|        }
 2946|       |
 2947|   229k|        return it;
 2948|   232k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   232k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|   232k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|   232k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|   232k|        auto buf = make_contiguous_buffer(range);
 2109|   232k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|   232k|        return ranges::next(range.begin(),
 2111|   232k|                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|       |    else {
 2114|       |        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|       |            return detail::is_cp_space(cp);
 2127|       |        });
 2128|       |    }
 2129|   232k|}
_ZN3scn2v34impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1670|   462k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|   462k|                  ranges::sized_range<Range>) {
 1674|   462k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|   462k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|   462k|}
_ZN3scn2v34impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1476|   462k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|   462k|    {
 1478|   462k|    }
_ZNK3scn2v36ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  11.3k|    {
  304|  11.3k|        ranges::advance(x, n);
  305|  11.3k|        return x;
  306|  11.3k|    }
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   304k|    {
  268|   304k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   304k|    }
_ZN3scn2v36ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   304k|    {
  181|   555k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 251k, False: 304k]
  ------------------
  182|   251k|            ++i;
  183|   251k|        }
  184|   304k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1574|   151k|    {
 1575|   151k|        return m_storage.has_value();
 1576|   151k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1579|  2.16k|    {
 1580|  2.16k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  2.16k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  2.16k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  2.16k|        return *m_storage;
 1582|  2.16k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6181|  66.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|  66.8k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|  66.8k|            auto rd = make_reader<T, char_type>();
 6195|  66.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  66.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 64.7k]
  |  |  ------------------
  ------------------
 6196|  2.10k|                return unexpected(e);
 6197|  2.10k|            }
 6198|       |
 6199|  64.7k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 64.7k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|  64.7k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|  64.7k|                return impl(rd, range, value);
 6202|  64.7k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  66.8k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5797|   280k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|   280k|                       std::is_same_v<T, std::wstring>) {
 5816|   280k|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   280k|}
_ZN3scn2v34impl13string_readerIcEC2Ev:
 5194|   402k|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3028|   170k|    {
 3029|   170k|        reader_error_handler eh{};
 3030|   170k|        get_derived().check_specs_impl(specs, eh);
 3031|   170k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|   170k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 6.30k, False: 164k]
  |  |  ------------------
  ------------------
 3032|  6.30k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  6.30k|        }
 3034|   164k|        return {};
 3035|   170k|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3039|   170k|    {
 3040|   170k|        return static_cast<Derived&>(*this);
 3041|   170k|    }
_ZN3scn2v34impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|   170k|    {
 5199|   170k|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|   170k|        SCN_GCC_PUSH
 5202|   170k|        SCN_GCC_IGNORE("-Wswitch")
 5203|   170k|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|   170k|        SCN_CLANG_PUSH
 5206|   170k|        SCN_CLANG_IGNORE("-Wswitch")
 5207|   170k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|   170k|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 170k]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 170k]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|   155k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 155k, False: 15.1k]
  ------------------
 5215|   155k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 155k]
  ------------------
 5216|   155k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 155k]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|   155k|                else {
 5220|   155k|                    m_type = reader_type::word;
 5221|   155k|                }
 5222|   155k|                break;
 5223|      0|            }
 5224|       |
 5225|  6.30k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 6.30k, False: 164k]
  ------------------
 5226|  6.30k|                m_type = reader_type::character;
 5227|  6.30k|                break;
 5228|       |
 5229|  8.88k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 8.88k, False: 161k]
  ------------------
 5230|  8.88k|                m_type = reader_type::character_set;
 5231|  8.88k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 170k]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 170k]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|   170k|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|   170k|    }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|  64.7k|    {
 6113|  64.7k|        const bool need_skipped_width =
 6114|  64.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 64.7k]
  |  Branch (6114:33): [True: 0, False: 64.7k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  64.7k|        auto it = rng.begin();
 6118|  64.7k|        std::ptrdiff_t prefix_width = 0;
 6119|  64.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 64.7k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  64.7k|        else {
 6127|  64.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  64.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  64.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  64.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  64.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.06k, False: 63.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.06k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.06k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.06k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.06k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.06k|    }                                                  \
  |  |  |  | 3667|  64.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  63.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  63.6k|            std::tie(it, prefix_width) = prefix_result;
 6129|  63.6k|        }
 6130|  63.6k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  63.6k|        std::ptrdiff_t value_width = 0;
 6134|  63.6k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 63.6k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  63.6k|        else {
 6150|  63.6k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  63.6k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  63.6k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  63.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.13k, False: 60.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.13k|    }                                                  \
  |  | 3667|  63.6k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  63.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  60.5k|                                             specs, value, loc));
 6152|       |
 6153|  60.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 60.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  60.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  60.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  60.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 59.9k, False: 600]
  ------------------
 6163|  59.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  59.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  59.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  59.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  59.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 59.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  59.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  59.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  59.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  59.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  59.9k|                                 value_width));
 6167|  59.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  59.9k|        }
 6169|       |
 6170|  60.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  60.5k|                                                 value_width, postfix_width);
 6172|  60.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 60.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  60.5k|        return it;
 6177|  60.5k|    }
_ZNK3scn2v34impl13string_readerIcE19skip_ws_before_readEv:
 5247|   546k|    {
 5248|   546k|        return m_type == reader_type::word;
 5249|   546k|    }
_ZN3scn2v34impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|   383k|{
 1132|   383k|    auto it = src.begin();
 1133|  2.78M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 2.41M, False: 374k]
  ------------------
 1134|  2.41M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  2.41M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 5.73k, False: 2.40M]
  ------------------
 1136|  5.73k|            return false;
 1137|  5.73k|        }
 1138|  2.40M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 775, False: 2.40M]
  ------------------
 1139|    775|            return false;
 1140|    775|        }
 1141|  2.40M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  2.40M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  2.40M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 3.02k, False: 2.40M]
  ------------------
 1144|  3.02k|            return false;
 1145|  3.02k|        }
 1146|  2.40M|        it += len;
 1147|  2.40M|    }
 1148|   374k|    return true;
 1149|   383k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|   149k|{
 2982|   149k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|   149k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 2.16k, False: 147k]
  ------------------
 2984|  2.16k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  2.16k|    static_cast<    \
  |  |  929|  2.16k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  2.16k|        }
 2986|   147k|        else {
 2987|   147k|            dest.assign(source.view());
 2988|   147k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|   149k|    return {};
 2995|   149k|}
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5091|  8.88k|        {
 5092|  8.88k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 8.88k, False: 0]
  ------------------
 5093|  8.88k|                return {};
 5094|  8.88k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5064|  20.6k|        {
 5065|  20.6k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  20.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  20.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  20.6k|            const auto val =
 5067|  20.6k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  20.6k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  20.6k|                    (val % 8)) &
 5070|  20.6k|                   1u;
 5071|  20.6k|        }
_ZNK3scn2v34impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5117|  22.6k|        {
 5118|  22.6k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 1.95k, False: 20.6k]
  ------------------
 5119|  1.95k|                return false;
 5120|  1.95k|            }
 5121|       |
 5122|  20.6k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  22.6k|        }
_ZN3scn2v34impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  8.88k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|  63.6k|    {
 5266|  63.6k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  63.6k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  63.6k|        return read_impl(range, specs, value);
 5268|  63.6k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|  63.6k|    {
 5284|  63.6k|        SCN_CLANG_PUSH
 5285|  63.6k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  63.6k|        switch (m_type) {
 5288|  60.7k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 60.7k, False: 2.96k]
  ------------------
 5289|  60.7k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 63.6k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 63.6k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.96k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.96k, False: 60.7k]
  ------------------
 5299|  2.96k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.96k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 63.6k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 63.6k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 63.6k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  63.6k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  63.6k|        }
 5320|       |
 5321|  63.6k|        SCN_CLANG_POP
 5322|  63.6k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|   151k|    {
 4809|   151k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   151k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|   151k|{
 4741|   151k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   151k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   151k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 2.80k, False: 148k]
  ------------------
 4745|  2.80k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  2.80k|                                     "Invalid encoding in scanned string");
 4747|  2.80k|    }
 4748|   148k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   148k|    static_cast<    \
  |  |  929|   148k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   148k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   148k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 148k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   148k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   148k|    static_cast<    \
  |  |  929|   148k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   148k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|   151k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   151k|    else {
 2085|   151k|        auto it = range.begin();
 2086|       |
 2087|   151k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|   151k|            auto seg = get_contiguous_beginning(range);
 2089|   151k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|   151k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2090:17): [True: 0, False: 151k]
  ------------------
 2091|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|      0|            }
 2093|   151k|            ranges::advance(it, seg.size());
 2094|   151k|        }
 2095|       |
 2096|      0|        return read_until_code_point(
 2097|   151k|            ranges::subrange{it, range.end()},
 2098|   151k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   151k|    }
 2100|   151k|}
_ZN3scn2v34impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1038|   304k|{
 1039|       |    if constexpr (ranges::contiguous_range<Range> &&
 1040|       |                  ranges::sized_range<Range>) {
 1041|       |        return r;
 1042|       |    }
 1043|       |    else if constexpr (std::is_same_v<
 1044|       |                           ranges::const_iterator_t<Range>,
 1045|       |                           typename detail::basic_scan_buffer<
 1046|   304k|                               detail::char_t<Range>>::forward_iterator>) {
 1047|       |        if constexpr (ranges::common_range<Range>) {
 1048|       |            auto seg = r.begin().contiguous_segment();
 1049|       |            auto dist =
 1050|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1051|       |            return seg.substr(0, std::min(seg.size(), dist));
 1052|       |        }
 1053|   304k|        else {
 1054|   304k|            return r.begin().contiguous_segment();
 1055|   304k|        }
 1056|       |    }
 1057|       |    else {
 1058|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1059|       |    }
 1060|   304k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|   292k|{
 2049|   292k|    auto it = range.begin();
 2050|  1.61M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 1.61M, False: 4.45k]
  ------------------
 2051|  1.61M|        const auto val =
 2052|  1.61M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  1.61M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  1.61M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 1.59M, False: 17.5k]
  |  |  ------------------
  ------------------
 2054|  1.59M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  1.59M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  1.59M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 288k, False: 1.30M]
  ------------------
 2057|   288k|                return it;
 2058|   288k|            }
 2059|  1.59M|        }
 2060|  1.32M|        it = val.iterator;
 2061|  1.32M|    }
 2062|       |
 2063|  4.45k|    return it;
 2064|   292k|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  1.61M|{
 1887|  1.61M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  1.61M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.61M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  1.61M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  1.61M|    auto it = range.begin();
 1891|  1.61M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  1.61M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  1.61M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 17.5k, False: 1.59M]
  |  |  ------------------
  ------------------
 1894|  17.5k|        ++it;
 1895|  17.5k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|  17.5k|        return {it, {}};
 1897|  17.5k|    }
 1898|       |
 1899|  1.59M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 1.52M, False: 76.3k]
  ------------------
 1900|  1.52M|        ++it;
 1901|  1.52M|        return {it, string_type(1, *range.begin())};
 1902|  1.52M|    }
 1903|       |
 1904|  76.3k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|  76.3k|    return {it, string_type{range.begin(), it}};
 1906|  1.59M|}
_ZN3scn2v34impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1154|  17.5k|{
 1155|  17.5k|    auto it = input.begin();
 1156|  42.7k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1156:12): [True: 42.1k, False: 674]
  ------------------
 1157|  42.1k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1157:13): [True: 16.8k, False: 25.2k]
  ------------------
 1158|  16.8k|            break;
 1159|  16.8k|        }
 1160|  42.1k|    }
 1161|  17.5k|    return it;
 1162|  17.5k|}
_ZNK3scn2v36ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  76.3k|    {
  283|  76.3k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  76.3k|    }
_ZN3scn2v36ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  76.3k|    {
  252|  76.3k|        constexpr iter_difference_t<I> zero{0};
  253|  76.3k|        iter_difference_t<I> counter{0};
  254|       |
  255|   287k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 211k, False: 75.8k]
  |  Branch (255:30): [True: 210k, False: 501]
  ------------------
  256|   210k|            ++i;
  257|   210k|            ++counter;
  258|   210k|        }
  259|       |
  260|  76.3k|        return counter;
  261|  76.3k|    }
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1877|  1.61M|    {
 1878|  1.61M|        return !codepoint.empty();
 1879|  1.61M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   151k|        : m_fptr([](storage fn,
  743|   151k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   151k|              cvref<T> obj = *get<T>(fn);
  745|   151k|              if constexpr (std::is_void_v<R>) {
  746|   151k|                  obj(static_cast<decltype(args)>(args)...);
  747|   151k|              }
  748|   151k|              else {
  749|   151k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   151k|              }
  751|   151k|          }),
  752|   151k|          m_storage(std::addressof(f))
  753|   151k|    {
  754|   151k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   970k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   970k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   970k|              else {
  749|   970k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   970k|              }
  751|   970k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   970k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   970k|        else if constexpr (std::is_object_v<T>) {
  688|   970k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   970k|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|   970k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   151k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   151k|        {
  662|   151k|        }
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  2.96k|    {
 5037|  2.96k|        auto it = read_source_impl(range, {specs});
 5038|  2.96k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 860]
  |  |  ------------------
  ------------------
 5039|  2.10k|            return unexpected(it.error());
 5040|  2.10k|        }
 5041|       |
 5042|    860|        return read_string_impl(range, *it, value);
 5043|  2.96k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  2.96k|    {
 5142|  2.96k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  2.96k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  2.96k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 2.96k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  2.96k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  2.96k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 2.96k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  2.96k|        const auto cb = [&](SourceCharT ch) {
 5165|  2.96k|            return cb_wrapper.on_ascii_only(ch);
 5166|  2.96k|        };
 5167|       |
 5168|  2.96k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 2.96k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  2.96k|        auto it = read_while_code_unit(range, cb);
 5173|  2.96k|        return check_nonempty(it, range);
 5174|  2.96k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  2.96k|    {
 5180|  2.96k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 2.10k, False: 860]
  ------------------
 5181|  2.10k|            return unexpected_scan_error(
 5182|  2.10k|                scan_error::invalid_scanned_value,
 5183|  2.10k|                "No characters matched in [character set]");
 5184|  2.10k|        }
 5185|       |
 5186|    860|        return it;
 5187|  2.96k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   141k|{
 2070|   141k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   141k|}
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.96k|        : m_fptr([](storage fn,
  743|  2.96k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.96k|              cvref<T> obj = *get<T>(fn);
  745|  2.96k|              if constexpr (std::is_void_v<R>) {
  746|  2.96k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.96k|              }
  748|  2.96k|              else {
  749|  2.96k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.96k|              }
  751|  2.96k|          }),
  752|  2.96k|          m_storage(std::addressof(f))
  753|  2.96k|    {
  754|  2.96k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  7.54k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.54k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  7.54k|              else {
  749|  7.54k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.54k|              }
  751|  7.54k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  7.54k|    {
  684|  7.54k|        if constexpr (std::is_const_v<T>) {
  685|  7.54k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  7.54k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5164|  7.54k|        const auto cb = [&](SourceCharT ch) {
 5165|  7.54k|            return cb_wrapper.on_ascii_only(ch);
 5166|  7.54k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.96k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.96k|        {
  667|  2.96k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|    860|{
 4741|    860|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    860|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    860|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 860]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    860|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    860|    static_cast<    \
  |  |  929|    860|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    860|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 860]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    860|    return SCN_MOVE(result);
  ------------------
  |  |  928|    860|    static_cast<    \
  |  |  929|    860|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    860|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|  48.9k|    {
 5266|  48.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  48.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  48.9k|        return read_impl(range, specs, value);
 5268|  48.9k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|  48.9k|    {
 5284|  48.9k|        SCN_CLANG_PUSH
 5285|  48.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  48.9k|        switch (m_type) {
 5288|  45.9k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 45.9k, False: 2.96k]
  ------------------
 5289|  45.9k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 48.9k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 48.9k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.96k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.96k, False: 45.9k]
  ------------------
 5299|  2.96k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.96k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 48.9k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 48.9k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 48.9k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  48.9k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  48.9k|        }
 5320|       |
 5321|  48.9k|        SCN_CLANG_POP
 5322|  48.9k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|   114k|    {
 4809|   114k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   114k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|   114k|{
 4741|   114k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   114k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   114k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 3.36k, False: 111k]
  ------------------
 4745|  3.36k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  3.36k|                                     "Invalid encoding in scanned string");
 4747|  3.36k|    }
 4748|   111k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   111k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   111k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 111k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   111k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   111k|}
_ZN3scn2v34impl22transcode_if_necessaryIccEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|   112k|{
 3001|   112k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|   112k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|   112k|    return {};
 3009|   112k|}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|   229k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|   229k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|   229k|        auto buf = make_contiguous_buffer(range);
 2080|   229k|        auto it = find_classic_space_narrow_fast(buf.view());
 2081|   229k|        return ranges::next(range.begin(),
 2082|   229k|                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|       |    else {
 2085|       |        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|       |        return read_until_code_point(
 2097|       |            ranges::subrange{it, range.end()},
 2098|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|       |    }
 2100|   229k|}
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  2.96k|    {
 5037|  2.96k|        auto it = read_source_impl(range, {specs});
 5038|  2.96k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 860]
  |  |  ------------------
  ------------------
 5039|  2.10k|            return unexpected(it.error());
 5040|  2.10k|        }
 5041|       |
 5042|    860|        return read_string_impl(range, *it, value);
 5043|  2.96k|    }
_ZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  5.92k|    {
 5142|  5.92k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  5.92k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  5.92k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  5.92k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 5.92k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  5.92k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  5.92k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 5.92k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  5.92k|        const auto cb = [&](SourceCharT ch) {
 5165|  5.92k|            return cb_wrapper.on_ascii_only(ch);
 5166|  5.92k|        };
 5167|       |
 5168|  5.92k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 5.92k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  5.92k|        auto it = read_while_code_unit(range, cb);
 5173|  5.92k|        return check_nonempty(it, range);
 5174|  5.92k|    }
_ZN3scn2v34impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  5.92k|    {
 5180|  5.92k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 4.20k, False: 1.72k]
  ------------------
 5181|  4.20k|            return unexpected_scan_error(
 5182|  4.20k|                scan_error::invalid_scanned_value,
 5183|  4.20k|                "No characters matched in [character set]");
 5184|  4.20k|        }
 5185|       |
 5186|  1.72k|        return it;
 5187|  5.92k|    }
_ZN3scn2v34impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  5.92k|        : m_fptr([](storage fn,
  743|  5.92k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.92k|              cvref<T> obj = *get<T>(fn);
  745|  5.92k|              if constexpr (std::is_void_v<R>) {
  746|  5.92k|                  obj(static_cast<decltype(args)>(args)...);
  747|  5.92k|              }
  748|  5.92k|              else {
  749|  5.92k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.92k|              }
  751|  5.92k|          }),
  752|  5.92k|          m_storage(std::addressof(f))
  753|  5.92k|    {
  754|  5.92k|    }
_ZZN3scn2v34impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  15.0k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.0k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.0k|              else {
  749|  15.0k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.0k|              }
  751|  15.0k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  15.0k|    {
  684|  15.0k|        if constexpr (std::is_const_v<T>) {
  685|  15.0k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.0k|    }
_ZZNK3scn2v34impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5164|  15.0k|        const auto cb = [&](SourceCharT ch) {
 5165|  15.0k|            return cb_wrapper.on_ascii_only(ch);
 5166|  15.0k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  5.92k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  5.92k|        {
  667|  5.92k|        }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|    860|{
 4741|    860|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|    860|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|    860|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 860]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|    860|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|    860|    static_cast<    \
  |  |  929|    860|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|    860|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|    860|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 860]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|    860|    return SCN_MOVE(result);
  ------------------
  |  |  928|    860|    static_cast<    \
  |  |  929|    860|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|    860|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5797|   121k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|   121k|                       std::is_same_v<T, std::wstring_view>) {
 5812|   121k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   121k|}
_ZN3scn2v34impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|  48.9k|    {
 5266|  48.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  48.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|  48.9k|        return read_impl(range, specs, value);
 5268|  48.9k|    }
_ZN3scn2v34impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|  48.9k|    {
 5284|  48.9k|        SCN_CLANG_PUSH
 5285|  48.9k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|  48.9k|        switch (m_type) {
 5288|  45.9k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 45.9k, False: 2.96k]
  ------------------
 5289|  45.9k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 48.9k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 48.9k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  2.96k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 2.96k, False: 45.9k]
  ------------------
 5299|  2.96k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  2.96k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 48.9k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 48.9k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 48.9k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|  48.9k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|  48.9k|        }
 5320|       |
 5321|  48.9k|        SCN_CLANG_POP
 5322|  48.9k|    }
_ZN3scn2v34impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|   114k|    {
 4816|   114k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|   114k|                                     value);
 4818|   114k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|   114k|{
 4762|   114k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|   114k|    auto src = [&]() {
 4765|   114k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|   114k|            return make_contiguous_buffer(
 4767|   114k|                ranges::subrange{range.begin().base(), result.base()});
 4768|   114k|        }
 4769|   114k|        else {
 4770|   114k|            return make_contiguous_buffer(
 4771|   114k|                ranges::subrange{range.begin(), result});
 4772|   114k|        }
 4773|   114k|    }();
 4774|   114k|    using src_type = decltype(src);
 4775|       |
 4776|   114k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|   114k|    else {
 4789|   114k|        const auto view = src.view();
 4790|   114k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|   114k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 3.36k, False: 111k]
  ------------------
 4793|  3.36k|            return unexpected_scan_error(
 4794|  3.36k|                scan_error::invalid_scanned_value,
 4795|  3.36k|                "Invalid encoding in scanned string_view");
 4796|  3.36k|        }
 4797|       |
 4798|   111k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   111k|    static_cast<    \
  |  |  929|   111k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|   114k|    }
 4800|   114k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|   114k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|   114k|        else {
 4770|   114k|            return make_contiguous_buffer(
 4771|   114k|                ranges::subrange{range.begin(), result});
 4772|   114k|        }
 4773|   114k|    }();
_ZN3scn2v34impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  2.96k|    {
 5051|  2.96k|        auto it = read_source_impl(range, {specs});
 5052|  2.96k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  2.96k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 860]
  |  |  ------------------
  ------------------
 5053|  2.10k|            return unexpected(it.error());
 5054|  2.10k|        }
 5055|       |
 5056|    860|        return read_string_view_impl(range, *it, value);
 5057|  2.96k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|    860|{
 4762|    860|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|    860|    auto src = [&]() {
 4765|    860|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|    860|            return make_contiguous_buffer(
 4767|    860|                ranges::subrange{range.begin().base(), result.base()});
 4768|    860|        }
 4769|    860|        else {
 4770|    860|            return make_contiguous_buffer(
 4771|    860|                ranges::subrange{range.begin(), result});
 4772|    860|        }
 4773|    860|    }();
 4774|    860|    using src_type = decltype(src);
 4775|       |
 4776|    860|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|    860|    else {
 4789|    860|        const auto view = src.view();
 4790|    860|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|    860|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 860]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|    860|        return SCN_MOVE(result);
  ------------------
  |  |  928|    860|    static_cast<    \
  |  |  929|    860|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|    860|    }
 4800|    860|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|    860|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|    860|        else {
 4770|    860|            return make_contiguous_buffer(
 4771|    860|                ranges::subrange{range.begin(), result});
 4772|    860|        }
 4773|    860|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   152k|{
 2940|   152k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 152k, False: 0]
  ------------------
 2941|   152k|        auto it = read_while_classic_space(range);
 2942|   152k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   152k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.58k, False: 151k]
  |  |  ------------------
  ------------------
 2944|  1.58k|            return unexpected(e);
 2945|  1.58k|        }
 2946|       |
 2947|   151k|        return it;
 2948|   152k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   152k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   152k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   152k|    else {
 2114|   152k|        auto it = range.begin();
 2115|       |
 2116|   152k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|   152k|            auto seg = get_contiguous_beginning(range);
 2118|   152k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|   152k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2119:17): [True: 11.3k, False: 141k]
  ------------------
 2120|  11.3k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|  11.3k|            }
 2122|   141k|            ranges::advance(it, seg.size());
 2123|   141k|        }
 2124|       |
 2125|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   152k|            return detail::is_cp_space(cp);
 2127|   152k|        });
 2128|   152k|    }
 2129|   152k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   141k|        : m_fptr([](storage fn,
  743|   141k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   141k|              cvref<T> obj = *get<T>(fn);
  745|   141k|              if constexpr (std::is_void_v<R>) {
  746|   141k|                  obj(static_cast<decltype(args)>(args)...);
  747|   141k|              }
  748|   141k|              else {
  749|   141k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   141k|              }
  751|   141k|          }),
  752|   141k|          m_storage(std::addressof(f))
  753|   141k|    {
  754|   141k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   626k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   626k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   626k|              else {
  749|   626k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   626k|              }
  751|   626k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   626k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   626k|        else if constexpr (std::is_object_v<T>) {
  688|   626k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   626k|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|   626k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   626k|            return detail::is_cp_space(cp);
 2127|   626k|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   141k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   141k|        {
  662|   141k|        }
_ZN3scn2v34impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  980|   887k|{
  981|       |    if constexpr (ranges::contiguous_range<Range> &&
  982|       |                  ranges::sized_range<Range>) {
  983|       |        return true;
  984|       |    }
  985|       |    else if constexpr (std::is_same_v<
  986|       |                           ranges::const_iterator_t<Range>,
  987|       |                           typename detail::basic_scan_buffer<
  988|   887k|                               detail::char_t<Range>>::forward_iterator>) {
  989|   887k|        auto beg = r.begin();
  990|   887k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (990:13): [True: 887k, False: 0]
  ------------------
  991|   887k|            return false;
  992|   887k|        }
  993|       |        if constexpr (ranges::common_range<Range>) {
  994|       |            return beg.contiguous_segment().end() ==
  995|       |                   ranges::end(r).contiguous_segment().end();
  996|       |        }
  997|      0|        else {
  998|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (998:17): [True: 0, False: 0]
  ------------------
  999|      0|                return beg.contiguous_segment().end() ==
 1000|      0|                       beg.parent()->current_view().end();
 1001|      0|            }
 1002|      0|            return true;
 1003|      0|        }
 1004|       |    }
 1005|       |    else {
 1006|       |        return false;
 1007|       |    }
 1008|   887k|}
_ZNK3scn2v34impl12function_refIFbwES3_EclEw:
  762|  27.4k|    {
  763|  27.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  |  930|  27.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  27.4k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  12.9k|        : m_fptr([](storage fn,
  743|  12.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  12.9k|              cvref<T> obj = *get<T>(fn);
  745|  12.9k|              if constexpr (std::is_void_v<R>) {
  746|  12.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  12.9k|              }
  748|  12.9k|              else {
  749|  12.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  12.9k|              }
  751|  12.9k|          }),
  752|  12.9k|          m_storage(std::addressof(f))
  753|  12.9k|    {
  754|  12.9k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  13.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  13.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  13.7k|              else {
  749|  13.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  13.7k|              }
  751|  13.7k|          }),
_ZN3scn2v34impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  13.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  13.7k|        else if constexpr (std::is_object_v<T>) {
  688|  13.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  13.7k|    }
_ZN3scn2v34impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  12.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  12.9k|        {
  662|  12.9k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_b:
 6025|   357k|    {
 6026|   357k|        const bool need_skipped_width =
 6027|   357k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 357k]
  |  Branch (6027:33): [True: 0, False: 357k]
  ------------------
 6028|   357k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   357k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 357k]
  ------------------
 6032|   357k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 357k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   357k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 357k, False: 0]
  |  Branch (6036:56): [True: 353k, False: 4.30k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   353k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 353k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   705k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   353k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   353k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   353k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   353k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 352k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.17k|    }                                                  \
  |  |  |  | 3667|   353k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   352k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   705k|                            make_eof_scan_error));
 6047|       |
 6048|   705k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 352k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   352k|            return result_type{it, 0};
 6056|   705k|        }
 6057|       |
 6058|  4.30k|        return result_type{rng.begin(), 0};
 6059|   357k|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1963|  4.30k|{
 1964|  4.30k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  4.30k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 1944|  4.30k|{
 1945|       |    if constexpr (ranges::common_range<Range>) {
 1946|       |        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|  4.30k|    else {
 1949|  4.30k|        auto first = range.begin();
 1950|  4.63k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (1950:16): [True: 4.57k, False: 60]
  ------------------
 1951|  4.57k|            if (pred(*first)) {
  ------------------
  |  Branch (1951:17): [True: 4.24k, False: 330]
  ------------------
 1952|  4.24k|                return first;
 1953|  4.24k|            }
 1954|  4.57k|        }
 1955|     60|        return first;
 1956|  4.30k|    }
 1957|  4.30k|}
_ZNK3scn2v36ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   349k|    {
  108|   349k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   349k|    }
_ZN3scn2v36ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   349k|    {
   94|   349k|        iter_difference_t<I> counter{0};
   95|  10.5M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 10.1M, False: 349k]
  ------------------
   96|  10.1M|            ++i;
   97|  10.1M|            ++counter;
   98|  10.1M|        }
   99|   349k|        return counter;
  100|   349k|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  949|  1.41M|{
  950|  1.41M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  1.41M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.93k, False: 1.40M]
  |  |  ------------------
  ------------------
  951|  2.93k|        return eof_error::eof;
  952|  2.93k|    }
  953|  1.40M|    return eof_error::good;
  954|  1.41M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  943|  29.0M|{
  944|  29.0M|    return is_range_eof(r.begin(), r.end());
  945|  29.0M|}
_ZN3scn2v34impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  927|  29.0M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  29.0M|    {
  937|  29.0M|        return begin == end;
  938|  29.0M|    }
  939|  29.0M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1670|   880k|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|       |                  ranges::sized_range<Range>) {
 1674|       |        return string_view_wrapper{SCN_FWD(range)};
 1675|       |    }
 1676|   880k|    else {
 1677|   880k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  |  930|   880k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1678|   880k|    }
 1679|   880k|}
_ZN3scn2v34impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1524|   880k|    {
 1525|   880k|        emplace_range(SCN_FWD(range));
  ------------------
  |  |  930|   880k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1526|   880k|    }
_ZN3scn2v34impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1608|   880k|    {
 1609|   880k|        using value_t = ranges::range_value_t<Range>;
 1610|       |
 1611|       |        if constexpr (ranges::borrowed_range<Range> &&
 1612|       |                      ranges::contiguous_range<Range> &&
 1613|       |                      ranges::sized_range<Range>) {
 1614|       |            m_storage.reset();
 1615|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1616|       |        }
 1617|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1618|       |                                          std::basic_string<CharT>>) {
 1619|       |            m_storage.emplace(SCN_FWD(range));
 1620|       |            m_view = string_view_type{*m_storage};
 1621|       |        }
 1622|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1623|       |                                          typename detail::basic_scan_buffer<
 1624|       |                                              value_t>::forward_iterator> &&
 1625|   880k|                           ranges::common_range<Range>) {
 1626|   880k|            auto beg_seg = range.begin().contiguous_segment();
 1627|   880k|            auto end_seg = range.end().contiguous_segment();
 1628|   880k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  |  859|   880k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.16k, False: 876k]
  |  |  ------------------
  ------------------
 1629|   880k|                             detail::to_address(end_seg.end()))) {
 1630|  4.16k|                auto& str = m_storage.emplace();
 1631|  4.16k|                str.reserve(range.end().position() - range.begin().position());
 1632|  4.16k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1633|  4.16k|                m_view = string_view_type{str};
 1634|  4.16k|                return;
 1635|  4.16k|            }
 1636|       |
 1637|   876k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1638|   876k|                                                            end_seg.data());
 1639|   876k|            m_storage.reset();
 1640|       |        }
 1641|       |        else {
 1642|       |            auto& str = m_storage.emplace();
 1643|       |            if constexpr (ranges::sized_range<Range>) {
 1644|       |                str.reserve(range.size());
 1645|       |            }
 1646|       |            if constexpr (ranges::common_range<Range>) {
 1647|       |                std::copy(ranges::begin(range), ranges::end(range),
 1648|       |                          std::back_inserter(str));
 1649|       |            }
 1650|       |            else {
 1651|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1652|       |                     ++it) {
 1653|       |                    str.push_back(*it);
 1654|       |                }
 1655|       |            }
 1656|       |            m_view = string_view_type{str};
 1657|       |        }
 1658|   880k|    }
_ZNK3scn2v34impl24contiguous_range_factoryIwE4viewEv:
 1569|  1.75M|    {
 1570|  1.75M|        return m_view;
 1571|  1.75M|    }
_ZN3scn2v34impl24contiguous_range_factoryIwED2Ev:
 1559|   880k|    ~contiguous_range_factory() = default;
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESK_bll:
 6067|   348k|    {
 6068|   348k|        const bool need_skipped_width =
 6069|   348k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 348k]
  |  Branch (6069:33): [True: 0, False: 348k]
  ------------------
 6070|   348k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   348k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 348k]
  ------------------
 6073|   348k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 348k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   348k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 348k, False: 0]
  ------------------
 6082|   348k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 68, False: 348k]
  ------------------
 6083|   348k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 68]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|     68|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 68]
  ------------------
 6085|     68|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   348k|        return result_type{rng.begin(), 0};
 6107|   348k|    }
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1886|  55.2M|{
 1887|  55.2M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  55.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  55.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  55.2M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  55.2M|    auto it = range.begin();
 1891|  55.2M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  55.2M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  55.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 55.2M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  55.2M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 55.2M, False: 0]
  ------------------
 1900|  55.2M|        ++it;
 1901|  55.2M|        return {it, string_type(1, *range.begin())};
 1902|  55.2M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  55.2M|}
_ZN3scn2v34impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  943|  58.0M|{
  944|  58.0M|    return is_range_eof(r.begin(), r.end());
  945|  58.0M|}
_ZN3scn2v34impl12is_range_eofIPKwS4_EEbT_T0_:
  927|  58.0M|{
  928|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  929|       |    if constexpr (ranges::contiguous_iterator<I> ||
  930|       |                  (ranges::random_access_iterator<I> &&
  931|       |                   detail::can_make_address_from_iterator<I>)) {
  932|       |        return detail::to_address(begin) == detail::to_address(end);
  933|       |    }
  934|       |    else
  935|       |#endif
  936|  58.0M|    {
  937|  58.0M|        return begin == end;
  938|  58.0M|    }
  939|  58.0M|}
_ZNK3scn2v34impl27read_code_point_into_resultIPKwwE8is_validEv:
 1877|  55.2M|    {
 1878|  55.2M|        return !codepoint.empty();
 1879|  55.2M|    }
_ZN3scn2v34impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  949|  2.82M|{
  950|  2.82M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  |  859|  2.82M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 5.87k, False: 2.81M]
  |  |  ------------------
  ------------------
  951|  5.87k|        return eof_error::eof;
  952|  5.87k|    }
  953|  2.81M|    return eof_error::good;
  954|  2.82M|}
_ZN3scn2v34impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1670|  1.76M|{
 1671|       |    if constexpr (ranges::borrowed_range<Range> &&
 1672|       |                  ranges::contiguous_range<Range> &&
 1673|  1.76M|                  ranges::sized_range<Range>) {
 1674|  1.76M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  |  930|  1.76M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1675|       |    }
 1676|       |    else {
 1677|       |        return contiguous_range_factory{SCN_FWD(range)};
 1678|       |    }
 1679|  1.76M|}
_ZN3scn2v34impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1476|  1.76M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1477|  1.76M|    {
 1478|  1.76M|    }
_ZNK3scn2v34impl19string_view_wrapperIwE4viewEv:
 1490|  2.63M|    {
 1491|  2.63M|        return sv;
 1492|  2.63M|    }
_ZN3scn2v34impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1963|  8.60k|{
 1964|  8.60k|    return read_until_code_unit(range, std::not_fn(pred));
 1965|  8.60k|}
_ZN3scn2v34impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 1944|  8.60k|{
 1945|  8.60k|    if constexpr (ranges::common_range<Range>) {
 1946|  8.60k|        return std::find_if(range.begin(), range.end(), pred);
 1947|       |    }
 1948|       |    else {
 1949|       |        auto first = range.begin();
 1950|       |        for (; first != range.end(); ++first) {
 1951|       |            if (pred(*first)) {
 1952|       |                return first;
 1953|       |            }
 1954|       |        }
 1955|       |        return first;
 1956|       |    }
 1957|  8.60k|}
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 2939|  1.76M|{
 2940|  1.76M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 1.76M, False: 0]
  ------------------
 2941|  1.76M|        auto it = read_while_classic_space(range);
 2942|  1.76M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|  1.76M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.76M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.92k, False: 1.76M]
  |  |  ------------------
  ------------------
 2944|  2.92k|            return unexpected(e);
 2945|  2.92k|        }
 2946|       |
 2947|  1.76M|        return it;
 2948|  1.76M|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|  1.76M|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2104|  1.76M|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|  1.76M|    else {
 2114|  1.76M|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|  1.76M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  1.76M|            return detail::is_cp_space(cp);
 2127|  1.76M|        });
 2128|  1.76M|    }
 2129|  1.76M|}
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2069|  1.76M|{
 2070|  1.76M|    return read_until_code_point(range, std::not_fn(pred));
 2071|  1.76M|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2048|  3.52M|{
 2049|  3.52M|    auto it = range.begin();
 2050|  55.2M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 55.2M, False: 15.1k]
  ------------------
 2051|  55.2M|        const auto val =
 2052|  55.2M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  55.2M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  55.2M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 55.2M, False: 0]
  |  |  ------------------
  ------------------
 2054|  55.2M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  55.2M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  55.2M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 3.50M, False: 51.7M]
  ------------------
 2057|  3.50M|                return it;
 2058|  3.50M|            }
 2059|  55.2M|        }
 2060|  51.7M|        it = val.iterator;
 2061|  51.7M|    }
 2062|       |
 2063|  15.1k|    return it;
 2064|  3.52M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.76M|        : m_fptr([](storage fn,
  743|  1.76M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.76M|              cvref<T> obj = *get<T>(fn);
  745|  1.76M|              if constexpr (std::is_void_v<R>) {
  746|  1.76M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.76M|              }
  748|  1.76M|              else {
  749|  1.76M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.76M|              }
  751|  1.76M|          }),
  752|  1.76M|          m_storage(std::addressof(f))
  753|  1.76M|    {
  754|  1.76M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  4.02M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.02M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.02M|              else {
  749|  4.02M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.02M|              }
  751|  4.02M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  4.02M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  4.02M|        else if constexpr (std::is_object_v<T>) {
  688|  4.02M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.02M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2125|  4.02M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  4.02M|            return detail::is_cp_space(cp);
 2127|  4.02M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.76M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.76M|        {
  662|  1.76M|        }
_ZNK3scn2v34impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1574|   874k|    {
 1575|   874k|        return m_storage.has_value();
 1576|   874k|    }
_ZNR3scn2v34impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1579|  1.42k|    {
 1580|  1.42k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  |  924|  1.42k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.42k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1581|  1.42k|        return *m_storage;
 1582|  1.42k|    }
_ZN3scn2v34impl13string_readerIwEC2Ev:
 5194|  2.67M|    constexpr string_reader() = default;
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3028|  1.08M|    {
 3029|  1.08M|        reader_error_handler eh{};
 3030|  1.08M|        get_derived().check_specs_impl(specs, eh);
 3031|  1.08M|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  |  859|  1.08M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 12.6k, False: 1.07M]
  |  |  ------------------
  ------------------
 3032|  12.6k|            return {scan_error::invalid_format_string, eh.m_msg};
 3033|  12.6k|        }
 3034|  1.07M|        return {};
 3035|  1.08M|    }
_ZN3scn2v34impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3039|  1.08M|    {
 3040|  1.08M|        return static_cast<Derived&>(*this);
 3041|  1.08M|    }
_ZN3scn2v34impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5198|  1.08M|    {
 5199|  1.08M|        detail::check_string_type_specs(specs, eh);
 5200|       |
 5201|  1.08M|        SCN_GCC_PUSH
 5202|  1.08M|        SCN_GCC_IGNORE("-Wswitch")
 5203|  1.08M|        SCN_GCC_IGNORE("-Wswitch-default")
 5204|       |
 5205|  1.08M|        SCN_CLANG_PUSH
 5206|  1.08M|        SCN_CLANG_IGNORE("-Wswitch")
 5207|  1.08M|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5208|       |
 5209|  1.08M|        switch (specs.type) {
  ------------------
  |  Branch (5209:17): [True: 0, False: 1.08M]
  ------------------
 5210|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5210:13): [True: 0, False: 1.08M]
  ------------------
 5211|      0|                m_type = reader_type::word;
 5212|      0|                break;
 5213|       |
 5214|  1.05M|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5214:13): [True: 1.05M, False: 25.5k]
  ------------------
 5215|  1.05M|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5215:21): [True: 0, False: 1.05M]
  ------------------
 5216|  1.05M|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5216:21): [True: 0, False: 1.05M]
  ------------------
 5217|      0|                    m_type = reader_type::custom_word;
 5218|      0|                }
 5219|  1.05M|                else {
 5220|  1.05M|                    m_type = reader_type::word;
 5221|  1.05M|                }
 5222|  1.05M|                break;
 5223|      0|            }
 5224|       |
 5225|  12.6k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5225:13): [True: 12.6k, False: 1.07M]
  ------------------
 5226|  12.6k|                m_type = reader_type::character;
 5227|  12.6k|                break;
 5228|       |
 5229|  12.9k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5229:13): [True: 12.9k, False: 1.07M]
  ------------------
 5230|  12.9k|                m_type = reader_type::character_set;
 5231|  12.9k|                break;
 5232|       |
 5233|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5233:13): [True: 0, False: 1.08M]
  ------------------
 5234|      0|                m_type = reader_type::regex;
 5235|      0|                break;
 5236|       |
 5237|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5237:13): [True: 0, False: 1.08M]
  ------------------
 5238|      0|                m_type = reader_type::regex_escaped;
 5239|      0|                break;
 5240|  1.08M|        }
 5241|       |
 5242|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5243|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5244|  1.08M|    }
_ZNK3scn2v34impl13string_readerIwE19skip_ws_before_readEv:
 5247|  3.70M|    {
 5248|  3.70M|        return m_type == reader_type::word;
 5249|  3.70M|    }
_ZN3scn2v34impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1131|  2.64M|{
 1132|  2.64M|    auto it = src.begin();
 1133|  75.4M|    while (it != src.end()) {
  ------------------
  |  Branch (1133:12): [True: 72.8M, False: 2.61M]
  ------------------
 1134|  72.8M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1135|  72.8M|        if (len == 0) {
  ------------------
  |  Branch (1135:13): [True: 0, False: 72.8M]
  ------------------
 1136|      0|            return false;
 1137|      0|        }
 1138|  72.8M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1138:13): [True: 0, False: 72.8M]
  ------------------
 1139|      0|            return false;
 1140|      0|        }
 1141|  72.8M|        const auto cp = detail::decode_code_point_exhaustive(
 1142|  72.8M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1143|  72.8M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1143:13): [True: 22.7k, False: 72.8M]
  ------------------
 1144|  22.7k|            return false;
 1145|  22.7k|        }
 1146|  72.8M|        it += len;
 1147|  72.8M|    }
 1148|  2.61M|    return true;
 1149|  2.64M|}
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5091|  12.9k|        {
 5092|  12.9k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5092:17): [True: 12.9k, False: 0]
  ------------------
 5093|  12.9k|                return {};
 5094|  12.9k|            }
 5095|       |
 5096|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5097|      0|            auto it = detail::to_address(charset_string.begin());
 5098|      0|            auto set = detail::parse_presentation_set(
 5099|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5100|      0|            if (SCN_UNLIKELY(!nonascii)) {
  ------------------
  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 5101|      0|                return nonascii.err;
 5102|      0|            }
 5103|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5104|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  |  925|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5105|       |
 5106|      0|            std::sort(nonascii.extra_ranges.begin(),
 5107|      0|                      nonascii.extra_ranges.end());
 5108|      0|            return {};
 5109|      0|        }
_ZNK3scn2v34impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5064|  7.92k|        {
 5065|  7.92k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  |  924|  7.92k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  7.92k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5066|  7.92k|            const auto val =
 5067|  7.92k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5068|  7.92k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5069|  7.92k|                    (val % 8)) &
 5070|  7.92k|                   1u;
 5071|  7.92k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5117|  13.7k|        {
 5118|  13.7k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5118:17): [True: 5.79k, False: 7.92k]
  ------------------
 5119|  5.79k|                return false;
 5120|  5.79k|            }
 5121|       |
 5122|  7.92k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5123|  13.7k|        }
_ZN3scn2v34impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5061|  12.9k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2075|   880k|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|   880k|    else {
 2085|   880k|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|   880k|        return read_until_code_point(
 2097|   880k|            ranges::subrange{it, range.end()},
 2098|   880k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|   880k|    }
 2100|   880k|}
_ZN3scn2v34impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2048|  1.76M|{
 2049|  1.76M|    auto it = range.begin();
 2050|  27.6M|    while (it != range.end()) {
  ------------------
  |  Branch (2050:12): [True: 27.6M, False: 7.59k]
  ------------------
 2051|  27.6M|        const auto val =
 2052|  27.6M|            read_code_point_into(ranges::subrange{it, range.end()});
 2053|  27.6M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  |  858|  27.6M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (858:25): [True: 27.6M, False: 0]
  |  |  ------------------
  ------------------
 2054|  27.6M|            const auto cp = detail::decode_code_point_exhaustive(
 2055|  27.6M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2056|  27.6M|            if (pred(cp)) {
  ------------------
  |  Branch (2056:17): [True: 1.75M, False: 25.8M]
  ------------------
 2057|  1.75M|                return it;
 2058|  1.75M|            }
 2059|  27.6M|        }
 2060|  25.8M|        it = val.iterator;
 2061|  25.8M|    }
 2062|       |
 2063|  7.59k|    return it;
 2064|  1.76M|}
_ZN3scn2v34impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1886|  27.6M|{
 1887|  27.6M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  |  924|  27.6M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  27.6M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1888|  27.6M|    using string_type = std::basic_string<detail::char_t<Range>>;
 1889|       |
 1890|  27.6M|    auto it = range.begin();
 1891|  27.6M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1892|       |
 1893|  27.6M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  |  859|  27.6M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 27.6M]
  |  |  ------------------
  ------------------
 1894|      0|        ++it;
 1895|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 1896|      0|        return {it, {}};
 1897|      0|    }
 1898|       |
 1899|  27.6M|    if (len == 1) {
  ------------------
  |  Branch (1899:9): [True: 27.6M, False: 0]
  ------------------
 1900|  27.6M|        ++it;
 1901|  27.6M|        return {it, string_type(1, *range.begin())};
 1902|  27.6M|    }
 1903|       |
 1904|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 1905|      0|    return {it, string_type{range.begin(), it}};
 1906|  27.6M|}
_ZNK3scn2v34impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1877|  27.6M|    {
 1878|  27.6M|        return !codepoint.empty();
 1879|  27.6M|    }
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   880k|        : m_fptr([](storage fn,
  743|   880k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   880k|              cvref<T> obj = *get<T>(fn);
  745|   880k|              if constexpr (std::is_void_v<R>) {
  746|   880k|                  obj(static_cast<decltype(args)>(args)...);
  747|   880k|              }
  748|   880k|              else {
  749|   880k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   880k|              }
  751|   880k|          }),
  752|   880k|          m_storage(std::addressof(f))
  753|   880k|    {
  754|   880k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  25.6M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  25.6M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  25.6M|              else {
  749|  25.6M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  25.6M|              }
  751|  25.6M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  25.6M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  25.6M|        else if constexpr (std::is_object_v<T>) {
  688|  25.6M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  25.6M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2098|  25.6M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   880k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   880k|        {
  662|   880k|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5141|  4.30k|    {
 5142|  4.30k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  4.30k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  4.30k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 4.30k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  4.30k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  4.30k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 4.30k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  4.30k|        const auto cb = [&](SourceCharT ch) {
 5165|  4.30k|            return cb_wrapper.on_ascii_only(ch);
 5166|  4.30k|        };
 5167|       |
 5168|  4.30k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 4.30k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  4.30k|        auto it = read_while_code_unit(range, cb);
 5173|  4.30k|        return check_nonempty(it, range);
 5174|  4.30k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5179|  4.30k|    {
 5180|  4.30k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 4.20k, False: 98]
  ------------------
 5181|  4.20k|            return unexpected_scan_error(
 5182|  4.20k|                scan_error::invalid_scanned_value,
 5183|  4.20k|                "No characters matched in [character set]");
 5184|  4.20k|        }
 5185|       |
 5186|     98|        return it;
 5187|  4.30k|    }
_ZN3scn2v34impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2069|   881k|{
 2070|   881k|    return read_until_code_point(range, std::not_fn(pred));
 2071|   881k|}
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  4.30k|        : m_fptr([](storage fn,
  743|  4.30k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.30k|              cvref<T> obj = *get<T>(fn);
  745|  4.30k|              if constexpr (std::is_void_v<R>) {
  746|  4.30k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.30k|              }
  748|  4.30k|              else {
  749|  4.30k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.30k|              }
  751|  4.30k|          }),
  752|  4.30k|          m_storage(std::addressof(f))
  753|  4.30k|    {
  754|  4.30k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  4.57k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.57k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.57k|              else {
  749|  4.57k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.57k|              }
  751|  4.57k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.57k|    {
  684|  4.57k|        if constexpr (std::is_const_v<T>) {
  685|  4.57k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.57k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5164|  4.57k|        const auto cb = [&](SourceCharT ch) {
 5165|  4.57k|            return cb_wrapper.on_ascii_only(ch);
 5166|  4.57k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  4.30k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.30k|        {
  667|  4.30k|        }
_ZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2075|  1.76M|{
 2076|       |    if constexpr (ranges::contiguous_range<Range> &&
 2077|       |                  ranges::sized_range<Range> &&
 2078|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2079|       |        auto buf = make_contiguous_buffer(range);
 2080|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2081|       |        return ranges::next(range.begin(),
 2082|       |                            ranges::distance(buf.view().begin(), it));
 2083|       |    }
 2084|  1.76M|    else {
 2085|  1.76M|        auto it = range.begin();
 2086|       |
 2087|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2088|       |            auto seg = get_contiguous_beginning(range);
 2089|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2090|       |                seg_it != seg.end()) {
 2091|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2092|       |            }
 2093|       |            ranges::advance(it, seg.size());
 2094|       |        }
 2095|       |
 2096|  1.76M|        return read_until_code_point(
 2097|  1.76M|            ranges::subrange{it, range.end()},
 2098|  1.76M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2099|  1.76M|    }
 2100|  1.76M|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.76M|        : m_fptr([](storage fn,
  743|  1.76M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.76M|              cvref<T> obj = *get<T>(fn);
  745|  1.76M|              if constexpr (std::is_void_v<R>) {
  746|  1.76M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.76M|              }
  748|  1.76M|              else {
  749|  1.76M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.76M|              }
  751|  1.76M|          }),
  752|  1.76M|          m_storage(std::addressof(f))
  753|  1.76M|    {
  754|  1.76M|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  51.2M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  51.2M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  51.2M|              else {
  749|  51.2M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  51.2M|              }
  751|  51.2M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  51.2M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  51.2M|        else if constexpr (std::is_object_v<T>) {
  688|  51.2M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  51.2M|    }
_ZZN3scn2v34impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2098|  51.2M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.76M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.76M|        {
  662|  1.76M|        }
_ZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5141|  8.60k|    {
 5142|  8.60k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5143|  8.60k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5144|       |
 5145|  8.60k|        if (auto e = helper.handle_nonascii(); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  8.60k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 8.60k]
  |  |  ------------------
  ------------------
 5146|      0|            return unexpected(e);
 5147|      0|        }
 5148|       |
 5149|  8.60k|        read_source_callback cb_wrapper{helper};
 5150|       |
 5151|  8.60k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5151:13): [True: 0, False: 8.60k]
  ------------------
 5152|      0|            const auto cb = [&](char32_t cp) {
 5153|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5154|      0|            };
 5155|       |
 5156|      0|            if (is_inverted) {
  ------------------
  |  Branch (5156:17): [True: 0, False: 0]
  ------------------
 5157|      0|                auto it = read_until_code_point(range, cb);
 5158|      0|                return check_nonempty(it, range);
 5159|      0|            }
 5160|      0|            auto it = read_while_code_point(range, cb);
 5161|      0|            return check_nonempty(it, range);
 5162|      0|        }
 5163|       |
 5164|  8.60k|        const auto cb = [&](SourceCharT ch) {
 5165|  8.60k|            return cb_wrapper.on_ascii_only(ch);
 5166|  8.60k|        };
 5167|       |
 5168|  8.60k|        if (is_inverted) {
  ------------------
  |  Branch (5168:13): [True: 0, False: 8.60k]
  ------------------
 5169|      0|            auto it = read_until_code_unit(range, cb);
 5170|      0|            return check_nonempty(it, range);
 5171|      0|        }
 5172|  8.60k|        auto it = read_while_code_unit(range, cb);
 5173|  8.60k|        return check_nonempty(it, range);
 5174|  8.60k|    }
_ZN3scn2v34impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5179|  8.60k|    {
 5180|  8.60k|        if (it == range.begin()) {
  ------------------
  |  Branch (5180:13): [True: 8.40k, False: 196]
  ------------------
 5181|  8.40k|            return unexpected_scan_error(
 5182|  8.40k|                scan_error::invalid_scanned_value,
 5183|  8.40k|                "No characters matched in [character set]");
 5184|  8.40k|        }
 5185|       |
 5186|    196|        return it;
 5187|  8.60k|    }
_ZN3scn2v34impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  8.60k|        : m_fptr([](storage fn,
  743|  8.60k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  8.60k|              cvref<T> obj = *get<T>(fn);
  745|  8.60k|              if constexpr (std::is_void_v<R>) {
  746|  8.60k|                  obj(static_cast<decltype(args)>(args)...);
  747|  8.60k|              }
  748|  8.60k|              else {
  749|  8.60k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  8.60k|              }
  751|  8.60k|          }),
  752|  8.60k|          m_storage(std::addressof(f))
  753|  8.60k|    {
  754|  8.60k|    }
_ZZN3scn2v34impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  9.14k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.14k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.14k|              else {
  749|  9.14k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.14k|              }
  751|  9.14k|          }),
_ZN3scn2v34impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.14k|    {
  684|  9.14k|        if constexpr (std::is_const_v<T>) {
  685|  9.14k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.14k|    }
_ZZNK3scn2v34impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5164|  9.14k|        const auto cb = [&](SourceCharT ch) {
 5165|  9.14k|            return cb_wrapper.on_ascii_only(ch);
 5166|  9.14k|        };
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  8.60k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  8.60k|        {
  667|  8.60k|        }
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6181|   361k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|       |                          basic_contiguous_scan_context<char_type>>) {
 6186|       |            auto rd = make_reader<T, char_type>();
 6187|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6188|       |                return unexpected(e);
 6189|       |            }
 6190|       |
 6191|       |            return impl(rd, range, value);
 6192|       |        }
 6193|   361k|        else if constexpr (!detail::is_type_disabled<T>) {
 6194|   361k|            auto rd = make_reader<T, char_type>();
 6195|   361k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 357k]
  |  |  ------------------
  ------------------
 6196|  4.20k|                return unexpected(e);
 6197|  4.20k|            }
 6198|       |
 6199|   357k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6199:17): [True: 357k, False: 0]
  |  Branch (6199:50): [True: 0, False: 0]
  ------------------
 6200|   357k|                specs.width != 0) {
  ------------------
  |  Branch (6200:17): [True: 0, False: 0]
  ------------------
 6201|   357k|                return impl(rd, range, value);
 6202|   357k|            }
 6203|       |
 6204|      0|            auto crange = get_as_contiguous(range);
 6205|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6206|      0|            return ranges::next(range.begin(),
 6207|      0|                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   361k|    }
_ZN3scn2v34impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5797|  1.78M|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|       |                       std::is_same_v<T, std::wstring_view>) {
 5812|       |        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|  1.78M|                       std::is_same_v<T, std::wstring>) {
 5816|  1.78M|        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|  1.78M|}
_ZN3scn2v34impl10arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 6112|   357k|    {
 6113|   357k|        const bool need_skipped_width =
 6114|   357k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 357k]
  |  Branch (6114:33): [True: 0, False: 357k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   357k|        auto it = rng.begin();
 6118|   357k|        std::ptrdiff_t prefix_width = 0;
 6119|   357k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 357k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   357k|        else {
 6127|   357k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   357k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 356k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.17k|    }                                                  \
  |  |  |  | 3667|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   356k|            std::tie(it, prefix_width) = prefix_result;
 6129|   356k|        }
 6130|   356k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   356k|        std::ptrdiff_t value_width = 0;
 6134|   356k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 356k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   356k|        else {
 6150|   356k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   356k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   356k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.23k, False: 349k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.23k|    }                                                  \
  |  | 3667|   356k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   349k|                                             specs, value, loc));
 6152|       |
 6153|   349k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 349k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   349k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   349k|        std::ptrdiff_t postfix_width = 0;
 6162|   349k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 348k, False: 1.01k]
  ------------------
 6163|   348k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   348k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   348k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   348k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 348k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   348k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   348k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   348k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   348k|                                 value_width));
 6167|   348k|            std::tie(it, postfix_width) = postfix_result;
 6168|   348k|        }
 6169|       |
 6170|   349k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   349k|                                                 value_width, postfix_width);
 6172|   349k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 349k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   349k|        return it;
 6177|   349k|    }
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 2981|   872k|{
 2982|   872k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 2983|   872k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (2983:13): [True: 1.42k, False: 871k]
  ------------------
 2984|  1.42k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  |  928|  1.42k|    static_cast<    \
  |  |  929|  1.42k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2985|  1.42k|        }
 2986|   871k|        else {
 2987|   871k|            dest.assign(source.view());
 2988|   871k|        }
 2989|       |    }
 2990|       |    else {
 2991|       |        return transcode_impl(source.view(), dest);
 2992|       |    }
 2993|       |
 2994|   872k|    return {};
 2995|   872k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5265|   356k|    {
 5266|   356k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   356k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   356k|        return read_impl(range, specs, value);
 5268|   356k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5283|   356k|    {
 5284|   356k|        SCN_CLANG_PUSH
 5285|   356k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   356k|        switch (m_type) {
 5288|   352k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 352k, False: 4.30k]
  ------------------
 5289|   352k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 356k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 356k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  4.30k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 4.30k, False: 352k]
  ------------------
 5299|  4.30k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  4.30k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 356k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 356k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 356k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   356k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   356k|        }
 5320|       |
 5321|   356k|        SCN_CLANG_POP
 5322|   356k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4808|   880k|    {
 4809|   880k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   880k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4740|   880k|{
 4741|   880k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   880k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   880k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 7.57k, False: 872k]
  ------------------
 4745|  7.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  7.57k|                                     "Invalid encoding in scanned string");
 4747|  7.57k|    }
 4748|   872k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   872k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   872k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 872k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   872k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   872k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5036|  4.30k|    {
 5037|  4.30k|        auto it = read_source_impl(range, {specs});
 5038|  4.30k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 98]
  |  |  ------------------
  ------------------
 5039|  4.20k|            return unexpected(it.error());
 5040|  4.20k|        }
 5041|       |
 5042|     98|        return read_string_impl(range, *it, value);
 5043|  4.30k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4740|     98|{
 4741|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     98|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     98|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 98]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     98|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     98|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     98|    return SCN_MOVE(result);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     98|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5265|   356k|    {
 5266|   356k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   356k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   356k|        return read_impl(range, specs, value);
 5268|   356k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5283|   356k|    {
 5284|   356k|        SCN_CLANG_PUSH
 5285|   356k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   356k|        switch (m_type) {
 5288|   352k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 352k, False: 4.30k]
  ------------------
 5289|   352k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 356k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 356k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  4.30k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 4.30k, False: 352k]
  ------------------
 5299|  4.30k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  4.30k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 356k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 356k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 356k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   356k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   356k|        }
 5320|       |
 5321|   356k|        SCN_CLANG_POP
 5322|   356k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4808|   880k|    {
 4809|   880k|        return read_string_impl(range, read_until_classic_space(range), value);
 4810|   880k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4740|   880k|{
 4741|   880k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|   880k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|   880k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 7.57k, False: 872k]
  ------------------
 4745|  7.57k|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|  7.57k|                                     "Invalid encoding in scanned string");
 4747|  7.57k|    }
 4748|   872k|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|   872k|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   872k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 872k]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|   872k|    return SCN_MOVE(result);
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|   872k|}
_ZN3scn2v34impl22transcode_if_necessaryIwwEENS0_10scan_errorENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS7_11char_traitsIS9_EENS7_9allocatorIS9_EEEE:
 3000|   872k|{
 3001|   872k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3002|   872k|        dest.assign(source.view());
 3003|       |    }
 3004|       |    else {
 3005|       |        return transcode_impl(source.view(), dest);
 3006|       |    }
 3007|       |
 3008|   872k|    return {};
 3009|   872k|}
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5036|  4.30k|    {
 5037|  4.30k|        auto it = read_source_impl(range, {specs});
 5038|  4.30k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 98]
  |  |  ------------------
  ------------------
 5039|  4.20k|            return unexpected(it.error());
 5040|  4.20k|        }
 5041|       |
 5042|     98|        return read_string_impl(range, *it, value);
 5043|  4.30k|    }
_ZN3scn2v34impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4740|     98|{
 4741|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4742|       |
 4743|     98|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4744|     98|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4744:9): [True: 0, False: 98]
  ------------------
 4745|      0|        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4746|      0|                                     "Invalid encoding in scanned string");
 4747|      0|    }
 4748|     98|    if (auto e = transcode_if_necessary(SCN_MOVE(src), value);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4749|     98|        SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|     98|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 0, False: 98]
  |  |  ------------------
  ------------------
 4750|      0|        return unexpected(e);
 4751|      0|    }
 4752|       |
 4753|     98|    return SCN_MOVE(result);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4754|     98|}
_ZN3scn2v34impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5797|   891k|{
 5798|       |    if constexpr (std::is_same_v<T, bool>) {
 5799|       |        return reader_impl_for_bool<CharT>{};
 5800|       |    }
 5801|       |    else if constexpr (std::is_same_v<T, char>) {
 5802|       |        return reader_impl_for_char<CharT>{};
 5803|       |    }
 5804|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5805|       |        return reader_impl_for_wchar<CharT>{};
 5806|       |    }
 5807|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5808|       |        return reader_impl_for_code_point<CharT>{};
 5809|       |    }
 5810|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5811|   891k|                       std::is_same_v<T, std::wstring_view>) {
 5812|   891k|        return reader_impl_for_string<CharT>{};
 5813|       |    }
 5814|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5815|       |                       std::is_same_v<T, std::wstring>) {
 5816|       |        return reader_impl_for_string<CharT>{};
 5817|       |    }
 5818|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5819|       |                       std::is_same_v<T, wregex_matches>) {
 5820|       |        return reader_impl_for_regex_matches<CharT>{};
 5821|       |    }
 5822|       |    else if constexpr (std::is_same_v<T, void*>) {
 5823|       |        return reader_impl_for_voidptr<CharT>{};
 5824|       |    }
 5825|       |    else if constexpr (std::is_floating_point_v<T>) {
 5826|       |        return reader_impl_for_float<CharT>{};
 5827|       |    }
 5828|       |    else if constexpr (std::is_integral_v<T> && !std::is_same_v<T, char> &&
 5829|       |                       !std::is_same_v<T, wchar_t> &&
 5830|       |                       !std::is_same_v<T, char32_t> &&
 5831|       |                       !std::is_same_v<T, bool>) {
 5832|       |        return reader_impl_for_int<CharT>{};
 5833|       |    }
 5834|       |    else {
 5835|       |        return reader_impl_for_monostate<CharT>{};
 5836|       |    }
 5837|   891k|}
_ZN3scn2v34impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5265|   356k|    {
 5266|   356k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   356k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5267|   356k|        return read_impl(range, specs, value);
 5268|   356k|    }
_ZN3scn2v34impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5283|   356k|    {
 5284|   356k|        SCN_CLANG_PUSH
 5285|   356k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5286|       |
 5287|   356k|        switch (m_type) {
 5288|   352k|            case reader_type::word:
  ------------------
  |  Branch (5288:13): [True: 352k, False: 4.30k]
  ------------------
 5289|   352k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5290|       |
 5291|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5291:13): [True: 0, False: 356k]
  ------------------
 5292|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5293|      0|                                                                   value);
 5294|       |
 5295|      0|            case reader_type::character:
  ------------------
  |  Branch (5295:13): [True: 0, False: 356k]
  ------------------
 5296|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5297|       |
 5298|  4.30k|            case reader_type::character_set:
  ------------------
  |  Branch (5298:13): [True: 4.30k, False: 352k]
  ------------------
 5299|  4.30k|                return character_set_reader_impl<SourceCharT>{}.read(
 5300|  4.30k|                    range, specs, value);
 5301|       |
 5302|      0|#if !SCN_DISABLE_REGEX
 5303|      0|            case reader_type::regex:
  ------------------
  |  Branch (5303:13): [True: 0, False: 356k]
  ------------------
 5304|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5305|      0|                    range, specs.charset_string<SourceCharT>(),
 5306|      0|                    specs.regexp_flags, value);
 5307|       |
 5308|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5308:13): [True: 0, False: 356k]
  ------------------
 5309|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5310|      0|                    range,
 5311|      0|                    get_unescaped_regex_pattern(
 5312|      0|                        specs.charset_string<SourceCharT>()),
 5313|      0|                    specs.regexp_flags, value);
 5314|      0|#endif
 5315|       |
 5316|      0|            default:
  ------------------
  |  Branch (5316:13): [True: 0, False: 356k]
  ------------------
 5317|      0|                SCN_EXPECT(false);
  ------------------
  |  |  924|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5318|   356k|                SCN_UNREACHABLE;
  ------------------
  |  |  887|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5319|   356k|        }
 5320|       |
 5321|   356k|        SCN_CLANG_POP
 5322|   356k|    }
_ZN3scn2v34impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4815|   880k|    {
 4816|   880k|        return read_string_view_impl(range, read_until_classic_space(range),
 4817|   880k|                                     value);
 4818|   880k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4761|   880k|{
 4762|   880k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|   880k|    auto src = [&]() {
 4765|   880k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|   880k|            return make_contiguous_buffer(
 4767|   880k|                ranges::subrange{range.begin().base(), result.base()});
 4768|   880k|        }
 4769|   880k|        else {
 4770|   880k|            return make_contiguous_buffer(
 4771|   880k|                ranges::subrange{range.begin(), result});
 4772|   880k|        }
 4773|   880k|    }();
 4774|   880k|    using src_type = decltype(src);
 4775|       |
 4776|   880k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|   880k|    else {
 4789|   880k|        const auto view = src.view();
 4790|   880k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|   880k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 7.57k, False: 872k]
  ------------------
 4793|  7.57k|            return unexpected_scan_error(
 4794|  7.57k|                scan_error::invalid_scanned_value,
 4795|  7.57k|                "Invalid encoding in scanned string_view");
 4796|  7.57k|        }
 4797|       |
 4798|   872k|        return SCN_MOVE(result);
  ------------------
  |  |  928|   872k|    static_cast<    \
  |  |  929|   872k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|   880k|    }
 4800|   880k|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4764|   880k|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|   880k|        else {
 4770|   880k|            return make_contiguous_buffer(
 4771|   880k|                ranges::subrange{range.begin(), result});
 4772|   880k|        }
 4773|   880k|    }();
_ZN3scn2v34impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5050|  4.30k|    {
 5051|  4.30k|        auto it = read_source_impl(range, {specs});
 5052|  4.30k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  |  859|  4.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 98]
  |  |  ------------------
  ------------------
 5053|  4.20k|            return unexpected(it.error());
 5054|  4.20k|        }
 5055|       |
 5056|     98|        return read_string_view_impl(range, *it, value);
 5057|  4.30k|    }
_ZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4761|     98|{
 4762|     98|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4763|       |
 4764|     98|    auto src = [&]() {
 4765|     98|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|     98|            return make_contiguous_buffer(
 4767|     98|                ranges::subrange{range.begin().base(), result.base()});
 4768|     98|        }
 4769|     98|        else {
 4770|     98|            return make_contiguous_buffer(
 4771|     98|                ranges::subrange{range.begin(), result});
 4772|     98|        }
 4773|     98|    }();
 4774|     98|    using src_type = decltype(src);
 4775|       |
 4776|     98|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4776:9): [Folded - Ignored]
  ------------------
 4777|      0|        return unexpected_scan_error(
 4778|      0|            scan_error::invalid_scanned_value,
 4779|      0|            "Cannot read a string_view from this source range (not "
 4780|      0|            "contiguous)");
 4781|      0|    }
 4782|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4783|       |        return unexpected_scan_error(scan_error::invalid_scanned_value,
 4784|       |                                     "Cannot read a string_view from "
 4785|       |                                     "this source range (would require "
 4786|       |                                     "transcoding)");
 4787|       |    }
 4788|     98|    else {
 4789|     98|        const auto view = src.view();
 4790|     98|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4791|       |
 4792|     98|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4792:13): [True: 0, False: 98]
  ------------------
 4793|      0|            return unexpected_scan_error(
 4794|      0|                scan_error::invalid_scanned_value,
 4795|      0|                "Invalid encoding in scanned string_view");
 4796|      0|        }
 4797|       |
 4798|     98|        return SCN_MOVE(result);
  ------------------
  |  |  928|     98|    static_cast<    \
  |  |  929|     98|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4799|     98|    }
 4800|     98|}
_ZZN3scn2v34impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4764|     98|    auto src = [&]() {
 4765|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4766|       |            return make_contiguous_buffer(
 4767|       |                ranges::subrange{range.begin().base(), result.base()});
 4768|       |        }
 4769|     98|        else {
 4770|     98|            return make_contiguous_buffer(
 4771|     98|                ranges::subrange{range.begin(), result});
 4772|     98|        }
 4773|     98|    }();
_ZN3scn2v34impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 2939|   881k|{
 2940|   881k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (2940:9): [True: 881k, False: 0]
  ------------------
 2941|   881k|        auto it = read_while_classic_space(range);
 2942|   881k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 2943|   881k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   881k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.46k, False: 880k]
  |  |  ------------------
  ------------------
 2944|  1.46k|            return unexpected(e);
 2945|  1.46k|        }
 2946|       |
 2947|   880k|        return it;
 2948|   881k|    }
 2949|       |
 2950|      0|    return read_while_classic_space(range);
 2951|   881k|}
_ZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2104|   881k|{
 2105|       |    if constexpr (ranges::contiguous_range<Range> &&
 2106|       |                  ranges::sized_range<Range> &&
 2107|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2108|       |        auto buf = make_contiguous_buffer(range);
 2109|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2110|       |        return ranges::next(range.begin(),
 2111|       |                            ranges::distance(buf.view().begin(), it));
 2112|       |    }
 2113|   881k|    else {
 2114|   881k|        auto it = range.begin();
 2115|       |
 2116|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2117|       |            auto seg = get_contiguous_beginning(range);
 2118|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2119|       |                seg_it != seg.end()) {
 2120|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2121|       |            }
 2122|       |            ranges::advance(it, seg.size());
 2123|       |        }
 2124|       |
 2125|   881k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|   881k|            return detail::is_cp_space(cp);
 2127|   881k|        });
 2128|   881k|    }
 2129|   881k|}
_ZN3scn2v34impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   881k|        : m_fptr([](storage fn,
  743|   881k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   881k|              cvref<T> obj = *get<T>(fn);
  745|   881k|              if constexpr (std::is_void_v<R>) {
  746|   881k|                  obj(static_cast<decltype(args)>(args)...);
  747|   881k|              }
  748|   881k|              else {
  749|   881k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   881k|              }
  751|   881k|          }),
  752|   881k|          m_storage(std::addressof(f))
  753|   881k|    {
  754|   881k|    }
_ZZN3scn2v34impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  2.01M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.01M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  2.01M|              else {
  749|  2.01M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.01M|              }
  751|  2.01M|          }),
_ZN3scn2v34impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  2.01M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  2.01M|        else if constexpr (std::is_object_v<T>) {
  688|  2.01M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  2.01M|    }
_ZZN3scn2v34impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2125|  2.01M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2126|  2.01M|            return detail::is_cp_space(cp);
 2127|  2.01M|        });
_ZN3scn2v34impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   881k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   881k|        {
  662|   881k|        }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|   140k|{
 5784|   140k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   140k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.46k, False: 138k]
  |  |  ------------------
  ------------------
 5785|  1.46k|        return unexpected(e);
 5786|  1.46k|    }
 5787|       |
 5788|   138k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 138k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   138k|    return skip_classic_whitespace(range);
 5793|   138k|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|  70.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  70.1k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  70.1k|            auto rd = make_reader<T, char_type>();
 5865|  70.1k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  70.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|  70.1k|    {
 5852|  70.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  70.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.13k, False: 68.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.13k|    }                                                  \
  |  |  |  | 3667|  70.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  68.9k|                        .transform_error(make_eof_scan_error));
 5854|  68.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  70.1k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|  68.9k|    {
 5255|  68.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  68.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  68.9k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  68.9k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 5859|  70.1k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|  70.1k|                          basic_contiguous_scan_context<char_type>>) {
 5864|  70.1k|            auto rd = make_reader<T, char_type>();
 5865|  70.1k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  70.1k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|  70.1k|    {
 5852|  70.1k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  70.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  70.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  70.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  70.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.13k, False: 68.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.13k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.13k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.13k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.13k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.13k|    }                                                  \
  |  |  |  | 3667|  70.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  68.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  68.9k|                        .transform_error(make_eof_scan_error));
 5854|  68.9k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  70.1k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|  68.9k|    {
 5255|  68.9k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  68.9k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  68.9k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  68.9k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|  91.9k|{
 5784|  91.9k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 867, False: 91.0k]
  |  |  ------------------
  ------------------
 5785|    867|        return unexpected(e);
 5786|    867|    }
 5787|       |
 5788|  91.0k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 91.0k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  91.0k|    return skip_classic_whitespace(range);
 5793|  91.0k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5859|  91.9k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|  91.9k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|  91.9k|            auto rd = make_reader<T, char_type>();
 5869|  91.9k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 91.9k, False: 0]
  ------------------
 5870|  91.9k|                return impl(rd, range, value);
 5871|  91.9k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|  91.9k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIcNSJ_11char_traitsIcEENSJ_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|  91.9k|    {
 5852|  91.9k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|  91.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  91.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  91.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  91.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.38k, False: 90.5k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.38k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.38k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.38k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.38k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.38k|    }                                                  \
  |  |  |  | 3667|  91.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  90.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|  90.5k|                        .transform_error(make_eof_scan_error));
 5854|  90.5k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|  91.9k|    }
_ZN3scn2v34impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|  90.5k|    {
 5255|  90.5k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|  90.5k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|  90.5k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|  90.5k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIcEEEENS0_6detail10locale_refE:
 2864|   112k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   112k|    static_cast<    \
  |  |  929|   112k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   112k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   112k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   112k|          m_current(m_range.begin())
 2867|   112k|    {
 2868|   112k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5beginEv:
 2871|   306k|    {
 2872|   306k|        return m_current;
 2873|   306k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE3endEv:
 2876|   194k|    {
 2877|   194k|        return m_range.end();
 2878|   194k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIcE10advance_toEPKc:
 2891|  91.0k|    {
 2892|  91.0k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|  91.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  91.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|  91.0k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|  91.0k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 91.0k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|  91.0k|        }
 2898|  91.0k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|  91.0k|    static_cast<    \
  |  |  929|  91.0k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|  91.0k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIcE5rangeEv:
 2881|   103k|    {
 2882|   103k|        return ranges::subrange{begin(), end()};
 2883|   103k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|  99.4k|    {
 6026|  99.4k|        const bool need_skipped_width =
 6027|  99.4k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 99.4k]
  |  Branch (6027:33): [True: 0, False: 99.4k]
  ------------------
 6028|  99.4k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|  99.4k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 99.4k]
  ------------------
 6032|  99.4k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 99.4k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|  99.4k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 99.4k, False: 0]
  |  Branch (6036:56): [True: 93.4k, False: 5.92k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|  93.4k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 93.4k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|   185k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|  93.4k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  93.4k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  93.4k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  93.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.51k, False: 91.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.51k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.51k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.51k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.51k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.51k|    }                                                  \
  |  |  |  | 3667|  93.4k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  91.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|   185k|                            make_eof_scan_error));
 6047|       |
 6048|   185k|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 91.9k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|  91.9k|            return result_type{it, 0};
 6056|   185k|        }
 6057|       |
 6058|  5.92k|        return result_type{rng.begin(), 0};
 6059|  99.4k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|  89.9k|    {
 6068|  89.9k|        const bool need_skipped_width =
 6069|  89.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 89.9k]
  |  Branch (6069:33): [True: 0, False: 89.9k]
  ------------------
 6070|  89.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|  89.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 89.9k]
  ------------------
 6073|  89.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 89.9k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|  89.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 89.9k, False: 0]
  ------------------
 6082|  89.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 1.64k, False: 88.3k]
  ------------------
 6083|  89.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 1.64k]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|  1.64k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 1.64k]
  ------------------
 6085|  1.64k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|  89.9k|        return result_type{rng.begin(), 0};
 6107|  89.9k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__117basic_string_viewIcNS7_11char_traitsIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  51.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  51.8k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  51.8k|            auto rd = make_reader<T, char_type>();
 6187|  51.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 49.7k]
  |  |  ------------------
  ------------------
 6188|  2.10k|                return unexpected(e);
 6189|  2.10k|            }
 6190|       |
 6191|  49.7k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  51.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|  49.7k|    {
 6113|  49.7k|        const bool need_skipped_width =
 6114|  49.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 49.7k]
  |  Branch (6114:33): [True: 0, False: 49.7k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  49.7k|        auto it = rng.begin();
 6118|  49.7k|        std::ptrdiff_t prefix_width = 0;
 6119|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 49.7k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  49.7k|        else {
 6127|  49.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 756, False: 48.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    756|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    756|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    756|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    756|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    756|    }                                                  \
  |  |  |  | 3667|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  48.9k|            std::tie(it, prefix_width) = prefix_result;
 6129|  48.9k|        }
 6130|  48.9k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  48.9k|        std::ptrdiff_t value_width = 0;
 6134|  48.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 48.9k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  48.9k|        else {
 6150|  48.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.44k, False: 45.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.44k|    }                                                  \
  |  | 3667|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.5k|                                             specs, value, loc));
 6152|       |
 6153|  45.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 44.9k, False: 526]
  ------------------
 6163|  44.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  44.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  44.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  44.9k|                                 value_width));
 6167|  44.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  44.9k|        }
 6169|       |
 6170|  45.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.5k|                                                 value_width, postfix_width);
 6172|  45.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.5k|        return it;
 6177|  45.5k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEEclINSt3__112basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEENS0_13scan_expectedIPKcEERT_:
 6181|  51.8k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|  51.8k|                          basic_contiguous_scan_context<char_type>>) {
 6186|  51.8k|            auto rd = make_reader<T, char_type>();
 6187|  51.8k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  51.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.10k, False: 49.7k]
  |  |  ------------------
  ------------------
 6188|  2.10k|                return unexpected(e);
 6189|  2.10k|            }
 6190|       |
 6191|  49.7k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|  51.8k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EENSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|  49.7k|    {
 6113|  49.7k|        const bool need_skipped_width =
 6114|  49.7k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 49.7k]
  |  Branch (6114:33): [True: 0, False: 49.7k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|  49.7k|        auto it = rng.begin();
 6118|  49.7k|        std::ptrdiff_t prefix_width = 0;
 6119|  49.7k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 49.7k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|  49.7k|        else {
 6127|  49.7k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|  49.7k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  49.7k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  49.7k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  49.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 756, False: 48.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|    756|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|    756|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|    756|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|    756|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|    756|    }                                                  \
  |  |  |  | 3667|  49.7k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|  48.9k|            std::tie(it, prefix_width) = prefix_result;
 6129|  48.9k|        }
 6130|  48.9k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|  48.9k|        std::ptrdiff_t value_width = 0;
 6134|  48.9k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 48.9k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|  48.9k|        else {
 6150|  48.9k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 3.44k, False: 45.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  3.44k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  3.44k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  3.44k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  3.44k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  3.44k|    }                                                  \
  |  | 3667|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|  45.5k|                                             specs, value, loc));
 6152|       |
 6153|  45.5k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 45.5k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|  45.5k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|  45.5k|        std::ptrdiff_t postfix_width = 0;
 6162|  45.5k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 44.9k, False: 526]
  ------------------
 6163|  44.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|  44.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|  44.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|  44.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|  44.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 44.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|  44.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|  44.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  44.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|  44.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|  44.9k|                                 value_width));
 6167|  44.9k|            std::tie(it, postfix_width) = postfix_result;
 6168|  44.9k|        }
 6169|       |
 6170|  45.5k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|  45.5k|                                                 value_width, postfix_width);
 6172|  45.5k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 45.5k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|  45.5k|        return it;
 6177|  45.5k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5783|  1.05M|{
 5784|  1.05M|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|  1.05M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 2.94k, False: 1.05M]
  |  |  ------------------
  ------------------
 5785|  2.94k|        return unexpected(e);
 5786|  2.94k|    }
 5787|       |
 5788|  1.05M|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 1.05M]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|  1.05M|    return skip_classic_whitespace(range);
 5793|  1.05M|}
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|   529k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   529k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   529k|            auto rd = make_reader<T, char_type>();
 5865|   529k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   529k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5851|   529k|    {
 5852|   529k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   529k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   529k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   529k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.76k, False: 528k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.76k|    }                                                  \
  |  |  |  | 3667|   529k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   528k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   528k|                        .transform_error(make_eof_scan_error));
 5854|   528k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   529k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5254|   528k|    {
 5255|   528k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   528k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   528k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   528k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 5859|   529k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|   529k|                          basic_contiguous_scan_context<char_type>>) {
 5864|   529k|            auto rd = make_reader<T, char_type>();
 5865|   529k|            return impl(rd, range, value);
 5866|       |        }
 5867|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5868|       |            auto rd = make_reader<T, char_type>();
 5869|       |            if (!is_segment_contiguous(range)) {
 5870|       |                return impl(rd, range, value);
 5871|       |            }
 5872|       |            auto crange = get_as_contiguous(range);
 5873|       |            SCN_TRY(it, impl(rd, crange, value));
 5874|       |            return ranges::next(range.begin(),
 5875|       |                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   529k|    }
_ZN3scn2v34impl18default_arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5851|   529k|    {
 5852|   529k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   529k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   529k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   529k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.76k, False: 528k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.76k|    }                                                  \
  |  |  |  | 3667|   529k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   528k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   528k|                        .transform_error(make_eof_scan_error));
 5854|   528k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   529k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5254|   528k|    {
 5255|   528k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   528k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   528k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   528k|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwEC2IRNS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISF_EEvE4typeELPv0EEEOSF_NS0_15basic_scan_argsINS0_18basic_scan_contextIwEEEENS0_6detail10locale_refE:
 2864|   740k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  |  928|   740k|    static_cast<    \
  |  |  929|   740k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2865|   740k|          m_range(SCN_FWD(r)),
  ------------------
  |  |  930|   740k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2866|   740k|          m_current(m_range.begin())
 2867|   740k|    {
 2868|   740k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5beginEv:
 2871|  2.16M|    {
 2872|  2.16M|        return m_current;
 2873|  2.16M|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE3endEv:
 2876|  1.42M|    {
 2877|  1.42M|        return m_range.end();
 2878|  1.42M|    }
_ZN3scn2v34impl29basic_contiguous_scan_contextIwE10advance_toEPKw:
 2891|   698k|    {
 2892|   698k|        SCN_EXPECT(it <= end());
  ------------------
  |  |  924|   698k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   698k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 2893|   698k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 2894|   698k|            if (it == nullptr) {
  ------------------
  |  Branch (2894:17): [True: 0, False: 698k]
  ------------------
 2895|      0|                it = end();
 2896|      0|            }
 2897|   698k|        }
 2898|   698k|        m_current = SCN_MOVE(it);
  ------------------
  |  |  928|   698k|    static_cast<    \
  |  |  929|   698k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2899|   698k|    }
_ZNK3scn2v34impl29basic_contiguous_scan_contextIwE5rangeEv:
 2881|   723k|    {
 2882|   723k|        return ranges::subrange{begin(), end()};
 2883|   723k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6025|   715k|    {
 6026|   715k|        const bool need_skipped_width =
 6027|   715k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6027:13): [True: 0, False: 715k]
  |  Branch (6027:33): [True: 0, False: 715k]
  ------------------
 6028|   715k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6029|       |
 6030|       |        // Read prefix
 6031|   715k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6031:13): [True: 0, False: 715k]
  ------------------
 6032|   715k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6032:13): [True: 0, False: 715k]
  ------------------
 6033|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6034|      0|                             need_skipped_width);
 6035|      0|        }
 6036|   715k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6036:13): [True: 715k, False: 0]
  |  Branch (6036:56): [True: 706k, False: 8.60k]
  ------------------
 6037|       |            // Default alignment:
 6038|       |            // Skip preceding whitespace, if required by the reader
 6039|   706k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6039:17): [True: 0, False: 706k]
  ------------------
 6040|      0|                auto max_width_view = take_width(rng, specs.precision);
 6041|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6042|      0|                                  .transform_error(make_eof_scan_error));
 6043|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6044|      0|            }
 6045|  1.41M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3668|   706k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   706k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   706k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   706k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 2.34k, False: 704k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  2.34k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  2.34k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  2.34k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  2.34k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  2.34k|    }                                                  \
  |  |  |  | 3667|   706k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   704k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6046|  1.41M|                            make_eof_scan_error));
 6047|       |
 6048|  1.41M|            if (need_skipped_width) {
  ------------------
  |  Branch (6048:17): [True: 0, False: 704k]
  ------------------
 6049|      0|                return result_type{
 6050|      0|                    it,
 6051|      0|                    calculate_text_width(make_contiguous_buffer(
 6052|      0|                                             ranges::subrange{rng.begin(), it})
 6053|      0|                                             .view())};
 6054|      0|            }
 6055|   704k|            return result_type{it, 0};
 6056|  1.41M|        }
 6057|       |
 6058|  8.60k|        return result_type{rng.begin(), 0};
 6059|   715k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS7_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6067|   696k|    {
 6068|   696k|        const bool need_skipped_width =
 6069|   696k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6069:13): [True: 0, False: 696k]
  |  Branch (6069:33): [True: 0, False: 696k]
  ------------------
 6070|   696k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6071|       |
 6072|   696k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6072:13): [True: 0, False: 696k]
  ------------------
 6073|   696k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6073:13): [True: 0, False: 696k]
  ------------------
 6074|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6074:17): [True: 0, False: 0]
  ------------------
 6075|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6075:17): [True: 0, False: 0]
  ------------------
 6076|      0|                return result_type{rng.begin(), 0};
 6077|      0|            }
 6078|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6079|      0|                             specs.fill, need_skipped_width);
 6080|      0|        }
 6081|   696k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6081:13): [True: 696k, False: 0]
  ------------------
 6082|   696k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6082:13): [True: 136, False: 696k]
  ------------------
 6083|   696k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6083:15): [True: 0, False: 136]
  |  Branch (6083:35): [True: 0, False: 0]
  ------------------
 6084|    136|             (specs.precision != 0 &&
  ------------------
  |  Branch (6084:15): [True: 0, False: 136]
  ------------------
 6085|    136|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6085:15): [True: 0, False: 0]
  ------------------
 6086|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6086:17): [True: 0, False: 0]
  ------------------
 6087|      0|                const auto initial_width =
 6088|      0|                    specs.precision - prefix_width - value_width;
 6089|      0|                auto max_width_view = take_width(rng, initial_width);
 6090|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6091|      0|                                  .transform_error(make_eof_scan_error));
 6092|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6093|      0|            }
 6094|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6095|      0|                            make_eof_scan_error));
 6096|       |
 6097|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6097:17): [True: 0, False: 0]
  ------------------
 6098|      0|                return result_type{
 6099|      0|                    it,
 6100|      0|                    calculate_text_width(make_contiguous_buffer(
 6101|      0|                                             ranges::subrange{rng.begin(), it})
 6102|      0|                                             .view())};
 6103|      0|            }
 6104|      0|            return result_type{it, 0};
 6105|      0|        }
 6106|   696k|        return result_type{rng.begin(), 0};
 6107|   696k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__117basic_string_viewIwNS7_11char_traitsIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|   361k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   361k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   361k|            auto rd = make_reader<T, char_type>();
 6187|   361k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 357k]
  |  |  ------------------
  ------------------
 6188|  4.20k|                return unexpected(e);
 6189|  4.20k|            }
 6190|       |
 6191|   357k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   361k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6112|   357k|    {
 6113|   357k|        const bool need_skipped_width =
 6114|   357k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 357k]
  |  Branch (6114:33): [True: 0, False: 357k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   357k|        auto it = rng.begin();
 6118|   357k|        std::ptrdiff_t prefix_width = 0;
 6119|   357k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 357k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   357k|        else {
 6127|   357k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   357k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 356k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.17k|    }                                                  \
  |  |  |  | 3667|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   356k|            std::tie(it, prefix_width) = prefix_result;
 6129|   356k|        }
 6130|   356k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   356k|        std::ptrdiff_t value_width = 0;
 6134|   356k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 356k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   356k|        else {
 6150|   356k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   356k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   356k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.23k, False: 349k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.23k|    }                                                  \
  |  | 3667|   356k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   349k|                                             specs, value, loc));
 6152|       |
 6153|   349k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 349k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   349k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   349k|        std::ptrdiff_t postfix_width = 0;
 6162|   349k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 348k, False: 1.01k]
  ------------------
 6163|   348k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   348k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   348k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   348k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 348k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   348k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   348k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   348k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   348k|                                 value_width));
 6167|   348k|            std::tie(it, postfix_width) = postfix_result;
 6168|   348k|        }
 6169|       |
 6170|   349k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   349k|                                                 value_width, postfix_width);
 6172|   349k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 349k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   349k|        return it;
 6177|   349k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedIPKwEERT_:
 6181|   361k|    {
 6182|       |        if constexpr (!detail::is_type_disabled<T> &&
 6183|       |                      std::is_same_v<
 6184|       |                          context_type,
 6185|   361k|                          basic_contiguous_scan_context<char_type>>) {
 6186|   361k|            auto rd = make_reader<T, char_type>();
 6187|   361k|            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   361k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 4.20k, False: 357k]
  |  |  ------------------
  ------------------
 6188|  4.20k|                return unexpected(e);
 6189|  4.20k|            }
 6190|       |
 6191|   357k|            return impl(rd, range, value);
 6192|       |        }
 6193|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6194|       |            auto rd = make_reader<T, char_type>();
 6195|       |            if (auto e = rd.check_specs(specs); SCN_UNLIKELY(!e)) {
 6196|       |                return unexpected(e);
 6197|       |            }
 6198|       |
 6199|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6200|       |                specs.width != 0) {
 6201|       |                return impl(rd, range, value);
 6202|       |            }
 6203|       |
 6204|       |            auto crange = get_as_contiguous(range);
 6205|       |            SCN_TRY(it, impl(rd, crange, value));
 6206|       |            return ranges::next(range.begin(),
 6207|       |                                ranges::distance(crange.begin(), it));
 6208|       |        }
 6209|       |        else {
 6210|       |            SCN_EXPECT(false);
 6211|       |            SCN_UNREACHABLE;
 6212|       |        }
 6213|   361k|    }
_ZN3scn2v34impl10arg_readerINS1_29basic_contiguous_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EENSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6112|   357k|    {
 6113|   357k|        const bool need_skipped_width =
 6114|   357k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6114:13): [True: 0, False: 357k]
  |  Branch (6114:33): [True: 0, False: 357k]
  ------------------
 6115|       |
 6116|       |        // Read prefix
 6117|   357k|        auto it = rng.begin();
 6118|   357k|        std::ptrdiff_t prefix_width = 0;
 6119|   357k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6119:13): [True: 0, False: 357k]
  ------------------
 6120|      0|            auto max_width_view = take_width(rng, specs.precision);
 6121|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6122|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6123|      0|            it = prefix_result.first.base();
 6124|      0|            prefix_width = prefix_result.second;
 6125|      0|        }
 6126|   357k|        else {
 6127|   357k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3668|   357k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   357k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   357k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   357k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.17k, False: 356k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.17k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.17k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.17k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.17k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.17k|    }                                                  \
  |  |  |  | 3667|   357k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6128|   356k|            std::tie(it, prefix_width) = prefix_result;
 6129|   356k|        }
 6130|   356k|        auto prefix_end_it = it;
 6131|       |
 6132|       |        // Read value
 6133|   356k|        std::ptrdiff_t value_width = 0;
 6134|   356k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6134:13): [True: 0, False: 356k]
  ------------------
 6135|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6135:17): [True: 0, False: 0]
  ------------------
 6136|      0|                return unexpected_scan_error(
 6137|      0|                    scan_error::invalid_scanned_value,
 6138|      0|                    "Too many fill characters before value, "
 6139|      0|                    "precision exceeded before reading value");
 6140|      0|            }
 6141|       |
 6142|      0|            const auto initial_width = specs.precision - prefix_width;
 6143|      0|            auto max_width_view =
 6144|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6145|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6146|      0|            it = w_it.base();
 6147|      0|            value_width = initial_width - w_it.count();
 6148|      0|        }
 6149|   356k|        else {
 6150|   356k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3663|   356k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3664|   356k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  |  859|   356k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (859:25): [True: 7.23k, False: 349k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3665|  7.23k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3660|  7.23k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3659|  7.23k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3658|  7.23k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3666|  7.23k|    }                                                  \
  |  | 3667|   356k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  |  930|   356k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6151|   349k|                                             specs, value, loc));
 6152|       |
 6153|   349k|            if (need_skipped_width) {
  ------------------
  |  Branch (6153:17): [True: 0, False: 349k]
  ------------------
 6154|      0|                value_width = calculate_text_width(
 6155|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6156|      0|                        .view());
 6157|      0|            }
 6158|   349k|        }
 6159|       |
 6160|       |        // Read postfix
 6161|   349k|        std::ptrdiff_t postfix_width = 0;
 6162|   349k|        if (it != rng.end()) {
  ------------------
  |  Branch (6162:13): [True: 348k, False: 1.01k]
  ------------------
 6163|   348k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3668|   348k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   348k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   348k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   348k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 348k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|   348k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   348k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   348k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6165|   348k|                                 rd.skip_ws_before_read(), prefix_width,
 6166|   348k|                                 value_width));
 6167|   348k|            std::tie(it, postfix_width) = postfix_result;
 6168|   348k|        }
 6169|       |
 6170|   349k|        if (auto e = check_widths_for_arg_reader(specs, prefix_width,
 6171|   349k|                                                 value_width, postfix_width);
 6172|   349k|            !e) {
  ------------------
  |  Branch (6172:13): [True: 0, False: 349k]
  ------------------
 6173|      0|            return unexpected(e);
 6174|      0|        }
 6175|       |
 6176|   349k|        return it;
 6177|   349k|    }
_ZN3scn2v34impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5783|   529k|{
 5784|   529k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  |  859|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (859:25): [True: 1.47k, False: 528k]
  |  |  ------------------
  ------------------
 5785|  1.47k|        return unexpected(e);
 5786|  1.47k|    }
 5787|       |
 5788|   528k|    if (!is_required) {
  ------------------
  |  Branch (5788:9): [True: 0, False: 528k]
  ------------------
 5789|      0|        return range.begin();
 5790|      0|    }
 5791|       |
 5792|   528k|    return skip_classic_whitespace(range);
 5793|   528k|}
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEEclINSt3__112basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEENS0_13scan_expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5859|   529k|    {
 5860|       |        if constexpr (!detail::is_type_disabled<T> &&
 5861|       |                      std::is_same_v<
 5862|       |                          context_type,
 5863|       |                          basic_contiguous_scan_context<char_type>>) {
 5864|       |            auto rd = make_reader<T, char_type>();
 5865|       |            return impl(rd, range, value);
 5866|       |        }
 5867|   529k|        else if constexpr (!detail::is_type_disabled<T>) {
 5868|   529k|            auto rd = make_reader<T, char_type>();
 5869|   529k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5869:17): [True: 529k, False: 0]
  ------------------
 5870|   529k|                return impl(rd, range, value);
 5871|   529k|            }
 5872|      0|            auto crange = get_as_contiguous(range);
 5873|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3668|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|      0|    }                                                  \
  |  |  |  | 3667|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5874|      0|            return ranges::next(range.begin(),
 5875|      0|                                ranges::distance(crange.begin(), it));
 5876|       |        }
 5877|       |        else {
 5878|       |            SCN_EXPECT(false);
 5879|       |            SCN_UNREACHABLE;
 5880|       |        }
 5881|   529k|    }
_ZN3scn2v34impl18default_arg_readerINS0_18basic_scan_contextIwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEENSt3__112basic_stringIwNSJ_11char_traitsIwEENSJ_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SR_RT1_:
 5851|   529k|    {
 5852|   529k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3668|   529k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3663|   529k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3664|   529k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  |  859|   529k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (859:25): [True: 1.76k, False: 528k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3665|  1.76k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3660|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3659|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3658|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3666|  1.76k|    }                                                  \
  |  |  |  | 3667|   529k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  |  930|   528k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5853|   528k|                        .transform_error(make_eof_scan_error));
 5854|   528k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5855|   529k|    }
_ZN3scn2v34impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5254|   528k|    {
 5255|   528k|        SCN_UNUSED(loc);
  ------------------
  |  |  909|   528k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5256|   528k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5257|   528k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   51|  1.05k|{
   52|  1.05k|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  |  924|  1.05k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  1.05k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   53|       |
   54|       |    // narrow
   55|  1.05k|    string_buffer.resize(size);
   56|  1.05k|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   57|  1.05k|    auto sv = std::string_view{string_buffer};
   58|       |
   59|       |    // wide, bitwise reinterpret
   60|  1.05k|    const auto wsv_reinterpret_size =
   61|  1.05k|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (61:9): [True: 223, False: 828]
  ------------------
   62|  1.05k|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   63|  1.05k|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   64|  1.05k|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   65|       |
   66|       |    // wide, transcode to correct encoding (utf16 or utf32)
   67|  1.05k|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   68|  1.05k|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   69|       |
   70|  1.05k|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   71|  1.05k|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.05k|{
  122|  1.05k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.05k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.05k|    buf.resize(sizeof...(Args));
  125|  1.05k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.05k|    return buf;
  127|  1.05k|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  107|  1.05k|{
  108|  1.05k|    if constexpr (std::is_same_v<CharT, char>) {
  109|  1.05k|        return format_string_view_buffer;
  110|       |    }
  111|       |    else {
  112|       |        return wformat_string_view_buffer;
  113|       |    }
  114|  1.05k|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  1.05k|{
  185|  1.05k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  1.05k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  1.05k|                                   format_strings);
  188|  1.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  1.05k|{
  133|       |    // Regular scan
  134|  6.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.30k, False: 1.05k]
  ------------------
  135|  6.30k|        auto it = scn::ranges::begin(source);
  136|  51.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  51.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  51.3k|            auto result = scn::scan<T>(
  139|  51.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  51.3k|                scn::runtime_format(f));
  141|  51.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.30k, False: 45.0k]
  ------------------
  142|  6.30k|                break;
  143|  6.30k|            }
  144|  45.0k|            it = result->begin();
  145|  45.0k|        }
  146|  6.30k|    }
  147|       |
  148|       |    // scan localized
  149|  6.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.30k, False: 1.05k]
  ------------------
  150|  6.30k|        auto it = scn::ranges::begin(source);
  151|  51.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  51.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  51.3k|            auto result = scn::scan<T>(
  154|  51.3k|                global_locale,
  155|  51.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  51.3k|                scn::runtime_format(f));
  157|  51.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.30k, False: 45.0k]
  ------------------
  158|  6.30k|                break;
  159|  6.30k|            }
  160|  45.0k|            it = result->begin();
  161|  45.0k|        }
  162|  6.30k|    }
  163|       |
  164|       |    // scan_value
  165|  1.05k|    {
  166|  1.05k|        auto it = scn::ranges::begin(source);
  167|  23.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.3k|            auto result = scn::scan_value<T>(
  170|  23.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.05k, False: 22.3k]
  ------------------
  172|  1.05k|                break;
  173|  1.05k|            }
  174|  22.3k|            it = result->begin();
  175|  22.3k|        }
  176|  1.05k|    }
  177|  1.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  1.05k|{
  133|       |    // Regular scan
  134|  6.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.30k, False: 1.05k]
  ------------------
  135|  6.30k|        auto it = scn::ranges::begin(source);
  136|  51.3k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  51.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  51.3k|            auto result = scn::scan<T>(
  139|  51.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  51.3k|                scn::runtime_format(f));
  141|  51.3k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.30k, False: 45.0k]
  ------------------
  142|  6.30k|                break;
  143|  6.30k|            }
  144|  45.0k|            it = result->begin();
  145|  45.0k|        }
  146|  6.30k|    }
  147|       |
  148|       |    // scan localized
  149|  6.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.30k, False: 1.05k]
  ------------------
  150|  6.30k|        auto it = scn::ranges::begin(source);
  151|  51.3k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  51.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  51.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  51.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  51.3k|            auto result = scn::scan<T>(
  154|  51.3k|                global_locale,
  155|  51.3k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  51.3k|                scn::runtime_format(f));
  157|  51.3k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.30k, False: 45.0k]
  ------------------
  158|  6.30k|                break;
  159|  6.30k|            }
  160|  45.0k|            it = result->begin();
  161|  45.0k|        }
  162|  6.30k|    }
  163|       |
  164|       |    // scan_value
  165|  1.05k|    {
  166|  1.05k|        auto it = scn::ranges::begin(source);
  167|  23.3k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  23.3k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  23.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  23.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  23.3k|            auto result = scn::scan_value<T>(
  170|  23.3k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  23.3k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.05k, False: 22.3k]
  ------------------
  172|  1.05k|                break;
  173|  1.05k|            }
  174|  22.3k|            it = result->begin();
  175|  22.3k|        }
  176|  1.05k|    }
  177|  1.05k|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  1.05k|{
  133|       |    // Regular scan
  134|  6.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 6.30k, False: 1.05k]
  ------------------
  135|  6.30k|        auto it = scn::ranges::begin(source);
  136|  66.1k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|  66.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|  66.1k|            auto result = scn::scan<T>(
  139|  66.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|  66.1k|                scn::runtime_format(f));
  141|  66.1k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 6.30k, False: 59.8k]
  ------------------
  142|  6.30k|                break;
  143|  6.30k|            }
  144|  59.8k|            it = result->begin();
  145|  59.8k|        }
  146|  6.30k|    }
  147|       |
  148|       |    // scan localized
  149|  6.30k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 6.30k, False: 1.05k]
  ------------------
  150|  6.30k|        auto it = scn::ranges::begin(source);
  151|  66.1k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|  66.1k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  66.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  66.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|  66.1k|            auto result = scn::scan<T>(
  154|  66.1k|                global_locale,
  155|  66.1k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|  66.1k|                scn::runtime_format(f));
  157|  66.1k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 6.30k, False: 59.8k]
  ------------------
  158|  6.30k|                break;
  159|  6.30k|            }
  160|  59.8k|            it = result->begin();
  161|  59.8k|        }
  162|  6.30k|    }
  163|       |
  164|       |    // scan_value
  165|  1.05k|    {
  166|  1.05k|        auto it = scn::ranges::begin(source);
  167|  30.6k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|  30.6k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|  30.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|  30.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|  30.6k|            auto result = scn::scan_value<T>(
  170|  30.6k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|  30.6k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 1.05k, False: 29.5k]
  ------------------
  172|  1.05k|                break;
  173|  1.05k|            }
  174|  29.5k|            it = result->begin();
  175|  29.5k|        }
  176|  1.05k|    }
  177|  1.05k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   89|  1.05k|{
   90|  1.05k|    using char_type = ranges::range_value_t<Source>;
   91|  1.05k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  1.05k|    deque.clear();
   93|  1.05k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  1.05k|              std::back_inserter(deque));
   95|  1.05k|    return deque;
   96|  1.05k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   78|  1.05k|{
   79|  1.05k|    if constexpr (std::is_same_v<CharT, char>) {
   80|  1.05k|        return noncontiguous_buffer;
   81|       |    }
   82|       |    else {
   83|       |        return wnoncontiguous_buffer;
   84|       |    }
   85|  1.05k|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  121|  1.05k|{
  122|  1.05k|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  123|  1.05k|    auto& buf = get_format_string_view_buffer<CharT>();
  124|  1.05k|    buf.resize(sizeof...(Args));
  125|  1.05k|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  126|  1.05k|    return buf;
  127|  1.05k|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  107|  1.05k|{
  108|       |    if constexpr (std::is_same_v<CharT, char>) {
  109|       |        return format_string_view_buffer;
  110|       |    }
  111|  1.05k|    else {
  112|  1.05k|        return wformat_string_view_buffer;
  113|  1.05k|    }
  114|  1.05k|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  184|  2.10k|{
  185|  2.10k|    do_basic_run_for_source<CharT>(data, format_strings);
  186|  2.10k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  187|  2.10k|                                   format_strings);
  188|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  132|  2.10k|{
  133|       |    // Regular scan
  134|  12.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.6k, False: 2.10k]
  ------------------
  135|  12.6k|        auto it = scn::ranges::begin(source);
  136|   361k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   361k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   361k|            auto result = scn::scan<T>(
  139|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   361k|                scn::runtime_format(f));
  141|   361k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.6k, False: 349k]
  ------------------
  142|  12.6k|                break;
  143|  12.6k|            }
  144|   349k|            it = result->begin();
  145|   349k|        }
  146|  12.6k|    }
  147|       |
  148|       |    // scan localized
  149|  12.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.6k, False: 2.10k]
  ------------------
  150|  12.6k|        auto it = scn::ranges::begin(source);
  151|   361k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   361k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   361k|            auto result = scn::scan<T>(
  154|   361k|                global_locale,
  155|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   361k|                scn::runtime_format(f));
  157|   361k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.6k, False: 349k]
  ------------------
  158|  12.6k|                break;
  159|  12.6k|            }
  160|   349k|            it = result->begin();
  161|   349k|        }
  162|  12.6k|    }
  163|       |
  164|       |    // scan_value
  165|  2.10k|    {
  166|  2.10k|        auto it = scn::ranges::begin(source);
  167|   176k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   176k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   176k|            auto result = scn::scan_value<T>(
  170|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   176k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.10k, False: 174k]
  ------------------
  172|  2.10k|                break;
  173|  2.10k|            }
  174|   174k|            it = result->begin();
  175|   174k|        }
  176|  2.10k|    }
  177|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  132|  2.10k|{
  133|       |    // Regular scan
  134|  12.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.6k, False: 2.10k]
  ------------------
  135|  12.6k|        auto it = scn::ranges::begin(source);
  136|   361k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   361k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   361k|            auto result = scn::scan<T>(
  139|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   361k|                scn::runtime_format(f));
  141|   361k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.6k, False: 349k]
  ------------------
  142|  12.6k|                break;
  143|  12.6k|            }
  144|   349k|            it = result->begin();
  145|   349k|        }
  146|  12.6k|    }
  147|       |
  148|       |    // scan localized
  149|  12.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.6k, False: 2.10k]
  ------------------
  150|  12.6k|        auto it = scn::ranges::begin(source);
  151|   361k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   361k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   361k|            auto result = scn::scan<T>(
  154|   361k|                global_locale,
  155|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   361k|                scn::runtime_format(f));
  157|   361k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.6k, False: 349k]
  ------------------
  158|  12.6k|                break;
  159|  12.6k|            }
  160|   349k|            it = result->begin();
  161|   349k|        }
  162|  12.6k|    }
  163|       |
  164|       |    // scan_value
  165|  2.10k|    {
  166|  2.10k|        auto it = scn::ranges::begin(source);
  167|   176k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   176k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   176k|            auto result = scn::scan_value<T>(
  170|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   176k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.10k, False: 174k]
  ------------------
  172|  2.10k|                break;
  173|  2.10k|            }
  174|   174k|            it = result->begin();
  175|   174k|        }
  176|  2.10k|    }
  177|  2.10k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  132|  2.10k|{
  133|       |    // Regular scan
  134|  12.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (134:24): [True: 12.6k, False: 2.10k]
  ------------------
  135|  12.6k|        auto it = scn::ranges::begin(source);
  136|   361k|        while (true) {
  ------------------
  |  Branch (136:16): [Folded - Ignored]
  ------------------
  137|   361k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  138|   361k|            auto result = scn::scan<T>(
  139|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  140|   361k|                scn::runtime_format(f));
  141|   361k|            if (!result) {
  ------------------
  |  Branch (141:17): [True: 12.6k, False: 349k]
  ------------------
  142|  12.6k|                break;
  143|  12.6k|            }
  144|   349k|            it = result->begin();
  145|   349k|        }
  146|  12.6k|    }
  147|       |
  148|       |    // scan localized
  149|  12.6k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (149:24): [True: 12.6k, False: 2.10k]
  ------------------
  150|  12.6k|        auto it = scn::ranges::begin(source);
  151|   361k|        while (true) {
  ------------------
  |  Branch (151:16): [Folded - Ignored]
  ------------------
  152|   361k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   361k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   361k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  153|   361k|            auto result = scn::scan<T>(
  154|   361k|                global_locale,
  155|   361k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  156|   361k|                scn::runtime_format(f));
  157|   361k|            if (!result) {
  ------------------
  |  Branch (157:17): [True: 12.6k, False: 349k]
  ------------------
  158|  12.6k|                break;
  159|  12.6k|            }
  160|   349k|            it = result->begin();
  161|   349k|        }
  162|  12.6k|    }
  163|       |
  164|       |    // scan_value
  165|  2.10k|    {
  166|  2.10k|        auto it = scn::ranges::begin(source);
  167|   176k|        while (true) {
  ------------------
  |  Branch (167:16): [Folded - Ignored]
  ------------------
  168|   176k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  |  924|   176k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  |  921|   176k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  169|   176k|            auto result = scn::scan_value<T>(
  170|   176k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  171|   176k|            if (!result) {
  ------------------
  |  Branch (171:17): [True: 2.10k, False: 174k]
  ------------------
  172|  2.10k|                break;
  173|  2.10k|            }
  174|   174k|            it = result->begin();
  175|   174k|        }
  176|  2.10k|    }
  177|  2.10k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   89|  2.10k|{
   90|  2.10k|    using char_type = ranges::range_value_t<Source>;
   91|  2.10k|    auto& deque = get_noncontiguous_buffer<char_type>();
   92|  2.10k|    deque.clear();
   93|  2.10k|    std::copy(ranges::begin(source), ranges::end(source),
   94|  2.10k|              std::back_inserter(deque));
   95|  2.10k|    return deque;
   96|  2.10k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   78|  2.10k|{
   79|       |    if constexpr (std::is_same_v<CharT, char>) {
   80|       |        return noncontiguous_buffer;
   81|       |    }
   82|  2.10k|    else {
   83|  2.10k|        return wnoncontiguous_buffer;
   84|  2.10k|    }
   85|  2.10k|}

LLVMFuzzerTestOneInput:
   57|  1.05k|{
   58|  1.05k|    scn::fuzz::run(data, size);
   59|  1.05k|    return 0;
   60|  1.05k|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|  1.05k|{
   36|  1.05k|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 1.05k]
  |  Branch (36:35): [True: 0, False: 1.05k]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|  1.05k|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|  1.05k|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|  1.05k|                                             "{:64U}", "{:[A-Za-z]}");
   44|  1.05k|    do_basic_run(sv, f);
   45|       |
   46|  1.05k|    const auto& wf = get_format_strings<wchar_t>(
   47|  1.05k|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|  1.05k|    do_basic_run(wsv_reinterpret, wf);
   49|  1.05k|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 1.05k, False: 0]
  ------------------
   50|  1.05k|        do_basic_run(wsv_transcode, wf);
   51|  1.05k|    }
   52|  1.05k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.05k|{
   25|  1.05k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.05k|                                                           format_strings);
   27|  1.05k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.05k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.05k|            source, format_strings);
   30|  1.05k|    }
   31|  1.05k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.05k|{
   25|  1.05k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.05k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.05k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  2.10k|{
   25|  2.10k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.10k|                                                           format_strings);
   27|  2.10k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  2.10k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  2.10k|            source, format_strings);
   30|  2.10k|    }
   31|  2.10k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  2.10k|{
   25|  2.10k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  2.10k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  2.10k|}

