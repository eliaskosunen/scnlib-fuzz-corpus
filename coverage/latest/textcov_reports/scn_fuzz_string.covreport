_ZN3scn2v46detail39code_point_length_by_starting_code_unitIcEEmT_:
 4085|  3.99M|{
 4086|  3.99M|    if constexpr (sizeof(U) == 1) {
 4087|  3.99M|        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|       |    else {
 4093|       |        // utf-32
 4094|       |        static_assert(sizeof(U) == 4);
 4095|       |        SCN_UNUSED(ch);
 4096|       |        return 1;
 4097|       |    }
 4098|  3.99M|}
_ZN3scn2v46detail44utf8_code_point_length_by_starting_code_unitIcEEmT_:
 4049|  3.99M|{
 4050|  3.99M|    static_assert(sizeof(U8) == 1);
 4051|       |
 4052|  3.99M|    SCN_GCC_COMPAT_PUSH
 4053|  3.99M|    SCN_GCC_COMPAT_IGNORE("-Wsign-conversion")
 4054|  3.99M|    constexpr char lengths[] =
 4055|  3.99M|        "\1\1\1\1\1\1\1\1"  // highest bit is 0 -> single-byte
 4056|  3.99M|        "\1\1\1\1\1\1\1\1"
 4057|  3.99M|        "\0\0\0\0\0\0\0\0"  // highest bits 10 -> error, non-initial
 4058|       |                            // byte
 4059|  3.99M|        "\2\2\2\2"          // highest bits 110 -> 2-byte cp
 4060|  3.99M|        "\3\3"              // highest bits 1110 -> 3-byte cp
 4061|  3.99M|        "\4";               // highest bits 11110 -> 4-byte cp
 4062|  3.99M|    return lengths[static_cast<unsigned char>(ch) >> 3];
 4063|  3.99M|    SCN_GCC_COMPAT_POP
 4064|  3.99M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIcEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|  3.84M|{
 4292|  3.84M|    if constexpr (sizeof(CharT) == 1) {
 4293|  3.84M|        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|       |    else {
 4299|       |        SCN_EXPECT(input.size() == 1);
 4300|       |        auto cp = static_cast<char32_t>(input.front());
 4301|       |        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
 4302|       |            return invalid_code_point;
 4303|       |        }
 4304|       |        return cp;
 4305|       |    }
 4306|  3.84M|}
_ZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
 4104|  3.84M|{
 4105|  3.84M|    SCN_EXPECT(!input.empty() && input.size() <= 4);
  ------------------
  |  | 1104|  3.84M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.84M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4106|       |
 4107|  3.84M|    const auto is_trailing_code_unit = [](char ch) {
 4108|  3.84M|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|  3.84M|    };
 4110|       |
 4111|  3.84M|    if (input.size() == 1) {
  ------------------
  |  Branch (4111:9): [True: 3.44M, False: 399k]
  ------------------
 4112|  3.44M|        if (static_cast<unsigned char>(input[0]) >= 0x80) {
  ------------------
  |  Branch (4112:13): [True: 281, False: 3.44M]
  ------------------
 4113|    281|            SCN_UNLIKELY_ATTR
 4114|    281|            return invalid_code_point;
 4115|    281|        }
 4116|  3.44M|        return static_cast<char32_t>(input[0]);
 4117|  3.44M|    }
 4118|       |
 4119|   399k|    if (input.size() == 2) {
  ------------------
  |  Branch (4119:9): [True: 110k, False: 288k]
  ------------------
 4120|   110k|        if ((static_cast<unsigned char>(input[0]) & 0xe0) != 0xc0) {
  ------------------
  |  Branch (4120:13): [True: 158, False: 110k]
  ------------------
 4121|    158|            SCN_UNLIKELY_ATTR
 4122|    158|            return invalid_code_point;
 4123|    158|        }
 4124|   110k|        if (!is_trailing_code_unit(input[1])) {
  ------------------
  |  Branch (4124:13): [True: 10.3k, False: 99.7k]
  ------------------
 4125|  10.3k|            SCN_UNLIKELY_ATTR
 4126|  10.3k|            return invalid_code_point;
 4127|  10.3k|        }
 4128|       |
 4129|  99.7k|        char32_t cp{};
 4130|  99.7k|        cp |= (static_cast<char32_t>(input[0]) & 0x1f) << 6;
 4131|  99.7k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 0;
 4132|  99.7k|        return cp;
 4133|   110k|    }
 4134|       |
 4135|   288k|    if (input.size() == 3) {
  ------------------
  |  Branch (4135:9): [True: 280k, False: 8.24k]
  ------------------
 4136|   280k|        if ((static_cast<unsigned char>(input[0]) & 0xf0) != 0xe0) {
  ------------------
  |  Branch (4136:13): [True: 35, False: 280k]
  ------------------
 4137|     35|            SCN_UNLIKELY_ATTR
 4138|     35|            return invalid_code_point;
 4139|     35|        }
 4140|   280k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4140:13): [True: 2.49k, False: 278k]
  ------------------
 4141|   280k|            !is_trailing_code_unit(input[2])) {
  ------------------
  |  Branch (4141:13): [True: 775, False: 277k]
  ------------------
 4142|  3.26k|            SCN_UNLIKELY_ATTR
 4143|  3.26k|            return invalid_code_point;
 4144|  3.26k|        }
 4145|       |
 4146|   277k|        char32_t cp{};
 4147|   277k|        cp |= (static_cast<char32_t>(input[0]) & 0x0f) << 12;
 4148|   277k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 6;
 4149|   277k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 0;
 4150|   277k|        return cp;
 4151|   280k|    }
 4152|       |
 4153|  8.24k|    if (input.size() == 4) {
  ------------------
  |  Branch (4153:9): [True: 8.24k, False: 0]
  ------------------
 4154|  8.24k|        if ((static_cast<unsigned char>(input[0]) & 0xf8) != 0xf0) {
  ------------------
  |  Branch (4154:13): [True: 0, False: 8.24k]
  ------------------
 4155|      0|            SCN_UNLIKELY_ATTR
 4156|      0|            return invalid_code_point;
 4157|      0|        }
 4158|  8.24k|        if (static_cast<unsigned char>(input[0]) > 0xf4) {
  ------------------
  |  Branch (4158:13): [True: 1.84k, False: 6.39k]
  ------------------
 4159|  1.84k|            SCN_UNLIKELY_ATTR
 4160|  1.84k|            return invalid_code_point;
 4161|  1.84k|        }
 4162|  6.39k|        if (!is_trailing_code_unit(input[1]) ||
  ------------------
  |  Branch (4162:13): [True: 2.47k, False: 3.92k]
  ------------------
 4163|  6.39k|            !is_trailing_code_unit(input[2]) ||
  ------------------
  |  Branch (4163:13): [True: 172, False: 3.75k]
  ------------------
 4164|  6.39k|            !is_trailing_code_unit(input[3])) {
  ------------------
  |  Branch (4164:13): [True: 111, False: 3.64k]
  ------------------
 4165|  2.75k|            SCN_UNLIKELY_ATTR
 4166|  2.75k|            return invalid_code_point;
 4167|  2.75k|        }
 4168|       |
 4169|  3.64k|        char32_t cp{};
 4170|  3.64k|        cp |= (static_cast<char32_t>(input[0]) & 0x07) << 18;
 4171|  3.64k|        cp |= (static_cast<char32_t>(input[1]) & 0x3f) << 12;
 4172|  3.64k|        cp |= (static_cast<char32_t>(input[2]) & 0x3f) << 6;
 4173|  3.64k|        cp |= (static_cast<char32_t>(input[3]) & 0x3f) << 0;
 4174|  3.64k|        return cp;
 4175|  6.39k|    }
 4176|       |
 4177|      0|#if !SCN_GCC || SCN_GCC >= SCN_COMPILER(8, 0, 0)
 4178|       |    // gcc 7 thinks we'll get here, even when we won't
 4179|      0|    SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4180|      0|#endif
 4181|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 4182|      0|}
_ZZN3scn2v46detail33decode_utf8_code_point_exhaustiveENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENKUlcE_clEc:
 4107|   683k|    const auto is_trailing_code_unit = [](char ch) {
 4108|   683k|        return static_cast<unsigned char>(ch) >> 6 == 0x2;
 4109|   683k|    };
_ZN3scn2v46detail31make_string_view_from_iteratorsIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  3.36M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  3.36M|    else {
 3984|  3.36M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  3.36M|                                       to_address(first), to_address(last)))};
 3986|  3.36M|    }
 3987|  3.36M|}
_ZN3scn2v46detail10to_addressIRPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  10.4M|{
  331|  10.4M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  10.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  10.4M|}
_ZN3scn2v46detail15to_address_implIKcEEPT_S5_NS1_12priority_tagILm2EEE:
  308|  11.7M|{
  309|  11.7M|    return p;
  310|  11.7M|}
_ZN3scn2v46detail25make_string_view_iteratorIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEE8iteratorES8_S9_:
 4008|  1.64M|{
 4009|       |    if constexpr (std::is_constructible_v<
 4010|       |                      typename std::basic_string_view<CharT>::iterator,
 4011|       |                      decltype(it)> &&
 4012|  1.64M|                  !SCN_MSVC_DEBUG_ITERATORS) {
 4013|  1.64M|        SCN_UNUSED(sv);
  ------------------
  |  | 1089|  1.64M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4014|  1.64M|        return it;
 4015|       |    }
 4016|       |    else {
 4017|       |        return sv.begin() + std::distance(sv.data(), detail::to_address(it));
 4018|       |    }
 4019|  1.64M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  23.8k|    {
 2883|  23.8k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  23.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  23.8k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  23.8k|    {
 2864|  23.8k|        return decay_copy(t.begin());
 2865|  23.8k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKcEEu7__decayIT_EOS6_:
 2107|  2.01M|{
 2108|  2.01M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  2.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  2.01M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   427k|    {
 2940|   427k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   427k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEPKcSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   427k|    {
 2922|   427k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   427k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   427k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJDpT_EEEEEOSJ_NS0_24basic_scan_format_stringIcNSO_13type_identityISJ_E4typeEJDpNS10_ISU_E4typeEEEE:
 9892|  43.4k|{
 9893|  43.4k|    auto result = make_scan_result<Source, Args...>();
 9894|  43.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  43.4k|                                   make_scan_args(result->values())));
 9896|  43.4k|    return result;
 9897|  43.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEEDav:
 9848|   106k|{
 9849|   106k|    return scan_result_type<Source, Args...>();
 9850|   106k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   106k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|   106k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|   106k|    {
  628|   106k|        construct();
  629|   106k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|   106k|    {
  709|   106k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|   106k|        m_has_value = true;
  711|   106k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEJEEEPT_SK_DpOT0_:
  410|   106k|{
  411|   106k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   106k|        T(std::forward<Args>(args)...);
  413|   106k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2Ev:
 6692|   106k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEC2Ev:
 6535|   213k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2Ev:
 3473|   213k|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEC2Ev:
 6466|   240k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   510k|    {
  733|   510k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   510k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   510k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|   106k|{
 9834|   106k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.4k, False: 95.1k]
  |  |  ------------------
  ------------------
 9835|  11.4k|        out = unexpected(in.error());
 9836|  11.4k|    }
 9837|  95.1k|    else {
 9838|  95.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  95.1k|    static_cast<    \
  |  | 1109|  95.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  95.1k|    }
 9840|   106k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEcvbEv:
 1753|   213k|    {
 1754|   213k|        return has_value();
 1755|   213k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   426k|    {
  505|   426k|        return m_has_value;
  506|   426k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5errorEv:
 1759|  22.9k|    {
 1760|  22.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  22.9k|        return this->get_unexpected().error();
 1762|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.9k|    {
  488|  22.9k|        return m_unexpected;
  489|  22.9k|    }
_ZNR3scn2v410unexpectedINS0_10scan_errorEE5errorEv:
  379|   989k|    {
  380|   989k|        return m_unexpected;
  381|   989k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IRS2_vEEOT_:
  364|   433k|        : m_unexpected(std::forward<Err>(e))
  365|   433k|    {
  366|   433k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   433k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   433k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  11.4k|        : base(unexpect, std::move(e.error())),
 1630|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.4k|    {
 1632|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  11.4k|        : m_has_value(false)
  652|  11.4k|    {
  653|  11.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  11.4k|    {
  716|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.4k|                                  std::forward<Args>(args)...);
  718|  11.4k|        m_has_value = false;
  719|  11.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJRKNSt3__110in_place_tES4_EEEPT_SB_DpOT0_:
  410|  68.8k|{
  411|  68.8k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|  68.8k|        T(std::forward<Args>(args)...);
  413|  68.8k|}
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IJS2_EvEENSt3__110in_place_tEDpOT_:
  373|   568k|        : m_unexpected(std::forward<Args>(args)...)
  374|   568k|    {
  375|   568k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   568k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|   568k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  57.3k|    {
  745|  57.3k|        return reinterpret_cast<unexpected<E>*>(
  746|  57.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  57.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  57.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.4k|    {
 1330|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  11.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  11.4k|    {
  917|  11.4k|        assign_common(std::move(other));
  918|  11.4k|        return *this;
  919|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  11.4k|    {
  964|  11.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 11.4k, False: 0]
  ------------------
  965|  11.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 11.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  11.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  11.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   544k|    {
  702|   544k|        return m_has_value;
  703|   544k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|   297k|    {
  668|   297k|        return *value_ptr();
  669|   297k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  11.4k|    {
 1060|  11.4k|        this->destroy_value();
 1061|  11.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|   106k|    {
  723|   106k|        scn::detail::destroy_at(value_ptr());
  724|   106k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEEEEvPT_:
  416|   106k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   106k|    else {
  423|   106k|        p->~T();
  424|   106k|    }
  425|   106k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEED2Ev:
 6699|   106k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  11.4k|    {
  716|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.4k|                                  std::forward<Args>(args)...);
  718|  11.4k|        m_has_value = false;
  719|  11.4k|    }
_ZN3scn2v46detail12construct_atINS0_10unexpectedINS0_10scan_errorEEEJS5_EEEPT_S7_DpOT0_:
  410|   103k|{
  411|   103k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   103k|        T(std::forward<Args>(args)...);
  413|   103k|}
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  11.4k|    {
  693|  11.4k|        return std::move(*unexpected_ptr());
  694|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  22.9k|    {
  727|  22.9k|        scn::detail::destroy_at(unexpected_ptr());
  728|  22.9k|    }
_ZN3scn2v46detail10destroy_atINS0_10unexpectedINS0_10scan_errorEEEEEvPT_:
  416|   137k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   137k|    else {
  423|   137k|        p->~T();
  424|   137k|    }
  425|   137k|}
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE9set_rangeIS9_EEvOT_:
 6566|   190k|    {
 6567|   190k|        m_range = std::forward<Other>(r);
 6568|   190k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|   190k|    {
 1809|   190k|        return value();
 1810|   190k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|   190k|    {
 1783|   190k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   190k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   190k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   190k|        return this->get_value();
 1785|   190k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   190k|    {
  471|   190k|        return m_value;
  472|   190k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIcNSA_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9654|  86.8k|{
 9655|  86.8k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  86.8k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|  86.8k|{
 9592|  86.8k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  86.8k|    auto result = vscan_impl(buffer, format, args);
 9595|  86.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 76.2k]
  |  |  ------------------
  ------------------
 9596|  10.5k|        return unexpected(result.error());
 9597|  10.5k|    }
 9598|  76.2k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  86.8k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRKT_:
 5398|   213k|{
 5399|   213k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   213k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   213k|                  "\n"
 5403|   213k|                  "Unsupported range type given as input to a scanning "
 5404|   213k|                  "function.\n"
 5405|   213k|                  "A range needs to have a character type (value type) "
 5406|   213k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   213k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   213k|                  "to be included.\n"
 5409|   213k|                  "See the scnlib documentation for more details.");
 5410|   213k|    static_assert(
 5411|   213k|        !std::is_same_v<T, custom_char_traits>,
 5412|   213k|        "\n"
 5413|   213k|        "Unsupported range type given as input to a scanning "
 5414|   213k|        "function.\n"
 5415|   213k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   213k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   213k|        "not supported.");
 5418|   213k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   213k|                  "\n"
 5420|   213k|                  "Unsupported range type given as input to a scanning "
 5421|   213k|                  "function.\n"
 5422|   213k|                  "file_marker_found cannot be used as an "
 5423|   213k|                  "source range type to scn::scan.\n"
 5424|   213k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   213k|                  "and do not provide an explicit source range, "
 5426|   213k|                  "or use scn::scan with a FILE* directly.");
 5427|   213k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   213k|                  "\n"
 5429|   213k|                  "Unsupported range type given as input to a scanning "
 5430|   213k|                  "function.\n"
 5431|   213k|                  "In order to be scannable, a range needs to satisfy "
 5432|   213k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   213k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   213k|                  "\n"
 5435|   213k|                  "Unsupported range type given as input to a scanning "
 5436|   213k|                  "function.\n"
 5437|   213k|                  "A range needs to model forward_range and have a valid "
 5438|   213k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   213k|                  "Examples of scannable ranges are std::string, "
 5440|   213k|                  "std::string_view, "
 5441|   213k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   213k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   213k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   213k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKcS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|   213k|{
 5338|   213k|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|   213k|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|   213k|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   213k|    {
 3014|   213k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   213k|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   213k|    {
 2995|   213k|        return t.data();
 2996|   213k|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3396|   213k|    {
 3397|   213k|        return detail::to_address(ranges::begin(derived()));
 3398|   213k|    }
_ZN3scn2v46detail10to_addressIPKcEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  1.23M|{
  331|  1.23M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  1.23M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  1.23M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   403k|    {
 2883|   403k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   403k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   403k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   403k|    {
 2864|   403k|        return decay_copy(t.begin());
 2865|   403k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E5beginEv:
 3493|  2.54M|    {
 3494|  2.54M|        return m_iterator;
 3495|  2.54M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3352|   213k|    {
 3353|   213k|        return static_cast<const D&>(*this);
 3354|   213k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|   213k|    {
 3089|   213k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   213k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|   213k|    {
 3055|   213k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   213k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   213k|    }
_ZN3scn2v46ranges6detail10decay_copyImEEu7__decayIT_EOS4_:
 2107|  2.46M|{
 2108|  2.46M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  2.46M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  2.46M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|   895k|    {
 3510|   895k|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|   895k|    }
_ZNK3scn2v48expectedIlNS0_10scan_errorEEcvbEv:
 1753|  3.54M|    {
 1754|  3.54M|        return has_value();
 1755|  3.54M|    }
_ZNK3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9has_valueEv:
  504|  7.05M|    {
  505|  7.05M|        return m_has_value;
  506|  7.05M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5errorEv:
 1759|   103k|    {
 1760|   103k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|   103k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   103k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|   103k|        return this->get_unexpected().error();
 1762|   103k|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|   103k|    {
  488|   103k|        return m_unexpected;
  489|   103k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  22.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.9k|          m_has_value(false)
  466|  22.9k|    {
  467|  22.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   213k|    {
 1330|   213k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|   190k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   190k|                      ranges::iterator_t<SourceRange>>) {
 6799|   190k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   190k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   966k|    {
 2883|   966k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   966k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   966k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   966k|    {
 2864|   966k|        return decay_copy(t.begin());
 2865|   966k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaRT_:
 6783|   190k|{
 6784|   190k|    return ranges::end(source);
 6785|   190k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   190k|    {
 2940|   190k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   190k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   190k|    {
 2922|   190k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   190k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   190k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKcS6_E3endEv:
 3497|  1.22M|    {
 3498|  1.22M|        return m_sentinel;
 3499|  1.22M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEEdeIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1808|  3.40M|    {
 1809|  3.40M|        return value();
 1810|  3.40M|    }
_ZNR3scn2v48expectedIlNS0_10scan_errorEE5valueIlTnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS7_v:
 1782|  3.40M|    {
 1783|  3.40M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.40M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.40M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.40M|        return this->get_value();
 1785|  3.40M|    }
_ZNR3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EE9get_valueEv:
  470|  3.40M|    {
  471|  3.40M|        return m_value;
  472|  3.40M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   190k|        : base(std::in_place, std::forward<U>(val)),
 1584|   190k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   190k|    {
 1586|   190k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKcS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|   190k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   190k|    {
  457|   190k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEcvNS9_17basic_string_viewIcSC_EEEv:
 8854|  86.8k|    {
 8855|  86.8k|        return m_str;
 8856|  86.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|   195k|{
 6196|   195k|    detail::check_scan_arg_types<Args...>();
 6197|   195k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   195k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEEbv:
 5910|   240k|{
 5911|   240k|    constexpr bool default_constructible_constraint =
 5912|   240k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   240k|    static_assert(default_constructible_constraint,
 5914|   240k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   240k|    constexpr bool destructible_constraint =
 5917|   240k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   240k|    static_assert(destructible_constraint,
 5919|   240k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   240k|    constexpr bool non_reference_constraint =
 5922|   240k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   240k|    static_assert(non_reference_constraint,
 5924|   240k|                  "Scan argument types must not be references");
 5925|       |
 5926|   240k|    constexpr bool movable_constraint =
 5927|   240k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   240k|    static_assert(movable_constraint,
 5929|   240k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   240k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   240k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   240k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|   195k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   195k|    {
 6173|   195k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|   195k|    {
 6181|   195k|        return {detail::make_arg<
 6182|   195k|            kind, Context,
 6183|   195k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   195k|                                 typename Context::char_type>::value>(args)...};
 6185|   195k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE27ENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEvEEPvRT2_:
 5960|   195k|{
 5961|   195k|    return make_value<Context>(value).ref_value;
 5962|   195k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEDaRT0_:
 5895|   240k|{
 5896|   240k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   240k|                                  needs_context_tag>) {
 5900|   240k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   240k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   240k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEE:
 5702|   240k|    {                                                                        \
 5703|   240k|        return val;                                                          \
 5704|   240k|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEERS9_EEDaOT0_:
 5864|   240k|{
 5865|   240k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   240k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   240k|    constexpr bool scannable_char =
 5869|   240k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   240k|    static_assert(scannable_char,
 5871|   240k|                  "Cannot scan an argument of an unsupported character "
 5872|   240k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   240k|    constexpr bool scannable_const =
 5875|   240k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   240k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   240k|    constexpr bool scannable_disabled =
 5879|   240k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   240k|    static_assert(scannable_disabled,
 5881|   240k|                  "Cannot scan an argument that has been disabled by "
 5882|   240k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   240k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   240k|    static_assert(
 5886|   240k|        scannable,
 5887|   240k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   240k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   240k|    return arg_value{arg};
 5891|   240k|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERT_:
 5645|   240k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   240k|    {
 5647|   240k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE6valuesEv:
 6475|   195k|    {
 6476|   195k|        return m_values;
 6477|   195k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   195k|        : basic_scan_args(store.desc, store.args.data())
 6222|   195k|    {
 6223|   195k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2EmPKPv:
 6273|   282k|        : m_desc(desc), m_builtin_values(data)
 6274|   282k|    {
 6275|   282k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKcS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  1.46M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.46M|    static_cast<    \
  |  | 1109|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.46M|    static_cast<    \
  |  | 1109|  1.46M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.46M|    {
 3480|  1.46M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIcNS1_11char_traitsIcEEEE:
 8531|   282k|{
 8532|   282k|    return s;
 8533|   282k|}
_ZN3scn2v46detail27basic_runtime_format_stringIcEC2ENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 8508|   282k|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  86.8k|        : m_str(r.str)
 8850|  86.8k|    {
 8851|  86.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   106k|    {
 1754|   106k|        return has_value();
 1755|   106k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1828|   297k|    {
 1829|   297k|        return &value();
 1830|   297k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__112basic_stringIcNSA_11char_traitsIcEENSA_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|   297k|    {
 1783|   297k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   297k|        return this->get_value();
 1785|   297k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEE5beginEv:
 6555|   190k|    {
 6556|   190k|        return ranges::begin(m_range);
 6557|   190k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__112basic_stringIcNSB_11char_traitsIcEENSB_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|   118k|    {
  658|   118k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 95.1k, False: 22.9k]
  ------------------
  659|  95.1k|            destroy_value();
  660|  95.1k|        }
  661|  22.9k|        else {
  662|  22.9k|            destroy_unexpected();
  663|  22.9k|        }
  664|   118k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSF_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEJDpT_EEEEERKT0_OSK_NS0_24basic_scan_format_stringIcNSP_13type_identityISK_E4typeEJDpNS14_ISV_E4typeEEEE:
 9961|  43.4k|{
 9962|  43.4k|    auto result = make_scan_result<Source, Args...>();
 9963|  43.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  43.4k|                                   make_scan_args(result->values())));
 9965|  43.4k|    return result;
 9966|  43.4k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKcS7_EENSt3__16localeEvEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS0_6detail22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEERKT0_OSD_NS9_17basic_string_viewIcNS9_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSI_16buffer_range_tagEcEEEE:
 9672|  86.8k|{
 9673|  86.8k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  86.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  86.8k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|  86.8k|{
 9608|  86.8k|#if !SCN_DISABLE_LOCALE
 9609|  86.8k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  86.8k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  86.8k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  86.8k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  86.8k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  86.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 76.2k]
  |  |  ------------------
  ------------------
 9616|  10.5k|        return unexpected(result.error());
 9617|  10.5k|    }
 9618|  76.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  76.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  86.8k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSE_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS0_6detail22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEJT_EEEEEOSJ_:
10002|  19.7k|{
10003|  19.7k|    auto result = make_scan_result<Source, T>();
10004|  19.7k|    fill_scan_result(
10005|  19.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  19.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  19.7k|                            detail::make_arg<scan_context>(result->value())));
10007|  19.7k|    return result;
10008|  19.7k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEcEEEE:
 9685|  39.5k|{
 9686|  39.5k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  39.5k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEcEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  39.5k|{
 9632|  39.5k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  39.5k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  39.5k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  39.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.76k, False: 37.8k]
  |  |  ------------------
  ------------------
 9636|  1.76k|        return unexpected(result.error());
 9637|  1.76k|    }
 9638|  37.8k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  37.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  39.5k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__112basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5945|  44.8k|{
 5946|  44.8k|    check_scan_arg_types<T>();
 5947|       |
 5948|  44.8k|    basic_scan_arg<Context> arg;
 5949|  44.8k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  44.8k|    arg.m_value = make_value<Context>(value);
 5951|  44.8k|    return arg;
 5952|  44.8k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6040|   346k|    constexpr basic_scan_arg() = default;
_ZN3scn2v46detail9arg_valueC2Ev:
 5641|  2.64M|    arg_value() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  44.8k|    {
 6498|  44.8k|        return std::get<0>(m_values);
 6499|  44.8k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIcNSM_13type_identityISH_E4typeEJDpNSY_ISS_E4typeEEEE:
 9892|  43.4k|{
 9893|  43.4k|    auto result = make_scan_result<Source, Args...>();
 9894|  43.4k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  43.4k|                                   make_scan_args(result->values())));
 9896|  43.4k|    return result;
 9897|  43.4k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEEDav:
 9848|   106k|{
 9849|   106k|    return scan_result_type<Source, Args...>();
 9850|   106k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   106k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2Ev:
  441|   106k|        : m_value(T{}), m_has_value(true)
  442|   106k|    {
  443|   106k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2Ev:
 6692|   106k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEC2Ev:
 6466|   106k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9833|   106k|{
 9834|   106k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   106k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.4k, False: 95.1k]
  |  |  ------------------
  ------------------
 9835|  11.4k|        out = unexpected(in.error());
 9836|  11.4k|    }
 9837|  95.1k|    else {
 9838|  95.1k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|  95.1k|    static_cast<    \
  |  | 1109|  95.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|  95.1k|    }
 9840|   106k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|  11.4k|        : base(unexpect, std::move(e.error())),
 1630|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.4k|    {
 1632|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  464|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  11.4k|          m_has_value(false)
  466|  11.4k|    {
  467|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.4k|    {
 1330|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEaSEOSH_:
 1570|  11.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvEaSEOSI_:
  916|  11.4k|    {
  917|  11.4k|        assign_common(std::move(other));
  918|  11.4k|        return *this;
  919|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  963|  11.4k|    {
  964|  11.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 11.4k, False: 0]
  ------------------
  965|  11.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 11.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  11.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  11.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|   426k|    {
  505|   426k|        return m_has_value;
  506|   426k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|   297k|    {
  471|   297k|        return m_value;
  472|   297k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1059|  11.4k|    {
 1060|  11.4k|        this->destroy_value();
 1061|  11.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  11.4k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  518|  11.4k|    {
  519|  11.4k|        scn::detail::construct_at(&get_unexpected(),
  520|  11.4k|                                  std::forward<Args>(args)...);
  521|  11.4k|        m_has_value = false;
  522|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  11.4k|    {
  488|  11.4k|        return m_unexpected;
  489|  11.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEJNSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  11.4k|    {
  496|  11.4k|        return std::move(m_unexpected);
  497|  11.4k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEcvSD_Ev:
 8854|  86.8k|    {
 8855|  86.8k|        return m_str;
 8856|  86.8k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  86.8k|{
 6196|  86.8k|    detail::check_scan_arg_types<Args...>();
 6197|  86.8k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  86.8k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEEbv:
 5910|   106k|{
 5911|   106k|    constexpr bool default_constructible_constraint =
 5912|   106k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   106k|    static_assert(default_constructible_constraint,
 5914|   106k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   106k|    constexpr bool destructible_constraint =
 5917|   106k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   106k|    static_assert(destructible_constraint,
 5919|   106k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   106k|    constexpr bool non_reference_constraint =
 5922|   106k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   106k|    static_assert(non_reference_constraint,
 5924|   106k|                  "Scan argument types must not be references");
 5925|       |
 5926|   106k|    constexpr bool movable_constraint =
 5927|   106k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   106k|    static_assert(movable_constraint,
 5929|   106k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   106k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   106k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   106k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6171|  86.8k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  86.8k|    {
 6173|  86.8k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEJNSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  86.8k|    {
 6181|  86.8k|        return {detail::make_arg<
 6182|  86.8k|            kind, Context,
 6183|  86.8k|            mapped_type_constant<remove_cvref_t<A>,
 6184|  86.8k|                                 typename Context::char_type>::value>(args)...};
 6185|  86.8k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEcEELNS1_8arg_typeE26ENSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEvEEPvRT2_:
 5960|  86.8k|{
 5961|  86.8k|    return make_value<Context>(value).ref_value;
 5962|  86.8k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEEDaRT0_:
 5895|   106k|{
 5896|   106k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   106k|                                  needs_context_tag>) {
 5900|   106k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   106k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   106k|}
_ZN3scn2v46detail10arg_mapperIcE3mapERNSt3__117basic_string_viewIcNS4_11char_traitsIcEEEE:
 5702|   106k|    {                                                                        \
 5703|   106k|        return val;                                                          \
 5704|   106k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEERS7_EEDaOT0_:
 5864|   106k|{
 5865|   106k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   106k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   106k|    constexpr bool scannable_char =
 5869|   106k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   106k|    static_assert(scannable_char,
 5871|   106k|                  "Cannot scan an argument of an unsupported character "
 5872|   106k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   106k|    constexpr bool scannable_const =
 5875|   106k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   106k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   106k|    constexpr bool scannable_disabled =
 5879|   106k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   106k|    static_assert(scannable_disabled,
 5881|   106k|                  "Cannot scan an argument that has been disabled by "
 5882|   106k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   106k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   106k|    static_assert(
 5886|   106k|        scannable,
 5887|   106k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   106k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   106k|    return arg_value{arg};
 5891|   106k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEERT_:
 5645|   106k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   106k|    {
 5647|   106k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE6valuesEv:
 6475|  86.8k|    {
 6476|  86.8k|        return m_values;
 6477|  86.8k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2IJNSt3__117basic_string_viewIcNS8_11char_traitsIcEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  86.8k|        : basic_scan_args(store.desc, store.args.data())
 6222|  86.8k|    {
 6223|  86.8k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeIPKcS7_EEJNSt3__117basic_string_viewIcNS9_11char_traitsIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|  86.8k|        : m_str(r.str)
 8850|  86.8k|    {
 8851|  86.8k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   106k|    {
 1754|   106k|        return has_value();
 1755|   106k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEEptEv:
 1828|   297k|    {
 1829|   297k|        return &value();
 1830|   297k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEJNSt3__117basic_string_viewIcNSA_11char_traitsIcEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|   297k|    {
 1783|   297k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   297k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   297k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   297k|        return this->get_value();
 1785|   297k|    }
_ZN3scn2v44scanIJNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKcSD_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIcNSN_13type_identityISI_E4typeEJDpNS12_IST_E4typeEEEE:
 9961|  43.4k|{
 9962|  43.4k|    auto result = make_scan_result<Source, Args...>();
 9963|  43.4k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  43.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  43.4k|                                   make_scan_args(result->values())));
 9965|  43.4k|    return result;
 9966|  43.4k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_6ranges6detail9subrange_8subrangeIPKcSC_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
10002|  19.7k|{
10003|  19.7k|    auto result = make_scan_result<Source, T>();
10004|  19.7k|    fill_scan_result(
10005|  19.7k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  19.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  19.7k|                            detail::make_arg<scan_context>(result->value())));
10007|  19.7k|    return result;
10008|  19.7k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEENSt3__117basic_string_viewIcNS6_11char_traitsIcEEEEEENS0_14basic_scan_argIT_EERT0_:
 5945|  19.7k|{
 5946|  19.7k|    check_scan_arg_types<T>();
 5947|       |
 5948|  19.7k|    basic_scan_arg<Context> arg;
 5949|  19.7k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|  19.7k|    arg.m_value = make_value<Context>(value);
 5951|  19.7k|    return arg;
 5952|  19.7k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|  19.7k|    {
 6498|  19.7k|        return std::get<0>(m_values);
 6499|  19.7k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  11.4k|    {
 2883|  11.4k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  11.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  11.4k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  11.4k|    {
 2864|  11.4k|        return decay_copy(t.begin());
 2865|  11.4k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIcPKcRS6_PKS7_lLl4096EEEEEu7__decayIT_EOSC_:
 2107|  5.34M|{
 2108|  5.34M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  5.34M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  5.34M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIcNS6_9allocatorIcEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   267k|    {
 2940|   267k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   267k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIcNS6_9allocatorIcEEEENS6_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   267k|    {
 2922|   267k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   267k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   267k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJDpT_EEEEEOSO_NS0_24basic_scan_format_stringIcNST_13type_identityISO_E4typeEJDpNS15_ISZ_E4typeEEEE:
 9892|  54.2k|{
 9893|  54.2k|    auto result = make_scan_result<Source, Args...>();
 9894|  54.2k|    fill_scan_result(result, vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9895|  54.2k|                                   make_scan_args(result->values())));
 9896|  54.2k|    return result;
 9897|  54.2k|}
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEEDav:
 9848|   133k|{
 9849|   133k|    return scan_result_type<Source, Args...>();
 9850|   133k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   133k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|   133k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|   133k|    {
  628|   133k|        construct();
  629|   133k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|   133k|    {
  709|   133k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|   133k|        m_has_value = true;
  711|   133k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEJEEEPT_SP_DpOT0_:
  410|   133k|{
  411|   133k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   133k|        T(std::forward<Args>(args)...);
  413|   133k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2Ev:
 6692|   133k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2Ev:
 6535|   133k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2Ev:
 3473|   133k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|   644k|    {
  733|   644k|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|   644k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|   644k|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9833|   133k|{
 9834|   133k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   133k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 11.4k, False: 122k]
  |  |  ------------------
  ------------------
 9835|  11.4k|        out = unexpected(in.error());
 9836|  11.4k|    }
 9837|   122k|    else {
 9838|   122k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   122k|    static_cast<    \
  |  | 1109|   122k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   122k|    }
 9840|   133k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   133k|    {
 1754|   133k|        return has_value();
 1755|   133k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|   267k|    {
  505|   267k|        return m_has_value;
  506|   267k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  11.4k|    {
 1760|  11.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  11.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  11.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  11.4k|        return this->get_unexpected().error();
 1762|  11.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  11.4k|    {
  488|  11.4k|        return m_unexpected;
  489|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1629|  11.4k|        : base(unexpect, std::move(e.error())),
 1630|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.4k|    {
 1632|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  651|  11.4k|        : m_has_value(false)
  652|  11.4k|    {
  653|  11.4k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  715|  11.4k|    {
  716|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.4k|                                  std::forward<Args>(args)...);
  718|  11.4k|        m_has_value = false;
  719|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|  57.3k|    {
  745|  57.3k|        return reinterpret_cast<unexpected<E>*>(
  746|  57.3k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|  57.3k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|  57.3k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  11.4k|    {
 1330|  11.4k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEaSEOSO_:
 1570|  11.4k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvEaSEOSP_:
  916|  11.4k|    {
  917|  11.4k|        assign_common(std::move(other));
  918|  11.4k|        return *this;
  919|  11.4k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  963|  11.4k|    {
  964|  11.4k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 11.4k, False: 0]
  ------------------
  965|  11.4k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 11.4k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  11.4k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  11.4k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|   679k|    {
  702|   679k|        return m_has_value;
  703|   679k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|   377k|    {
  668|   377k|        return *value_ptr();
  669|   377k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1059|  11.4k|    {
 1060|  11.4k|        this->destroy_value();
 1061|  11.4k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|   133k|    {
  723|   133k|        scn::detail::destroy_at(value_ptr());
  724|   133k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEEEEvPT_:
  416|   133k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   133k|    else {
  423|   133k|        p->~T();
  424|   133k|    }
  425|   133k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEED2Ev:
 6699|   133k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  715|  11.4k|    {
  716|  11.4k|        scn::detail::construct_at(unexpected_ptr(),
  717|  11.4k|                                  std::forward<Args>(args)...);
  718|  11.4k|        m_has_value = false;
  719|  11.4k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  11.4k|    {
  693|  11.4k|        return std::move(*unexpected_ptr());
  694|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  22.9k|    {
  727|  22.9k|        scn::detail::destroy_at(unexpected_ptr());
  728|  22.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   122k|    {
 6567|   122k|        m_range = std::forward<Other>(r);
 6568|   122k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   122k|    {
 1809|   122k|        return value();
 1810|   122k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   122k|    {
 1783|   122k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   122k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   122k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   122k|        return this->get_value();
 1785|   122k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   122k|    {
  471|   122k|        return m_value;
  472|   122k|    }
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9654|  54.2k|{
 9655|  54.2k|    return detail::vscan_generic(SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9656|  54.2k|}
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|  54.2k|{
 9592|  54.2k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|  54.2k|    auto result = vscan_impl(buffer, format, args);
 9595|  54.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.29k, False: 48.9k]
  |  |  ------------------
  ------------------
 9596|  5.29k|        return unexpected(result.error());
 9597|  5.29k|    }
 9598|  48.9k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|  54.2k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5398|   133k|{
 5399|   133k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   133k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   133k|                  "\n"
 5403|   133k|                  "Unsupported range type given as input to a scanning "
 5404|   133k|                  "function.\n"
 5405|   133k|                  "A range needs to have a character type (value type) "
 5406|   133k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   133k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   133k|                  "to be included.\n"
 5409|   133k|                  "See the scnlib documentation for more details.");
 5410|   133k|    static_assert(
 5411|   133k|        !std::is_same_v<T, custom_char_traits>,
 5412|   133k|        "\n"
 5413|   133k|        "Unsupported range type given as input to a scanning "
 5414|   133k|        "function.\n"
 5415|   133k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   133k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   133k|        "not supported.");
 5418|   133k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   133k|                  "\n"
 5420|   133k|                  "Unsupported range type given as input to a scanning "
 5421|   133k|                  "function.\n"
 5422|   133k|                  "file_marker_found cannot be used as an "
 5423|   133k|                  "source range type to scn::scan.\n"
 5424|   133k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   133k|                  "and do not provide an explicit source range, "
 5426|   133k|                  "or use scn::scan with a FILE* directly.");
 5427|   133k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   133k|                  "\n"
 5429|   133k|                  "Unsupported range type given as input to a scanning "
 5430|   133k|                  "function.\n"
 5431|   133k|                  "In order to be scannable, a range needs to satisfy "
 5432|   133k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   133k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   133k|                  "\n"
 5435|   133k|                  "Unsupported range type given as input to a scanning "
 5436|   133k|                  "function.\n"
 5437|   133k|                  "A range needs to model forward_range and have a valid "
 5438|   133k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   133k|                  "Examples of scannable ranges are std::string, "
 5440|   133k|                  "std::string_view, "
 5441|   133k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   133k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   133k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   133k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   133k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   133k|    else {
 5384|   133k|        return make_forward_scan_buffer(r);
 5385|   133k|    }
 5386|   133k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRKT_:
 5202|   133k|{
 5203|   133k|    return basic_scan_forward_buffer_impl(range);
 5204|   133k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   133k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   133k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   133k|          m_cursor(ranges::begin(*m_range))
 4784|   133k|    {
 4785|   133k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIcEC2Ev:
 4754|   133k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   133k|    {
 4756|   133k|    }
_ZN3scn2v46detail17basic_scan_bufferIcEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEE:
 4445|   133k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   133k|    {
 4447|   133k|    }
_ZN3scn2v46detail17basic_scan_bufferIcED2Ev:
 4358|   133k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   255k|    {
 2883|   255k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   255k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   255k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   255k|    {
 2864|   255k|        return decay_copy(t.begin());
 2865|   255k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E5beginEv:
 3493|   377k|    {
 3494|   377k|        return m_iterator;
 3495|   377k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE4fillEv:
 4788|  1.53M|    {
 4789|  1.53M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 17.2k, False: 1.51M]
  ------------------
 4790|  17.2k|            return false;
 4791|  17.2k|        }
 4792|  1.51M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  1.51M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  1.51M|        }
 4795|  1.51M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 1.38M, False: 127k]
  ------------------
 4796|  1.38M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  1.38M|                                          this->m_current_view.begin(),
 4798|  1.38M|                                          this->m_current_view.end());
 4799|  1.38M|        }
 4800|  1.51M|        m_latest = *m_cursor;
 4801|  1.51M|        ++m_cursor;
 4802|  1.51M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  1.51M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  1.51M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  1.51M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.51M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  1.51M|        }
 4806|  1.51M|        return true;
 4807|  1.53M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  4.56M|    {
 2940|  4.56M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  4.56M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  4.56M|    {
 2922|  4.56M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  4.56M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  4.56M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_E3endEv:
 3497|  4.68M|    {
 3498|  4.68M|        return m_sentinel;
 3499|  4.68M|    }
_ZN3scn2v46detail17basic_scan_bufferIcE4syncEl:
 4363|   133k|    {
 4364|   133k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   133k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   133k|        return true;
 4366|   133k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  11.4k|        : base(unexpect, std::move(e.error())),
 1630|  11.4k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  11.4k|    {
 1632|  11.4k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  11.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  11.4k|          m_has_value(false)
  466|  11.4k|    {
  467|  11.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   133k|    {
 1330|   133k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   122k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   122k|                      ranges::iterator_t<SourceRange>>) {
 6799|   122k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   122k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   122k|    {
 2883|   122k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   122k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   122k|    {
 2864|   122k|        return decay_copy(t.begin());
 2865|   122k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEEEDaRT_:
 6783|   122k|{
 6784|   122k|    return ranges::end(source);
 6785|   122k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   122k|    {
 2940|   122k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   122k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   122k|    {
 2922|   122k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   122k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   122k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   122k|        : base(std::in_place, std::forward<U>(val)),
 1584|   122k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   122k|    {
 1586|   122k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   122k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   122k|    {
  457|   122k|    }
_ZNK3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEcvNS6_17basic_string_viewIcSH_EEEv:
 8854|   108k|    {
 8855|   108k|        return m_str;
 8856|   108k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS7_PKS8_lLl4096EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|   255k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   255k|    static_cast<    \
  |  | 1109|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   255k|    static_cast<    \
  |  | 1109|   255k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   255k|    {
 3480|   255k|    }
_ZN3scn2v424basic_scan_format_stringIcNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEJNS6_12basic_stringIcNS6_11char_traitsIcEENS6_9allocatorIcEEEEEEC2ENS0_6detail27basic_runtime_format_stringIcEE:
 8849|   108k|        : m_str(r.str)
 8850|   108k|    {
 8851|   108k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   133k|    {
 1754|   133k|        return has_value();
 1755|   133k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEEptEv:
 1828|   377k|    {
 1829|   377k|        return &value();
 1830|   377k|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEJNS7_12basic_stringIcNS7_11char_traitsIcEENS7_9allocatorIcEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1782|   377k|    {
 1783|   377k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   377k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   377k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   377k|        return this->get_value();
 1785|   377k|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEE5beginEv:
 6555|   122k|    {
 6556|   122k|        return ranges::begin(m_range);
 6557|   122k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEJNS8_12basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|   145k|    {
  658|   145k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 122k, False: 22.9k]
  ------------------
  659|   122k|            destroy_value();
  660|   122k|        }
  661|  22.9k|        else {
  662|  22.9k|            destroy_unexpected();
  663|  22.9k|        }
  664|   145k|    }
_ZN3scn2v44scanIJNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSF_PKSG_lLl4096EEESK_EEvvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT1_EEP8_IO_FILEEEST_NS0_6detail22borrowed_tail_subrangeISP_Xsr6rangesE14borrowed_rangeISP_EEE4typeEE4typeEJDpT_EEEEERKT0_OSP_NS0_24basic_scan_format_stringIcNSU_13type_identityISP_E4typeEJDpNS19_IS10_E4typeEEEE:
 9961|  54.2k|{
 9962|  54.2k|    auto result = make_scan_result<Source, Args...>();
 9963|  54.2k|    fill_scan_result(result, vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9964|  54.2k|                                   make_scan_args(result->values())));
 9965|  54.2k|    return result;
 9966|  54.2k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EENS6_6localeEvEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEERKT0_OSI_NS6_17basic_string_viewIcNS6_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSN_16buffer_range_tagEcEEEE:
 9672|  54.2k|{
 9673|  54.2k|    return detail::vscan_localized_generic(loc, SCN_FWD(source), format, args);
  ------------------
  |  | 1110|  54.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9674|  54.2k|}
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIcPKcRSA_PKSB_lLl4096EEESF_EEcEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|  54.2k|{
 9608|  54.2k|#if !SCN_DISABLE_LOCALE
 9609|  54.2k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|  54.2k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|  54.2k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|  54.2k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|  54.2k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  54.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.29k, False: 48.9k]
  |  |  ------------------
  ------------------
 9616|  5.29k|        return unexpected(result.error());
 9617|  5.29k|    }
 9618|  48.9k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|  54.2k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIcPKcRSE_PKSF_lLl4096EEESJ_EEvEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISO_Xsr6rangesE14borrowed_rangeISO_EEE4typeEE4typeEJT_EEEEEOSO_:
10002|  25.0k|{
10003|  25.0k|    auto result = make_scan_result<Source, T>();
10004|  25.0k|    fill_scan_result(
10005|  25.0k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
10006|  25.0k|                            detail::make_arg<scan_context>(result->value())));
10007|  25.0k|    return result;
10008|  25.0k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS8_PKS9_lLl4096EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEcEEEE:
 9685|  25.0k|{
 9686|  25.0k|    return detail::vscan_value_generic(SCN_FWD(source), arg);
  ------------------
  |  | 1110|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9687|  25.0k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIcPKcRS9_PKSA_lLl4096EEESE_EEcEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|  25.0k|{
 9632|  25.0k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|  25.0k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|  25.0k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|  25.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 883, False: 24.2k]
  |  |  ------------------
  ------------------
 9636|    883|        return unexpected(result.error());
 9637|    883|    }
 9638|  24.2k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|  24.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|  25.0k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  47.6k|    {
 2883|  47.6k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  47.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  47.6k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESE_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  47.6k|    {
 2864|  47.6k|        return decay_copy(t.begin());
 2865|  47.6k|    }
_ZN3scn2v46ranges6detail10decay_copyIPKwEEu7__decayIT_EOS6_:
 2107|  11.8M|{
 2108|  11.8M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  11.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  11.8M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  3.06M|    {
 2940|  3.06M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  3.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  3.06M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEPKwSD_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  3.06M|    {
 2922|  3.06M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  3.06M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  3.06M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEEDav:
 9848|   765k|{
 9849|   765k|    return scan_result_type<Source, Args...>();
 9850|   765k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   765k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|   765k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|   765k|    {
  628|   765k|        construct();
  629|   765k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|   765k|    {
  709|   765k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|   765k|        m_has_value = true;
  711|   765k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEJEEEPT_SK_DpOT0_:
  410|   765k|{
  411|   765k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   765k|        T(std::forward<Args>(args)...);
  413|   765k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2Ev:
 6692|   765k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEC2Ev:
 6535|  1.53M|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2Ev:
 3473|  1.53M|    subrange() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEC2Ev:
 6466|  1.53M|    constexpr scan_result_value_storage() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  3.78M|    {
  733|  3.78M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  3.78M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  3.78M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSL_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISL_EEONSX_ISR_EE:
 9833|   765k|{
 9834|   765k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.9k, False: 742k]
  |  |  ------------------
  ------------------
 9835|  22.9k|        out = unexpected(in.error());
 9836|  22.9k|    }
 9837|   742k|    else {
 9838|   742k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   742k|    static_cast<    \
  |  | 1109|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   742k|    }
 9840|   765k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEcvbEv:
 1753|  1.53M|    {
 1754|  1.53M|        return has_value();
 1755|  1.53M|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  3.06M|    {
  505|  3.06M|        return m_has_value;
  506|  3.06M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5errorEv:
 1759|  45.9k|    {
 1760|  45.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  45.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  45.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  45.9k|        return this->get_unexpected().error();
 1762|  45.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  45.9k|    {
  488|  45.9k|        return m_unexpected;
  489|  45.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISI_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISI_OT_EEvE4typeELPv0ETnPNSL_IXsr3stdE16is_convertible_vISN_SI_EEvE4typeELSR_0EEEONS0_10unexpectedISM_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSJ_EvEENS0_10unexpect_tEDpOT_:
  651|  22.9k|        : m_has_value(false)
  652|  22.9k|    {
  653|  22.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNSB_10in_place_tESJ_EEEvDpOT_:
  715|  22.9k|    {
  716|  22.9k|        scn::detail::construct_at(unexpected_ptr(),
  717|  22.9k|                                  std::forward<Args>(args)...);
  718|  22.9k|        m_has_value = false;
  719|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   114k|    {
  745|   114k|        return reinterpret_cast<unexpected<E>*>(
  746|   114k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   114k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.9k|    {
 1330|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSJ_:
 1570|  22.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSK_:
  916|  22.9k|    {
  917|  22.9k|        assign_common(std::move(other));
  918|  22.9k|        return *this;
  919|  22.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISK_EEvOT_:
  963|  22.9k|    {
  964|  22.9k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.9k, False: 0]
  ------------------
  965|  22.9k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.9k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.9k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  3.85M|    {
  702|  3.85M|        return m_has_value;
  703|  3.85M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  2.25M|    {
  668|  2.25M|        return *value_ptr();
  669|  2.25M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISK_EEvOT_:
 1059|  22.9k|    {
 1060|  22.9k|        this->destroy_value();
 1061|  22.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|   765k|    {
  723|   765k|        scn::detail::destroy_at(value_ptr());
  724|   765k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEEEEvPT_:
  416|   765k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   765k|    else {
  423|   765k|        p->~T();
  424|   765k|    }
  425|   765k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEED2Ev:
 6699|   765k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISJ_EEEEEvDpOT_:
  715|  22.9k|    {
  716|  22.9k|        scn::detail::construct_at(unexpected_ptr(),
  717|  22.9k|                                  std::forward<Args>(args)...);
  718|  22.9k|        m_has_value = false;
  719|  22.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  22.9k|    {
  693|  22.9k|        return std::move(*unexpected_ptr());
  694|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  45.9k|    {
  727|  45.9k|        scn::detail::destroy_at(unexpected_ptr());
  728|  45.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE9set_rangeIS9_EEvOT_:
 6566|  1.48M|    {
 6567|  1.48M|        m_range = std::forward<Other>(r);
 6568|  1.48M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEdeIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1808|  1.48M|    {
 1809|  1.48M|        return value();
 1810|  1.48M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEE5valueIS8_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSE_v:
 1782|  1.48M|    {
 1783|  1.48M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.48M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.48M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.48M|        return this->get_value();
 1785|  1.48M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.48M|    {
  471|  1.48M|        return m_value;
  472|  1.48M|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NSB_17basic_string_viewIT0_NSB_11char_traitsISQ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESQ_EEEE:
 9591|   615k|{
 9592|   615k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   615k|    auto result = vscan_impl(buffer, format, args);
 9595|   615k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 21.1k, False: 594k]
  |  |  ------------------
  ------------------
 9596|  21.1k|        return unexpected(result.error());
 9597|  21.1k|    }
 9598|   594k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   615k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRKT_:
 5398|  1.53M|{
 5399|  1.53M|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|  1.53M|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|  1.53M|                  "\n"
 5403|  1.53M|                  "Unsupported range type given as input to a scanning "
 5404|  1.53M|                  "function.\n"
 5405|  1.53M|                  "A range needs to have a character type (value type) "
 5406|  1.53M|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|  1.53M|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|  1.53M|                  "to be included.\n"
 5409|  1.53M|                  "See the scnlib documentation for more details.");
 5410|  1.53M|    static_assert(
 5411|  1.53M|        !std::is_same_v<T, custom_char_traits>,
 5412|  1.53M|        "\n"
 5413|  1.53M|        "Unsupported range type given as input to a scanning "
 5414|  1.53M|        "function.\n"
 5415|  1.53M|        "String types (std::basic_string, and std::basic_string_view) "
 5416|  1.53M|        "need to use std::char_traits. Strings with custom Traits are "
 5417|  1.53M|        "not supported.");
 5418|  1.53M|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|  1.53M|                  "\n"
 5420|  1.53M|                  "Unsupported range type given as input to a scanning "
 5421|  1.53M|                  "function.\n"
 5422|  1.53M|                  "file_marker_found cannot be used as an "
 5423|  1.53M|                  "source range type to scn::scan.\n"
 5424|  1.53M|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|  1.53M|                  "and do not provide an explicit source range, "
 5426|  1.53M|                  "or use scn::scan with a FILE* directly.");
 5427|  1.53M|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|  1.53M|                  "\n"
 5429|  1.53M|                  "Unsupported range type given as input to a scanning "
 5430|  1.53M|                  "function.\n"
 5431|  1.53M|                  "In order to be scannable, a range needs to satisfy "
 5432|  1.53M|                  "`forward_range`. `input_range` is not sufficient.");
 5433|  1.53M|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|  1.53M|                  "\n"
 5435|  1.53M|                  "Unsupported range type given as input to a scanning "
 5436|  1.53M|                  "function.\n"
 5437|  1.53M|                  "A range needs to model forward_range and have a valid "
 5438|  1.53M|                  "character type (char or wchar_t) to be scannable.\n"
 5439|  1.53M|                  "Examples of scannable ranges are std::string, "
 5440|  1.53M|                  "std::string_view, "
 5441|  1.53M|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|  1.53M|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|  1.53M|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|  1.53M|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeIPKwS9_EETnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE11sized_rangeISD_EEvE4typeELPv0EEEDaRKSD_NS1_12priority_tagILm2EEE:
 5337|  1.53M|{
 5338|  1.53M|    if constexpr (is_valid_char_type<detail::char_t<Range>>) {
 5339|  1.53M|        return std::basic_string_view{ranges::data(r), ranges::size(r)};
 5340|       |    }
 5341|       |    else {
 5342|       |        return invalid_char_type{};
 5343|       |    }
 5344|  1.53M|}
_ZNK3scn2v46ranges6detail5data_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  1.53M|    {
 3014|  1.53M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  1.53M|    }
_ZN3scn2v46ranges6detail5data_2fn4implIKNS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESE_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  1.53M|    {
 2995|  1.53M|        return t.data();
 2996|  1.53M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3396|  1.53M|    {
 3397|  1.53M|        return detail::to_address(ranges::begin(derived()));
 3398|  1.53M|    }
_ZN3scn2v46detail10to_addressIPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|  5.78M|{
  331|  5.78M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|  5.78M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|  5.78M|}
_ZN3scn2v46detail15to_address_implIKwEEPT_S5_NS1_12priority_tagILm2EEE:
  308|   187M|{
  309|   187M|    return p;
  310|   187M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  3.01M|    {
 2883|  3.01M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  3.01M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  3.01M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESG_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  3.01M|    {
 2864|  3.01M|        return decay_copy(t.begin());
 2865|  3.01M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E5beginEv:
 3493|   156M|    {
 3494|   156M|        return m_iterator;
 3495|   156M|    }
_ZNK3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3352|  1.53M|    {
 3353|  1.53M|        return static_cast<const D&>(*this);
 3354|  1.53M|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRKNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSD_:
 3088|  1.53M|    {
 3089|  1.53M|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  1.53M|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRKNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESF_E4typeEOSG_NS0_6detail12priority_tagILm2EEE:
 3054|  1.53M|    {
 3055|  1.53M|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  1.53M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E4sizeIS6_TnPNSt3__19enable_ifIX18sized_sentinel_forIS6_T_EEvE4typeELPv0EEEmv:
 3509|  3.65M|    {
 3510|  3.65M|        return static_cast<size_t>(m_sentinel - m_iterator);
 3511|  3.65M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS9_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSD_IXsr3stdE16is_convertible_vISF_S9_EEvE4typeELSJ_0EEEONS0_10unexpectedISE_EE:
 1629|  45.9k|        : base(unexpect, std::move(e.error())),
 1630|  45.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  45.9k|    {
 1632|  45.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJSA_EvEENS0_10unexpect_tEDpOT_:
  464|  45.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  45.9k|          m_has_value(false)
  466|  45.9k|    {
  467|  45.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.53M|    {
 1330|  1.53M|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISB_EEE4typeEOSB_l:
 6796|  1.48M|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|  1.48M|                      ranges::iterator_t<SourceRange>>) {
 6799|  1.48M|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|  1.48M|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  4.24M|    {
 2883|  4.24M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  4.24M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  4.24M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEEENSt3__19enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  4.24M|    {
 2864|  4.24M|        return decay_copy(t.begin());
 2865|  4.24M|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaRT_:
 6783|  1.48M|{
 6784|  1.48M|    return ranges::end(source);
 6785|  1.48M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.48M|    {
 2940|  1.48M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.48M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EES9_S9_EENSt3__19enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.48M|    {
 2922|  1.48M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.48M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.48M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeIPKwS6_E3endEv:
 3497|   148M|    {
 3498|   148M|        return m_sentinel;
 3499|   148M|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|  1.48M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.48M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.48M|    {
 1586|  1.48M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeIPKwS8_EENS0_10scan_errorELb1EEC2IJS9_EvEENSt3__110in_place_tEDpOT_:
  455|  1.48M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.48M|    {
  457|  1.48M|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEcvNS9_17basic_string_viewIwSC_EEEv:
 8854|   615k|    {
 8855|   615k|        return m_str;
 8856|   615k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|  1.23M|{
 6196|  1.23M|    detail::check_scan_arg_types<Args...>();
 6197|  1.23M|    return detail::scan_arg_store<Context, Args...>(values);
 6198|  1.23M|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEEEbv:
 5910|  1.53M|{
 5911|  1.53M|    constexpr bool default_constructible_constraint =
 5912|  1.53M|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|  1.53M|    static_assert(default_constructible_constraint,
 5914|  1.53M|                  "Scan argument types must be default constructible");
 5915|       |
 5916|  1.53M|    constexpr bool destructible_constraint =
 5917|  1.53M|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|  1.53M|    static_assert(destructible_constraint,
 5919|  1.53M|                  "Scan argument types must be Destructible");
 5920|       |
 5921|  1.53M|    constexpr bool non_reference_constraint =
 5922|  1.53M|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|  1.53M|    static_assert(non_reference_constraint,
 5924|  1.53M|                  "Scan argument types must not be references");
 5925|       |
 5926|  1.53M|    constexpr bool movable_constraint =
 5927|  1.53M|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|  1.53M|    static_assert(movable_constraint,
 5929|  1.53M|                  "Scan argument types must be move constructible");
 5930|       |
 5931|  1.53M|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|  1.53M|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|  1.53M|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ERNS6_5tupleIJSC_EEE:
 6171|  1.23M|        : args(std::apply(make_argptrs<Args...>, args))
 6172|  1.23M|    {
 6173|  1.23M|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEE12make_argptrsIJSC_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|  1.23M|    {
 6181|  1.23M|        return {detail::make_arg<
 6182|  1.23M|            kind, Context,
 6183|  1.23M|            mapped_type_constant<remove_cvref_t<A>,
 6184|  1.23M|                                 typename Context::char_type>::value>(args)...};
 6185|  1.23M|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE28ENSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEvEEPvRT2_:
 5960|  1.23M|{
 5961|  1.23M|    return make_value<Context>(value).ref_value;
 5962|  1.23M|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEDaRT0_:
 5895|  1.53M|{
 5896|  1.53M|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|  1.53M|                                  needs_context_tag>) {
 5900|  1.53M|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|  1.53M|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEE:
 5702|  1.53M|    {                                                                        \
 5703|  1.53M|        return val;                                                          \
 5704|  1.53M|    }
_ZN3scn2v46detail15make_value_implINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEERS9_EEDaOT0_:
 5864|  1.53M|{
 5865|  1.53M|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|  1.53M|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|  1.53M|    constexpr bool scannable_char =
 5869|  1.53M|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|  1.53M|    static_assert(scannable_char,
 5871|  1.53M|                  "Cannot scan an argument of an unsupported character "
 5872|  1.53M|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|  1.53M|    constexpr bool scannable_const =
 5875|  1.53M|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|  1.53M|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|  1.53M|    constexpr bool scannable_disabled =
 5879|  1.53M|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|  1.53M|    static_assert(scannable_disabled,
 5881|  1.53M|                  "Cannot scan an argument that has been disabled by "
 5882|  1.53M|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|  1.53M|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|  1.53M|    static_assert(
 5886|  1.53M|        scannable,
 5887|  1.53M|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|  1.53M|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|  1.53M|    return arg_value{arg};
 5891|  1.53M|}
_ZN3scn2v46detail9arg_valueC2INSt3__112basic_stringIwNS4_11char_traitsIwEENS4_9allocatorIwEEEEEERT_:
 5645|  1.53M|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|  1.53M|    {
 5647|  1.53M|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE6valuesEv:
 6475|  1.23M|    {
 6476|  1.23M|        return m_values;
 6477|  1.23M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__112basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|  1.23M|        : basic_scan_args(store.desc, store.args.data())
 6222|  1.23M|    {
 6223|  1.23M|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2EmPKPv:
 6273|  1.84M|        : m_desc(desc), m_builtin_values(data)
 6274|  1.84M|    {
 6275|  1.84M|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeIPKwS6_EC2IS6_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S6_EEvE4typeELPv0EEESB_S6_:
 3478|  58.2M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  58.2M|    static_cast<    \
  |  | 1109|  58.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  58.2M|    static_cast<    \
  |  | 1109|  58.2M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  58.2M|    {
 3480|  58.2M|    }
_ZN3scn2v414runtime_formatENSt3__117basic_string_viewIwNS1_11char_traitsIwEEEE:
 8536|  1.84M|{
 8537|  1.84M|    return s;
 8538|  1.84M|}
_ZN3scn2v46detail27basic_runtime_format_stringIwEC2ENSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 8508|  1.84M|    basic_runtime_format_string(std::basic_string_view<CharT> s) : str(s) {}
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   615k|        : m_str(r.str)
 8850|   615k|    {
 8851|   615k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   765k|    {
 1754|   765k|        return has_value();
 1755|   765k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  2.25M|    {
 1829|  2.25M|        return &value();
 1830|  2.25M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__112basic_stringIwNSA_11char_traitsIwEENSA_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISH_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSM_v:
 1782|  2.25M|    {
 1783|  2.25M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.25M|        return this->get_value();
 1785|  2.25M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEE5beginEv:
 6555|  1.48M|    {
 6556|  1.48M|        return ranges::begin(m_range);
 6557|  1.48M|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__112basic_stringIwNSB_11char_traitsIwEENSB_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|   788k|    {
  658|   788k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 742k, False: 45.9k]
  ------------------
  659|   742k|            destroy_value();
  660|   742k|        }
  661|  45.9k|        else {
  662|  45.9k|            destroy_unexpected();
  663|  45.9k|        }
  664|   788k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESI_NS1_22borrowed_tail_subrangeISE_Xsr6rangesE14borrowed_rangeISE_EEE4typeEE4typeEEERKT_OSE_NS3_17basic_string_viewIT1_NS3_11char_traitsISU_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESU_EEEE:
 9607|   615k|{
 9608|   615k|#if !SCN_DISABLE_LOCALE
 9609|   615k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   615k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   615k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   615k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   615k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 21.1k, False: 594k]
  |  |  ------------------
  ------------------
 9616|  21.1k|        return unexpected(result.error());
 9617|  21.1k|    }
 9618|   594k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   594k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   615k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEwEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESH_NS1_22borrowed_tail_subrangeISD_Xsr6rangesE14borrowed_rangeISD_EEE4typeEE4typeEEEOSD_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|   300k|{
 9632|   300k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|   300k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|   300k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.53k, False: 296k]
  |  |  ------------------
  ------------------
 9636|  3.53k|        return unexpected(result.error());
 9637|  3.53k|    }
 9638|   296k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|   300k|}
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__112basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5945|   300k|{
 5946|   300k|    check_scan_arg_types<T>();
 5947|       |
 5948|   300k|    basic_scan_arg<Context> arg;
 5949|   300k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|   300k|    arg.m_value = make_value<Context>(value);
 5951|   300k|    return arg;
 5952|   300k|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6040|  2.29M|    constexpr basic_scan_arg() = default;
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|   300k|    {
 6498|   300k|        return std::get<0>(m_values);
 6499|   300k|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEEDav:
 9848|   765k|{
 9849|   765k|    return scan_result_type<Source, Args...>();
 9850|   765k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   765k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2Ev:
  441|   765k|        : m_value(T{}), m_has_value(true)
  442|   765k|    {
  443|   765k|    }
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2Ev:
 6692|   765k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEC2Ev:
 6466|   765k|    constexpr scan_result_value_storage() = default;
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEES9_TnPNSA_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENSA_7is_sameINSJ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISJ_EEONSV_ISP_EE:
 9833|   765k|{
 9834|   765k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.9k, False: 742k]
  |  |  ------------------
  ------------------
 9835|  22.9k|        out = unexpected(in.error());
 9836|  22.9k|    }
 9837|   742k|    else {
 9838|   742k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   742k|    static_cast<    \
  |  | 1109|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   742k|    }
 9840|   765k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEC2ISG_TnPNSA_9enable_ifIXsr3stdE18is_constructible_vISG_OT_EEvE4typeELPv0ETnPNSJ_IXsr3stdE16is_convertible_vISL_SG_EEvE4typeELSP_0EEEONS0_10unexpectedISK_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2IJSH_EvEENS0_10unexpect_tEDpOT_:
  464|  22.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.9k|          m_has_value(false)
  466|  22.9k|    {
  467|  22.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.9k|    {
 1330|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEaSEOSH_:
 1570|  22.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvEaSEOSI_:
  916|  22.9k|    {
  917|  22.9k|        assign_common(std::move(other));
  918|  22.9k|        return *this;
  919|  22.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE13assign_commonISI_EEvOT_:
  963|  22.9k|    {
  964|  22.9k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.9k, False: 0]
  ------------------
  965|  22.9k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.9k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.9k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9has_valueEv:
  504|  3.06M|    {
  505|  3.06M|        return m_has_value;
  506|  3.06M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE9get_valueEv:
  470|  2.25M|    {
  471|  2.25M|        return m_value;
  472|  2.25M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISI_EEvOT_:
 1059|  22.9k|    {
 1060|  22.9k|        this->destroy_value();
 1061|  22.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE13destroy_valueEv:
  525|  22.9k|    static constexpr void destroy_value() noexcept {}
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE20construct_unexpectedIJNS0_10unexpectedISH_EEEEEvDpOT_:
  518|  22.9k|    {
  519|  22.9k|        scn::detail::construct_at(&get_unexpected(),
  520|  22.9k|                                  std::forward<Args>(args)...);
  521|  22.9k|        m_has_value = false;
  522|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.9k|    {
  488|  22.9k|        return m_unexpected;
  489|  22.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEJNSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEEEENS0_10scan_errorELb1EE14get_unexpectedEv:
  495|  22.9k|    {
  496|  22.9k|        return std::move(m_unexpected);
  497|  22.9k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEcvSD_Ev:
 8854|   615k|    {
 8855|   615k|        return m_str;
 8856|   615k|    }
_ZN3scn2v414make_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEEDaRNS6_5tupleIJDpT0_EEE:
 6195|   615k|{
 6196|   615k|    detail::check_scan_arg_types<Args...>();
 6197|   615k|    return detail::scan_arg_store<Context, Args...>(values);
 6198|   615k|}
_ZN3scn2v46detail20check_scan_arg_typesIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEEEbv:
 5910|   765k|{
 5911|   765k|    constexpr bool default_constructible_constraint =
 5912|   765k|        std::conjunction_v<std::is_default_constructible<Args>...>;
 5913|   765k|    static_assert(default_constructible_constraint,
 5914|   765k|                  "Scan argument types must be default constructible");
 5915|       |
 5916|   765k|    constexpr bool destructible_constraint =
 5917|   765k|        std::conjunction_v<std::is_destructible<Args>...>;
 5918|   765k|    static_assert(destructible_constraint,
 5919|   765k|                  "Scan argument types must be Destructible");
 5920|       |
 5921|   765k|    constexpr bool non_reference_constraint =
 5922|   765k|        !std::conjunction_v<std::false_type, std::is_reference<Args>...>;
 5923|   765k|    static_assert(non_reference_constraint,
 5924|   765k|                  "Scan argument types must not be references");
 5925|       |
 5926|   765k|    constexpr bool movable_constraint =
 5927|   765k|        std::conjunction_v<std::is_move_constructible<Args>...>;
 5928|   765k|    static_assert(movable_constraint,
 5929|   765k|                  "Scan argument types must be move constructible");
 5930|       |
 5931|   765k|    return default_constructible_constraint && destructible_constraint &&
  ------------------
  |  Branch (5931:12): [Folded - Ignored]
  |  Branch (5931:48): [Folded - Ignored]
  ------------------
 5932|   765k|           non_reference_constraint && movable_constraint;
  ------------------
  |  Branch (5932:12): [Folded - Ignored]
  |  Branch (5932:40): [Folded - Ignored]
  ------------------
 5933|   765k|}
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEC2ERNS6_5tupleIJSA_EEE:
 6171|   615k|        : args(std::apply(make_argptrs<Args...>, args))
 6172|   615k|    {
 6173|   615k|    }
_ZN3scn2v46detail14scan_arg_storeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEJNSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEE12make_argptrsIJSA_EEENS6_5arrayIPvLm1EEEDpRT_:
 6180|   615k|    {
 6181|   615k|        return {detail::make_arg<
 6182|   615k|            kind, Context,
 6183|   615k|            mapped_type_constant<remove_cvref_t<A>,
 6184|   615k|                                 typename Context::char_type>::value>(args)...};
 6185|   615k|    }
_ZN3scn2v46detail8make_argILNS1_19scan_arg_store_kindE0ENS0_18basic_scan_contextINS1_16buffer_range_tagEwEELNS1_8arg_typeE26ENSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEvEEPvRT2_:
 5960|   615k|{
 5961|   615k|    return make_value<Context>(value).ref_value;
 5962|   615k|}
_ZN3scn2v46detail10make_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEEDaRT0_:
 5895|   765k|{
 5896|   765k|    auto&& arg = arg_mapper<typename Context::char_type>().map(value);
 5897|       |
 5898|       |    if constexpr (!std::is_same_v<remove_cvref_t<decltype(arg)>,
 5899|   765k|                                  needs_context_tag>) {
 5900|   765k|        return make_value_impl<T>(SCN_FWD(arg));
  ------------------
  |  | 1110|   765k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 5901|       |    }
 5902|       |    else {
 5903|       |        return make_value_impl<T>(arg_mapper<typename Context::char_type>().map(
 5904|       |            value, context_tag<Context>{}));
 5905|       |    }
 5906|   765k|}
_ZN3scn2v46detail10arg_mapperIwE3mapERNSt3__117basic_string_viewIwNS4_11char_traitsIwEEEE:
 5702|   765k|    {                                                                        \
 5703|   765k|        return val;                                                          \
 5704|   765k|    }
_ZN3scn2v46detail15make_value_implINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEERS7_EEDaOT0_:
 5864|   765k|{
 5865|   765k|    using arg_nocvref_t = remove_cvref_t<Arg>;
 5866|   765k|    static_assert(!std::is_same_v<arg_nocvref_t, needs_context_tag>);
 5867|       |
 5868|   765k|    constexpr bool scannable_char =
 5869|   765k|        !std::is_same_v<arg_nocvref_t, unscannable_char>;
 5870|   765k|    static_assert(scannable_char,
 5871|   765k|                  "Cannot scan an argument of an unsupported character "
 5872|   765k|                  "type (i.e. char from a wchar_t source)");
 5873|       |
 5874|   765k|    constexpr bool scannable_const =
 5875|   765k|        !std::is_same_v<arg_nocvref_t, unscannable_const>;
 5876|   765k|    static_assert(scannable_const, "Cannot scan a const argument");
 5877|       |
 5878|   765k|    constexpr bool scannable_disabled =
 5879|   765k|        !std::is_same_v<arg_nocvref_t, unscannable_disabled>;
 5880|   765k|    static_assert(scannable_disabled,
 5881|   765k|                  "Cannot scan an argument that has been disabled by "
 5882|   765k|                  "flag (SCN_DISABLE_TYPE_*)");
 5883|       |
 5884|   765k|    constexpr bool scannable = !std::is_same_v<arg_nocvref_t, unscannable>;
 5885|   765k|    static_assert(
 5886|   765k|        scannable,
 5887|   765k|        "Cannot scan an argument. To make a type T scannable, provide "
 5888|   765k|        "a scn::scanner<T, CharT> specialization.");
 5889|       |
 5890|   765k|    return arg_value{arg};
 5891|   765k|}
_ZN3scn2v46detail9arg_valueC2INSt3__117basic_string_viewIwNS4_11char_traitsIwEEEEEERT_:
 5645|   765k|    explicit constexpr arg_value(T& val) : ref_value{std::addressof(val)}
 5646|   765k|    {
 5647|   765k|    }
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE6valuesEv:
 6475|   615k|    {
 6476|   615k|        return m_values;
 6477|   615k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2IJNSt3__117basic_string_viewIwNS8_11char_traitsIwEEEEEEERKNS3_14scan_arg_storeIS5_JDpT_EEE:
 6221|   615k|        : basic_scan_args(store.desc, store.args.data())
 6222|   615k|    {
 6223|   615k|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeIPKwS7_EEJNSt3__117basic_string_viewIwNS9_11char_traitsIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   615k|        : m_str(r.str)
 8850|   615k|    {
 8851|   615k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   765k|    {
 1754|   765k|        return has_value();
 1755|   765k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  2.25M|    {
 1829|  2.25M|        return &value();
 1830|  2.25M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEJNSt3__117basic_string_viewIwNSA_11char_traitsIwEEEEEEENS0_10scan_errorEE5valueISF_TnPNSA_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSK_v:
 1782|  2.25M|    {
 1783|  2.25M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.25M|        return this->get_value();
 1785|  2.25M|    }
_ZN3scn2v46detail8make_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEENSt3__117basic_string_viewIwNS6_11char_traitsIwEEEEEENS0_14basic_scan_argIT_EERT0_:
 5945|   150k|{
 5946|   150k|    check_scan_arg_types<T>();
 5947|       |
 5948|   150k|    basic_scan_arg<Context> arg;
 5949|   150k|    arg.m_type = mapped_type_constant<T, typename Context::char_type>::value;
 5950|   150k|    arg.m_value = make_value<Context>(value);
 5951|   150k|    return arg;
 5952|   150k|}
_ZNR3scn2v46detail25scan_result_value_storageIJNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEEE5valueILm1ETnPNS3_9enable_ifIXeqT_Li1EEvE4typeELPv0EEEDcv:
 6497|   150k|    {
 6498|   150k|        return std::get<0>(m_values);
 6499|   150k|    }
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  22.9k|    {
 2883|  22.9k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  22.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  22.9k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEENS6_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESF_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  22.9k|    {
 2864|  22.9k|        return decay_copy(t.begin());
 2865|  22.9k|    }
_ZN3scn2v46ranges6detail10decay_copyINSt3__116__deque_iteratorIwPKwRS6_PKS7_lLl1024EEEEEu7__decayIT_EOSC_:
 2107|  73.4M|{
 2108|  73.4M|    return SCN_FWD(t);
  ------------------
  |  | 1110|  73.4M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2109|  73.4M|}
_ZNK3scn2v46ranges6detail4end_2fnclIRKNSt3__15dequeIwNS6_9allocatorIwEEEEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  1.53M|    {
 2940|  1.53M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  1.53M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNSt3__15dequeIwNS6_9allocatorIwEEEENS6_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EENS6_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  1.53M|    {
 2922|  1.53M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  1.53M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  1.53M|    }
_ZN3scn2v416make_scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEEDav:
 9848|   765k|{
 9849|   765k|    return scan_result_type<Source, Args...>();
 9850|   765k|}
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2Ev:
 1565|   765k|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2Ev:
  626|   765k|    constexpr expected_storage_base() noexcept : m_has_value(true)
  627|   765k|    {
  628|   765k|        construct();
  629|   765k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9constructIJEEEvDpOT_:
  708|   765k|    {
  709|   765k|        scn::detail::construct_at(value_ptr(), std::forward<Args>(args)...);
  710|   765k|        m_has_value = true;
  711|   765k|    }
_ZN3scn2v46detail12construct_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEJEEEPT_SP_DpOT0_:
  410|   765k|{
  411|   765k|    return ::new (const_cast<void*>(static_cast<const volatile void*>(p)))
  412|   765k|        T(std::forward<Args>(args)...);
  413|   765k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2Ev:
 6692|   765k|    constexpr scan_result() = default;
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2Ev:
 6535|   765k|    constexpr scan_result_range_storage() = default;
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2Ev:
 3473|   765k|    subrange() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9value_ptrEv:
  732|  3.78M|    {
  733|  3.78M|        return reinterpret_cast<T*>(SCN_ASSUME_ALIGNED(m_memory, alignof(T)));
  ------------------
  |  | 1074|  3.78M|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  734|  3.78M|    }
_ZN3scn2v416fill_scan_resultINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEESF_TnPNS7_9enable_ifIXsr3stdE13conjunction_vINS0_6detail25is_specialization_of_implIu11__remove_cvIu20__remove_reference_tIT_EES2_EENS7_7is_sameINSQ_10range_typeET0_EEEEvE4typeELPv0EEEvRNS0_13scan_expectedISQ_EEONS12_ISW_EE:
 9833|   765k|{
 9834|   765k|    if (SCN_UNLIKELY(!in)) {
  ------------------
  |  | 1039|   765k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 22.9k, False: 742k]
  |  |  ------------------
  ------------------
 9835|  22.9k|        out = unexpected(in.error());
 9836|  22.9k|    }
 9837|   742k|    else {
 9838|   742k|        out->set_range(SCN_MOVE(*in));
  ------------------
  |  | 1108|   742k|    static_cast<    \
  |  | 1109|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9839|   742k|    }
 9840|   765k|}
_ZNK3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEcvbEv:
 1753|   765k|    {
 1754|   765k|        return has_value();
 1755|   765k|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.53M|    {
  505|  1.53M|        return m_has_value;
  506|  1.53M|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5errorEv:
 1759|  22.9k|    {
 1760|  22.9k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  22.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  22.9k|        return this->get_unexpected().error();
 1762|  22.9k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  22.9k|    {
  488|  22.9k|        return m_unexpected;
  489|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEC2ISN_TnPNS7_9enable_ifIXsr3stdE18is_constructible_vISN_OT_EEvE4typeELPv0ETnPNSQ_IXsr3stdE16is_convertible_vISS_SN_EEvE4typeELSW_0EEEONS0_10unexpectedISR_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EEC2IJSO_EvEENS0_10unexpect_tEDpOT_:
  651|  22.9k|        : m_has_value(false)
  652|  22.9k|    {
  653|  22.9k|        construct_unexpected(std::in_place, std::forward<Args>(args)...);
  654|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJRKNS8_10in_place_tESO_EEEvDpOT_:
  715|  22.9k|    {
  716|  22.9k|        scn::detail::construct_at(unexpected_ptr(),
  717|  22.9k|                                  std::forward<Args>(args)...);
  718|  22.9k|        m_has_value = false;
  719|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14unexpected_ptrEv:
  744|   114k|    {
  745|   114k|        return reinterpret_cast<unexpected<E>*>(
  746|   114k|            SCN_ASSUME_ALIGNED(m_memory, alignof(unexpected<E>)));
  ------------------
  |  | 1074|   114k|#define SCN_ASSUME_ALIGNED(x, n) __builtin_assume_aligned(x, n)
  ------------------
  747|   114k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  22.9k|    {
 1330|  22.9k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEaSEOSO_:
 1570|  22.9k|    constexpr expected& operator=(expected&&) = default;
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvEaSEOSP_:
  916|  22.9k|    {
  917|  22.9k|        assign_common(std::move(other));
  918|  22.9k|        return *this;
  919|  22.9k|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE13assign_commonISP_EEvOT_:
  963|  22.9k|    {
  964|  22.9k|        if (this->has_value()) {
  ------------------
  |  Branch (964:13): [True: 22.9k, False: 0]
  ------------------
  965|  22.9k|            if (other.has_value()) {
  ------------------
  |  Branch (965:17): [True: 0, False: 22.9k]
  ------------------
  966|      0|                return reassign_value(std::forward<Other>(other));
  967|      0|            }
  968|  22.9k|            return assign_unexpected_over_value(std::forward<Other>(other));
  969|  22.9k|        }
  970|       |
  971|      0|        if (other.has_value()) {
  ------------------
  |  Branch (971:13): [True: 0, False: 0]
  ------------------
  972|      0|            return assign_value_over_unexpected(std::forward<Other>(other));
  973|      0|        }
  974|      0|        return reassign_unexpected(std::forward<Other>(other));
  975|      0|    }
_ZNK3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9has_valueEv:
  701|  3.85M|    {
  702|  3.85M|        return m_has_value;
  703|  3.85M|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE9get_valueEv:
  667|  2.25M|    {
  668|  2.25M|        return *value_ptr();
  669|  2.25M|    }
_ZN3scn2v46detail24expected_operations_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorEvE28assign_unexpected_over_valueISP_EEvOT_:
 1059|  22.9k|    {
 1060|  22.9k|        this->destroy_value();
 1061|  22.9k|        this->construct_unexpected(std::forward<Other>(other).get_unexpected());
 1062|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE13destroy_valueEv:
  722|   765k|    {
  723|   765k|        scn::detail::destroy_at(value_ptr());
  724|   765k|    }
_ZN3scn2v46detail10destroy_atINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEEEEvPT_:
  416|   765k|{
  417|       |    if constexpr (std::is_array_v<T>) {
  418|       |        for (auto& elem : *p) {
  419|       |            scn::detail::destroy_at(&elem);
  420|       |        }
  421|       |    }
  422|   765k|    else {
  423|   765k|        p->~T();
  424|   765k|    }
  425|   765k|}
_ZN3scn2v411scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEED2Ev:
 6699|   765k|    ~scan_result() = default;
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE20construct_unexpectedIJNS0_10unexpectedISO_EEEEEvDpOT_:
  715|  22.9k|    {
  716|  22.9k|        scn::detail::construct_at(unexpected_ptr(),
  717|  22.9k|                                  std::forward<Args>(args)...);
  718|  22.9k|        m_has_value = false;
  719|  22.9k|    }
_ZNO3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE14get_unexpectedEv:
  692|  22.9k|    {
  693|  22.9k|        return std::move(*unexpected_ptr());
  694|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EE18destroy_unexpectedEv:
  726|  45.9k|    {
  727|  45.9k|        scn::detail::destroy_at(unexpected_ptr());
  728|  45.9k|    }
_ZN3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE9set_rangeISF_EEvOT_:
 6566|   742k|    {
 6567|   742k|        m_range = std::forward<Other>(r);
 6568|   742k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEdeISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1808|   742k|    {
 1809|   742k|        return value();
 1810|   742k|    }
_ZNR3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEE5valueISE_TnPNS6_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSJ_v:
 1782|   742k|    {
 1783|   742k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   742k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   742k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   742k|        return this->get_value();
 1785|   742k|    }
_ZNR3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EE9get_valueEv:
  470|   742k|    {
  471|   742k|        return m_value;
  472|   742k|    }
_ZN3scn2v46detail13vscan_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS7_17basic_string_viewIT0_NS7_11char_traitsISV_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESV_EEEE:
 9591|   307k|{
 9592|   307k|    auto buffer = make_scan_buffer(range);
 9593|       |
 9594|   307k|    auto result = vscan_impl(buffer, format, args);
 9595|   307k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 297k]
  |  |  ------------------
  ------------------
 9596|  10.5k|        return unexpected(result.error());
 9597|  10.5k|    }
 9598|   297k|    return make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9599|   307k|}
_ZN3scn2v46detail16make_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5398|   765k|{
 5399|   765k|    using T = decltype(_make_scan_buffer::impl(range, priority_tag<4>{}));
 5400|       |
 5401|   765k|    static_assert(!std::is_same_v<T, invalid_char_type>,
 5402|   765k|                  "\n"
 5403|   765k|                  "Unsupported range type given as input to a scanning "
 5404|   765k|                  "function.\n"
 5405|   765k|                  "A range needs to have a character type (value type) "
 5406|   765k|                  "of either `char` or `wchar_t` to be scannable.\n"
 5407|   765k|                  "For proper `wchar_t` support, <scn/xchar.h> needs "
 5408|   765k|                  "to be included.\n"
 5409|   765k|                  "See the scnlib documentation for more details.");
 5410|   765k|    static_assert(
 5411|   765k|        !std::is_same_v<T, custom_char_traits>,
 5412|   765k|        "\n"
 5413|   765k|        "Unsupported range type given as input to a scanning "
 5414|   765k|        "function.\n"
 5415|   765k|        "String types (std::basic_string, and std::basic_string_view) "
 5416|   765k|        "need to use std::char_traits. Strings with custom Traits are "
 5417|   765k|        "not supported.");
 5418|   765k|    static_assert(!std::is_same_v<T, file_marker_found>,
 5419|   765k|                  "\n"
 5420|   765k|                  "Unsupported range type given as input to a scanning "
 5421|   765k|                  "function.\n"
 5422|   765k|                  "file_marker_found cannot be used as an "
 5423|   765k|                  "source range type to scn::scan.\n"
 5424|   765k|                  "To read from stdin, use scn::input or scn::prompt, "
 5425|   765k|                  "and do not provide an explicit source range, "
 5426|   765k|                  "or use scn::scan with a FILE* directly.");
 5427|   765k|    static_assert(!std::is_same_v<T, insufficient_range>,
 5428|   765k|                  "\n"
 5429|   765k|                  "Unsupported range type given as input to a scanning "
 5430|   765k|                  "function.\n"
 5431|   765k|                  "In order to be scannable, a range needs to satisfy "
 5432|   765k|                  "`forward_range`. `input_range` is not sufficient.");
 5433|   765k|    static_assert(!std::is_same_v<T, invalid_input_range>,
 5434|   765k|                  "\n"
 5435|   765k|                  "Unsupported range type given as input to a scanning "
 5436|   765k|                  "function.\n"
 5437|   765k|                  "A range needs to model forward_range and have a valid "
 5438|   765k|                  "character type (char or wchar_t) to be scannable.\n"
 5439|   765k|                  "Examples of scannable ranges are std::string, "
 5440|   765k|                  "std::string_view, "
 5441|   765k|                  "std::vector<char>, and scn::istreambuf_view.\n"
 5442|   765k|                  "See the scnlib documentation for more details.");
 5443|       |
 5444|   765k|    return _make_scan_buffer::impl(range, priority_tag<4>{});
 5445|   765k|}
_ZN3scn2v46detail17_make_scan_buffer4implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDaRKT_NS1_12priority_tagILm0EEE:
 5368|   765k|{
 5369|       |    if constexpr (std::is_same_v<Range, file_marker>) {
 5370|       |        return file_marker_found{};
 5371|       |    }
 5372|       |    else if constexpr (!ranges::forward_range<Range>) {
 5373|       |        if constexpr (ranges::range<Range>) {
 5374|       |            return insufficient_range{};
 5375|       |        }
 5376|       |        else {
 5377|       |            return invalid_input_range{};
 5378|       |        }
 5379|       |    }
 5380|       |    else if constexpr (!is_valid_char_type<detail::char_t<Range>>) {
 5381|       |        return invalid_char_type{};
 5382|       |    }
 5383|   765k|    else {
 5384|   765k|        return make_forward_scan_buffer(r);
 5385|   765k|    }
 5386|   765k|}
_ZN3scn2v46detail24make_forward_scan_bufferINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRKT_:
 5202|   765k|{
 5203|   765k|    return basic_scan_forward_buffer_impl(range);
 5204|   765k|}
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEC2IRKSF_TnPNS7_9enable_ifIXaa11is_not_selfIT_SG_Esr3stdE16is_convertible_vISL_SJ_EEvE4typeELPv0EEEOSL_:
 4782|   765k|        : m_range(std::addressof(static_cast<const Range&>(SCN_FWD(r)))),
  ------------------
  |  | 1110|   765k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 4783|   765k|          m_cursor(ranges::begin(*m_range))
 4784|   765k|    {
 4785|   765k|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_baseIwEC2Ev:
 4754|   765k|    basic_scan_forward_buffer_base() : base(typename base::non_contiguous_tag{})
 4755|   765k|    {
 4756|   765k|    }
_ZN3scn2v46detail17basic_scan_bufferIwEC2ENS3_18non_contiguous_tagENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEE:
 4445|   765k|        : m_current_view(sv), m_is_contiguous(false)
 4446|   765k|    {
 4447|   765k|    }
_ZN3scn2v46detail17basic_scan_bufferIwED2Ev:
 4358|   765k|    virtual ~basic_scan_buffer() = default;
_ZNK3scn2v46ranges6detail6begin_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|  1.50M|    {
 2883|  1.50M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  1.50M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|  1.50M|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESL_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|  1.50M|    {
 2864|  1.50M|        return decay_copy(t.begin());
 2865|  1.50M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E5beginEv:
 3493|  2.25M|    {
 3494|  2.25M|        return m_iterator;
 3495|  2.25M|    }
_ZN3scn2v46detail30basic_scan_forward_buffer_implINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE4fillEv:
 4788|  22.9M|    {
 4789|  22.9M|        if (m_cursor == ranges::end(*m_range)) {
  ------------------
  |  Branch (4789:13): [True: 21.0k, False: 22.9M]
  ------------------
 4790|  21.0k|            return false;
 4791|  21.0k|        }
 4792|  22.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4793|  22.9M|            SCN_EXPECT(m_cursor < ranges::end(*m_range));
  ------------------
  |  | 1104|  22.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4794|  22.9M|        }
 4795|  22.9M|        if (!this->m_current_view.empty()) {
  ------------------
  |  Branch (4795:13): [True: 22.1M, False: 753k]
  ------------------
 4796|  22.1M|            this->m_putback_buffer.insert(this->m_putback_buffer.end(),
 4797|  22.1M|                                          this->m_current_view.begin(),
 4798|  22.1M|                                          this->m_current_view.end());
 4799|  22.1M|        }
 4800|  22.9M|        m_latest = *m_cursor;
 4801|  22.9M|        ++m_cursor;
 4802|  22.9M|        this->m_current_view = std::basic_string_view<char_type>{&m_latest, 1};
 4803|  22.9M|        if constexpr (mp_valid_v<less_than_compare, iterator, sentinel>) {
 4804|  22.9M|            SCN_EXPECT(m_cursor <= ranges::end(*m_range));
  ------------------
  |  | 1104|  22.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4805|  22.9M|        }
 4806|  22.9M|        return true;
 4807|  22.9M|    }
_ZNK3scn2v46ranges6detail4end_2fnclIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|  68.8M|    {
 2940|  68.8M|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|  68.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|  68.8M|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRKNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|  68.8M|    {
 2922|  68.8M|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|  68.8M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|  68.8M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_E3endEv:
 3497|  69.6M|    {
 3498|  69.6M|        return m_sentinel;
 3499|  69.6M|    }
_ZN3scn2v46detail17basic_scan_bufferIwE4syncEl:
 4363|   765k|    {
 4364|   765k|        SCN_UNUSED(position);
  ------------------
  |  | 1089|   765k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4365|   765k|        return true;
 4366|   765k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISF_TnPNS6_9enable_ifIXsr3stdE18is_constructible_vISF_OT_EEvE4typeELPv0ETnPNSI_IXsr3stdE16is_convertible_vISK_SF_EEvE4typeELSO_0EEEONS0_10unexpectedISJ_EE:
 1629|  22.9k|        : base(unexpect, std::move(e.error())),
 1630|  22.9k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  22.9k|    {
 1632|  22.9k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSG_EvEENS0_10unexpect_tEDpOT_:
  464|  22.9k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  22.9k|          m_has_value(false)
  466|  22.9k|    {
  467|  22.9k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   765k|    {
 1330|   765k|    }
_ZN3scn2v46detail23make_vscan_result_rangeINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEENS1_22borrowed_tail_subrangeIT_Xsr6rangesE14borrowed_rangeISH_EEE4typeEOSH_l:
 6796|   742k|{
 6797|       |    if constexpr (ranges::random_access_iterator<
 6798|   742k|                      ranges::iterator_t<SourceRange>>) {
 6799|   742k|        return {ranges::begin(source) + n, make_vscan_result_range_end(source)};
 6800|       |    }
 6801|       |    else {
 6802|       |        auto it = ranges::begin(source);
 6803|       |        while (n > 0) {
 6804|       |            --n;
 6805|       |            ++it;
 6806|       |        }
 6807|       |        return {SCN_MOVE(it), make_vscan_result_range_end(source)};
 6808|       |    }
 6809|   742k|}
_ZNK3scn2v46ranges6detail6begin_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2882|   742k|    {
 2883|   742k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   742k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2884|   742k|    }
_ZN3scn2v46ranges6detail6begin_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEENS8_9enable_ifIX24input_or_output_iteratorIDTcl10decay_copycldtscDtfp_Efp_5beginEEEEESK_E4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2863|   742k|    {
 2864|   742k|        return decay_copy(t.begin());
 2865|   742k|    }
_ZN3scn2v46detail27make_vscan_result_range_endINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEEEDaRT_:
 6783|   742k|{
 6784|   742k|    return ranges::end(source);
 6785|   742k|}
_ZNK3scn2v46ranges6detail4end_2fnclIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm3EEEEEEOT_:
 2939|   742k|    {
 2940|   742k|        return fn::impl(SCN_FWD(t), priority_tag<3>{});
  ------------------
  |  | 1110|   742k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2941|   742k|    }
_ZN3scn2v46ranges6detail4end_2fn4implIRNS2_9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EESF_SF_EENS8_9enable_ifIX12sentinel_forIT0_T1_EEDTcl10decay_copycldtscDtfp_Efp_3endEEEE4typeEOT_NS0_6detail12priority_tagILm1EEE:
 2921|   742k|    {
 2922|   742k|        return decay_copy(SCN_FWD(t).end());
  ------------------
  |  | 1110|   742k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2923|   742k|    }
_ZN3scn2v48expectedINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS0_10scan_errorEEC2ISE_vEEOT_:
 1583|   742k|        : base(std::in_place, std::forward<U>(val)),
 1584|   742k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   742k|    {
 1586|   742k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EENS0_10scan_errorELb1EEC2IJSF_EvEENS7_10in_place_tEDpOT_:
  455|   742k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   742k|    {
  457|   742k|    }
_ZNK3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEcvNS6_17basic_string_viewIwSH_EEEv:
 8854|   615k|    {
 8855|   615k|        return m_str;
 8856|   615k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS7_PKS8_lLl1024EEESC_EC2ISC_TnPNS5_9enable_ifIXsr3stdE16is_convertible_vIT_SC_EEvE4typeELPv0EEESG_SC_:
 3478|  1.50M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.50M|    static_cast<    \
  |  | 1109|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.50M|    static_cast<    \
  |  | 1109|  1.50M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.50M|    {
 3480|  1.50M|    }
_ZN3scn2v424basic_scan_format_stringIwNS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEJNS6_12basic_stringIwNS6_11char_traitsIwEENS6_9allocatorIwEEEEEEC2ENS0_6detail27basic_runtime_format_stringIwEE:
 8849|   615k|        : m_str(r.str)
 8850|   615k|    {
 8851|   615k|    }
_ZNK3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEcvbEv:
 1753|   765k|    {
 1754|   765k|        return has_value();
 1755|   765k|    }
_ZN3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEEptEv:
 1828|  2.25M|    {
 1829|  2.25M|        return &value();
 1830|  2.25M|    }
_ZNR3scn2v48expectedINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEJNS7_12basic_stringIwNS7_11char_traitsIwEENS7_9allocatorIwEEEEEEENS0_10scan_errorEE5valueISM_TnPNS7_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSR_v:
 1782|  2.25M|    {
 1783|  2.25M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  2.25M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.25M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  2.25M|        return this->get_value();
 1785|  2.25M|    }
_ZNK3scn2v46detail25scan_result_range_storageINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEE5beginEv:
 6555|   742k|    {
 6556|   742k|        return ranges::begin(m_range);
 6557|   742k|    }
_ZN3scn2v46detail21expected_storage_baseINS0_11scan_resultINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEJNS8_12basic_stringIwNS8_11char_traitsIwEENS8_9allocatorIwEEEEEEENS0_10scan_errorELb0EED2Ev:
  657|   788k|    {
  658|   788k|        if (has_value()) {
  ------------------
  |  Branch (658:13): [True: 742k, False: 45.9k]
  ------------------
  659|   742k|            destroy_value();
  660|   742k|        }
  661|  45.9k|        else {
  662|  45.9k|            destroy_unexpected();
  663|  45.9k|        }
  664|   788k|    }
_ZN3scn2v46detail23vscan_localized_genericINSt3__16localeENS0_6ranges6detail9subrange_8subrangeINS3_16__deque_iteratorIwPKwRSA_PKSB_lLl1024EEESF_EEwEENS0_13scan_expectedINS3_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT0_EEP8_IO_FILEEESN_NS1_22borrowed_tail_subrangeISJ_Xsr6rangesE14borrowed_rangeISJ_EEE4typeEE4typeEEERKT_OSJ_NS3_17basic_string_viewIT1_NS3_11char_traitsISZ_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagESZ_EEEE:
 9607|   307k|{
 9608|   307k|#if !SCN_DISABLE_LOCALE
 9609|   307k|    auto buffer = detail::make_scan_buffer(range);
 9610|       |
 9611|   307k|    SCN_CLANG_PUSH_IGNORE_UNDEFINED_TEMPLATE
 9612|   307k|    auto result = detail::vscan_localized_impl(loc, buffer, format, args);
 9613|   307k|    SCN_CLANG_POP_IGNORE_UNDEFINED_TEMPLATE
 9614|       |
 9615|   307k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 297k]
  |  |  ------------------
  ------------------
 9616|  10.5k|        return unexpected(result.error());
 9617|  10.5k|    }
 9618|   297k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   297k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9619|       |#else
 9620|       |    static_assert(dependent_false<Locale>::value,
 9621|       |                  "Can't use scan(locale, ...) with SCN_DISABLE_LOCALE on");
 9622|       |
 9623|       |    return {};
 9624|       |#endif
 9625|   307k|}
_ZN3scn2v46detail19vscan_value_genericINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS9_PKSA_lLl1024EEESE_EEwEENS0_13scan_expectedINS7_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESM_NS1_22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEEEOSI_NS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagET0_EEEE:
 9631|   150k|{
 9632|   150k|    auto buffer = detail::make_scan_buffer(range);
 9633|       |
 9634|   150k|    auto result = detail::vscan_value_impl(buffer, arg);
 9635|   150k|    if (SCN_UNLIKELY(!result)) {
  ------------------
  |  | 1039|   150k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.76k, False: 148k]
  |  |  ------------------
  ------------------
 9636|  1.76k|        return unexpected(result.error());
 9637|  1.76k|    }
 9638|   148k|    return detail::make_vscan_result_range(SCN_FWD(range), *result);
  ------------------
  |  | 1110|   148k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9639|   150k|}
_ZN3scn2v410scan_errorC2ENS1_4codeEPKc:
 3758|   135k|    constexpr scan_error(code_t c, const char* m) noexcept : m_msg(m), m_code(c)
 3759|   135k|    {
 3760|   135k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_code);
  ------------------
  |  | 1089|   135k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 3761|   135k|    }
_ZN3scn2v46detail30make_string_view_from_pointersIcEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   121k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   121k|    else {
 3999|   121k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   121k|    }
 4001|   121k|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  5.07M|    {
 3494|  5.07M|        return m_iterator;
 3495|  5.07M|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE5beginEv:
 3493|  75.4M|    {
 3494|  75.4M|        return m_iterator;
 3495|  75.4M|    }
_ZNK3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE9has_valueEv:
  586|  8.31M|    {
  587|  8.31M|        return m_has_value;
  588|  8.31M|    }
_ZNR3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EE14get_unexpectedEv:
  569|  95.3k|    {
  570|  95.3k|        return m_unexpected;
  571|  95.3k|    }
_ZNR3scn2v48expectedIvNS0_10scan_errorEE5errorEv:
 1759|  95.3k|    {
 1760|  95.3k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  95.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  95.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  95.3k|        return this->get_unexpected().error();
 1762|  95.3k|    }
_ZN3scn2v46detail12specs_setterC2ERNS1_12format_specsE:
 7096|  1.09M|    explicit constexpr specs_setter(format_specs& specs) : m_specs(specs) {}
_ZN3scn2v46detail12specs_setter8on_widthEi:
 7119|  31.7k|    {
 7120|  31.7k|        if (m_specs.precision != 0 && width > m_specs.precision) {
  ------------------
  |  Branch (7120:13): [True: 0, False: 31.7k]
  |  Branch (7120:39): [True: 0, False: 0]
  ------------------
 7121|       |            // clang-format off
 7122|      0|            return this->on_error("Width (i.e., minimum field length) cannot be larger than precision (i.e., maximum field length)");
 7123|       |            // clang-format on
 7124|      0|        }
 7125|       |
 7126|  31.7k|        m_specs.width = width;
 7127|  31.7k|    }
_ZN3scn2v46detail12specs_setter7on_typeENS1_17presentation_typeE:
 7140|  1.06M|    {
 7141|  1.06M|        m_specs.type = type;
 7142|  1.06M|    }
_ZN3scn2v46detail12specs_setter16on_charset_rangeEDiDi:
 7157|  36.6k|    {
 7158|  36.6k|        const auto begin_value = static_cast<unsigned>(begin);
 7159|  36.6k|        const auto end_value = static_cast<unsigned>(end);
 7160|  36.6k|        SCN_EXPECT(begin_value < end_value);
  ------------------
  |  | 1104|  36.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  36.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7161|       |
 7162|  36.6k|        if (SCN_LIKELY(end_value <= 127)) {
  ------------------
  |  | 1038|  36.6k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 36.6k, False: 0]
  |  |  ------------------
  ------------------
 7163|       |            // No need to bit-twiddle with a mask, because with the
 7164|       |            // SCN_ASSUME, -O3 will optimize this to a single operation
 7165|  36.6k|            SCN_ASSUME(begin_value < end_value);
  ------------------
  |  | 1058|  36.6k|#define SCN_ASSUME(x) __builtin_assume(x)
  ------------------
 7166|   989k|            for (auto v = begin_value; v != end_value; ++v) {
  ------------------
  |  Branch (7166:40): [True: 952k, False: 36.6k]
  ------------------
 7167|   952k|                m_specs.charset_literals[v / 8] |=
 7168|   952k|                    static_cast<unsigned char>(1ul << (v % 8));
 7169|   952k|            }
 7170|  36.6k|        }
 7171|      0|        else {
 7172|      0|            m_specs.charset_has_nonascii = true;
 7173|      0|        }
 7174|  36.6k|    }
_ZN3scn2v46detail12specs_setter8on_errorEPKc:
 7202|  31.7k|    {
 7203|  31.7k|        SCN_UNLIKELY_ATTR
 7204|  31.7k|        m_error = unexpected_scan_error(scan_error::invalid_format_string, msg);
 7205|  31.7k|    }
_ZNK3scn2v46detail12specs_setter9get_errorEv:
 7213|  1.15M|    {
 7214|  1.15M|        return m_error;
 7215|  1.15M|    }
_ZN3scn2v46detail21unexpected_scan_errorENS0_10scan_error4codeEPKc:
 3935|   122k|{
 3936|   122k|    return unexpected(scan_error{c, m});
 3937|   122k|}
_ZN3scn2v46detail11is_cp_spaceEDi:
 4325|  70.6M|{
 4326|       |    // Pattern_White_Space property
 4327|  70.6M|    return (cp >= 0x09 && cp <= 0x0d) ||
  ------------------
  |  Branch (4327:13): [True: 14.0M, False: 56.5M]
  |  Branch (4327:27): [True: 2.64M, False: 11.4M]
  ------------------
 4328|  70.6M|           cp == 0x20 ||    // ASCII space characters
  ------------------
  |  Branch (4328:12): [True: 2.27M, False: 65.6M]
  ------------------
 4329|  70.6M|           cp == 0x85 ||    // NEXT LINE (NEL)
  ------------------
  |  Branch (4329:12): [True: 363k, False: 65.3M]
  ------------------
 4330|  70.6M|           cp == 0x200e ||  // LEFT-TO-RIGHT MARK
  ------------------
  |  Branch (4330:12): [True: 203k, False: 65.1M]
  ------------------
 4331|  70.6M|           cp == 0x200f ||  // RIGHT-TO-LEFT MARK
  ------------------
  |  Branch (4331:12): [True: 304k, False: 64.8M]
  ------------------
 4332|  70.6M|           cp == 0x2028 ||  // LINE SEPARATOR
  ------------------
  |  Branch (4332:12): [True: 202k, False: 64.6M]
  ------------------
 4333|  70.6M|           cp == 0x2029;    // PARAGRAPH SEPARATOR
  ------------------
  |  Branch (4333:12): [True: 0, False: 64.6M]
  ------------------
 4334|  70.6M|}
_ZN3scn2v46detail25get_category_for_arg_typeENS1_8arg_typeE:
 7896|  15.8k|{
 7897|  15.8k|    switch (type) {
 7898|      0|        case arg_type::none_type:
  ------------------
  |  Branch (7898:9): [True: 0, False: 15.8k]
  ------------------
 7899|      0|            return arg_type_category::none;
 7900|       |
 7901|      0|        case arg_type::schar_type:
  ------------------
  |  Branch (7901:9): [True: 0, False: 15.8k]
  ------------------
 7902|      0|        case arg_type::short_type:
  ------------------
  |  Branch (7902:9): [True: 0, False: 15.8k]
  ------------------
 7903|      0|        case arg_type::int_type:
  ------------------
  |  Branch (7903:9): [True: 0, False: 15.8k]
  ------------------
 7904|      0|        case arg_type::long_type:
  ------------------
  |  Branch (7904:9): [True: 0, False: 15.8k]
  ------------------
 7905|      0|        case arg_type::llong_type:
  ------------------
  |  Branch (7905:9): [True: 0, False: 15.8k]
  ------------------
 7906|      0|        case arg_type::int128_type:
  ------------------
  |  Branch (7906:9): [True: 0, False: 15.8k]
  ------------------
 7907|      0|            return arg_type_category::integer;
 7908|       |
 7909|      0|        case arg_type::uchar_type:
  ------------------
  |  Branch (7909:9): [True: 0, False: 15.8k]
  ------------------
 7910|      0|        case arg_type::ushort_type:
  ------------------
  |  Branch (7910:9): [True: 0, False: 15.8k]
  ------------------
 7911|      0|        case arg_type::uint_type:
  ------------------
  |  Branch (7911:9): [True: 0, False: 15.8k]
  ------------------
 7912|      0|        case arg_type::ulong_type:
  ------------------
  |  Branch (7912:9): [True: 0, False: 15.8k]
  ------------------
 7913|      0|        case arg_type::ullong_type:
  ------------------
  |  Branch (7913:9): [True: 0, False: 15.8k]
  ------------------
 7914|      0|        case arg_type::uint128_type:
  ------------------
  |  Branch (7914:9): [True: 0, False: 15.8k]
  ------------------
 7915|      0|            return arg_type_category::unsigned_integer;
 7916|       |
 7917|      0|        case arg_type::pointer_type:
  ------------------
  |  Branch (7917:9): [True: 0, False: 15.8k]
  ------------------
 7918|      0|            return arg_type_category::pointer;
 7919|      0|        case arg_type::bool_type:
  ------------------
  |  Branch (7919:9): [True: 0, False: 15.8k]
  ------------------
 7920|      0|            return arg_type_category::boolean;
 7921|      0|        case arg_type::narrow_character_type:
  ------------------
  |  Branch (7921:9): [True: 0, False: 15.8k]
  ------------------
 7922|      0|        case arg_type::wide_character_type:
  ------------------
  |  Branch (7922:9): [True: 0, False: 15.8k]
  ------------------
 7923|      0|        case arg_type::code_point_type:
  ------------------
  |  Branch (7923:9): [True: 0, False: 15.8k]
  ------------------
 7924|      0|            return arg_type_category::character;
 7925|       |
 7926|      0|        case arg_type::float_type:
  ------------------
  |  Branch (7926:9): [True: 0, False: 15.8k]
  ------------------
 7927|      0|        case arg_type::double_type:
  ------------------
  |  Branch (7927:9): [True: 0, False: 15.8k]
  ------------------
 7928|      0|        case arg_type::ldouble_type:
  ------------------
  |  Branch (7928:9): [True: 0, False: 15.8k]
  ------------------
 7929|      0|        case arg_type::float16_type:
  ------------------
  |  Branch (7929:9): [True: 0, False: 15.8k]
  ------------------
 7930|      0|        case arg_type::float32_type:
  ------------------
  |  Branch (7930:9): [True: 0, False: 15.8k]
  ------------------
 7931|      0|        case arg_type::float64_type:
  ------------------
  |  Branch (7931:9): [True: 0, False: 15.8k]
  ------------------
 7932|      0|        case arg_type::float128_type:
  ------------------
  |  Branch (7932:9): [True: 0, False: 15.8k]
  ------------------
 7933|      0|        case arg_type::bfloat16_type:
  ------------------
  |  Branch (7933:9): [True: 0, False: 15.8k]
  ------------------
 7934|      0|            return arg_type_category::floating;
 7935|       |
 7936|  3.53k|        case arg_type::narrow_string_type:
  ------------------
  |  Branch (7936:9): [True: 3.53k, False: 12.3k]
  ------------------
 7937|  10.5k|        case arg_type::wide_string_type:
  ------------------
  |  Branch (7937:9): [True: 7.06k, False: 8.83k]
  ------------------
 7938|  15.8k|        case arg_type::string_view_type:
  ------------------
  |  Branch (7938:9): [True: 5.29k, False: 10.5k]
  ------------------
 7939|  15.8k|            return arg_type_category::string;
 7940|       |
 7941|      0|        case arg_type::custom_type:
  ------------------
  |  Branch (7941:9): [True: 0, False: 15.8k]
  ------------------
 7942|      0|            return arg_type_category::custom;
 7943|       |
 7944|      0|            SCN_CLANG_PUSH
 7945|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 7946|      0|        default:
  ------------------
  |  Branch (7946:9): [True: 0, False: 15.8k]
  ------------------
 7947|      0|            SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7948|  15.8k|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7949|  15.8k|            SCN_CLANG_POP
 7950|  15.8k|    }
 7951|       |
 7952|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7953|  15.8k|}
_ZNK3scn2v48expectedIvNS0_10scan_errorEEcvbEv:
 1753|  8.21M|    {
 1754|  8.21M|        return has_value();
 1755|  8.21M|    }
_ZN3scn2v46detail23check_string_type_specsIRNS0_4impl20reader_error_handlerEEEvRKNS1_12format_specsEOT_:
 8044|  1.06M|{
 8045|  1.06M|    if (specs.type == presentation_type::none ||
  ------------------
  |  Branch (8045:9): [True: 0, False: 1.06M]
  ------------------
 8046|  1.06M|        specs.type == presentation_type::string ||
  ------------------
  |  Branch (8046:9): [True: 1.03M, False: 34.2k]
  ------------------
 8047|  1.06M|        specs.type == presentation_type::string_set ||
  ------------------
  |  Branch (8047:9): [True: 18.3k, False: 15.8k]
  ------------------
 8048|  1.06M|        specs.type == presentation_type::regex ||
  ------------------
  |  Branch (8048:9): [True: 0, False: 15.8k]
  ------------------
 8049|  1.06M|        specs.type == presentation_type::regex_escaped) {
  ------------------
  |  Branch (8049:9): [True: 0, False: 15.8k]
  ------------------
 8050|  1.04M|        return;
 8051|  1.04M|    }
 8052|  15.8k|    if (specs.type == presentation_type::character) {
  ------------------
  |  Branch (8052:9): [True: 15.8k, False: 0]
  ------------------
 8053|  15.8k|        if (SCN_UNLIKELY(specs.precision == 0)) {
  ------------------
  |  | 1039|  15.8k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 15.8k, False: 0]
  |  |  ------------------
  ------------------
 8054|       |            // clang-format off
 8055|  15.8k|            return handler.on_error("'c' type specifier for strings requires the field precision to be specified");
 8056|       |            // clang-format on
 8057|  15.8k|        }
 8058|      0|        return;
 8059|  15.8k|    }
 8060|      0|    SCN_UNLIKELY_ATTR
 8061|      0|    handler.on_error("Invalid type specifier for string");
 8062|      0|}
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator13stores_parentEv:
 4490|  27.4M|    {
 4491|  27.4M|        assert(m_begin);
 4492|  27.4M|        return m_end == nullptr;
 4493|  27.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator18contiguous_segmentEv:
 4507|   625k|    {
 4508|   625k|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 625k]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|   625k|        return parent()->get_segment_starting_at(position());
 4514|   625k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator6parentEv:
 4501|  16.0M|    {
 4502|  16.0M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|  16.0M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  16.0M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|  16.0M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|  16.0M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE23get_segment_starting_atEl:
 4394|   625k|    {
 4395|   625k|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|   625k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 353k, False: 272k]
  |  |  ------------------
  ------------------
 4396|   625k|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|   353k|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|   353k|        }
 4399|   272k|        const auto start = pos - m_putback_buffer.size();
 4400|   272k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|   272k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   272k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|   272k|        return m_current_view.substr(start);
 4402|   272k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator8positionEv:
 4485|   704k|    {
 4486|   704k|        return m_position;
 4487|   704k|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE13is_contiguousEv:
 4416|   400k|    {
 4417|   400k|        return m_is_contiguous;
 4418|   400k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator13stores_parentEv:
 4490|   416M|    {
 4491|   416M|        assert(m_begin);
 4492|   416M|        return m_end == nullptr;
 4493|   416M|    }
_ZN3scn2v46detail30make_string_view_from_pointersIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEEPKS5_SA_:
 3993|   745k|{
 3994|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3995|       |                                          const CharT*, const CharT*>) {
 3996|       |        return {first, last};
 3997|       |    }
 3998|   745k|    else {
 3999|   745k|        return {first, static_cast<size_t>(std::distance(first, last))};
 4000|   745k|    }
 4001|   745k|}
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator18contiguous_segmentEv:
 4507|  2.25M|    {
 4508|  2.25M|        if (!stores_parent()) {
  ------------------
  |  Branch (4508:13): [True: 0, False: 2.25M]
  ------------------
 4509|      0|            return make_string_view_from_pointers(
 4510|      0|                static_cast<const CharT*>(m_begin) + position(),
 4511|      0|                static_cast<const CharT*>(m_end));
 4512|      0|        }
 4513|  2.25M|        return parent()->get_segment_starting_at(position());
 4514|  2.25M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator6parentEv:
 4501|   242M|    {
 4502|   242M|        SCN_EXPECT(stores_parent());
  ------------------
  |  | 1104|   242M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   242M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4503|   242M|        return static_cast<const basic_scan_buffer<CharT>*>(m_begin);
 4504|   242M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE23get_segment_starting_atEl:
 4394|  2.25M|    {
 4395|  2.25M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  2.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.49M, False: 762k]
  |  |  ------------------
  ------------------
 4396|  2.25M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4397|  1.49M|            return std::basic_string_view<CharT>(m_putback_buffer).substr(pos);
 4398|  1.49M|        }
 4399|   762k|        const auto start = pos - m_putback_buffer.size();
 4400|   762k|        SCN_EXPECT(start <= m_current_view.size());
  ------------------
  |  | 1104|   762k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   762k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4401|   762k|        return m_current_view.substr(start);
 4402|   762k|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator8positionEv:
 4485|  2.70M|    {
 4486|  2.70M|        return m_position;
 4487|  2.70M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE13is_contiguousEv:
 4416|  2.29M|    {
 4417|  2.29M|        return m_is_contiguous;
 4418|  2.29M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE7derivedEv:
 3347|   776k|    {
 3348|   776k|        return static_cast<D&>(*this);
 3349|   776k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKcS7_EEE4dataIS8_vEEDav:
 3388|   776k|    {
 3389|   776k|        return detail::to_address(ranges::begin(derived()));
 3390|   776k|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE7derivedEv:
 3347|  2.75M|    {
 3348|  2.75M|        return static_cast<D&>(*this);
 3349|  2.75M|    }
_ZN3scn2v46ranges14view_interfaceINS1_6detail9subrange_8subrangeIPKwS7_EEE4dataIS8_vEEDav:
 3388|  2.75M|    {
 3389|  2.75M|        return detail::to_address(ranges::begin(derived()));
 3390|  2.75M|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5rangeEv:
 9051|  54.7k|    {
 9052|  54.7k|        return ranges::subrange{begin(), end()};
 9053|  54.7k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE3endEv:
 9043|  54.7k|    {
 9044|  54.7k|        return ranges::default_sentinel;
 9045|  54.7k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  1.86M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.86M|    static_cast<    \
  |  | 1109|  1.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  1.86M|    static_cast<    \
  |  | 1109|  1.86M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  1.86M|    {
 3480|  1.86M|    }
_ZN3scn2v46detail10locale_refC2Ev:
 8870|  2.62M|    constexpr locale_ref() = default;
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   125k|    {
 1993|   125k|        return detail::transform_error_impl(std::move(*this),
 1994|   125k|                                            std::forward<F>(f));
 1995|   125k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   125k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   125k|    else {
 1486|   125k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   125k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   125k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 123k, False: 2.19k]
  |  |  ------------------
  ------------------
 1488|   125k|                   ? result(*std::forward<Exp>(exp))
 1489|   125k|                   : result(unexpect,
 1490|  2.19k|                            trivial_invoke(std::forward<F>(f),
 1491|  2.19k|                                           std::forward<Exp>(exp).error()));
 1492|   125k|    }
 1493|   125k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   251k|    {
  505|   251k|        return m_has_value;
  506|   251k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   123k|    {
 1819|   123k|        return std::move(value());
 1820|   123k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   123k|    {
 1783|   123k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   123k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   123k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   123k|        return this->get_value();
 1785|   123k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   123k|    {
  471|   123k|        return m_value;
  472|   123k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|   295k|        : base(std::in_place, std::forward<U>(val)),
 1584|   295k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   295k|    {
 1586|   295k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   295k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   295k|    {
  457|   295k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   310k|    {
 1330|   310k|    }
_ZN3scn2v46detail14trivial_invokeIRFNS0_10scan_errorENS0_4impl9eof_errorEEJS5_EvEEDcOT_DpOT0_:
 1363|  12.3k|{
 1364|  12.3k|    return std::forward<F>(f)(std::forward<Args>(args)...);
 1365|  12.3k|}
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  2.19k|    {
 1770|  2.19k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.19k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.19k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  2.19k|        return std::move(this->get_unexpected().error());
 1772|  2.19k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  2.19k|    {
  488|  2.19k|        return m_unexpected;
  489|  2.19k|    }
_ZNR3scn2v410unexpectedINS0_4impl9eof_errorEE5errorEv:
  379|  24.7k|    {
  380|  24.7k|        return m_unexpected;
  381|  24.7k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  2.19k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  2.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  2.19k|    {
 1642|  2.19k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  14.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  14.4k|          m_has_value(false)
  466|  14.4k|    {
  467|  14.4k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5rangeEv:
 9051|   307k|    {
 9052|   307k|        return ranges::subrange{begin(), end()};
 9053|   307k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE3endEv:
 9043|   307k|    {
 9044|   307k|        return ranges::default_sentinel;
 9045|   307k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEEC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESE_S9_:
 3478|  26.5M|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  26.5M|    static_cast<    \
  |  | 1109|  26.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|  26.5M|    static_cast<    \
  |  | 1109|  26.5M|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|  26.5M|    {
 3480|  26.5M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES7_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSD_:
 1992|   751k|    {
 1993|   751k|        return detail::transform_error_impl(std::move(*this),
 1994|   751k|                                            std::forward<F>(f));
 1995|   751k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEERFNS0_10scan_errorES8_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ESA_EEDaOSF_OT0_:
 1475|   751k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   751k|    else {
 1486|   751k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   751k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   751k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 749k, False: 2.29k]
  |  |  ------------------
  ------------------
 1488|   751k|                   ? result(*std::forward<Exp>(exp))
 1489|   751k|                   : result(unexpect,
 1490|  2.29k|                            trivial_invoke(std::forward<F>(f),
 1491|  2.29k|                                           std::forward<Exp>(exp).error()));
 1492|   751k|    }
 1493|   751k|}
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  1.50M|    {
  505|  1.50M|        return m_has_value;
  506|  1.50M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSC_v:
 1818|   749k|    {
 1819|   749k|        return std::move(value());
 1820|   749k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSC_v:
 1782|   749k|    {
 1783|   749k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   749k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   749k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   749k|        return this->get_value();
 1785|   749k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   749k|    {
  471|   749k|        return m_value;
  472|   749k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS5_vEEOT_:
 1583|  1.78M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.78M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.78M|    {
 1586|  1.78M|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|  1.78M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.78M|    {
  457|  1.78M|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.81M|    {
 1330|  1.81M|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEE5errorEv:
 1769|  2.29k|    {
 1770|  2.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  2.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  2.29k|        return std::move(this->get_unexpected().error());
 1772|  2.29k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  2.29k|    {
  488|  2.29k|        return m_unexpected;
  489|  2.29k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
 1639|  2.29k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  2.29k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  2.29k|    {
 1642|  2.29k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  27.8k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  27.8k|          m_has_value(false)
  466|  27.8k|    {
  467|  27.8k|    }
_ZN3scn2v410unexpectedINS0_10scan_errorEEC2IS2_vEEOT_:
  364|   122k|        : m_unexpected(std::forward<Err>(e))
  365|   122k|    {
  366|   122k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|   122k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|   122k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   103k|        : base(unexpect, std::move(e.error())),
 1630|   103k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   103k|    {
 1632|   103k|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  464|   103k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|   103k|          m_has_value(false)
  466|   103k|    {
  467|   103k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIlNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  2.64M|    {
 1330|  2.64M|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  25.1k|        : base(unexpect, std::move(e.error())),
 1630|  25.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.1k|    {
 1632|  25.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  28.4k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  28.4k|          m_has_value(false)
  466|  28.4k|    {
  467|  28.4k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   491k|    {
 1330|   491k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|   461k|        : base(std::in_place, std::forward<U>(val)),
 1584|   461k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   461k|    {
 1586|   461k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   461k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   461k|    {
  457|   461k|    }
_ZNK3scn2v48expectedIPKcNS0_10scan_errorEEcvbEv:
 1753|   491k|    {
 1754|   491k|        return has_value();
 1755|   491k|    }
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9has_valueEv:
  504|   983k|    {
  505|   983k|        return m_has_value;
  506|   983k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5errorEv:
 1759|  28.4k|    {
 1760|  28.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  28.4k|        return this->get_unexpected().error();
 1762|  28.4k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  28.4k|    {
  488|  28.4k|        return m_unexpected;
  489|  28.4k|    }
_ZNO3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|   384k|    {
 1819|   384k|        return std::move(value());
 1820|   384k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|   463k|    {
 1783|   463k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   463k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   463k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   463k|        return this->get_value();
 1785|   463k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EE9get_valueEv:
  470|   463k|    {
  471|   463k|        return m_value;
  472|   463k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS4_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS4_OT_EEvE4typeELPv0ETnPNS8_IXsr3stdE16is_convertible_vISA_S4_EEvE4typeELSE_0EEEONS0_10unexpectedIS9_EE:
 1629|  51.1k|        : base(unexpect, std::move(e.error())),
 1630|  51.1k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  51.1k|    {
 1632|  51.1k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS5_EvEENS0_10unexpect_tEDpOT_:
  464|  55.7k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  55.7k|          m_has_value(false)
  466|  55.7k|    {
  467|  55.7k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  3.63M|    {
 1330|  3.63M|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IS3_vEEOT_:
 1583|  3.57M|        : base(std::in_place, std::forward<U>(val)),
 1584|  3.57M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  3.57M|    {
 1586|  3.57M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  3.57M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  3.57M|    {
  457|  3.57M|    }
_ZNK3scn2v48expectedIPKwNS0_10scan_errorEEcvbEv:
 1753|  3.63M|    {
 1754|  3.63M|        return has_value();
 1755|  3.63M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9has_valueEv:
  504|  7.26M|    {
  505|  7.26M|        return m_has_value;
  506|  7.26M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5errorEv:
 1759|  55.7k|    {
 1760|  55.7k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  55.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  55.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  55.7k|        return this->get_unexpected().error();
 1762|  55.7k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  55.7k|    {
  488|  55.7k|        return m_unexpected;
  489|  55.7k|    }
_ZNO3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOS9_v:
 1818|  2.98M|    {
 1819|  2.98M|        return std::move(value());
 1820|  2.98M|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1782|  3.57M|    {
 1783|  3.57M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  3.57M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.57M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  3.57M|        return this->get_value();
 1785|  3.57M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EE9get_valueEv:
  470|  3.57M|    {
  471|  3.57M|        return m_value;
  472|  3.57M|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|   197k|    {
 1993|   197k|        return detail::transform_error_impl(std::move(*this),
 1994|   197k|                                            std::forward<F>(f));
 1995|   197k|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKcNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|   197k|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|   197k|    else {
 1486|   197k|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|   197k|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|   197k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 194k, False: 3.29k]
  |  |  ------------------
  ------------------
 1488|   197k|                   ? result(*std::forward<Exp>(exp))
 1489|   197k|                   : result(unexpect,
 1490|  3.29k|                            trivial_invoke(std::forward<F>(f),
 1491|  3.29k|                                           std::forward<Exp>(exp).error()));
 1492|   197k|    }
 1493|   197k|}
_ZNK3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|   395k|    {
  505|   395k|        return m_has_value;
  506|   395k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|   194k|    {
 1819|   194k|        return std::move(value());
 1820|   194k|    }
_ZNR3scn2v48expectedIPKcNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|   194k|    {
 1783|   194k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   194k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   194k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   194k|        return this->get_value();
 1785|   194k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|   194k|    {
  471|   194k|        return m_value;
  472|   194k|    }
_ZNO3scn2v48expectedIPKcNS0_4impl9eof_errorEE5errorEv:
 1769|  3.29k|    {
 1770|  3.29k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  3.29k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.29k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  3.29k|        return std::move(this->get_unexpected().error());
 1772|  3.29k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  3.29k|    {
  488|  3.29k|        return m_unexpected;
  489|  3.29k|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  3.29k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  3.29k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  3.29k|    {
 1642|  3.29k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE5beginEv:
 9035|   162k|    {
 9036|   162k|        return m_current;
 9037|   162k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE6localeEv:
 8928|   142k|    {
 8929|   142k|        return m_locale;
 8930|   142k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2ES7_NS1_10locale_refE:
 8934|   152k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   152k|    static_cast<    \
  |  | 1109|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   152k|    static_cast<    \
  |  | 1109|   152k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   152k|    {
 8936|   152k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  12.2k|        : base(unexpect, std::move(e.error())),
 1630|  12.2k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  12.2k|    {
 1632|  12.2k|    }
_ZNK3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE5beginEv:
 9035|   919k|    {
 9036|   919k|        return m_current;
 9037|   919k|    }
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE6localeEv:
 8928|   923k|    {
 8929|   923k|        return m_locale;
 8930|   923k|    }
_ZN3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2ES7_NS1_10locale_refE:
 8934|   944k|        : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   944k|    static_cast<    \
  |  | 1109|   944k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_args(SCN_MOVE(args)), m_locale(SCN_MOVE(loc))
  ------------------
  |  | 1108|   944k|    static_cast<    \
  |  | 1109|   944k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 8935|   944k|    {
 8936|   944k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IS6_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS6_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S6_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  25.5k|        : base(unexpect, std::move(e.error())),
 1630|  25.5k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  25.5k|    {
 1632|  25.5k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2IS2_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS2_OT_EEvE4typeELPv0ETnPNS6_IXsr3stdE16is_convertible_vIS8_S2_EEvE4typeELSC_0EEEONS0_10unexpectedIS7_EE:
 1629|   127k|        : base(unexpect, std::move(e.error())),
 1630|   127k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|   127k|    {
 1632|   127k|    }
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2IJS3_EvEENS0_10unexpect_tEDpOT_:
  563|   127k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  564|   127k|          m_has_value(false)
  565|   127k|    {
  566|   127k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIvNS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   127k|    {
 1330|   127k|    }
_ZN3scn2v48expectedIvNS0_10scan_errorEEC2Ev:
 1565|  7.09M|    constexpr expected() = default;
_ZN3scn2v46detail21expected_storage_baseIvNS0_10scan_errorELb1EEC2Ev:
  543|  7.09M|        : m_deferred_init(), m_has_value(true)
  544|  7.09M|    {
  545|  7.09M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  1.43M|    {
 4577|  1.43M|        return x.is_at_end();
 4578|  1.43M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator9is_at_endEv:
 4620|  2.96M|    {
 4621|  2.96M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 2.96M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  2.96M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 2.96M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  2.96M|        return !read_at_position();
 4628|  2.96M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iterator16read_at_positionEv:
 4600|  8.13M|    {
 4601|  8.13M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  8.13M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.13M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|  8.13M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 8.13M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|  8.13M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|  8.13M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 6.60M, False: 1.53M]
  |  |  ------------------
  ------------------
 4608|  6.60M|            return true;
 4609|  6.60M|        }
 4610|       |
 4611|  3.04M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 1.53M, False: 1.51M]
  ------------------
 4612|  1.53M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 17.2k, False: 1.51M]
  ------------------
 4613|  17.2k|                return false;
 4614|  17.2k|            }
 4615|  1.53M|        }
 4616|  1.51M|        return true;
 4617|  1.53M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16forward_iteratordeEv:
 4535|  2.67M|    {
 4536|  2.67M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  2.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  2.67M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 2.67M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  2.67M|        auto res = read_at_position();
 4545|  2.67M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  2.67M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.67M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  2.67M|        return parent()->get_character_at(m_position);
 4547|  2.67M|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE16get_character_atEl:
 4405|  2.67M|    {
 4406|  2.67M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  2.67M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.45M, False: 1.22M]
  |  |  ------------------
  ------------------
 4407|  2.67M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  1.45M|            return m_putback_buffer[pos];
 4409|  1.45M|        }
 4410|  1.22M|        const auto start = pos - m_putback_buffer.size();
 4411|  1.22M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  1.22M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.22M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  1.22M|        return m_current_view[start];
 4413|  1.22M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|   123k|        : base(std::in_place, std::forward<U>(val)),
 1584|   123k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   123k|    {
 1586|   123k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   123k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   123k|    {
  457|   123k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   125k|    {
 1330|   125k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  2.19k|        : base(unexpect, std::move(e.error())),
 1630|  2.19k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.19k|    {
 1632|  2.19k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  2.19k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.19k|          m_has_value(false)
  466|  2.19k|    {
  467|  2.19k|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IJS3_EvEENSt3__110in_place_tEDpOT_:
  373|  12.3k|        : m_unexpected(std::forward<Args>(args)...)
  374|  12.3k|    {
  375|  12.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  376|  12.3k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorppEv:
 4521|  2.49M|    {
 4522|  2.49M|        ++m_position;
 4523|  2.49M|        (void)read_at_position();
 4524|  2.49M|        return *this;
 4525|  2.49M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4570|  1.10M|    {
 4571|  1.10M|        return !(lhs == rhs);
 4572|  1.10M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIcE16forward_iteratorES6_:
 4565|  1.10M|    {
 4566|  1.10M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 1.10M, False: 0]
  |  Branch (4566:46): [True: 195k, False: 913k]
  ------------------
 4567|  1.10M|    }
_ZN3scn2v410unexpectedINS0_4impl9eof_errorEEC2IRS3_vEEOT_:
  364|  12.3k|        : m_unexpected(std::forward<Err>(e))
  365|  12.3k|    {
  366|  12.3k|        SCN_UNLIKELY_ATTR SCN_UNUSED(m_unexpected);
  ------------------
  |  | 1089|  12.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
  367|  12.3k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    948|        : base(unexpect, std::move(e.error())),
 1630|    948|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    948|    {
 1632|    948|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    948|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    948|          m_has_value(false)
  466|    948|    {
  467|    948|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   101k|    {
 1330|   101k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   101k|        : base(std::in_place, std::forward<U>(val)),
 1584|   101k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   101k|    {
 1586|   101k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   101k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   101k|    {
  457|   101k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   101k|    {
 1754|   101k|        return has_value();
 1755|   101k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|   203k|    {
  505|   203k|        return m_has_value;
  506|   203k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|    948|    {
 1760|    948|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    948|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    948|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    948|        return this->get_unexpected().error();
 1762|    948|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    948|    {
  488|    948|        return m_unexpected;
  489|    948|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   101k|    {
 1819|   101k|        return std::move(value());
 1820|   101k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   101k|    {
 1783|   101k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   101k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   101k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   101k|        return this->get_value();
 1785|   101k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIcE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   101k|    {
  471|   101k|        return m_value;
  472|   101k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  4.52M|    {
 3498|  4.52M|        return m_sentinel;
 3499|  4.52M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|   310k|    {
 1754|   310k|        return has_value();
 1755|   310k|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|   620k|    {
  505|   620k|        return m_has_value;
  506|   620k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|  14.4k|    {
 1760|  14.4k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  14.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  14.4k|        return this->get_unexpected().error();
 1762|  14.4k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  14.4k|    {
  488|  14.4k|        return m_unexpected;
  489|  14.4k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   245k|    {
 1819|   245k|        return std::move(value());
 1820|   245k|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   295k|    {
 1783|   295k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   295k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   295k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   295k|        return this->get_value();
 1785|   295k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|   295k|    {
  471|   295k|        return m_value;
  472|   295k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E5beginEv:
 3493|   130k|    {
 3494|   130k|        return m_iterator;
 3495|   130k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_E3endEv:
 3497|   130k|    {
 3498|   130k|        return m_sentinel;
 3499|   130k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   124k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   124k|    static_cast<    \
  |  | 1109|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   124k|    static_cast<    \
  |  | 1109|   124k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   124k|    {
 3480|   124k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  1.52M|    {
 4588|  1.52M|        return !x.is_at_end();
 4589|  1.52M|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  3.29k|        : base(unexpect, std::move(e.error())),
 1630|  3.29k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  3.29k|    {
 1632|  3.29k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  3.29k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  3.29k|          m_has_value(false)
  466|  3.29k|    {
  467|  3.29k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKcNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   197k|    {
 1330|   197k|    }
_ZN3scn2v48expectedIPKcNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|   194k|        : base(std::in_place, std::forward<U>(val)),
 1584|   194k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   194k|    {
 1586|   194k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|   194k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   194k|    {
  457|   194k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  1.31k|        : base(unexpect, std::move(e.error())),
 1630|  1.31k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.31k|    {
 1632|  1.31k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.31k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.31k|          m_has_value(false)
  466|  1.31k|    {
  467|  1.31k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   160k|    {
 1330|   160k|    }
_ZN3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|   158k|        : base(std::in_place, std::forward<U>(val)),
 1584|   158k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   158k|    {
 1586|   158k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|   158k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   158k|    {
  457|   158k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEcvbEv:
 1753|   160k|    {
 1754|   160k|        return has_value();
 1755|   160k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9has_valueEv:
  504|   320k|    {
  505|   320k|        return m_has_value;
  506|   320k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5errorEv:
 1759|  1.31k|    {
 1760|  1.31k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.31k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.31k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.31k|        return this->get_unexpected().error();
 1762|  1.31k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.31k|    {
  488|  1.31k|        return m_unexpected;
  489|  1.31k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|   158k|    {
 1819|   158k|        return std::move(value());
 1820|   158k|    }
_ZNR3scn2v48expectedINSt3__14pairIPKclEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|   158k|    {
 1783|   158k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   158k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   158k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   158k|        return this->get_value();
 1785|   158k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKclEENS0_10scan_errorELb1EE9get_valueEv:
  470|   158k|    {
  471|   158k|        return m_value;
  472|   158k|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|   776k|    {
 3014|   776k|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|   776k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|   776k|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKcS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|   776k|    {
 2995|   776k|        return t.data();
 2996|   776k|    }
_ZN3scn2v48expectedIlNS0_10scan_errorEEC2IlvEEOT_:
 1583|  2.54M|        : base(std::in_place, std::forward<U>(val)),
 1584|  2.54M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  2.54M|    {
 1586|  2.54M|    }
_ZN3scn2v46detail21expected_storage_baseIlNS0_10scan_errorELb1EEC2IJlEvEENSt3__110in_place_tEDpOT_:
  455|  2.54M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  2.54M|    {
  457|  2.54M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|  50.1k|    {
 1809|  50.1k|        return value();
 1810|  50.1k|    }
_ZNR3scn2v48expectedIPKcNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|  78.3k|    {
 1809|  78.3k|        return value();
 1810|  78.3k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1583|    690|        : base(std::in_place, std::forward<U>(val)),
 1584|    690|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    690|    {
 1586|    690|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIcE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  455|    690|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    690|    {
  457|    690|    }
_ZN3scn2v48expectedIPKcNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1583|  1.38k|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.38k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.38k|    {
 1586|  1.38k|    }
_ZN3scn2v46detail21expected_storage_baseIPKcNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.38k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.38k|    {
  457|  1.38k|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4576|  24.1M|    {
 4577|  24.1M|        return x.is_at_end();
 4578|  24.1M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator9is_at_endEv:
 4620|  47.4M|    {
 4621|  47.4M|        if (m_end) {
  ------------------
  |  Branch (4621:13): [True: 0, False: 47.4M]
  ------------------
 4622|      0|            return (static_cast<const CharT*>(m_begin) + position()) == m_end;
 4623|      0|        }
 4624|  47.4M|        if (!m_begin) {
  ------------------
  |  Branch (4624:13): [True: 0, False: 47.4M]
  ------------------
 4625|      0|            return true;
 4626|      0|        }
 4627|  47.4M|        return !read_at_position();
 4628|  47.4M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iterator16read_at_positionEv:
 4600|   125M|    {
 4601|   125M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|   125M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   125M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4602|       |
 4603|   125M|        if (!stores_parent()) {
  ------------------
  |  Branch (4603:13): [True: 0, False: 125M]
  ------------------
 4604|      0|            return true;
 4605|      0|        }
 4606|       |
 4607|   125M|        if (SCN_LIKELY(m_position < parent()->chars_available())) {
  ------------------
  |  | 1038|   125M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 102M, False: 22.9M]
  |  |  ------------------
  ------------------
 4608|   102M|            return true;
 4609|   102M|        }
 4610|       |
 4611|  45.9M|        while (m_position >= parent()->chars_available()) {
  ------------------
  |  Branch (4611:16): [True: 22.9M, False: 22.9M]
  ------------------
 4612|  22.9M|            if (!const_cast<basic_scan_buffer<CharT>*>(parent())->fill()) {
  ------------------
  |  Branch (4612:17): [True: 21.0k, False: 22.9M]
  ------------------
 4613|  21.0k|                return false;
 4614|  21.0k|            }
 4615|  22.9M|        }
 4616|  22.9M|        return true;
 4617|  22.9M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE15chars_availableEv:
 4374|   171M|    {
 4375|   171M|        return m_putback_buffer.size() + m_current_view.size();
 4376|   171M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16forward_iteratordeEv:
 4535|  46.2M|    {
 4536|  46.2M|        SCN_EXPECT(m_begin);
  ------------------
  |  | 1104|  46.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  46.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4537|       |
 4538|  46.2M|        if (!stores_parent()) {
  ------------------
  |  Branch (4538:13): [True: 0, False: 46.2M]
  ------------------
 4539|      0|            auto ptr = static_cast<const CharT*>(m_begin) + position();
 4540|      0|            SCN_EXPECT(ptr != m_end);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4541|      0|            return *ptr;
 4542|      0|        }
 4543|       |
 4544|  46.2M|        auto res = read_at_position();
 4545|  46.2M|        SCN_EXPECT(res);
  ------------------
  |  | 1104|  46.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  46.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4546|  46.2M|        return parent()->get_character_at(m_position);
 4547|  46.2M|    }
_ZNK3scn2v46detail17basic_scan_bufferIwE16get_character_atEl:
 4405|  46.2M|    {
 4406|  46.2M|        if (SCN_UNLIKELY(
  ------------------
  |  | 1039|  46.2M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 24.0M, False: 22.2M]
  |  |  ------------------
  ------------------
 4407|  46.2M|                pos < static_cast<std::ptrdiff_t>(m_putback_buffer.size()))) {
 4408|  24.0M|            return m_putback_buffer[pos];
 4409|  24.0M|        }
 4410|  22.2M|        const auto start = pos - m_putback_buffer.size();
 4411|  22.2M|        SCN_EXPECT(start < m_current_view.size());
  ------------------
  |  | 1104|  22.2M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.2M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4412|  22.2M|        return m_current_view[start];
 4413|  22.2M|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS5_vEEOT_:
 1583|   749k|        : base(std::in_place, std::forward<U>(val)),
 1584|   749k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   749k|    {
 1586|   749k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS5_EvEENSt3__110in_place_tEDpOT_:
  455|   749k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   749k|    {
  457|   749k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   751k|    {
 1330|   751k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorEEC2IS7_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSB_IXsr3stdE16is_convertible_vISD_S7_EEvE4typeELSH_0EEEONS0_10unexpectedISC_EE:
 1629|  2.29k|        : base(unexpect, std::move(e.error())),
 1630|  2.29k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  2.29k|    {
 1632|  2.29k|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_4impl9eof_errorELb1EEC2IJS7_EvEENS0_10unexpect_tEDpOT_:
  464|  2.29k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  2.29k|          m_has_value(false)
  466|  2.29k|    {
  467|  2.29k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorppEv:
 4521|  31.7M|    {
 4522|  31.7M|        ++m_position;
 4523|  31.7M|        (void)read_at_position();
 4524|  31.7M|        return *this;
 4525|  31.7M|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4570|  9.10M|    {
 4571|  9.10M|        return !(lhs == rhs);
 4572|  9.10M|    }
_ZN3scn2v46detaileqERKNS1_17basic_scan_bufferIwE16forward_iteratorES6_:
 4565|  9.10M|    {
 4566|  9.10M|        return lhs.m_begin == rhs.m_begin && lhs.m_position == rhs.m_position;
  ------------------
  |  Branch (4566:16): [True: 9.10M, False: 0]
  |  Branch (4566:46): [True: 304k, False: 8.80M]
  ------------------
 4567|  9.10M|    }
_ZN3scn2v46detail39code_point_length_by_starting_code_unitIwEEmT_:
 4085|   129M|{
 4086|       |    if constexpr (sizeof(U) == 1) {
 4087|       |        return utf8_code_point_length_by_starting_code_unit(ch);
 4088|       |    }
 4089|       |    else if constexpr (sizeof(U) == 2) {
 4090|       |        return utf16_code_point_length_by_starting_code_unit(ch);
 4091|       |    }
 4092|   129M|    else {
 4093|       |        // utf-32
 4094|   129M|        static_assert(sizeof(U) == 4);
 4095|   129M|        SCN_UNUSED(ch);
  ------------------
  |  | 1089|   129M|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 4096|   129M|        return 1;
 4097|   129M|    }
 4098|   129M|}
_ZN3scn2v46detail28decode_code_point_exhaustiveIwEEDiNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 4291|   129M|{
 4292|       |    if constexpr (sizeof(CharT) == 1) {
 4293|       |        return decode_utf8_code_point_exhaustive(input);
 4294|       |    }
 4295|       |    else if constexpr (sizeof(CharT) == 2) {
 4296|       |        return decode_utf16_code_point_exhaustive(input);
 4297|       |    }
 4298|   129M|    else {
 4299|   129M|        SCN_EXPECT(input.size() == 1);
  ------------------
  |  | 1104|   129M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   129M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4300|   129M|        auto cp = static_cast<char32_t>(input.front());
 4301|   129M|        if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|   129M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 702k, False: 128M]
  |  |  ------------------
  ------------------
 4302|   702k|            return invalid_code_point;
 4303|   702k|        }
 4304|   128M|        return cp;
 4305|   129M|    }
 4306|   129M|}
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS9_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS9_OT_EEvE4typeELPv0ETnPNSC_IXsr3stdE16is_convertible_vISE_S9_EEvE4typeELSI_0EEEONS0_10unexpectedISD_EE:
 1629|    918|        : base(unexpect, std::move(e.error())),
 1630|    918|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|    918|    {
 1632|    918|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS9_EvEENS0_10unexpect_tEDpOT_:
  464|    918|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|    918|          m_has_value(false)
  466|    918|    {
  467|    918|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|   600k|    {
 1330|   600k|    }
_ZN3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEC2IS8_vEEOT_:
 1583|   599k|        : base(std::in_place, std::forward<U>(val)),
 1584|   599k|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|   599k|    {
 1586|   599k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EEC2IJS8_EvEENS3_10in_place_tEDpOT_:
  455|   599k|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|   599k|    {
  457|   599k|    }
_ZNK3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEcvbEv:
 1753|   600k|    {
 1754|   600k|        return has_value();
 1755|   600k|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9has_valueEv:
  504|  1.20M|    {
  505|  1.20M|        return m_has_value;
  506|  1.20M|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5errorEv:
 1759|    918|    {
 1760|    918|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|    918|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    918|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|    918|        return this->get_unexpected().error();
 1762|    918|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|    918|    {
  488|    918|        return m_unexpected;
  489|    918|    }
_ZNO3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEEdeIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSD_v:
 1818|   599k|    {
 1819|   599k|        return std::move(value());
 1820|   599k|    }
_ZNR3scn2v48expectedINSt3__14pairINS0_6detail17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorEE5valueIS8_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSD_v:
 1782|   599k|    {
 1783|   599k|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|   599k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   599k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|   599k|        return this->get_value();
 1785|   599k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairINS1_17basic_scan_bufferIwE16forward_iteratorElEENS0_10scan_errorELb1EE9get_valueEv:
  470|   599k|    {
  471|   599k|        return m_value;
  472|   599k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS1_18default_sentinel_tEE3endEv:
 3497|  72.9M|    {
 3498|  72.9M|        return m_sentinel;
 3499|  72.9M|    }
_ZNK3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEcvbEv:
 1753|  1.81M|    {
 1754|  1.81M|        return has_value();
 1755|  1.81M|    }
_ZNK3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9has_valueEv:
  504|  3.63M|    {
  505|  3.63M|        return m_has_value;
  506|  3.63M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5errorEv:
 1759|  27.8k|    {
 1760|  27.8k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  27.8k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  27.8k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  27.8k|        return this->get_unexpected().error();
 1762|  27.8k|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  27.8k|    {
  488|  27.8k|        return m_unexpected;
  489|  27.8k|    }
_ZNO3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.49M|    {
 1819|  1.49M|        return std::move(value());
 1820|  1.49M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEE5valueIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.78M|    {
 1783|  1.78M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.78M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.78M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.78M|        return this->get_value();
 1785|  1.78M|    }
_ZNR3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.78M|    {
  471|  1.78M|        return m_value;
  472|  1.78M|    }
_ZN3scn2v46detail31make_string_view_from_iteratorsIwEENSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEENS8_8iteratorES9_:
 3977|  60.4M|{
 3978|       |    if constexpr (std::is_constructible_v<std::basic_string_view<CharT>,
 3979|       |                                          decltype(first), decltype(last)> &&
 3980|       |                  !SCN_MSVC_DEBUG_ITERATORS) {
 3981|       |        return {first, last};
 3982|       |    }
 3983|  60.4M|    else {
 3984|  60.4M|        return {to_address(first), static_cast<size_t>(std::distance(
 3985|  60.4M|                                       to_address(first), to_address(last)))};
 3986|  60.4M|    }
 3987|  60.4M|}
_ZN3scn2v46detail10to_addressIRPKwEEDTclgssr3scn6detailE15to_address_implscDtfp_Efp_tlNS1_12priority_tagILm2EEEEEEOT_:
  330|   181M|{
  331|   181M|    return ::scn::detail::to_address_impl(SCN_FWD(p), priority_tag<2>{});
  ------------------
  |  | 1110|   181M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  332|   181M|}
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E5beginEv:
 3493|   756k|    {
 3494|   756k|        return m_iterator;
 3495|   756k|    }
_ZNK3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_E3endEv:
 3497|   756k|    {
 3498|   756k|        return m_sentinel;
 3499|   756k|    }
_ZN3scn2v46ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorES8_EC2IS8_TnPNSt3__19enable_ifIXsr3stdE16is_convertible_vIT_S8_EEvE4typeELPv0EEESD_S8_:
 3478|   749k|        : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   749k|    static_cast<    \
  |  | 1109|   749k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      : m_iterator(SCN_MOVE(i)), m_sentinel(SCN_MOVE(s))
  ------------------
  |  | 1108|   749k|    static_cast<    \
  |  | 1109|   749k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3479|   749k|    {
 3480|   749k|    }
_ZN3scn2v46detailneERKNS1_17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tE:
 4587|  23.2M|    {
 4588|  23.2M|        return !x.is_at_end();
 4589|  23.2M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS5_TnPNSt3__19enable_ifIXsr3stdE18is_constructible_vIS5_OT_EEvE4typeELPv0ETnPNS9_IXsr3stdE16is_convertible_vISB_S5_EEvE4typeELSF_0EEEONS0_10unexpectedISA_EE:
 1629|  4.59k|        : base(unexpect, std::move(e.error())),
 1630|  4.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  4.59k|    {
 1632|  4.59k|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS6_EvEENS0_10unexpect_tEDpOT_:
  464|  4.59k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  4.59k|          m_has_value(false)
  466|  4.59k|    {
  467|  4.59k|    }
_ZN3scn2v46detail26expected_default_ctor_baseIPKwNS0_4impl9eof_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.50M|    {
 1330|  1.50M|    }
_ZN3scn2v48expectedIPKwNS0_4impl9eof_errorEEC2IS3_vEEOT_:
 1583|  1.49M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.49M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.49M|    {
 1586|  1.49M|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EEC2IJS4_EvEENSt3__110in_place_tEDpOT_:
  455|  1.49M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.49M|    {
  457|  1.49M|    }
_ZNK3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9has_valueEv:
  504|  3.00M|    {
  505|  3.00M|        return m_has_value;
  506|  3.00M|    }
_ZNR3scn2v48expectedIPKwNS0_4impl9eof_errorEE5valueIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSA_v:
 1782|  1.49M|    {
 1783|  1.49M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.49M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.49M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.49M|        return this->get_value();
 1785|  1.49M|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE9get_valueEv:
  470|  1.49M|    {
  471|  1.49M|        return m_value;
  472|  1.49M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS7_TnPNS2_9enable_ifIXsr3stdE18is_constructible_vIS7_OT_EEvE4typeELPv0ETnPNSA_IXsr3stdE16is_convertible_vISC_S7_EEvE4typeELSG_0EEEONS0_10unexpectedISB_EE:
 1629|  1.83k|        : base(unexpect, std::move(e.error())),
 1630|  1.83k|          ctor_base(detail::non_default_ctor_tag_t{})
 1631|  1.83k|    {
 1632|  1.83k|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS8_EvEENS0_10unexpect_tEDpOT_:
  464|  1.83k|        : m_unexpected(std::in_place, std::forward<Args>(args)...),
  465|  1.83k|          m_has_value(false)
  466|  1.83k|    {
  467|  1.83k|    }
_ZN3scn2v46detail26expected_default_ctor_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2ENS1_22non_default_ctor_tag_tE:
 1329|  1.20M|    {
 1330|  1.20M|    }
_ZN3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEC2IS6_vEEOT_:
 1583|  1.19M|        : base(std::in_place, std::forward<U>(val)),
 1584|  1.19M|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|  1.19M|    {
 1586|  1.19M|    }
_ZN3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EEC2IJS7_EvEENS3_10in_place_tEDpOT_:
  455|  1.19M|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|  1.19M|    {
  457|  1.19M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE15transform_errorIRFNS0_10scan_errorES5_EEEDTclsr6detailE20transform_error_impldefpTclsr3stdE7forwardIT_Efp_EEEOSB_:
 1992|  1.50M|    {
 1993|  1.50M|        return detail::transform_error_impl(std::move(*this),
 1994|  1.50M|                                            std::forward<F>(f));
 1995|  1.50M|    }
_ZN3scn2v46detail20transform_error_implINS0_8expectedIPKwNS0_4impl9eof_errorEEERFNS0_10scan_errorES7_ETnPNSt3__19enable_ifIXntsr11is_exp_voidIT_EE5valueEvE4typeELPv0ES9_EEDaOSE_OT0_:
 1475|  1.50M|{
 1476|       |    if constexpr (std::is_void_v<Ret>) {
 1477|       |        using result = expected<expected_value_type<Exp>, monostate>;
 1478|       |        if (SCN_LIKELY(exp.has_value())) {
 1479|       |            return result(*std::forward<Exp>(exp));
 1480|       |        }
 1481|       |
 1482|       |        trivial_invoke(std::forward<F>(f), std::forward<Exp>(exp).error());
 1483|       |        return result(unexpect, monostate{});
 1484|       |    }
 1485|  1.50M|    else {
 1486|  1.50M|        using result = expected<expected_value_type<Exp>, remove_cvref_t<Ret>>;
 1487|  1.50M|        return SCN_LIKELY(exp.has_value())
  ------------------
  |  | 1038|  1.50M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.49M, False: 4.59k]
  |  |  ------------------
  ------------------
 1488|  1.50M|                   ? result(*std::forward<Exp>(exp))
 1489|  1.50M|                   : result(unexpect,
 1490|  4.59k|                            trivial_invoke(std::forward<F>(f),
 1491|  4.59k|                                           std::forward<Exp>(exp).error()));
 1492|  1.50M|    }
 1493|  1.50M|}
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSA_v:
 1818|  1.49M|    {
 1819|  1.49M|        return std::move(value());
 1820|  1.49M|    }
_ZNO3scn2v48expectedIPKwNS0_4impl9eof_errorEE5errorEv:
 1769|  4.59k|    {
 1770|  4.59k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  4.59k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.59k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1771|  4.59k|        return std::move(this->get_unexpected().error());
 1772|  4.59k|    }
_ZNR3scn2v46detail21expected_storage_baseIPKwNS0_4impl9eof_errorELb1EE14get_unexpectedEv:
  487|  4.59k|    {
  488|  4.59k|        return m_unexpected;
  489|  4.59k|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IJS4_EvEENS0_10unexpect_tEDpOT_:
 1639|  4.59k|        : base(unexpect, std::forward<Args>(args)...),
 1640|  4.59k|          ctor_base(detail::non_default_ctor_tag_t{})
 1641|  4.59k|    {
 1642|  4.59k|    }
_ZNK3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEcvbEv:
 1753|  1.20M|    {
 1754|  1.20M|        return has_value();
 1755|  1.20M|    }
_ZNK3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9has_valueEv:
  504|  2.40M|    {
  505|  2.40M|        return m_has_value;
  506|  2.40M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5errorEv:
 1759|  1.83k|    {
 1760|  1.83k|        SCN_EXPECT(!has_value());
  ------------------
  |  | 1104|  1.83k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.83k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1761|  1.83k|        return this->get_unexpected().error();
 1762|  1.83k|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE14get_unexpectedEv:
  487|  1.83k|    {
  488|  1.83k|        return m_unexpected;
  489|  1.83k|    }
_ZNO3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEEdeIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEEOSB_v:
 1818|  1.19M|    {
 1819|  1.19M|        return std::move(value());
 1820|  1.19M|    }
_ZNR3scn2v48expectedINSt3__14pairIPKwlEENS0_10scan_errorEE5valueIS6_TnPNS2_9enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1782|  1.19M|    {
 1783|  1.19M|        SCN_EXPECT(has_value());
  ------------------
  |  | 1104|  1.19M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.19M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1784|  1.19M|        return this->get_value();
 1785|  1.19M|    }
_ZNR3scn2v46detail21expected_storage_baseINSt3__14pairIPKwlEENS0_10scan_errorELb1EE9get_valueEv:
  470|  1.19M|    {
  471|  1.19M|        return m_value;
  472|  1.19M|    }
_ZNK3scn2v46ranges6detail5data_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implscDtfp_Efp_tlNS0_6detail12priority_tagILm1EEEEEEOT_:
 3013|  2.75M|    {
 3014|  2.75M|        return fn::impl(SCN_FWD(t), priority_tag<1>{});
  ------------------
  |  | 1110|  2.75M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3015|  2.75M|    }
_ZN3scn2v46ranges6detail5data_2fn4implINS2_9subrange_8subrangeIPKwS9_EES9_EENSt3__19enable_ifIX19is_object_pointer_vIT0_EESD_E4typeERT_NS0_6detail12priority_tagILm1EEE:
 2994|  2.75M|    {
 2995|  2.75M|        return t.data();
 2996|  2.75M|    }
_ZNR3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEdeIS5_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERSB_v:
 1808|   297k|    {
 1809|   297k|        return value();
 1810|   297k|    }
_ZNR3scn2v48expectedIPKwNS0_10scan_errorEEdeIS3_TnPNSt3__19enable_ifIXntsr3stdE9is_void_vIT_EEvE4typeELPv0EEERS9_v:
 1808|   594k|    {
 1809|   594k|        return value();
 1810|   594k|    }
_ZN3scn2v48expectedINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorEEC2IRKS5_vEEOT_:
 1583|    120|        : base(std::in_place, std::forward<U>(val)),
 1584|    120|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    120|    {
 1586|    120|    }
_ZN3scn2v46detail21expected_storage_baseINS1_17basic_scan_bufferIwE16forward_iteratorENS0_10scan_errorELb1EEC2IJRKS5_EvEENSt3__110in_place_tEDpOT_:
  455|    120|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    120|    {
  457|    120|    }
_ZN3scn2v48expectedIPKwNS0_10scan_errorEEC2IRKS3_vEEOT_:
 1583|    240|        : base(std::in_place, std::forward<U>(val)),
 1584|    240|          ctor_base(detail::non_default_ctor_tag_t{})
 1585|    240|    {
 1586|    240|    }
_ZN3scn2v46detail21expected_storage_baseIPKwNS0_10scan_errorELb1EEC2IJRKS4_EvEENSt3__110in_place_tEDpOT_:
  455|    240|        : m_value(std::forward<Args>(args)...), m_has_value(true)
  456|    240|    {
  457|    240|    }
_ZNK3scn2v46detail17basic_scan_bufferIcE15chars_availableEv:
 4374|  11.1M|    {
 4375|  11.1M|        return m_putback_buffer.size() + m_current_view.size();
 4376|  11.1M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4sizeEv:
 6262|   282k|    {
 6263|   282k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 282k]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|   282k|        return static_cast<std::size_t>(m_desc &
 6268|   282k|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|   282k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE9is_packedEv:
 6288|   564k|    {
 6289|   564k|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|   564k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE3getEm:
 6230|   282k|    {
 6231|   282k|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 282k]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|   282k|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 282k]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|   282k|        const auto t = type(id);
 6243|   282k|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|   282k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 282k]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|   282k|        basic_scan_arg<Context> arg;
 6248|   282k|        arg.m_type = t;
 6249|   282k|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 282k, False: 0]
  ------------------
 6250|   282k|            arg.m_value.ref_value = m_builtin_values[id];
 6251|   282k|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|   282k|        return arg;
 6256|   282k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4typeEm:
 6297|   282k|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|   282k|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|   282k|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|   282k|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|   282k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE15is_only_builtinEv:
 6292|   282k|    {
 6293|   282k|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|   282k|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEcvbEv:
 6046|   489k|    {
 6047|   489k|        return m_type != detail::arg_type::none_type;
 6048|   489k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|   118k|{
 9494|   118k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   118k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   118k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   118k|{
 9353|   118k|#define SCN_VISIT(Type)                                                \
 9354|   118k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   118k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   118k|    }                                                                  \
 9357|   118k|    else {                                                             \
 9358|   118k|        return vis(monostate_val);                                     \
 9359|   118k|    }
 9360|       |
 9361|   118k|    monostate monostate_val{};
 9362|       |
 9363|   118k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 118k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 118k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 118k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 118k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 118k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 118k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 118k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 118k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 118k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 118k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 118k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 118k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 118k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 118k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 118k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 118k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 118k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 118k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 118k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 118k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 118k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 118k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 118k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 118k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 118k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  59.3k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 59.3k, False: 59.3k]
  ------------------
 9443|  59.3k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  59.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  59.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  59.3k|    }                                                                  \
  |  | 9357|  59.3k|    else {                                                             \
  |  | 9358|  59.3k|        return vis(monostate_val);                                     \
  |  | 9359|  59.3k|    }
  ------------------
 9444|  59.3k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 118k]
  ------------------
 9445|  59.3k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  59.3k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  59.3k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  59.3k|    }                                                                  \
  |  | 9357|  59.3k|    else {                                                             \
  |  | 9358|  59.3k|        return vis(monostate_val);                                     \
  |  | 9359|  59.3k|    }
  ------------------
 9446|   118k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 59.3k, False: 59.3k]
  ------------------
 9447|   118k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|   118k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|   118k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   118k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   118k|    }                                                                  \
  |  | 9357|   118k|    else {                                                             \
  |  | 9358|   118k|        return vis(monostate_val);                                     \
  |  | 9359|   118k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|   118k|        }
 9454|       |
 9455|   118k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 118k]
  ------------------
 9456|   118k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   118k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   118k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 118k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 118k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   118k|            SCN_CLANG_POP
 9473|   118k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|   642k|{
 6092|   642k|    return arg.m_type;
 6093|   642k|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|   336k|{
 6104|   336k|    return arg.m_value;
 6105|   336k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcEC2ENS2_17basic_scan_bufferIcE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|  58.3k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|  58.3k|    static_cast<    \
  |  | 1109|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|  58.3k|    {
 9021|  58.3k|    }
_ZN3scn2v46detail17basic_scan_bufferIcE3getEv:
 4708|   133k|{
 4709|   133k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 133k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   133k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   133k|                            ranges::default_sentinel};
 4715|   133k|}
_ZN3scn2v46detail17basic_scan_bufferIcE16forward_iteratorC2EPS3_l:
 4471|   133k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   133k|    {
 4473|   133k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   133k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   133k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   133k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   133k|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|  75.2k|{
 9494|  75.2k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  75.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  75.2k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  75.2k|{
 9353|  75.2k|#define SCN_VISIT(Type)                                                \
 9354|  75.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  75.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  75.2k|    }                                                                  \
 9357|  75.2k|    else {                                                             \
 9358|  75.2k|        return vis(monostate_val);                                     \
 9359|  75.2k|    }
 9360|       |
 9361|  75.2k|    monostate monostate_val{};
 9362|       |
 9363|  75.2k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 75.2k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 75.2k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 75.2k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 75.2k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 75.2k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 75.2k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 75.2k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 75.2k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 75.2k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 75.2k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 75.2k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 75.2k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 75.2k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 75.2k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 75.2k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 75.2k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 75.2k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 75.2k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 75.2k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 75.2k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 75.2k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 75.2k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 75.2k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 75.2k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 75.2k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  75.2k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 75.2k, False: 0]
  ------------------
 9443|  75.2k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  75.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  75.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  75.2k|    }                                                                  \
  |  | 9357|  75.2k|    else {                                                             \
  |  | 9358|  75.2k|        return vis(monostate_val);                                     \
  |  | 9359|  75.2k|    }
  ------------------
 9444|  75.2k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 75.2k]
  ------------------
 9445|  75.2k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  75.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  75.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  75.2k|    }                                                                  \
  |  | 9357|  75.2k|    else {                                                             \
  |  | 9358|  75.2k|        return vis(monostate_val);                                     \
  |  | 9359|  75.2k|    }
  ------------------
 9446|  75.2k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 75.2k]
  ------------------
 9447|  75.2k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  75.2k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  75.2k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  75.2k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  75.2k|    }                                                                  \
  |  | 9357|  75.2k|    else {                                                             \
  |  | 9358|  75.2k|        return vis(monostate_val);                                     \
  |  | 9359|  75.2k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  75.2k|        }
 9454|       |
 9455|  75.2k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 75.2k]
  ------------------
 9456|  75.2k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  75.2k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  75.2k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 75.2k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 75.2k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  75.2k|            SCN_CLANG_POP
 9473|  75.2k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IONS0_6ranges6detail9subrange_8subrangeIPKcS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSF_11char_traitsIcEEEEi:
 6361|  94.6k|        : m_format{format},
 6362|  94.6k|          m_next_arg_id{next_arg_id},
 6363|  94.6k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  94.6k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  94.6k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  94.6k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  94.6k|    {
 6369|  94.6k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKcS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|  94.6k|    {
 3089|  94.6k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|  94.6k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKcS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|  94.6k|    {
 3055|  94.6k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|  94.6k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  94.6k|{
 7878|  94.6k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  94.6k|    handler.check_args_exhausted();
 7880|  94.6k|    return handler.get_error();
 7881|  94.6k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  94.6k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  94.6k|    auto begin = format.data();
 7846|  94.6k|    auto it = begin;
 7847|  94.6k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   171k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 94.6k, False: 76.9k]
  ------------------
 7850|  94.6k|        const auto ch = *it++;
 7851|  94.6k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 94.6k, False: 0]
  ------------------
 7852|  94.6k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  94.6k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  94.6k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 17.6k, False: 76.9k]
  ------------------
 7856|  17.6k|                return;
 7857|  17.6k|            }
 7858|  94.6k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  94.6k|    }
 7869|       |
 7870|  76.9k|    handler.on_literal_text(begin, end);
 7871|  76.9k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_:
 7774|  94.6k|{
 7775|  94.6k|    struct id_adapter {
 7776|  94.6k|        constexpr void operator()()
 7777|  94.6k|        {
 7778|  94.6k|            arg_id = handler.on_arg_id();
 7779|  94.6k|        }
 7780|  94.6k|        constexpr void operator()(std::size_t id)
 7781|  94.6k|        {
 7782|  94.6k|            arg_id = handler.on_arg_id(id);
 7783|  94.6k|        }
 7784|       |
 7785|  94.6k|        constexpr void on_error(const char* msg)
 7786|  94.6k|        {
 7787|  94.6k|            SCN_UNLIKELY_ATTR
 7788|  94.6k|            handler.on_error(msg);
 7789|  94.6k|        }
 7790|       |
 7791|  94.6k|        Handler& handler;
 7792|  94.6k|        std::size_t arg_id;
 7793|  94.6k|    };
 7794|       |
 7795|  94.6k|    ++begin;
 7796|  94.6k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 94.6k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  94.6k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 94.6k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  94.6k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 94.6k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  94.6k|    else {
 7808|  94.6k|        auto adapter = id_adapter{handler, 0};
 7809|  94.6k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  94.6k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 94.6k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  94.6k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 94.6k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  94.6k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 94.6k, False: 0]
  ------------------
 7820|  94.6k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 94.6k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  94.6k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  94.6k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   189k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.06k, False: 87.5k]
  |  |  |  Branch (1039:45): [True: 0, False: 94.6k]
  |  |  |  Branch (1039:45): [True: 7.06k, False: 87.5k]
  |  |  ------------------
  ------------------
 7826|  7.06k|                handler.on_error("Unknown format specifier");
 7827|  7.06k|                return begin;
 7828|  7.06k|            }
 7829|  94.6k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  94.6k|    }
 7836|  87.5k|    return begin + 1;
 7837|  94.6k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE3argEm:
 8918|   152k|    {
 8919|   152k|        return m_args.get(id);
 8920|   152k|    }
_ZN3scn2v424basic_scan_parse_contextIcE11next_arg_idEv:
 6396|   152k|    {
 6397|   152k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   152k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 152k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   152k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   152k|        do_check_arg_id(id);
 6405|   152k|        return id;
 6406|   152k|    }
_ZN3scn2v424basic_scan_parse_contextIcE15do_check_arg_idEm:
 6890|   152k|{
 6891|   152k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   152k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   152k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  94.6k|{
 7276|  94.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  94.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  94.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  94.6k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 94.6k, False: 0]
  |  Branch (7277:26): [True: 0, False: 94.6k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  94.6k|    handler();
 7282|  94.6k|    return begin;
 7283|  94.6k|}
_ZN3scn2v46detail16parse_simple_intIcEEiRPKT_S5_:
 7224|  10.5k|{
 7225|  10.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7226|  10.5k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1104|  10.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  10.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7227|       |
 7228|  10.5k|    unsigned long long value = 0;
 7229|  21.1k|    do {
 7230|  21.1k|        value *= 10;
 7231|  21.1k|        value += static_cast<unsigned long long>(*begin - '0');
 7232|  21.1k|        if (value >
  ------------------
  |  Branch (7232:13): [True: 0, False: 21.1k]
  ------------------
 7233|  21.1k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7234|      0|            return -1;
 7235|      0|        }
 7236|  21.1k|        ++begin;
 7237|  21.1k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7237:14): [True: 21.1k, False: 0]
  |  Branch (7237:30): [True: 21.1k, False: 0]
  |  Branch (7237:47): [True: 10.5k, False: 10.5k]
  ------------------
 7238|  10.5k|    return static_cast<int>(value);
 7239|  10.5k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb1EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  94.6k|        {
 7778|  94.6k|            arg_id = handler.on_arg_id();
 7779|  94.6k|        }
_ZN3scn2v424basic_scan_parse_contextIcE10advance_toEPKc:
 6391|   142k|    {
 6392|   142k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   142k|    }
_ZNK3scn2v424basic_scan_parse_contextIcE5beginEv:
 6380|   295k|    {
 6381|   295k|        return m_format.data();
 6382|   295k|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|  94.6k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|  94.6k|    {
 7962|  94.6k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|  94.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  94.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|  94.6k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7690|  94.6k|{
 7691|  94.6k|    auto do_presentation = [&]() -> const CharT* {
 7692|  94.6k|        if (*begin == CharT{'['}) {
 7693|  94.6k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  94.6k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|  94.6k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|  94.6k|                return begin;
 7699|  94.6k|            }
 7700|  94.6k|            handler.on_character_set_string(set);
 7701|  94.6k|            return begin;
 7702|  94.6k|        }
 7703|  94.6k|        if (*begin == CharT{'/'}) {
 7704|  94.6k|            return parse_presentation_regex(begin, end, handler);
 7705|  94.6k|        }
 7706|  94.6k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  94.6k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|  94.6k|            handler.on_error("Invalid type specifier in format string");
 7709|  94.6k|            return begin;
 7710|  94.6k|        }
 7711|  94.6k|        handler.on_type(type);
 7712|  94.6k|        return begin;
 7713|  94.6k|    };
 7714|       |
 7715|  94.6k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 94.6k, False: 0]
  |  Branch (7715:28): [True: 82.6k, False: 11.9k]
  ------------------
 7716|  94.6k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 82.6k, False: 0]
  |  Branch (7716:36): [True: 79.1k, False: 3.53k]
  ------------------
 7717|  79.1k|        return do_presentation();
 7718|  79.1k|    }
 7719|       |
 7720|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  15.5k|    begin = parse_align(begin, end, handler);
 7726|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  15.5k|    begin = parse_width(begin, end, handler);
 7732|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  15.5k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 15.5k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  15.5k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 3.53k, False: 11.9k]
  ------------------
 7751|  3.53k|        handler.on_localized();
 7752|  3.53k|        ++begin;
 7753|  3.53k|    }
 7754|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  15.5k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 15.5k, False: 0]
  |  Branch (7759:25): [True: 11.9k, False: 3.53k]
  ------------------
 7760|  11.9k|        do_presentation();
 7761|  11.9k|    }
 7762|  15.5k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  15.5k|    return begin;
 7768|  15.5k|}
_ZN3scn2v46detail15is_ascii_letterIcEEbT_:
 7339|   134k|{
 7340|   134k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 129k, False: 5.29k]
  |  Branch (7340:33): [True: 129k, False: 0]
  ------------------
 7341|   134k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 5.29k, False: 0]
  |  Branch (7341:33): [True: 5.29k, False: 0]
  ------------------
 7342|   134k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|  91.1k|    auto do_presentation = [&]() -> const CharT* {
 7692|  91.1k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 4.91k, False: 86.1k]
  ------------------
 7693|  4.91k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  4.91k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.91k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|  4.91k|            handler.on_character_set_string(set);
 7701|  4.91k|            return begin;
 7702|  4.91k|        }
 7703|  86.1k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 86.1k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|  86.1k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  86.1k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|  86.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.53k, False: 82.6k]
  |  |  ------------------
  ------------------
 7708|  3.53k|            handler.on_error("Invalid type specifier in format string");
 7709|  3.53k|            return begin;
 7710|  3.53k|        }
 7711|  82.6k|        handler.on_type(type);
 7712|  82.6k|        return begin;
 7713|  86.1k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7529|  4.91k|{
 7530|  4.91k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  4.91k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  4.91k|    auto start = begin;
 7534|  4.91k|    ++begin;
 7535|       |
 7536|  4.91k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.91k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  4.91k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 0, False: 4.91k]
  ------------------
 7543|      0|        handler.on_charset_inverted();
 7544|      0|        ++begin;
 7545|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 0, False: 0]
  ------------------
 7552|      0|            handler.on_charset_single(char32_t{']'});
 7553|      0|            ++begin;
 7554|      0|        }
 7555|      0|    }
 7556|  4.91k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 4.91k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  14.7k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 14.7k, False: 0]
  ------------------
 7561|  14.7k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  14.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.7k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  14.7k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 4.91k, False: 9.82k]
  ------------------
 7566|  4.91k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  4.91k|        }
 7568|       |
 7569|  9.82k|        parse_presentation_set_literal(begin, end, handler);
 7570|  9.82k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  4.91k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEvRPKT_SK_OT0_:
 7493|  9.82k|{
 7494|  9.82k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  9.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  9.82k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  9.82k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  9.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.82k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  9.82k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 9.82k, False: 0]
  |  Branch (7501:25): [True: 9.82k, False: 0]
  |  Branch (7501:49): [True: 9.82k, False: 0]
  ------------------
 7502|  9.82k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 9.82k, False: 0]
  ------------------
 7503|  9.82k|        ++begin;
 7504|       |
 7505|  9.82k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  9.82k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  9.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.82k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  9.82k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  9.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.82k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  9.82k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  9.82k|        return;
 7519|  9.82k|    }
 7520|       |
 7521|      0|    handler.on_charset_single(cp_first);
 7522|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEDiRPKT_SK_OT0_:
 7469|  19.6k|{
 7470|  19.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  19.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  19.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  19.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  39.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 19.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 19.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  19.6k|    const auto cp =
 7479|  19.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  19.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 19.6k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  19.6k|    begin += len;
 7486|  19.6k|    return cp;
 7487|  19.6k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIcEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7183|  7.36k|    {
 7184|  7.36k|        m_specs.charset_string_data = fmt.data();
 7185|  7.36k|        m_specs.charset_string_size = fmt.size();
 7186|  7.36k|        on_type(presentation_type::string_set);
 7187|  7.36k|    }
_ZN3scn2v46detail23parse_presentation_typeIcEENS1_17presentation_typeET_:
 7287|   140k|{
 7288|   140k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 140k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 140k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 140k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 140k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 140k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 140k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 140k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 140k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 140k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 140k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|      0|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 0, False: 140k]
  ------------------
 7307|      0|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 140k]
  ------------------
 7308|      0|            return presentation_type::float_hex;
 7309|      0|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 0, False: 140k]
  ------------------
 7310|      0|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 140k]
  ------------------
 7311|      0|            return presentation_type::float_scientific;
 7312|      0|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 0, False: 140k]
  ------------------
 7313|      0|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 140k]
  ------------------
 7314|      0|            return presentation_type::float_fixed;
 7315|      0|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 0, False: 140k]
  ------------------
 7316|      0|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 140k]
  ------------------
 7317|      0|            return presentation_type::float_general;
 7318|   129k|        case 's':
  ------------------
  |  Branch (7318:9): [True: 129k, False: 10.5k]
  ------------------
 7319|   129k|            return presentation_type::string;
 7320|  5.29k|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 5.29k, False: 134k]
  ------------------
 7321|  5.29k|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 140k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 140k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 140k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 140k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|  5.29k|        default:
  ------------------
  |  Branch (7332:9): [True: 5.29k, False: 134k]
  ------------------
 7333|  5.29k|            return presentation_type::none;
 7334|   140k|    }
 7335|   140k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7364|  15.5k|{
 7365|  15.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  15.5k|    auto check_align = [](wchar_t ch) {
 7368|  15.5k|        switch (ch) {
 7369|  15.5k|            case L'<':
 7370|  15.5k|                return align_type::left;
 7371|  15.5k|            case L'>':
 7372|  15.5k|                return align_type::right;
 7373|  15.5k|            case L'^':
 7374|  15.5k|                return align_type::center;
 7375|  15.5k|            default:
 7376|  15.5k|                return align_type::none;
 7377|  15.5k|        }
 7378|  15.5k|    };
 7379|       |
 7380|  15.5k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  15.5k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  31.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.5k]
  |  |  |  Branch (1039:45): [True: 0, False: 15.5k]
  |  |  |  Branch (1039:45): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7382|  15.5k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  15.5k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  15.5k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  15.5k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  15.5k|    const auto begin_before_fill = begin;
 7392|  15.5k|    begin += potential_fill_len;
 7393|       |
 7394|  15.5k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 15.5k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  15.5k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  15.5k|    const auto begin_after_fill = begin;
 7400|  15.5k|    ++begin;
 7401|       |
 7402|  15.5k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 15.5k, False: 0]
  ------------------
 7403|  15.5k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 15.5k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  15.5k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 4.91k, False: 10.5k]
  ------------------
 7408|  4.91k|            return begin_before_fill;
 7409|  4.91k|        }
 7410|  15.5k|    }
 7411|       |
 7412|  10.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 10.5k, False: 0]
  ------------------
 7413|  10.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 10.5k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  10.5k|        return begin_before_fill;
 7418|  10.5k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  10.5k|}
_ZN3scn2v46detail17code_point_lengthIcEEiPKT_S5_:
 7346|  23.2k|{
 7347|  23.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  23.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  23.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|       |    if constexpr (sizeof(CharT) != 1) {
 7349|       |        return 1;
 7350|       |    }
 7351|  23.2k|    else {
 7352|  23.2k|        const auto lengths =
 7353|  23.2k|            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|  23.2k|            "\3\4";
 7355|  23.2k|        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|  23.2k|        return len;
 7357|  23.2k|    }
 7358|  23.2k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|  31.0k|    auto check_align = [](wchar_t ch) {
 7368|  31.0k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 31.0k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 31.0k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 31.0k]
  ------------------
 7374|      0|                return align_type::center;
 7375|  31.0k|            default:
  ------------------
  |  Branch (7375:13): [True: 31.0k, False: 0]
  ------------------
 7376|  31.0k|                return align_type::none;
 7377|  31.0k|        }
 7378|  31.0k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSC_EEcEEEEEEEEPKT_SK_SK_OT0_:
 7429|  15.5k|{
 7430|  15.5k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  15.5k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  15.5k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  15.5k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 15.5k, False: 0]
  |  Branch (7432:33): [True: 7.06k, False: 8.44k]
  ------------------
 7433|  7.06k|        int width = parse_simple_int(begin, end);
 7434|  7.06k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  7.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 7.06k, False: 0]
  |  |  ------------------
  ------------------
 7435|  7.06k|            handler.on_width(width);
 7436|  7.06k|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|  7.06k|    }
 7442|  15.5k|    return begin;
 7443|  15.5k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEEE12on_localizedEv:
 7966|  3.53k|    {
 7967|  3.53k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  3.53k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 3.53k, False: 0]
  ------------------
 7969|  3.53k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 3.53k, False: 0]
  ------------------
 7970|  3.53k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 3.53k, False: 0]
  ------------------
 7971|  3.53k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 3.53k, False: 0]
  ------------------
 7972|  3.53k|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|  3.53k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|  3.53k|        }
 7977|       |
 7978|      0|        Handler::on_localized();
 7979|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKcSF_EEcEEEEEEDcOT_:
 9493|  87.5k|{
 9494|  87.5k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  87.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  87.5k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSB_EEcEEEENS5_INS1_16buffer_range_tagEcEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  87.5k|{
 9353|  87.5k|#define SCN_VISIT(Type)                                                \
 9354|  87.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  87.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  87.5k|    }                                                                  \
 9357|  87.5k|    else {                                                             \
 9358|  87.5k|        return vis(monostate_val);                                     \
 9359|  87.5k|    }
 9360|       |
 9361|  87.5k|    monostate monostate_val{};
 9362|       |
 9363|  87.5k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 87.5k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 87.5k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 87.5k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 87.5k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 87.5k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 87.5k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 87.5k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 87.5k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 87.5k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 87.5k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 87.5k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 87.5k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 87.5k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 87.5k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 87.5k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 87.5k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 87.5k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 87.5k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 87.5k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 87.5k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 87.5k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 87.5k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 87.5k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 87.5k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 87.5k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  43.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 43.7k, False: 43.7k]
  ------------------
 9443|  43.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  43.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  43.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  43.7k|    }                                                                  \
  |  | 9357|  43.7k|    else {                                                             \
  |  | 9358|  43.7k|        return vis(monostate_val);                                     \
  |  | 9359|  43.7k|    }
  ------------------
 9444|  43.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 87.5k]
  ------------------
 9445|  43.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  43.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  43.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  43.7k|    }                                                                  \
  |  | 9357|  43.7k|    else {                                                             \
  |  | 9358|  43.7k|        return vis(monostate_val);                                     \
  |  | 9359|  43.7k|    }
  ------------------
 9446|  87.5k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 43.7k, False: 43.7k]
  ------------------
 9447|  87.5k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  87.5k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  87.5k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  87.5k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  87.5k|    }                                                                  \
  |  | 9357|  87.5k|    else {                                                             \
  |  | 9358|  87.5k|        return vis(monostate_val);                                     \
  |  | 9359|  87.5k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  87.5k|        }
 9454|       |
 9455|  87.5k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 87.5k]
  ------------------
 9456|  87.5k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  87.5k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  87.5k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 87.5k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 87.5k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  87.5k|            SCN_CLANG_POP
 9473|  87.5k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIcEC2IRNS0_6detail17basic_scan_bufferIcEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIcNSB_11char_traitsIcEEEEi:
 6361|  58.3k|        : m_format{format},
 6362|  58.3k|          m_next_arg_id{next_arg_id},
 6363|  58.3k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|  58.3k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|  58.3k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|  58.3k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|  58.3k|    {
 6369|  58.3k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|  58.3k|{
 7878|  58.3k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|  58.3k|    handler.check_args_exhausted();
 7880|  58.3k|    return handler.get_error();
 7881|  58.3k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EcRNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|  58.3k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|  58.3k|    auto begin = format.data();
 7846|  58.3k|    auto it = begin;
 7847|  58.3k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   107k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 58.3k, False: 49.4k]
  ------------------
 7850|  58.3k|        const auto ch = *it++;
 7851|  58.3k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 58.3k, False: 0]
  ------------------
 7852|  58.3k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|  58.3k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|  58.3k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 8.83k, False: 49.4k]
  ------------------
 7856|  8.83k|                return;
 7857|  8.83k|            }
 7858|  58.3k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|  58.3k|    }
 7869|       |
 7870|  49.4k|    handler.on_literal_text(begin, end);
 7871|  49.4k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEcE10advance_toENS2_17basic_scan_bufferIcE16forward_iteratorE:
 9057|  49.4k|    {
 9058|  49.4k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  49.4k|    static_cast<    \
  |  | 1109|  49.4k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|  49.4k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_:
 7774|  58.3k|{
 7775|  58.3k|    struct id_adapter {
 7776|  58.3k|        constexpr void operator()()
 7777|  58.3k|        {
 7778|  58.3k|            arg_id = handler.on_arg_id();
 7779|  58.3k|        }
 7780|  58.3k|        constexpr void operator()(std::size_t id)
 7781|  58.3k|        {
 7782|  58.3k|            arg_id = handler.on_arg_id(id);
 7783|  58.3k|        }
 7784|       |
 7785|  58.3k|        constexpr void on_error(const char* msg)
 7786|  58.3k|        {
 7787|  58.3k|            SCN_UNLIKELY_ATTR
 7788|  58.3k|            handler.on_error(msg);
 7789|  58.3k|        }
 7790|       |
 7791|  58.3k|        Handler& handler;
 7792|  58.3k|        std::size_t arg_id;
 7793|  58.3k|    };
 7794|       |
 7795|  58.3k|    ++begin;
 7796|  58.3k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 58.3k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|  58.3k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 58.3k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|  58.3k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 58.3k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|  58.3k|    else {
 7808|  58.3k|        auto adapter = id_adapter{handler, 0};
 7809|  58.3k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|  58.3k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 58.3k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|  58.3k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 58.3k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|  58.3k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 58.3k, False: 0]
  ------------------
 7820|  58.3k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 58.3k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|  58.3k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|  58.3k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   116k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.53k, False: 54.7k]
  |  |  |  Branch (1039:45): [True: 0, False: 58.3k]
  |  |  |  Branch (1039:45): [True: 3.53k, False: 54.7k]
  |  |  ------------------
  ------------------
 7826|  3.53k|                handler.on_error("Unknown format specifier");
 7827|  3.53k|                return begin;
 7828|  3.53k|            }
 7829|  58.3k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|  58.3k|    }
 7836|  54.7k|    return begin + 1;
 7837|  58.3k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIcRZNS1_23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|  58.3k|{
 7276|  58.3k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  58.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  58.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|  58.3k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 58.3k, False: 0]
  |  Branch (7277:26): [True: 0, False: 58.3k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|  58.3k|    handler();
 7282|  58.3k|    return begin;
 7283|  58.3k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIcNS0_12_GLOBAL__N_114format_handlerILb0EcEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|  58.3k|        {
 7778|  58.3k|            arg_id = handler.on_arg_id();
 7779|  58.3k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|  58.3k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|  58.3k|    {
 7962|  58.3k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|  58.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  58.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|  58.3k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7690|  58.3k|{
 7691|  58.3k|    auto do_presentation = [&]() -> const CharT* {
 7692|  58.3k|        if (*begin == CharT{'['}) {
 7693|  58.3k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  58.3k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|  58.3k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|  58.3k|                return begin;
 7699|  58.3k|            }
 7700|  58.3k|            handler.on_character_set_string(set);
 7701|  58.3k|            return begin;
 7702|  58.3k|        }
 7703|  58.3k|        if (*begin == CharT{'/'}) {
 7704|  58.3k|            return parse_presentation_regex(begin, end, handler);
 7705|  58.3k|        }
 7706|  58.3k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  58.3k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|  58.3k|            handler.on_error("Invalid type specifier in format string");
 7709|  58.3k|            return begin;
 7710|  58.3k|        }
 7711|  58.3k|        handler.on_type(type);
 7712|  58.3k|        return begin;
 7713|  58.3k|    };
 7714|       |
 7715|  58.3k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 58.3k, False: 0]
  |  Branch (7715:28): [True: 52.3k, False: 5.98k]
  ------------------
 7716|  58.3k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 52.3k, False: 0]
  |  Branch (7716:36): [True: 50.5k, False: 1.76k]
  ------------------
 7717|  50.5k|        return do_presentation();
 7718|  50.5k|    }
 7719|       |
 7720|  7.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  7.75k|    begin = parse_align(begin, end, handler);
 7726|  7.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  7.75k|    begin = parse_width(begin, end, handler);
 7732|  7.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  7.75k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 7.75k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  7.75k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 1.76k, False: 5.98k]
  ------------------
 7751|  1.76k|        handler.on_localized();
 7752|  1.76k|        ++begin;
 7753|  1.76k|    }
 7754|  7.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  7.75k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 7.75k, False: 0]
  |  Branch (7759:25): [True: 5.98k, False: 1.76k]
  ------------------
 7760|  5.98k|        do_presentation();
 7761|  5.98k|    }
 7762|  7.75k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  7.75k|    return begin;
 7768|  7.75k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|  56.5k|    auto do_presentation = [&]() -> const CharT* {
 7692|  56.5k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 2.45k, False: 54.0k]
  ------------------
 7693|  2.45k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  2.45k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.45k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|  2.45k|            handler.on_character_set_string(set);
 7701|  2.45k|            return begin;
 7702|  2.45k|        }
 7703|  54.0k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 54.0k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|  54.0k|        presentation_type type = parse_presentation_type(*begin++);
 7707|  54.0k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|  54.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.76k, False: 52.3k]
  |  |  ------------------
  ------------------
 7708|  1.76k|            handler.on_error("Invalid type specifier in format string");
 7709|  1.76k|            return begin;
 7710|  1.76k|        }
 7711|  52.3k|        handler.on_type(type);
 7712|  52.3k|        return begin;
 7713|  54.0k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7529|  2.45k|{
 7530|  2.45k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  2.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  2.45k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  2.45k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  2.45k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  2.45k|    auto start = begin;
 7534|  2.45k|    ++begin;
 7535|       |
 7536|  2.45k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 2.45k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  2.45k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 0, False: 2.45k]
  ------------------
 7543|      0|        handler.on_charset_inverted();
 7544|      0|        ++begin;
 7545|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 0, False: 0]
  ------------------
 7552|      0|            handler.on_charset_single(char32_t{']'});
 7553|      0|            ++begin;
 7554|      0|        }
 7555|      0|    }
 7556|  2.45k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 2.45k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  7.36k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 7.36k, False: 0]
  ------------------
 7561|  7.36k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  7.36k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.36k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  7.36k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 2.45k, False: 4.91k]
  ------------------
 7566|  2.45k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  2.45k|        }
 7568|       |
 7569|  4.91k|        parse_presentation_set_literal(begin, end, handler);
 7570|  4.91k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  2.45k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEvRPKT_SE_OT0_:
 7493|  4.91k|{
 7494|  4.91k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  4.91k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  4.91k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  4.91k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  4.91k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.91k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  4.91k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 4.91k, False: 0]
  |  Branch (7501:25): [True: 4.91k, False: 0]
  |  Branch (7501:49): [True: 4.91k, False: 0]
  ------------------
 7502|  4.91k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 4.91k, False: 0]
  ------------------
 7503|  4.91k|        ++begin;
 7504|       |
 7505|  4.91k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  4.91k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.91k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  4.91k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 4.91k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  4.91k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  4.91k|        return;
 7519|  4.91k|    }
 7520|       |
 7521|      0|    handler.on_charset_single(cp_first);
 7522|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEDiRPKT_SE_OT0_:
 7469|  9.82k|{
 7470|  9.82k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  9.82k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  9.82k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  9.82k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  9.82k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  19.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.82k]
  |  |  |  Branch (1039:45): [True: 0, False: 9.82k]
  |  |  |  Branch (1039:45): [True: 0, False: 9.82k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  9.82k|    const auto cp =
 7479|  9.82k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  9.82k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  9.82k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 9.82k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  9.82k|    begin += len;
 7486|  9.82k|    return cp;
 7487|  9.82k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7364|  7.75k|{
 7365|  7.75k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  7.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  7.75k|    auto check_align = [](wchar_t ch) {
 7368|  7.75k|        switch (ch) {
 7369|  7.75k|            case L'<':
 7370|  7.75k|                return align_type::left;
 7371|  7.75k|            case L'>':
 7372|  7.75k|                return align_type::right;
 7373|  7.75k|            case L'^':
 7374|  7.75k|                return align_type::center;
 7375|  7.75k|            default:
 7376|  7.75k|                return align_type::none;
 7377|  7.75k|        }
 7378|  7.75k|    };
 7379|       |
 7380|  7.75k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  7.75k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  15.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.75k]
  |  |  |  Branch (1039:45): [True: 0, False: 7.75k]
  |  |  |  Branch (1039:45): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 7382|  7.75k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  7.75k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  7.75k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  7.75k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  7.75k|    const auto begin_before_fill = begin;
 7392|  7.75k|    begin += potential_fill_len;
 7393|       |
 7394|  7.75k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 7.75k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  7.75k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  7.75k|    const auto begin_after_fill = begin;
 7400|  7.75k|    ++begin;
 7401|       |
 7402|  7.75k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 7.75k, False: 0]
  ------------------
 7403|  7.75k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  7.75k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.75k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  7.75k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 2.45k, False: 5.29k]
  ------------------
 7408|  2.45k|            return begin_before_fill;
 7409|  2.45k|        }
 7410|  7.75k|    }
 7411|       |
 7412|  5.29k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 5.29k, False: 0]
  ------------------
 7413|  5.29k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 5.29k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  5.29k|        return begin_before_fill;
 7418|  5.29k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  5.29k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|  15.5k|    auto check_align = [](wchar_t ch) {
 7368|  15.5k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 15.5k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 15.5k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 15.5k]
  ------------------
 7374|      0|                return align_type::center;
 7375|  15.5k|            default:
  ------------------
  |  Branch (7375:13): [True: 15.5k, False: 0]
  ------------------
 7376|  15.5k|                return align_type::none;
 7377|  15.5k|        }
 7378|  15.5k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIcRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEEEEEPKT_SE_SE_OT0_:
 7429|  7.75k|{
 7430|  7.75k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  7.75k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.75k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  7.75k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 7.75k, False: 0]
  |  Branch (7432:33): [True: 3.53k, False: 4.22k]
  ------------------
 7433|  3.53k|        int width = parse_simple_int(begin, end);
 7434|  3.53k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  3.53k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 3.53k, False: 0]
  |  |  ------------------
  ------------------
 7435|  3.53k|            handler.on_width(width);
 7436|  3.53k|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|  3.53k|    }
 7442|  7.75k|    return begin;
 7443|  7.75k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEEE12on_localizedEv:
 7966|  1.76k|    {
 7967|  1.76k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  1.76k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 1.76k, False: 0]
  ------------------
 7969|  1.76k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 1.76k, False: 0]
  ------------------
 7970|  1.76k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 1.76k, False: 0]
  ------------------
 7971|  1.76k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 1.76k, False: 0]
  ------------------
 7972|  1.76k|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|  1.76k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|  1.76k|        }
 7977|       |
 7978|      0|        Handler::on_localized();
 7979|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|  54.7k|{
 9494|  54.7k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|  54.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|  54.7k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|  54.7k|{
 9353|  54.7k|#define SCN_VISIT(Type)                                                \
 9354|  54.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|  54.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|  54.7k|    }                                                                  \
 9357|  54.7k|    else {                                                             \
 9358|  54.7k|        return vis(monostate_val);                                     \
 9359|  54.7k|    }
 9360|       |
 9361|  54.7k|    monostate monostate_val{};
 9362|       |
 9363|  54.7k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 54.7k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 54.7k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 54.7k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 54.7k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 54.7k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 54.7k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 54.7k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 54.7k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 54.7k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 54.7k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 54.7k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 54.7k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 54.7k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 54.7k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 54.7k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 54.7k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 54.7k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 54.7k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 54.7k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 54.7k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 54.7k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 54.7k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 54.7k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 54.7k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 54.7k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|  54.7k|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 54.7k, False: 0]
  ------------------
 9443|  54.7k|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|  54.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  54.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  54.7k|    }                                                                  \
  |  | 9357|  54.7k|    else {                                                             \
  |  | 9358|  54.7k|        return vis(monostate_val);                                     \
  |  | 9359|  54.7k|    }
  ------------------
 9444|  54.7k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 0, False: 54.7k]
  ------------------
 9445|  54.7k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|  54.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  54.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  54.7k|    }                                                                  \
  |  | 9357|  54.7k|    else {                                                             \
  |  | 9358|  54.7k|        return vis(monostate_val);                                     \
  |  | 9359|  54.7k|    }
  ------------------
 9446|  54.7k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 54.7k]
  ------------------
 9447|  54.7k|            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|  54.7k|                SCN_VISIT(std::string_view);
  ------------------
  |  | 9354|  54.7k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|  54.7k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|  54.7k|    }                                                                  \
  |  | 9357|  54.7k|    else {                                                             \
  |  | 9358|  54.7k|        return vis(monostate_val);                                     \
  |  | 9359|  54.7k|    }
  ------------------
 9449|       |            }
 9450|       |            else {
 9451|       |                SCN_VISIT(std::wstring_view);
 9452|       |            }
 9453|  54.7k|        }
 9454|       |
 9455|  54.7k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 54.7k]
  ------------------
 9456|  54.7k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|  54.7k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|  54.7k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 54.7k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 54.7k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|  54.7k|            SCN_CLANG_POP
 9473|  54.7k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIcE8sync_allEv:
 4369|  11.4k|    {
 4370|  11.4k|        return sync(0);
 4371|  11.4k|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4sizeEv:
 6262|  1.84M|    {
 6263|  1.84M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 6264|      0|            return max_size();
 6265|      0|        }
 6266|       |
 6267|  1.84M|        return static_cast<std::size_t>(m_desc &
 6268|  1.84M|                                        ((1 << detail::packed_arg_bits) - 1));
 6269|  1.84M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE9is_packedEv:
 6288|  3.69M|    {
 6289|  3.69M|        return (m_desc & detail::is_unpacked_bit) == 0;
 6290|  3.69M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE3getEm:
 6230|  1.84M|    {
 6231|  1.84M|        if (SCN_UNLIKELY(!is_packed())) {
  ------------------
  |  | 1039|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 6232|      0|            if (SCN_LIKELY(id < max_size())) {
  ------------------
  |  | 1038|      0|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 6233|      0|                return m_args[id];
 6234|      0|            }
 6235|      0|            return {};
 6236|      0|        }
 6237|       |
 6238|  1.84M|        if (SCN_UNLIKELY(id >= detail::max_packed_args)) {
  ------------------
  |  | 1039|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 6239|      0|            return {};
 6240|      0|        }
 6241|       |
 6242|  1.84M|        const auto t = type(id);
 6243|  1.84M|        if (SCN_UNLIKELY(t == detail::arg_type::none_type)) {
  ------------------
  |  | 1039|  1.84M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.84M]
  |  |  ------------------
  ------------------
 6244|      0|            return {};
 6245|      0|        }
 6246|       |
 6247|  1.84M|        basic_scan_arg<Context> arg;
 6248|  1.84M|        arg.m_type = t;
 6249|  1.84M|        if (is_only_builtin()) {
  ------------------
  |  Branch (6249:13): [True: 1.84M, False: 0]
  ------------------
 6250|  1.84M|            arg.m_value.ref_value = m_builtin_values[id];
 6251|  1.84M|        }
 6252|      0|        else {
 6253|      0|            arg.m_value = m_values[id];
 6254|      0|        }
 6255|  1.84M|        return arg;
 6256|  1.84M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4typeEm:
 6297|  1.84M|    {
 6298|       |        // First (0th) index is size, types start after that
 6299|  1.84M|        const auto shift = (index + 1) * detail::packed_arg_bits;
 6300|  1.84M|        const std::size_t mask = (1 << detail::packed_arg_bits) - 1;
 6301|  1.84M|        return static_cast<detail::arg_type>((m_desc >> shift) & mask);
 6302|  1.84M|    }
_ZNK3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE15is_only_builtinEv:
 6292|  1.84M|    {
 6293|  1.84M|        return (m_desc & detail::has_custom_types_bit) == 0;
 6294|  1.84M|    }
_ZNK3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEcvbEv:
 6046|  3.21M|    {
 6047|  3.21M|        return m_type != detail::arg_type::none_type;
 6048|  3.21M|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   901k|{
 9494|   901k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   901k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   901k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   901k|{
 9353|   901k|#define SCN_VISIT(Type)                                                \
 9354|   901k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   901k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   901k|    }                                                                  \
 9357|   901k|    else {                                                             \
 9358|   901k|        return vis(monostate_val);                                     \
 9359|   901k|    }
 9360|       |
 9361|   901k|    monostate monostate_val{};
 9362|       |
 9363|   901k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 901k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 901k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 901k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 901k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 901k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 901k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 901k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 901k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 901k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 901k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 901k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 901k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 901k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 901k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 901k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 901k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 901k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 901k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 901k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 901k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 901k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 901k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 901k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 901k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 901k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 901k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|   450k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 450k, False: 450k]
  ------------------
 9445|   450k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|   450k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   450k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   450k|    }                                                                  \
  |  | 9357|   450k|    else {                                                             \
  |  | 9358|   450k|        return vis(monostate_val);                                     \
  |  | 9359|   450k|    }
  ------------------
 9446|   901k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 450k, False: 450k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|   901k|            else {
 9451|   901k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|   901k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   901k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   901k|    }                                                                  \
  |  | 9357|   901k|    else {                                                             \
  |  | 9358|   901k|        return vis(monostate_val);                                     \
  |  | 9359|   901k|    }
  ------------------
 9452|   901k|            }
 9453|   901k|        }
 9454|       |
 9455|   901k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 901k]
  ------------------
 9456|   901k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   901k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   901k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 901k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 901k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   901k|            SCN_CLANG_POP
 9473|   901k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail12get_arg_typeINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_8arg_typeERNS0_14basic_scan_argIT_EE:
 6091|  4.16M|{
 6092|  4.16M|    return arg.m_type;
 6093|  4.16M|}
_ZN3scn2v46detail13get_arg_valueINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEERNS1_9arg_valueERNS0_14basic_scan_argIT_EE:
 6103|  2.27M|{
 6104|  2.27M|    return arg.m_value;
 6105|  2.27M|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwEC2ENS2_17basic_scan_bufferIwE16forward_iteratorENS0_15basic_scan_argsIS4_EENS2_10locale_refE:
 9019|   314k|        : base(SCN_MOVE(a), loc), m_current(curr)
  ------------------
  |  | 1108|   314k|    static_cast<    \
  |  | 1109|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9020|   314k|    {
 9021|   314k|    }
_ZN3scn2v424basic_scan_parse_contextIwEC2IONS0_6ranges6detail9subrange_8subrangeIPKwS9_EEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSF_11char_traitsIwEEEEi:
 6361|   629k|        : m_format{format},
 6362|   629k|          m_next_arg_id{next_arg_id},
 6363|   629k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   629k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   629k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   629k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   629k|    {
 6369|   629k|    }
_ZNK3scn2v46ranges6detail5size_2fnclIRNS2_9subrange_8subrangeIPKwS9_EEEEDTclsr2fnE4implclsr3stdE7forwardIT_Efp_EtlNS0_6detail12priority_tagILm3EEEEEEOSC_:
 3088|   629k|    {
 3089|   629k|        return fn::impl(std::forward<T>(t), priority_tag<3>{});
 3090|   629k|    }
_ZN3scn2v46ranges6detail5size_2fn4implIRNS2_9subrange_8subrangeIPKwS9_EEmEENSt3__19enable_ifIXaasr3stdE13is_integral_vIT0_Ent19disable_sized_rangeIu11__remove_cvIu20__remove_reference_tIT_EEEESE_E4typeEOSF_NS0_6detail12priority_tagILm2EEE:
 3054|   629k|    {
 3055|   629k|        return decay_copy(SCN_FWD(t).size());
  ------------------
  |  | 1110|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 3056|   629k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   629k|{
 7878|   629k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   629k|    handler.check_args_exhausted();
 7880|   629k|    return handler.get_error();
 7881|   629k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   629k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   629k|    auto begin = format.data();
 7846|   629k|    auto it = begin;
 7847|   629k|    const auto end = format.data() + format.size();
 7848|       |
 7849|  1.22M|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 629k, False: 594k]
  ------------------
 7850|   629k|        const auto ch = *it++;
 7851|   629k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 629k, False: 0]
  ------------------
 7852|   629k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   629k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   629k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 35.3k, False: 594k]
  ------------------
 7856|  35.3k|                return;
 7857|  35.3k|            }
 7858|   629k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   629k|    }
 7869|       |
 7870|   594k|    handler.on_literal_text(begin, end);
 7871|   594k|}
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_:
 7774|   629k|{
 7775|   629k|    struct id_adapter {
 7776|   629k|        constexpr void operator()()
 7777|   629k|        {
 7778|   629k|            arg_id = handler.on_arg_id();
 7779|   629k|        }
 7780|   629k|        constexpr void operator()(std::size_t id)
 7781|   629k|        {
 7782|   629k|            arg_id = handler.on_arg_id(id);
 7783|   629k|        }
 7784|       |
 7785|   629k|        constexpr void on_error(const char* msg)
 7786|   629k|        {
 7787|   629k|            SCN_UNLIKELY_ATTR
 7788|   629k|            handler.on_error(msg);
 7789|   629k|        }
 7790|       |
 7791|   629k|        Handler& handler;
 7792|   629k|        std::size_t arg_id;
 7793|   629k|    };
 7794|       |
 7795|   629k|    ++begin;
 7796|   629k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   629k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 629k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   629k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 629k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   629k|    else {
 7808|   629k|        auto adapter = id_adapter{handler, 0};
 7809|   629k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   629k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   629k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 629k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   629k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 629k, False: 0]
  ------------------
 7820|   629k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   629k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   629k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|  1.25M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.1k, False: 615k]
  |  |  |  Branch (1039:45): [True: 0, False: 629k]
  |  |  |  Branch (1039:45): [True: 14.1k, False: 615k]
  |  |  ------------------
  ------------------
 7826|  14.1k|                handler.on_error("Unknown format specifier");
 7827|  14.1k|                return begin;
 7828|  14.1k|            }
 7829|   629k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   629k|    }
 7836|   615k|    return begin + 1;
 7837|   629k|}
_ZNK3scn2v46detail17scan_context_baseINS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE3argEm:
 8918|   944k|    {
 8919|   944k|        return m_args.get(id);
 8920|   944k|    }
_ZN3scn2v424basic_scan_parse_contextIwE11next_arg_idEv:
 6396|   944k|    {
 6397|   944k|        if (SCN_UNLIKELY(m_next_arg_id < 0)) {
  ------------------
  |  | 1039|   944k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 944k]
  |  |  ------------------
  ------------------
 6398|      0|            on_error(
 6399|      0|                "Cannot switch from manual to automatic argument indexing");
 6400|      0|            return 0;
 6401|      0|        }
 6402|       |
 6403|   944k|        auto id = static_cast<size_t>(m_next_arg_id++);
 6404|   944k|        do_check_arg_id(id);
 6405|   944k|        return id;
 6406|   944k|    }
_ZN3scn2v424basic_scan_parse_contextIwE15do_check_arg_idEm:
 6890|   944k|{
 6891|   944k|    if (detail::is_constant_evaluated() &&
  ------------------
  |  Branch (6891:9): [Folded - Ignored]
  ------------------
 6892|   944k|        (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |  256|      0|#define SCN_GCC 0
  ------------------
                      (!SCN_GCC || SCN_GCC >= SCN_COMPILER(12, 0, 0))) {
  ------------------
  |  |   25|      0|    ((major) * 10000000 + (minor) * 10000 + (patch))
  ------------------
  |  Branch (6892:10): [Folded - Ignored]
  |  Branch (6892:22): [Folded - Ignored]
  ------------------
 6893|       |        // The cast below will cause an error on gcc pre-12
 6894|      0|        using parse_context_type = detail::compile_parse_context<CharT>;
 6895|      0|        if (static_cast<int>(id) >=
  ------------------
  |  Branch (6895:13): [True: 0, False: 0]
  ------------------
 6896|      0|            static_cast<parse_context_type*>(this)->get_num_args()) {
 6897|      0|            SCN_UNLIKELY_ATTR
 6898|      0|            on_error("Argument not found");
 6899|      0|        }
 6900|      0|    }
 6901|   944k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   629k|{
 7276|   629k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   629k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 629k, False: 0]
  |  Branch (7277:26): [True: 0, False: 629k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   629k|    handler();
 7282|   629k|    return begin;
 7283|   629k|}
_ZN3scn2v46detail16parse_simple_intIwEEiRPKT_S5_:
 7224|  21.1k|{
 7225|  21.1k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7226|  21.1k|    SCN_EXPECT(*begin >= '0' && *begin <= '9');
  ------------------
  |  | 1104|  21.1k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  21.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7227|       |
 7228|  21.1k|    unsigned long long value = 0;
 7229|  42.3k|    do {
 7230|  42.3k|        value *= 10;
 7231|  42.3k|        value += static_cast<unsigned long long>(*begin - '0');
 7232|  42.3k|        if (value >
  ------------------
  |  Branch (7232:13): [True: 0, False: 42.3k]
  ------------------
 7233|  42.3k|            static_cast<unsigned long long>(std::numeric_limits<int>::max())) {
 7234|      0|            return -1;
 7235|      0|        }
 7236|  42.3k|        ++begin;
 7237|  42.3k|    } while (begin != end && *begin >= '0' && *begin <= '9');
  ------------------
  |  Branch (7237:14): [True: 42.3k, False: 0]
  |  Branch (7237:30): [True: 42.3k, False: 0]
  |  Branch (7237:47): [True: 21.1k, False: 21.1k]
  ------------------
 7238|  21.1k|    return static_cast<int>(value);
 7239|  21.1k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb1EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   629k|        {
 7778|   629k|            arg_id = handler.on_arg_id();
 7779|   629k|        }
_ZN3scn2v424basic_scan_parse_contextIwE10advance_toEPKw:
 6391|   923k|    {
 6392|   923k|        m_format.remove_prefix(static_cast<std::size_t>(it - begin()));
 6393|   923k|    }
_ZN3scn2v46detail17basic_scan_bufferIwE3getEv:
 4708|   765k|{
 4709|   765k|    if (is_contiguous()) {
  ------------------
  |  Branch (4709:9): [True: 0, False: 765k]
  ------------------
 4710|      0|        return ranges::subrange{forward_iterator{m_current_view, 0},
 4711|      0|                                ranges::default_sentinel};
 4712|      0|    }
 4713|   765k|    return ranges::subrange{forward_iterator{this, 0},
 4714|   765k|                            ranges::default_sentinel};
 4715|   765k|}
_ZN3scn2v46detail17basic_scan_bufferIwE16forward_iteratorC2EPS3_l:
 4471|   765k|        : m_begin(parent), m_end(nullptr), m_position(pos)
 4472|   765k|    {
 4473|   765k|        SCN_EXPECT(parent);
  ------------------
  |  | 1104|   765k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   765k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4474|   765k|        SCN_EXPECT(!parent->is_contiguous());
  ------------------
  |  | 1104|   765k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   765k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 4475|   765k|    }
_ZNK3scn2v424basic_scan_parse_contextIwE5beginEv:
 6380|  1.86M|    {
 6381|  1.86M|        return m_format.data();
 6382|  1.86M|    }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEEC2ISE_EEOT_NS1_8arg_typeE:
 7960|   629k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   629k|    {
 7962|   629k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   629k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   629k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   629k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7690|   629k|{
 7691|   629k|    auto do_presentation = [&]() -> const CharT* {
 7692|   629k|        if (*begin == CharT{'['}) {
 7693|   629k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   629k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   629k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   629k|                return begin;
 7699|   629k|            }
 7700|   629k|            handler.on_character_set_string(set);
 7701|   629k|            return begin;
 7702|   629k|        }
 7703|   629k|        if (*begin == CharT{'/'}) {
 7704|   629k|            return parse_presentation_regex(begin, end, handler);
 7705|   629k|        }
 7706|   629k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   629k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   629k|            handler.on_error("Invalid type specifier in format string");
 7709|   629k|            return begin;
 7710|   629k|        }
 7711|   629k|        handler.on_type(type);
 7712|   629k|        return begin;
 7713|   629k|    };
 7714|       |
 7715|   629k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 629k, False: 0]
  |  Branch (7715:28): [True: 608k, False: 21.4k]
  ------------------
 7716|   629k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 608k, False: 0]
  |  Branch (7716:36): [True: 601k, False: 7.06k]
  ------------------
 7717|   601k|        return do_presentation();
 7718|   601k|    }
 7719|       |
 7720|  28.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  28.4k|    begin = parse_align(begin, end, handler);
 7726|  28.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  28.4k|    begin = parse_width(begin, end, handler);
 7732|  28.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  28.4k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 28.4k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  28.4k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 7.06k, False: 21.4k]
  ------------------
 7751|  7.06k|        handler.on_localized();
 7752|  7.06k|        ++begin;
 7753|  7.06k|    }
 7754|  28.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  28.4k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 28.4k, False: 0]
  |  Branch (7759:25): [True: 21.4k, False: 7.06k]
  ------------------
 7760|  21.4k|        do_presentation();
 7761|  21.4k|    }
 7762|  28.4k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  28.4k|    return begin;
 7768|  28.4k|}
_ZN3scn2v46detail15is_ascii_letterIwEEbT_:
 7339|   912k|{
 7340|   912k|    return (ch >= CharT{'a'} && ch <= CharT{'z'}) ||
  ------------------
  |  Branch (7340:13): [True: 901k, False: 10.5k]
  |  Branch (7340:33): [True: 901k, False: 0]
  ------------------
 7341|   912k|           (ch >= CharT{'A'} && ch <= CharT{'Z'});
  ------------------
  |  Branch (7341:13): [True: 10.5k, False: 0]
  |  Branch (7341:33): [True: 10.5k, False: 0]
  ------------------
 7342|   912k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlvE_clEv:
 7691|   622k|    auto do_presentation = [&]() -> const CharT* {
 7692|   622k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 7.30k, False: 615k]
  ------------------
 7693|  7.30k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  7.30k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.30k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|  7.30k|            handler.on_character_set_string(set);
 7701|  7.30k|            return begin;
 7702|  7.30k|        }
 7703|   615k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 615k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   615k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   615k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.06k, False: 608k]
  |  |  ------------------
  ------------------
 7708|  7.06k|            handler.on_error("Invalid type specifier in format string");
 7709|  7.06k|            return begin;
 7710|  7.06k|        }
 7711|   608k|        handler.on_type(type);
 7712|   608k|        return begin;
 7713|   615k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEENSt3__117basic_string_viewIT_NSI_11char_traitsISK_EEEERPKSK_SP_OT0_:
 7529|  7.30k|{
 7530|  7.30k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  7.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  7.30k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  7.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  7.30k|    auto start = begin;
 7534|  7.30k|    ++begin;
 7535|       |
 7536|  7.30k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.30k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  7.30k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 0, False: 7.30k]
  ------------------
 7543|      0|        handler.on_charset_inverted();
 7544|      0|        ++begin;
 7545|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 0, False: 0]
  ------------------
 7552|      0|            handler.on_charset_single(char32_t{']'});
 7553|      0|            ++begin;
 7554|      0|        }
 7555|      0|    }
 7556|  7.30k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 7.30k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  21.9k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 21.9k, False: 0]
  ------------------
 7561|  21.9k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  21.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 21.9k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  21.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 7.30k, False: 14.6k]
  ------------------
 7566|  7.30k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  7.30k|        }
 7568|       |
 7569|  14.6k|        parse_presentation_set_literal(begin, end, handler);
 7570|  14.6k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  7.30k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEvRPKT_SK_OT0_:
 7493|  14.6k|{
 7494|  14.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  14.6k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  14.6k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.6k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  14.6k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 14.6k, False: 0]
  |  Branch (7501:25): [True: 14.6k, False: 0]
  |  Branch (7501:49): [True: 14.6k, False: 0]
  ------------------
 7502|  14.6k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 14.6k, False: 0]
  ------------------
 7503|  14.6k|        ++begin;
 7504|       |
 7505|  14.6k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  14.6k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.6k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  14.6k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.6k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  14.6k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  14.6k|        return;
 7519|  14.6k|    }
 7520|       |
 7521|      0|    handler.on_charset_single(cp_first);
 7522|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEDiRPKT_SK_OT0_:
 7469|  29.2k|{
 7470|  29.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  29.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  29.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  29.2k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  29.2k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  58.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 29.2k]
  |  |  |  Branch (1039:45): [True: 0, False: 29.2k]
  |  |  |  Branch (1039:45): [True: 0, False: 29.2k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  29.2k|    const auto cp =
 7479|  29.2k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  29.2k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 29.2k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  29.2k|    begin += len;
 7486|  29.2k|    return cp;
 7487|  29.2k|}
_ZN3scn2v46detail12specs_setter23on_character_set_stringIwEEvNSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEEE:
 7183|  10.9k|    {
 7184|  10.9k|        m_specs.charset_string_data = fmt.data();
 7185|  10.9k|        m_specs.charset_string_size = fmt.size();
 7186|  10.9k|        on_type(presentation_type::string_set);
 7187|  10.9k|    }
_ZN3scn2v46detail23parse_presentation_typeIwEENS1_17presentation_typeET_:
 7287|   922k|{
 7288|   922k|    switch (type) {
 7289|      0|        case 'b':
  ------------------
  |  Branch (7289:9): [True: 0, False: 922k]
  ------------------
 7290|      0|        case 'B':
  ------------------
  |  Branch (7290:9): [True: 0, False: 922k]
  ------------------
 7291|      0|            return presentation_type::int_binary;
 7292|      0|        case 'd':
  ------------------
  |  Branch (7292:9): [True: 0, False: 922k]
  ------------------
 7293|      0|            return presentation_type::int_decimal;
 7294|      0|        case 'i':
  ------------------
  |  Branch (7294:9): [True: 0, False: 922k]
  ------------------
 7295|      0|            return presentation_type::int_generic;
 7296|      0|        case 'u':
  ------------------
  |  Branch (7296:9): [True: 0, False: 922k]
  ------------------
 7297|      0|            return presentation_type::int_unsigned_decimal;
 7298|      0|        case 'o':
  ------------------
  |  Branch (7298:9): [True: 0, False: 922k]
  ------------------
 7299|      0|            return presentation_type::int_octal;
 7300|      0|        case 'x':
  ------------------
  |  Branch (7300:9): [True: 0, False: 922k]
  ------------------
 7301|      0|        case 'X':
  ------------------
  |  Branch (7301:9): [True: 0, False: 922k]
  ------------------
 7302|      0|            return presentation_type::int_hex;
 7303|      0|        case 'r':
  ------------------
  |  Branch (7303:9): [True: 0, False: 922k]
  ------------------
 7304|      0|        case 'R':
  ------------------
  |  Branch (7304:9): [True: 0, False: 922k]
  ------------------
 7305|      0|            return presentation_type::int_arbitrary_base;
 7306|      0|        case 'a':
  ------------------
  |  Branch (7306:9): [True: 0, False: 922k]
  ------------------
 7307|      0|        case 'A':
  ------------------
  |  Branch (7307:9): [True: 0, False: 922k]
  ------------------
 7308|      0|            return presentation_type::float_hex;
 7309|      0|        case 'e':
  ------------------
  |  Branch (7309:9): [True: 0, False: 922k]
  ------------------
 7310|      0|        case 'E':
  ------------------
  |  Branch (7310:9): [True: 0, False: 922k]
  ------------------
 7311|      0|            return presentation_type::float_scientific;
 7312|      0|        case 'f':
  ------------------
  |  Branch (7312:9): [True: 0, False: 922k]
  ------------------
 7313|      0|        case 'F':
  ------------------
  |  Branch (7313:9): [True: 0, False: 922k]
  ------------------
 7314|      0|            return presentation_type::float_fixed;
 7315|      0|        case 'g':
  ------------------
  |  Branch (7315:9): [True: 0, False: 922k]
  ------------------
 7316|      0|        case 'G':
  ------------------
  |  Branch (7316:9): [True: 0, False: 922k]
  ------------------
 7317|      0|            return presentation_type::float_general;
 7318|   901k|        case 's':
  ------------------
  |  Branch (7318:9): [True: 901k, False: 21.1k]
  ------------------
 7319|   901k|            return presentation_type::string;
 7320|  10.5k|        case 'c':
  ------------------
  |  Branch (7320:9): [True: 10.5k, False: 912k]
  ------------------
 7321|  10.5k|            return presentation_type::character;
 7322|      0|        case '?':
  ------------------
  |  Branch (7322:9): [True: 0, False: 922k]
  ------------------
 7323|      0|            return presentation_type::escaped_character;
 7324|      0|        case 'p':
  ------------------
  |  Branch (7324:9): [True: 0, False: 922k]
  ------------------
 7325|      0|            return presentation_type::pointer;
 7326|      0|        case '[':
  ------------------
  |  Branch (7326:9): [True: 0, False: 922k]
  ------------------
 7327|      0|        case '/':
  ------------------
  |  Branch (7327:9): [True: 0, False: 922k]
  ------------------
 7328|       |            // Should be handled by parse_presentation_set and
 7329|       |            // parse_presentation_regex
 7330|      0|            SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7331|      0|            SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 7332|  10.5k|        default:
  ------------------
  |  Branch (7332:9): [True: 10.5k, False: 912k]
  ------------------
 7333|  10.5k|            return presentation_type::none;
 7334|   922k|    }
 7335|   922k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7364|  28.4k|{
 7365|  28.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  28.4k|    auto check_align = [](wchar_t ch) {
 7368|  28.4k|        switch (ch) {
 7369|  28.4k|            case L'<':
 7370|  28.4k|                return align_type::left;
 7371|  28.4k|            case L'>':
 7372|  28.4k|                return align_type::right;
 7373|  28.4k|            case L'^':
 7374|  28.4k|                return align_type::center;
 7375|  28.4k|            default:
 7376|  28.4k|                return align_type::none;
 7377|  28.4k|        }
 7378|  28.4k|    };
 7379|       |
 7380|  28.4k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  28.4k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  56.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.4k]
  |  |  |  Branch (1039:45): [True: 0, False: 28.4k]
  |  |  |  Branch (1039:45): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 7382|  28.4k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  28.4k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  28.4k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  28.4k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  28.4k|    const auto begin_before_fill = begin;
 7392|  28.4k|    begin += potential_fill_len;
 7393|       |
 7394|  28.4k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 28.4k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  28.4k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  28.4k|    const auto begin_after_fill = begin;
 7400|  28.4k|    ++begin;
 7401|       |
 7402|  28.4k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 28.4k, False: 0]
  ------------------
 7403|  28.4k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 28.4k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  28.4k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 7.30k, False: 21.1k]
  ------------------
 7408|  7.30k|            return begin_before_fill;
 7409|  7.30k|        }
 7410|  28.4k|    }
 7411|       |
 7412|  21.1k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 21.1k, False: 0]
  ------------------
 7413|  21.1k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 21.1k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  21.1k|        return begin_before_fill;
 7418|  21.1k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  21.1k|}
_ZN3scn2v46detail17code_point_lengthIwEEiPKT_S5_:
 7346|  42.7k|{
 7347|  42.7k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  42.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  42.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7348|  42.7k|    if constexpr (sizeof(CharT) != 1) {
 7349|  42.7k|        return 1;
 7350|       |    }
 7351|       |    else {
 7352|       |        const auto lengths =
 7353|       |            "\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\1\0\0\0\0\0\0\0\0\2\2\2\2\3"
 7354|       |            "\3\4";
 7355|       |        const int len = lengths[static_cast<unsigned char>(*begin) >> 3];
 7356|       |        return len;
 7357|       |    }
 7358|  42.7k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_ENKUlwE_clEw:
 7367|  56.9k|    auto check_align = [](wchar_t ch) {
 7368|  56.9k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 56.9k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 56.9k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 56.9k]
  ------------------
 7374|      0|                return align_type::center;
 7375|  56.9k|            default:
  ------------------
  |  Branch (7375:13): [True: 56.9k, False: 0]
  ------------------
 7376|  56.9k|                return align_type::none;
 7377|  56.9k|        }
 7378|  56.9k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEwEEEEEEEEPKT_SK_SK_OT0_:
 7429|  28.4k|{
 7430|  28.4k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  28.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  28.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  28.4k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 28.4k, False: 0]
  |  Branch (7432:33): [True: 14.1k, False: 14.3k]
  ------------------
 7433|  14.1k|        int width = parse_simple_int(begin, end);
 7434|  14.1k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  14.1k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 14.1k, False: 0]
  |  |  ------------------
  ------------------
 7435|  14.1k|            handler.on_width(width);
 7436|  14.1k|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|  14.1k|    }
 7442|  28.4k|    return begin;
 7443|  28.4k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEEE12on_localizedEv:
 7966|  7.06k|    {
 7967|  7.06k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  7.06k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 7.06k, False: 0]
  ------------------
 7969|  7.06k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 7.06k, False: 0]
  ------------------
 7970|  7.06k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 7.06k, False: 0]
  ------------------
 7971|  7.06k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 7.06k, False: 0]
  ------------------
 7972|  7.06k|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|  7.06k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|  7.06k|        }
 7977|       |
 7978|      0|        Handler::on_localized();
 7979|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerINS2_INS0_6ranges6detail9subrange_8subrangeIPKwSF_EEwEEEEEEDcOT_:
 9493|   615k|{
 9494|   615k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   615k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEwEEEENS5_INS1_16buffer_range_tagEwEEEEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   615k|{
 9353|   615k|#define SCN_VISIT(Type)                                                \
 9354|   615k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   615k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   615k|    }                                                                  \
 9357|   615k|    else {                                                             \
 9358|   615k|        return vis(monostate_val);                                     \
 9359|   615k|    }
 9360|       |
 9361|   615k|    monostate monostate_val{};
 9362|       |
 9363|   615k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 615k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 615k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 615k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 615k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 615k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 615k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 615k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 615k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 615k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 615k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 615k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 615k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 615k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 615k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 615k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 615k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 615k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 615k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 615k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 615k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 615k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 615k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 615k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 615k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 615k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 615k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|   307k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 307k, False: 307k]
  ------------------
 9445|   307k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|   307k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   307k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   307k|    }                                                                  \
  |  | 9357|   307k|    else {                                                             \
  |  | 9358|   307k|        return vis(monostate_val);                                     \
  |  | 9359|   307k|    }
  ------------------
 9446|   615k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 307k, False: 307k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|   615k|            else {
 9451|   615k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|   615k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   615k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   615k|    }                                                                  \
  |  | 9357|   615k|    else {                                                             \
  |  | 9358|   615k|        return vis(monostate_val);                                     \
  |  | 9359|   615k|    }
  ------------------
 9452|   615k|            }
 9453|   615k|        }
 9454|       |
 9455|   615k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 615k]
  ------------------
 9456|   615k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   615k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   615k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 615k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 615k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   615k|            SCN_CLANG_POP
 9473|   615k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl18default_arg_readerIS5_EEEEDcOT_:
 9493|   450k|{
 9494|   450k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   450k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   450k|}
_ZN3scn2v46detail10visit_implINS0_4impl18default_arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   450k|{
 9353|   450k|#define SCN_VISIT(Type)                                                \
 9354|   450k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   450k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   450k|    }                                                                  \
 9357|   450k|    else {                                                             \
 9358|   450k|        return vis(monostate_val);                                     \
 9359|   450k|    }
 9360|       |
 9361|   450k|    monostate monostate_val{};
 9362|       |
 9363|   450k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 450k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 450k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 450k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 450k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 450k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 450k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 450k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 450k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 450k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 450k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 450k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 450k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 450k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 450k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 450k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 450k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 450k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 450k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 450k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 450k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 450k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 450k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 450k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 450k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 450k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 450k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|   450k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 450k, False: 0]
  ------------------
 9445|   450k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|   450k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   450k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   450k|    }                                                                  \
  |  | 9357|   450k|    else {                                                             \
  |  | 9358|   450k|        return vis(monostate_val);                                     \
  |  | 9359|   450k|    }
  ------------------
 9446|   450k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 450k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|   450k|            else {
 9451|   450k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|   450k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   450k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   450k|    }                                                                  \
  |  | 9357|   450k|    else {                                                             \
  |  | 9358|   450k|        return vis(monostate_val);                                     \
  |  | 9359|   450k|    }
  ------------------
 9452|   450k|            }
 9453|   450k|        }
 9454|       |
 9455|   450k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 450k]
  ------------------
 9456|   450k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   450k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   450k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 450k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 450k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   450k|            SCN_CLANG_POP
 9473|   450k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v424basic_scan_parse_contextIwEC2IRNS0_6detail17basic_scan_bufferIwEEEENS0_15source_tag_typeIT_EENSt3__117basic_string_viewIwNSB_11char_traitsIwEEEEi:
 6361|   314k|        : m_format{format},
 6362|   314k|          m_next_arg_id{next_arg_id},
 6363|   314k|          m_is_contiguous(ranges::range<Source> &&
  ------------------
  |  Branch (6363:27): [Folded - Ignored]
  ------------------
 6364|   314k|                          ranges::contiguous_range<Source>),
  ------------------
  |  Branch (6364:27): [Folded - Ignored]
  ------------------
 6365|       |          m_is_borrowed(
 6366|   314k|              (ranges::range<Source> && ranges::borrowed_range<Source>) ||
  ------------------
  |  Branch (6366:16): [Folded - Ignored]
  |  Branch (6366:41): [Folded - Ignored]
  ------------------
 6367|   314k|              std::is_same_v<detail::remove_cvref_t<Source>, std::FILE*>)
  ------------------
  |  Branch (6367:15): [Folded - Ignored]
  ------------------
 6368|   314k|    {
 6369|   314k|    }
impl.cpp:_ZN3scn2v46detail19parse_format_stringILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEENS0_13scan_expectedIvEENSt3__117basic_string_viewIT0_NS9_11char_traitsISB_EEEEOT1_:
 7877|   314k|{
 7878|   314k|    parse_format_string_impl<IsConstexpr>(format, handler);
 7879|   314k|    handler.check_args_exhausted();
 7880|   314k|    return handler.get_error();
 7881|   314k|}
impl.cpp:_ZN3scn2v46detail24parse_format_string_implILb0EwRNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEvNSt3__117basic_string_viewIT0_NS7_11char_traitsIS9_EEEEOT1_:
 7842|   314k|{
 7843|       |    // TODO: memchr fast path with a larger (> 32) format string
 7844|       |
 7845|   314k|    auto begin = format.data();
 7846|   314k|    auto it = begin;
 7847|   314k|    const auto end = format.data() + format.size();
 7848|       |
 7849|   611k|    while (it != end) {
  ------------------
  |  Branch (7849:12): [True: 314k, False: 297k]
  ------------------
 7850|   314k|        const auto ch = *it++;
 7851|   314k|        if (ch == CharT{'{'}) {
  ------------------
  |  Branch (7851:13): [True: 314k, False: 0]
  ------------------
 7852|   314k|            handler.on_literal_text(begin, it - 1);
 7853|       |
 7854|   314k|            begin = it = parse_replacement_field(it - 1, end, handler);
 7855|   314k|            if (!handler.get_error()) {
  ------------------
  |  Branch (7855:17): [True: 17.6k, False: 297k]
  ------------------
 7856|  17.6k|                return;
 7857|  17.6k|            }
 7858|   314k|        }
 7859|      0|        else if (ch == CharT{'}'}) {
  ------------------
  |  Branch (7859:18): [True: 0, False: 0]
  ------------------
 7860|      0|            if (SCN_UNLIKELY(it == end || *it != CharT{'}'})) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  |  Branch (1039:45): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7861|      0|                handler.on_error("Unmatched '}' in format string");
 7862|      0|                return;
 7863|      0|            }
 7864|       |
 7865|      0|            handler.on_literal_text(begin, it);
 7866|      0|            begin = ++it;
 7867|      0|        }
 7868|   314k|    }
 7869|       |
 7870|   297k|    handler.on_literal_text(begin, end);
 7871|   297k|}
_ZN3scn2v418basic_scan_contextINS0_6detail16buffer_range_tagEwE10advance_toENS2_17basic_scan_bufferIwE16forward_iteratorE:
 9057|   297k|    {
 9058|   297k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   297k|    static_cast<    \
  |  | 1109|   297k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 9059|   297k|    }
impl.cpp:_ZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_:
 7774|   314k|{
 7775|   314k|    struct id_adapter {
 7776|   314k|        constexpr void operator()()
 7777|   314k|        {
 7778|   314k|            arg_id = handler.on_arg_id();
 7779|   314k|        }
 7780|   314k|        constexpr void operator()(std::size_t id)
 7781|   314k|        {
 7782|   314k|            arg_id = handler.on_arg_id(id);
 7783|   314k|        }
 7784|       |
 7785|   314k|        constexpr void on_error(const char* msg)
 7786|   314k|        {
 7787|   314k|            SCN_UNLIKELY_ATTR
 7788|   314k|            handler.on_error(msg);
 7789|   314k|        }
 7790|       |
 7791|   314k|        Handler& handler;
 7792|   314k|        std::size_t arg_id;
 7793|   314k|    };
 7794|       |
 7795|   314k|    ++begin;
 7796|   314k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 7797|      0|        handler.on_error("Unexpected end of replacement field");
 7798|      0|        return begin;
 7799|      0|    }
 7800|       |
 7801|   314k|    if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7801:9): [True: 0, False: 314k]
  ------------------
 7802|      0|        handler.on_replacement_field(handler.on_arg_id(), begin);
 7803|      0|    }
 7804|   314k|    else if (*begin == CharT{'{'}) {
  ------------------
  |  Branch (7804:14): [True: 0, False: 314k]
  ------------------
 7805|      0|        handler.on_literal_text(begin, begin + 1);
 7806|      0|    }
 7807|   314k|    else {
 7808|   314k|        auto adapter = id_adapter{handler, 0};
 7809|   314k|        begin = parse_arg_id(begin, end, adapter);
 7810|       |
 7811|   314k|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 7812|      0|            handler.on_error("Missing '}' in format string");
 7813|      0|            return begin;
 7814|      0|        }
 7815|       |
 7816|   314k|        if (*begin == CharT{'}'}) {
  ------------------
  |  Branch (7816:13): [True: 0, False: 314k]
  ------------------
 7817|      0|            handler.on_replacement_field(adapter.arg_id, begin);
 7818|      0|        }
 7819|   314k|        else if (*begin == CharT{':'}) {
  ------------------
  |  Branch (7819:18): [True: 314k, False: 0]
  ------------------
 7820|   314k|            if (SCN_UNLIKELY(begin + 1 == end)) {
  ------------------
  |  | 1039|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 7821|      0|                handler.on_error("Unexpected end of replacement field");
 7822|      0|                return begin;
 7823|      0|            }
 7824|   314k|            begin = handler.on_format_specs(adapter.arg_id, begin + 1, end);
 7825|   314k|            if (SCN_UNLIKELY(begin == end || *begin != '}')) {
  ------------------
  |  | 1039|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.06k, False: 307k]
  |  |  |  Branch (1039:45): [True: 0, False: 314k]
  |  |  |  Branch (1039:45): [True: 7.06k, False: 307k]
  |  |  ------------------
  ------------------
 7826|  7.06k|                handler.on_error("Unknown format specifier");
 7827|  7.06k|                return begin;
 7828|  7.06k|            }
 7829|   314k|        }
 7830|      0|        else {
 7831|      0|            SCN_UNLIKELY_ATTR
 7832|      0|            handler.on_error("Missing '}' in format string");
 7833|      0|            return begin;
 7834|      0|        }
 7835|   314k|    }
 7836|   307k|    return begin + 1;
 7837|   314k|}
impl.cpp:_ZN3scn2v46detail12parse_arg_idIwRZNS1_23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S9_S9_RT0_E10id_adapterEES9_S9_S9_OSA_:
 7275|   314k|{
 7276|   314k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7277|   314k|    if (*begin != '}' && *begin != ':') {
  ------------------
  |  Branch (7277:9): [True: 314k, False: 0]
  |  Branch (7277:26): [True: 0, False: 314k]
  ------------------
 7278|      0|        return do_parse_arg_id(begin, end, SCN_FWD(handler));
  ------------------
  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7279|      0|    }
 7280|       |
 7281|   314k|    handler();
 7282|   314k|    return begin;
 7283|   314k|}
impl.cpp:_ZZN3scn2v46detail23parse_replacement_fieldIwNS0_12_GLOBAL__N_114format_handlerILb0EwEEEEPKT_S8_S8_RT0_EN10id_adapterclEv:
 7777|   314k|        {
 7778|   314k|            arg_id = handler.on_arg_id();
 7779|   314k|        }
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEC2IS8_EEOT_NS1_8arg_typeE:
 7960|   314k|        : Handler(SCN_FWD(handler)), m_arg_type(type)
  ------------------
  |  | 1110|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 7961|   314k|    {
 7962|   314k|        SCN_EXPECT(m_arg_type != arg_type::custom_type);
  ------------------
  |  | 1104|   314k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   314k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7963|   314k|    }
impl.cpp:_ZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7690|   314k|{
 7691|   314k|    auto do_presentation = [&]() -> const CharT* {
 7692|   314k|        if (*begin == CharT{'['}) {
 7693|   314k|            auto set = parse_presentation_set(begin, end, handler);
 7694|   314k|            if (SCN_UNLIKELY(set.size() <= 2)) {
 7695|       |                // clang-format off
 7696|   314k|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|   314k|                return begin;
 7699|   314k|            }
 7700|   314k|            handler.on_character_set_string(set);
 7701|   314k|            return begin;
 7702|   314k|        }
 7703|   314k|        if (*begin == CharT{'/'}) {
 7704|   314k|            return parse_presentation_regex(begin, end, handler);
 7705|   314k|        }
 7706|   314k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   314k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
 7708|   314k|            handler.on_error("Invalid type specifier in format string");
 7709|   314k|            return begin;
 7710|   314k|        }
 7711|   314k|        handler.on_type(type);
 7712|   314k|        return begin;
 7713|   314k|    };
 7714|       |
 7715|   314k|    if (end - begin > 1 && *(begin + 1) == CharT{'}'} &&
  ------------------
  |  Branch (7715:9): [True: 314k, False: 0]
  |  Branch (7715:28): [True: 304k, False: 10.7k]
  ------------------
 7716|   314k|        is_ascii_letter(*begin) && *begin != CharT{'L'}) {
  ------------------
  |  Branch (7716:9): [True: 304k, False: 0]
  |  Branch (7716:36): [True: 300k, False: 3.53k]
  ------------------
 7717|   300k|        return do_presentation();
 7718|   300k|    }
 7719|       |
 7720|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7721|      0|        handler.on_error("Unexpected end of format string");
 7722|      0|        return begin;
 7723|      0|    }
 7724|       |
 7725|  14.2k|    begin = parse_align(begin, end, handler);
 7726|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7727|      0|        handler.on_error("Unexpected end of format string");
 7728|      0|        return begin;
 7729|      0|    }
 7730|       |
 7731|  14.2k|    begin = parse_width(begin, end, handler);
 7732|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7733|      0|        handler.on_error("Unexpected end of format string");
 7734|      0|        return begin;
 7735|      0|    }
 7736|       |
 7737|  14.2k|    if (*begin == CharT{'.'}) {
  ------------------
  |  Branch (7737:9): [True: 0, False: 14.2k]
  ------------------
 7738|      0|        ++begin;
 7739|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7740|      0|            handler.on_error("Unexpected end of format string");
 7741|      0|            return begin;
 7742|      0|        }
 7743|      0|        begin = parse_precision(begin, end, handler);
 7744|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7745|      0|            handler.on_error("Unexpected end of format string");
 7746|      0|            return begin;
 7747|      0|        }
 7748|      0|    }
 7749|       |
 7750|  14.2k|    if (*begin == CharT{'L'}) {
  ------------------
  |  Branch (7750:9): [True: 3.53k, False: 10.7k]
  ------------------
 7751|  3.53k|        handler.on_localized();
 7752|  3.53k|        ++begin;
 7753|  3.53k|    }
 7754|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7755|      0|        handler.on_error("Unexpected end of format string");
 7756|      0|        return begin;
 7757|      0|    }
 7758|       |
 7759|  14.2k|    if (begin != end && *begin != CharT{'}'}) {
  ------------------
  |  Branch (7759:9): [True: 14.2k, False: 0]
  |  Branch (7759:25): [True: 10.7k, False: 3.53k]
  ------------------
 7760|  10.7k|        do_presentation();
 7761|  10.7k|    }
 7762|  14.2k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7763|      0|        handler.on_error("Unexpected end of format string");
 7764|      0|        return begin;
 7765|      0|    }
 7766|       |
 7767|  14.2k|    return begin;
 7768|  14.2k|}
impl.cpp:_ZZN3scn2v46detail18parse_format_specsIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlvE_clEv:
 7691|   311k|    auto do_presentation = [&]() -> const CharT* {
 7692|   311k|        if (*begin == CharT{'['}) {
  ------------------
  |  Branch (7692:13): [True: 3.65k, False: 307k]
  ------------------
 7693|  3.65k|            auto set = parse_presentation_set(begin, end, handler);
 7694|  3.65k|            if (SCN_UNLIKELY(set.size() <= 2)) {
  ------------------
  |  | 1039|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.65k]
  |  |  ------------------
  ------------------
 7695|       |                // clang-format off
 7696|      0|                handler.on_error("Invalid (empty) [character set] specifier in format string");
 7697|       |                // clang-format on
 7698|      0|                return begin;
 7699|      0|            }
 7700|  3.65k|            handler.on_character_set_string(set);
 7701|  3.65k|            return begin;
 7702|  3.65k|        }
 7703|   307k|        if (*begin == CharT{'/'}) {
  ------------------
  |  Branch (7703:13): [True: 0, False: 307k]
  ------------------
 7704|      0|            return parse_presentation_regex(begin, end, handler);
 7705|      0|        }
 7706|   307k|        presentation_type type = parse_presentation_type(*begin++);
 7707|   307k|        if (SCN_UNLIKELY(type == presentation_type::none)) {
  ------------------
  |  | 1039|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.53k, False: 304k]
  |  |  ------------------
  ------------------
 7708|  3.53k|            handler.on_error("Invalid type specifier in format string");
 7709|  3.53k|            return begin;
 7710|  3.53k|        }
 7711|   304k|        handler.on_type(type);
 7712|   304k|        return begin;
 7713|   307k|    };
impl.cpp:_ZN3scn2v46detail22parse_presentation_setIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEENSt3__117basic_string_viewIT_NSC_11char_traitsISE_EEEERPKSE_SJ_OT0_:
 7529|  3.65k|{
 7530|  3.65k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  3.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7531|  3.65k|    SCN_EXPECT(*begin == CharT{'['});
  ------------------
  |  | 1104|  3.65k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  3.65k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7532|       |
 7533|  3.65k|    auto start = begin;
 7534|  3.65k|    ++begin;
 7535|       |
 7536|  3.65k|    if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 3.65k]
  |  |  ------------------
  ------------------
 7537|       |        // clang-format off
 7538|      0|        handler.on_error("Unexpected end of [character set] specifier in format string");
 7539|       |        // clang-format on
 7540|      0|        return {};
 7541|      0|    }
 7542|  3.65k|    if (*begin == CharT{'^'}) {
  ------------------
  |  Branch (7542:9): [True: 0, False: 3.65k]
  ------------------
 7543|      0|        handler.on_charset_inverted();
 7544|      0|        ++begin;
 7545|      0|        if (SCN_UNLIKELY(begin == end)) {
  ------------------
  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  ------------------
  ------------------
 7546|       |            // clang-format off
 7547|      0|            handler.on_error("Unexpected end of [character set] specifier in format string");
 7548|       |            // clang-format on
 7549|      0|            return {};
 7550|      0|        }
 7551|      0|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7551:13): [True: 0, False: 0]
  ------------------
 7552|      0|            handler.on_charset_single(char32_t{']'});
 7553|      0|            ++begin;
 7554|      0|        }
 7555|      0|    }
 7556|  3.65k|    else if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7556:14): [True: 0, False: 3.65k]
  ------------------
 7557|      0|        return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7558|      0|    }
 7559|       |
 7560|  10.9k|    while (begin != end) {
  ------------------
  |  Branch (7560:12): [True: 10.9k, False: 0]
  ------------------
 7561|  10.9k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  10.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 10.9k]
  |  |  ------------------
  ------------------
 7562|      0|            break;
 7563|      0|        }
 7564|       |
 7565|  10.9k|        if (*begin == CharT{']'}) {
  ------------------
  |  Branch (7565:13): [True: 3.65k, False: 7.30k]
  ------------------
 7566|  3.65k|            return {start, static_cast<size_t>(std::distance(start, ++begin))};
 7567|  3.65k|        }
 7568|       |
 7569|  7.30k|        parse_presentation_set_literal(begin, end, handler);
 7570|  7.30k|    }
 7571|       |
 7572|      0|    SCN_UNLIKELY_ATTR
 7573|      0|    handler.on_error("Invalid [character set] specifier in format string");
 7574|      0|    return {};
 7575|  3.65k|}
impl.cpp:_ZN3scn2v46detail30parse_presentation_set_literalIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEvRPKT_SE_OT0_:
 7493|  7.30k|{
 7494|  7.30k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  7.30k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  7.30k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7495|       |
 7496|  7.30k|    auto cp_first = parse_presentation_set_code_point(begin, end, handler);
 7497|  7.30k|    if (SCN_UNLIKELY(cp_first >= invalid_code_point)) {
  ------------------
  |  | 1039|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.30k]
  |  |  ------------------
  ------------------
 7498|      0|        return;
 7499|      0|    }
 7500|       |
 7501|  7.30k|    if (begin != end && *begin == CharT{'-'} && (begin + 1) != end &&
  ------------------
  |  Branch (7501:9): [True: 7.30k, False: 0]
  |  Branch (7501:25): [True: 7.30k, False: 0]
  |  Branch (7501:49): [True: 7.30k, False: 0]
  ------------------
 7502|  7.30k|        *(begin + 1) != CharT{']'}) {
  ------------------
  |  Branch (7502:9): [True: 7.30k, False: 0]
  ------------------
 7503|  7.30k|        ++begin;
 7504|       |
 7505|  7.30k|        auto cp_second = parse_presentation_set_code_point(begin, end, handler);
 7506|  7.30k|        if (SCN_UNLIKELY(cp_second >= invalid_code_point)) {
  ------------------
  |  | 1039|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.30k]
  |  |  ------------------
  ------------------
 7507|      0|            return;
 7508|      0|        }
 7509|       |
 7510|  7.30k|        if (SCN_UNLIKELY(cp_second < cp_first)) {
  ------------------
  |  | 1039|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 7.30k]
  |  |  ------------------
  ------------------
 7511|       |            // clang-format off
 7512|      0|            handler.on_error("Invalid range in [character set] format string argument: Range end before the beginning");
 7513|       |            // clang-format on
 7514|      0|            return;
 7515|      0|        }
 7516|       |
 7517|  7.30k|        handler.on_charset_range(cp_first, cp_second + 1);
 7518|  7.30k|        return;
 7519|  7.30k|    }
 7520|       |
 7521|      0|    handler.on_charset_single(cp_first);
 7522|      0|}
impl.cpp:_ZN3scn2v46detail33parse_presentation_set_code_pointIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEDiRPKT_SE_OT0_:
 7469|  14.6k|{
 7470|  14.6k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  14.6k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.6k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7471|       |
 7472|  14.6k|    auto len = code_point_length_by_starting_code_unit(*begin);
 7473|  14.6k|    if (SCN_UNLIKELY(len == 0 || static_cast<size_t>(end - begin) < len)) {
  ------------------
  |  | 1039|  29.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 14.6k]
  |  |  |  Branch (1039:45): [True: 0, False: 14.6k]
  |  |  ------------------
  ------------------
 7474|      0|        handler.on_error("Invalid encoding in format string");
 7475|      0|        return invalid_code_point;
 7476|      0|    }
 7477|       |
 7478|  14.6k|    const auto cp =
 7479|  14.6k|        decode_code_point_exhaustive(std::basic_string_view<CharT>{begin, len});
 7480|  14.6k|    if (SCN_UNLIKELY(cp >= invalid_code_point)) {
  ------------------
  |  | 1039|  14.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.6k]
  |  |  ------------------
  ------------------
 7481|      0|        handler.on_error("Invalid encoding in format string");
 7482|      0|        return invalid_code_point;
 7483|      0|    }
 7484|       |
 7485|  14.6k|    begin += len;
 7486|  14.6k|    return cp;
 7487|  14.6k|}
impl.cpp:_ZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7364|  14.2k|{
 7365|  14.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7366|       |
 7367|  14.2k|    auto check_align = [](wchar_t ch) {
 7368|  14.2k|        switch (ch) {
 7369|  14.2k|            case L'<':
 7370|  14.2k|                return align_type::left;
 7371|  14.2k|            case L'>':
 7372|  14.2k|                return align_type::right;
 7373|  14.2k|            case L'^':
 7374|  14.2k|                return align_type::center;
 7375|  14.2k|            default:
 7376|  14.2k|                return align_type::none;
 7377|  14.2k|        }
 7378|  14.2k|    };
 7379|       |
 7380|  14.2k|    auto potential_fill_len = code_point_length(begin, end);
 7381|  14.2k|    if (SCN_UNLIKELY(potential_fill_len == 0 ||
  ------------------
  |  | 1039|  28.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.2k]
  |  |  |  Branch (1039:45): [True: 0, False: 14.2k]
  |  |  |  Branch (1039:45): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7382|  14.2k|                     std::distance(begin, end) < potential_fill_len)) {
 7383|      0|        handler.on_error("Invalid encoding in fill character");
 7384|      0|        return begin;
 7385|      0|    }
 7386|       |
 7387|  14.2k|    auto potential_align_on_fill = check_align(static_cast<wchar_t>(*begin));
 7388|       |
 7389|  14.2k|    auto potential_fill = std::basic_string_view<CharT>{
 7390|  14.2k|        begin, static_cast<size_t>(potential_fill_len)};
 7391|  14.2k|    const auto begin_before_fill = begin;
 7392|  14.2k|    begin += potential_fill_len;
 7393|       |
 7394|  14.2k|    if (begin == end) {
  ------------------
  |  Branch (7394:9): [True: 0, False: 14.2k]
  ------------------
 7395|      0|        return begin_before_fill;
 7396|      0|    }
 7397|       |
 7398|  14.2k|    auto potential_align_after_fill = check_align(static_cast<wchar_t>(*begin));
 7399|  14.2k|    const auto begin_after_fill = begin;
 7400|  14.2k|    ++begin;
 7401|       |
 7402|  14.2k|    if (potential_fill_len == 1) {
  ------------------
  |  Branch (7402:9): [True: 14.2k, False: 0]
  ------------------
 7403|  14.2k|        if (SCN_UNLIKELY(potential_fill[0] == '{')) {
  ------------------
  |  | 1039|  14.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 14.2k]
  |  |  ------------------
  ------------------
 7404|      0|            handler.on_error("Invalid fill character '{' in format string");
 7405|      0|            return begin;
 7406|      0|        }
 7407|  14.2k|        if (potential_fill[0] == '[') {
  ------------------
  |  Branch (7407:13): [True: 3.65k, False: 10.5k]
  ------------------
 7408|  3.65k|            return begin_before_fill;
 7409|  3.65k|        }
 7410|  14.2k|    }
 7411|       |
 7412|  10.5k|    if (potential_align_after_fill == align_type::none) {
  ------------------
  |  Branch (7412:9): [True: 10.5k, False: 0]
  ------------------
 7413|  10.5k|        if (potential_align_on_fill != align_type::none) {
  ------------------
  |  Branch (7413:13): [True: 0, False: 10.5k]
  ------------------
 7414|      0|            handler.on_align(potential_align_on_fill);
 7415|      0|            return begin_after_fill;
 7416|      0|        }
 7417|  10.5k|        return begin_before_fill;
 7418|  10.5k|    }
 7419|       |
 7420|      0|    handler.on_fill(potential_fill);
 7421|      0|    handler.on_align(potential_align_after_fill);
 7422|      0|    return begin;
 7423|  10.5k|}
impl.cpp:_ZZN3scn2v46detail11parse_alignIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_ENKUlwE_clEw:
 7367|  28.4k|    auto check_align = [](wchar_t ch) {
 7368|  28.4k|        switch (ch) {
 7369|      0|            case L'<':
  ------------------
  |  Branch (7369:13): [True: 0, False: 28.4k]
  ------------------
 7370|      0|                return align_type::left;
 7371|      0|            case L'>':
  ------------------
  |  Branch (7371:13): [True: 0, False: 28.4k]
  ------------------
 7372|      0|                return align_type::right;
 7373|      0|            case L'^':
  ------------------
  |  Branch (7373:13): [True: 0, False: 28.4k]
  ------------------
 7374|      0|                return align_type::center;
 7375|  28.4k|            default:
  ------------------
  |  Branch (7375:13): [True: 28.4k, False: 0]
  ------------------
 7376|  28.4k|                return align_type::none;
 7377|  28.4k|        }
 7378|  28.4k|    };
impl.cpp:_ZN3scn2v46detail11parse_widthIwRNS1_13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEEEEEPKT_SE_SE_OT0_:
 7429|  14.2k|{
 7430|  14.2k|    SCN_EXPECT(begin != end);
  ------------------
  |  | 1104|  14.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 7431|       |
 7432|  14.2k|    if (*begin >= CharT{'0'} && *begin <= CharT{'9'}) {
  ------------------
  |  Branch (7432:9): [True: 14.2k, False: 0]
  |  Branch (7432:33): [True: 7.06k, False: 7.18k]
  ------------------
 7433|  7.06k|        int width = parse_simple_int(begin, end);
 7434|  7.06k|        if (SCN_LIKELY(width != -1)) {
  ------------------
  |  | 1038|  7.06k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 7.06k, False: 0]
  |  |  ------------------
  ------------------
 7435|  7.06k|            handler.on_width(width);
 7436|  7.06k|        }
 7437|      0|        else {
 7438|      0|            handler.on_error("Invalid field width");
 7439|      0|            return begin;
 7440|      0|        }
 7441|  7.06k|    }
 7442|  14.2k|    return begin;
 7443|  14.2k|}
impl.cpp:_ZN3scn2v46detail13specs_checkerINS0_12_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEEE12on_localizedEv:
 7966|  3.53k|    {
 7967|  3.53k|        const auto cat = get_category_for_arg_type(m_arg_type);
 7968|  3.53k|        if (cat != arg_type_category::integer &&
  ------------------
  |  Branch (7968:13): [True: 3.53k, False: 0]
  ------------------
 7969|  3.53k|            cat != arg_type_category::unsigned_integer &&
  ------------------
  |  Branch (7969:13): [True: 3.53k, False: 0]
  ------------------
 7970|  3.53k|            cat != arg_type_category::floating &&
  ------------------
  |  Branch (7970:13): [True: 3.53k, False: 0]
  ------------------
 7971|  3.53k|            cat != arg_type_category::boolean) {
  ------------------
  |  Branch (7971:13): [True: 3.53k, False: 0]
  ------------------
 7972|  3.53k|            SCN_UNLIKELY_ATTR
 7973|       |            // clang-format off
 7974|  3.53k|            return this->on_error("'L' specifier can only be used with arguments of integer, floating-point, or boolean types");
 7975|       |            // clang-format on
 7976|  3.53k|        }
 7977|       |
 7978|      0|        Handler::on_localized();
 7979|      0|    }
_ZN3scn2v414basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE5visitINS0_4impl10arg_readerIS5_EEEEDcOT_:
 9493|   307k|{
 9494|   307k|    return detail::visit_impl(SCN_FWD(vis), *this);
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 9495|   307k|}
_ZN3scn2v46detail10visit_implINS0_4impl10arg_readerINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEES7_EEDcOT_RNS0_14basic_scan_argIT0_EE:
 9352|   307k|{
 9353|   307k|#define SCN_VISIT(Type)                                                \
 9354|   307k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
 9355|   307k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
 9356|   307k|    }                                                                  \
 9357|   307k|    else {                                                             \
 9358|   307k|        return vis(monostate_val);                                     \
 9359|   307k|    }
 9360|       |
 9361|   307k|    monostate monostate_val{};
 9362|       |
 9363|   307k|    switch (get_arg_type(arg)) {
 9364|      0|        case detail::arg_type::schar_type:
  ------------------
  |  Branch (9364:9): [True: 0, False: 307k]
  ------------------
 9365|      0|            SCN_VISIT(signed char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9366|      0|        case detail::arg_type::short_type:
  ------------------
  |  Branch (9366:9): [True: 0, False: 307k]
  ------------------
 9367|      0|            SCN_VISIT(short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9368|      0|        case detail::arg_type::int_type:
  ------------------
  |  Branch (9368:9): [True: 0, False: 307k]
  ------------------
 9369|      0|            SCN_VISIT(int);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9370|      0|        case detail::arg_type::long_type:
  ------------------
  |  Branch (9370:9): [True: 0, False: 307k]
  ------------------
 9371|      0|            SCN_VISIT(long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9372|      0|        case detail::arg_type::llong_type:
  ------------------
  |  Branch (9372:9): [True: 0, False: 307k]
  ------------------
 9373|      0|            SCN_VISIT(long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9374|      0|        case detail::arg_type::int128_type:
  ------------------
  |  Branch (9374:9): [True: 0, False: 307k]
  ------------------
 9375|      0|#if SCN_HAS_INT128
 9376|      0|            SCN_VISIT(int128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9377|       |#else
 9378|       |            return vis(monostate_val);
 9379|       |#endif
 9380|      0|        case detail::arg_type::uchar_type:
  ------------------
  |  Branch (9380:9): [True: 0, False: 307k]
  ------------------
 9381|      0|            SCN_VISIT(unsigned char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9382|      0|        case detail::arg_type::ushort_type:
  ------------------
  |  Branch (9382:9): [True: 0, False: 307k]
  ------------------
 9383|      0|            SCN_VISIT(unsigned short);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9384|      0|        case detail::arg_type::uint_type:
  ------------------
  |  Branch (9384:9): [True: 0, False: 307k]
  ------------------
 9385|      0|            SCN_VISIT(unsigned);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9386|      0|        case detail::arg_type::ulong_type:
  ------------------
  |  Branch (9386:9): [True: 0, False: 307k]
  ------------------
 9387|      0|            SCN_VISIT(unsigned long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9388|      0|        case detail::arg_type::ullong_type:
  ------------------
  |  Branch (9388:9): [True: 0, False: 307k]
  ------------------
 9389|      0|            SCN_VISIT(unsigned long long);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9390|      0|        case detail::arg_type::uint128_type:
  ------------------
  |  Branch (9390:9): [True: 0, False: 307k]
  ------------------
 9391|      0|#if SCN_HAS_INT128
 9392|      0|            SCN_VISIT(uint128)
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9393|       |#else
 9394|       |            return vis(monostate_val);
 9395|       |#endif
 9396|      0|        case detail::arg_type::pointer_type:
  ------------------
  |  Branch (9396:9): [True: 0, False: 307k]
  ------------------
 9397|      0|            SCN_VISIT(void*);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9398|      0|        case detail::arg_type::bool_type:
  ------------------
  |  Branch (9398:9): [True: 0, False: 307k]
  ------------------
 9399|      0|            SCN_VISIT(bool);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9400|      0|        case detail::arg_type::narrow_character_type:
  ------------------
  |  Branch (9400:9): [True: 0, False: 307k]
  ------------------
 9401|      0|            SCN_VISIT(char);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9402|      0|        case detail::arg_type::wide_character_type:
  ------------------
  |  Branch (9402:9): [True: 0, False: 307k]
  ------------------
 9403|      0|            SCN_VISIT(wchar_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9404|      0|        case detail::arg_type::code_point_type:
  ------------------
  |  Branch (9404:9): [True: 0, False: 307k]
  ------------------
 9405|      0|            SCN_VISIT(char32_t);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9406|      0|        case detail::arg_type::float_type:
  ------------------
  |  Branch (9406:9): [True: 0, False: 307k]
  ------------------
 9407|      0|            SCN_VISIT(float);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9408|      0|        case detail::arg_type::double_type:
  ------------------
  |  Branch (9408:9): [True: 0, False: 307k]
  ------------------
 9409|      0|            SCN_VISIT(double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9410|      0|        case detail::arg_type::ldouble_type:
  ------------------
  |  Branch (9410:9): [True: 0, False: 307k]
  ------------------
 9411|      0|            SCN_VISIT(long double);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9412|      0|        case detail::arg_type::float16_type:
  ------------------
  |  Branch (9412:9): [True: 0, False: 307k]
  ------------------
 9413|       |#if SCN_HAS_STD_F16
 9414|       |            SCN_VISIT(std::float16_t)
 9415|       |#else
 9416|      0|            return vis(monostate_val);
 9417|      0|#endif
 9418|      0|        case detail::arg_type::float32_type:
  ------------------
  |  Branch (9418:9): [True: 0, False: 307k]
  ------------------
 9419|       |#if SCN_HAS_STD_F32
 9420|       |            SCN_VISIT(std::float32_t)
 9421|       |#else
 9422|      0|            return vis(monostate_val);
 9423|      0|#endif
 9424|      0|        case detail::arg_type::float64_type:
  ------------------
  |  Branch (9424:9): [True: 0, False: 307k]
  ------------------
 9425|       |#if SCN_HAS_STD_F64
 9426|       |            SCN_VISIT(std::float64_t)
 9427|       |#else
 9428|      0|            return vis(monostate_val);
 9429|      0|#endif
 9430|      0|        case detail::arg_type::float128_type:
  ------------------
  |  Branch (9430:9): [True: 0, False: 307k]
  ------------------
 9431|       |#if SCN_HAS_STD_F64
 9432|       |            SCN_VISIT(std::float128_t)
 9433|       |#else
 9434|      0|            return vis(monostate_val);
 9435|      0|#endif
 9436|      0|        case detail::arg_type::bfloat16_type:
  ------------------
  |  Branch (9436:9): [True: 0, False: 307k]
  ------------------
 9437|       |#if SCN_HAS_STD_BF16
 9438|       |            SCN_VISIT(std::bfloat16_t)
 9439|       |#else
 9440|      0|            return vis(monostate_val);
 9441|      0|#endif
 9442|      0|        case detail::arg_type::narrow_string_type:
  ------------------
  |  Branch (9442:9): [True: 0, False: 307k]
  ------------------
 9443|      0|            SCN_VISIT(std::string);
  ------------------
  |  | 9354|      0|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|      0|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|      0|    }                                                                  \
  |  | 9357|      0|    else {                                                             \
  |  | 9358|      0|        return vis(monostate_val);                                     \
  |  | 9359|      0|    }
  ------------------
 9444|   307k|        case detail::arg_type::wide_string_type:
  ------------------
  |  Branch (9444:9): [True: 307k, False: 0]
  ------------------
 9445|   307k|            SCN_VISIT(std::wstring);
  ------------------
  |  | 9354|   307k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   307k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   307k|    }                                                                  \
  |  | 9357|   307k|    else {                                                             \
  |  | 9358|   307k|        return vis(monostate_val);                                     \
  |  | 9359|   307k|    }
  ------------------
 9446|   307k|        case detail::arg_type::string_view_type: {
  ------------------
  |  Branch (9446:9): [True: 0, False: 307k]
  ------------------
 9447|       |            if constexpr (std::is_same_v<typename Ctx::char_type, char>) {
 9448|       |                SCN_VISIT(std::string_view);
 9449|       |            }
 9450|   307k|            else {
 9451|   307k|                SCN_VISIT(std::wstring_view);
  ------------------
  |  | 9354|   307k|    if constexpr (!detail::is_type_disabled<Type>) {                   \
  |  | 9355|   307k|        return vis(*static_cast<Type*>(get_arg_value(arg).ref_value)); \
  |  | 9356|   307k|    }                                                                  \
  |  | 9357|   307k|    else {                                                             \
  |  | 9358|   307k|        return vis(monostate_val);                                     \
  |  | 9359|   307k|    }
  ------------------
 9452|   307k|            }
 9453|   307k|        }
 9454|       |
 9455|   307k|        case detail::arg_type::custom_type:
  ------------------
  |  Branch (9455:9): [True: 0, False: 307k]
  ------------------
 9456|   307k|#if !SCN_DISABLE_TYPE_CUSTOM
 9457|   307k|            return vis(typename basic_scan_arg<Ctx>::handle(
 9458|   307k|                get_arg_value(arg).custom_value));
 9459|       |#else
 9460|       |            return vis(monostate_val);
 9461|       |#endif
 9462|       |
 9463|      0|            SCN_CLANG_PUSH
 9464|      0|            SCN_CLANG_IGNORE("-Wcovered-switch-default")
 9465|       |
 9466|      0|            SCN_UNLIKELY_ATTR
 9467|      0|        case detail::arg_type::none_type:
  ------------------
  |  Branch (9467:9): [True: 0, False: 307k]
  ------------------
 9468|      0|        default: {
  ------------------
  |  Branch (9468:9): [True: 0, False: 307k]
  ------------------
 9469|      0|            return vis(monostate_val);
 9470|      0|        }
 9471|       |
 9472|   307k|            SCN_CLANG_POP
 9473|   307k|    }
 9474|       |
 9475|      0|#undef SCN_VISIT
 9476|       |
 9477|      0|    SCN_ENSURE(false);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 9478|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 9479|      0|}
_ZN3scn2v46detail17basic_scan_bufferIwE8sync_allEv:
 4369|  22.9k|    {
 4370|  22.9k|        return sync(0);
 4371|  22.9k|    }
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2Ev:
 6216|  64.6k|    constexpr basic_scan_args() = default;
_ZN3scn2v415basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2Ev:
 6216|   450k|    constexpr basic_scan_args() = default;

_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJDpT_EEEEEOSH_NS0_24basic_scan_format_stringIwNST_13type_identityISH_E4typeEJDpNS15_ISZ_E4typeEEEE:
   88|   307k|{
   89|   307k|    auto result = make_scan_result<Source, Args...>();
   90|   307k|    fill_scan_result(result,
   91|   307k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   307k|                           make_scan_args<wscan_context>(result->values())));
   93|   307k|    return result;
   94|   307k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NSA_17basic_string_viewIwNSA_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   43|   615k|{
   44|   615k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   615k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSF_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSM_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISI_EEP8_IO_FILEEESU_NS0_6detail22borrowed_tail_subrangeISI_Xsr6rangesE14borrowed_rangeISI_EEE4typeEE4typeEJDpT_EEEEERKT0_OSI_NS0_24basic_scan_format_stringIwNSV_13type_identityISI_E4typeEJDpNS1A_IS11_E4typeEEEE:
  130|   307k|{
  131|   307k|    auto result = make_scan_result<Source, Args...>();
  132|   307k|    fill_scan_result(result,
  133|   307k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   307k|                           make_scan_args<wscan_context>(result->values())));
  135|   307k|    return result;
  136|   307k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeIPKwS7_EENSt3__16localeETnPvLPv0EEENS0_13scan_expectedINS9_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESJ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEEERKT0_OSF_NS9_17basic_string_viewIwNS9_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSK_16buffer_range_tagEwEEEE:
   59|   615k|{
   60|   615k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   615k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSE_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISH_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEJT_EEEEEOSH_:
  170|   150k|{
  171|   150k|    auto result = make_scan_result<Source, T>();
  172|   150k|    fill_scan_result(
  173|   150k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   150k|                            detail::make_arg<wscan_context>(result->value())));
  175|   150k|    return result;
  176|   150k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEEENS0_13scan_expectedINSt3__111conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESG_NS0_6detail22borrowed_tail_subrangeISC_Xsr6rangesE14borrowed_rangeISC_EEE4typeEE4typeEEEOSC_NS0_14basic_scan_argINS0_18basic_scan_contextINSH_16buffer_range_tagEwEEEE:
   71|   300k|{
   72|   300k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   300k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJDpT_EEEEEOSF_NS0_24basic_scan_format_stringIwNSR_13type_identityISF_E4typeEJDpNS13_ISX_E4typeEEEE:
   88|   307k|{
   89|   307k|    auto result = make_scan_result<Source, Args...>();
   90|   307k|    fill_scan_result(result,
   91|   307k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   307k|                           make_scan_args<wscan_context>(result->values())));
   93|   307k|    return result;
   94|   307k|}
_ZN3scn2v44scanIJNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeIPKwSD_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSK_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISG_EEP8_IO_FILEEESS_NS0_6detail22borrowed_tail_subrangeISG_Xsr6rangesE14borrowed_rangeISG_EEE4typeEE4typeEJDpT_EEEEERKT0_OSG_NS0_24basic_scan_format_stringIwNST_13type_identityISG_E4typeEJDpNS18_ISZ_E4typeEEEE:
  130|   307k|{
  131|   307k|    auto result = make_scan_result<Source, Args...>();
  132|   307k|    fill_scan_result(result,
  133|   307k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   307k|                           make_scan_args<wscan_context>(result->values())));
  135|   307k|    return result;
  136|   307k|}
_ZN3scn2v410scan_valueINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_6ranges6detail9subrange_8subrangeIPKwSC_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISF_EEP8_IO_FILEEESQ_NS0_6detail22borrowed_tail_subrangeISF_Xsr6rangesE14borrowed_rangeISF_EEE4typeEE4typeEJT_EEEEEOSF_:
  170|   150k|{
  171|   150k|    auto result = make_scan_result<Source, T>();
  172|   150k|    fill_scan_result(
  173|   150k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   150k|                            detail::make_arg<wscan_context>(result->value())));
  175|   150k|    return result;
  176|   150k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJDpT_EEEEEOSM_NS0_24basic_scan_format_stringIwNSY_13type_identityISM_E4typeEJDpNS1A_IS14_E4typeEEEE:
   88|   307k|{
   89|   307k|    auto result = make_scan_result<Source, Args...>();
   90|   307k|    fill_scan_result(result,
   91|   307k|                     vscan(SCN_FWD(source), format,
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   92|   307k|                           make_scan_args<wscan_context>(result->values())));
   93|   307k|    return result;
   94|   307k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   43|   307k|{
   44|   307k|    return detail::vscan_generic(SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   45|   307k|}
_ZN3scn2v44scanIJNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEENS2_6localeENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSF_PKSG_lLl1024EEESK_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT1_EEvE4typeELPv0ETnPvLSR_0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISN_EEP8_IO_FILEEESZ_NS0_6detail22borrowed_tail_subrangeISN_Xsr6rangesE14borrowed_rangeISN_EEE4typeEE4typeEJDpT_EEEEERKT0_OSN_NS0_24basic_scan_format_stringIwNS10_13type_identityISN_E4typeEJDpNS1F_IS16_E4typeEEEE:
  130|   307k|{
  131|   307k|    auto result = make_scan_result<Source, Args...>();
  132|   307k|    fill_scan_result(result,
  133|   307k|                     vscan(loc, SCN_FWD(source), format,
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  134|   307k|                           make_scan_args<wscan_context>(result->values())));
  135|   307k|    return result;
  136|   307k|}
_ZN3scn2v45vscanINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EENS6_6localeETnPvLPv0EEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESO_NS0_6detail22borrowed_tail_subrangeISK_Xsr6rangesE14borrowed_rangeISK_EEE4typeEE4typeEEERKT0_OSK_NS6_17basic_string_viewIwNS6_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINSP_16buffer_range_tagEwEEEE:
   59|   307k|{
   60|   307k|    return detail::vscan_localized_generic(loc, SCN_FWD(range), format, args);
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   61|   307k|}
_ZN3scn2v410scan_valueINSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS0_6ranges6detail9subrange_8subrangeINS2_16__deque_iteratorIwPKwRSE_PKSF_lLl1024EEESJ_EETnPNS2_9enable_ifIXsr6detailE13is_wide_rangeIT0_EEvE4typeELPv0EEENS0_13scan_expectedINS0_11scan_resultINS2_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tISM_EEP8_IO_FILEEESX_NS0_6detail22borrowed_tail_subrangeISM_Xsr6rangesE14borrowed_rangeISM_EEE4typeEE4typeEJT_EEEEEOSM_:
  170|   150k|{
  171|   150k|    auto result = make_scan_result<Source, T>();
  172|   150k|    fill_scan_result(
  173|   150k|        result, vscan_value(SCN_FWD(source),
  ------------------
  |  | 1110|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  174|   150k|                            detail::make_arg<wscan_context>(result->value())));
  175|   150k|    return result;
  176|   150k|}
_ZN3scn2v411vscan_valueINS0_6ranges6detail9subrange_8subrangeINSt3__116__deque_iteratorIwPKwRS8_PKS9_lLl1024EEESD_EEEENS0_13scan_expectedINS6_11conditionalIXsr3stdE9is_same_vIu11__remove_cvIu20__remove_reference_tIT_EEP8_IO_FILEEESL_NS0_6detail22borrowed_tail_subrangeISH_Xsr6rangesE14borrowed_rangeISH_EEE4typeEE4typeEEEOSH_NS0_14basic_scan_argINS0_18basic_scan_contextINSM_16buffer_range_tagEwEEEE:
   71|   150k|{
   72|   150k|    return detail::vscan_value_generic(SCN_FWD(range), arg);
  ------------------
  |  | 1110|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
   73|   150k|}

_ZN3scn2v46detail10locale_refC2INSt3__16localeEEERKT_:
  307|  1.06M|locale_ref::locale_ref(const Locale& loc) : m_locale(&loc)
  308|  1.06M|{
  309|  1.06M|    static_assert(std::is_same_v<Locale, std::locale>);
  310|  1.06M|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIcNS3_11char_traitsIcEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2951|  86.8k|{
 2952|  86.8k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2953|  86.8k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIcEENS3_17basic_string_viewIcNS3_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2959|  54.2k|{
 2960|  54.2k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2961|  54.2k|    return sync_after_vscan(source, n);
 2962|  54.2k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_NS3_17basic_string_viewIwNS3_11char_traitsIwEEEESD_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2969|   615k|{
 2970|   615k|    return vscan_internal(source, format, args, detail::locale_ref{loc});
 2971|   615k|}
_ZN3scn2v46detail20vscan_localized_implINSt3__16localeEEENS0_13scan_expectedIlEERKT_RNS1_17basic_scan_bufferIwEENS3_17basic_string_viewIwNS3_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2977|   307k|{
 2978|   307k|    auto n = vscan_internal(source, format, args, detail::locale_ref{loc});
 2979|   307k|    return sync_after_vscan(source, n);
 2980|   307k|}
_ZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  206|   318k|{
  207|   318k|    return find_classic_impl(
  208|   318k|        source, [](char ch) { return is_ascii_space(ch); },
  209|   318k|        [](char32_t cp) { return detail::is_cp_space(cp); });
  210|   318k|}
_ZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEE:
  214|   321k|{
  215|   321k|    return find_classic_impl(
  216|   321k|        source, [](char ch) { return !is_ascii_space(ch); },
  217|   321k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
  218|   321k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2920|  86.8k|{
 2921|  86.8k|    return vscan_internal(source, format, args);
 2922|  86.8k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIcEENSt3__117basic_string_viewIcNS5_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 2926|  54.2k|{
 2927|  54.2k|    auto n = vscan_internal(source, format, args);
 2928|  54.2k|    return sync_after_vscan(source, n);
 2929|  54.2k|}
_ZN3scn2v46detail10vscan_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_NS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2934|   615k|{
 2935|   615k|    return vscan_internal(source, format, args);
 2936|   615k|}
_ZN3scn2v46detail10vscan_implERNS1_17basic_scan_bufferIwEENSt3__117basic_string_viewIwNS5_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 2940|   307k|{
 2941|   307k|    auto n = vscan_internal(source, format, args);
 2942|   307k|    return sync_after_vscan(source, n);
 2943|   307k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3006|  39.5k|{
 3007|  39.5k|    return vscan_value_internal(source, arg);
 3008|  39.5k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIcEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEcEEEE:
 3011|  25.0k|{
 3012|  25.0k|    auto n = vscan_value_internal(source, arg);
 3013|  25.0k|    return sync_after_vscan(source, n);
 3014|  25.0k|}
_ZN3scn2v46detail16vscan_value_implENSt3__117basic_string_viewIwNS2_11char_traitsIwEEEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3019|   300k|{
 3020|   300k|    return vscan_value_internal(source, arg);
 3021|   300k|}
_ZN3scn2v46detail16vscan_value_implERNS1_17basic_scan_bufferIwEENS0_14basic_scan_argINS0_18basic_scan_contextINS1_16buffer_range_tagEwEEEE:
 3025|   150k|{
 3026|   150k|    auto n = vscan_value_internal(source, arg);
 3027|   150k|    return sync_after_vscan(source, n);
 3028|   150k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_30find_classic_space_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   318k|{
  131|   318k|    auto it = source.begin();
  132|       |
  133|   575k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 446k, False: 128k]
  ------------------
  134|   446k|        auto sv =
  135|   446k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   446k|                .substr(0, 8);
  137|       |
  138|   446k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 296k, False: 150k]
  ------------------
  139|   296k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   296k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   296k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 119k, False: 176k]
  ------------------
  142|   119k|                break;
  143|   119k|            }
  144|   176k|            continue;
  145|   296k|        }
  146|       |
  147|   443k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 363k, False: 80.0k]
  ------------------
  148|   363k|            auto tmp =
  149|   363k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   363k|            auto res = get_next_code_point(tmp);
  151|   363k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 70.2k, False: 293k]
  ------------------
  152|  70.2k|                return it;
  153|  70.2k|            }
  154|   293k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|   293k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|   293k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|   293k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|   293k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|   293k|        }
  158|   150k|    }
  159|       |
  160|   247k|    return detail::make_string_view_iterator(source, it);
  161|   318k|}
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_120has_nonascii_char_64INSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEEEbT_:
  117|   734k|{
  118|   734k|    static_assert(sizeof(*source.data()) == 1);
  119|   734k|    SCN_EXPECT(source.size() <= 8);
  ------------------
  |  | 1104|   734k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   734k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  120|   734k|    uint64_t word{};
  121|   734k|    std::memcpy(&word, source.data(), source.size());
  122|       |
  123|   734k|    return has_byte_greater(word, 127) != 0;
  124|   734k|}
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  208|  1.08M|        source, [](char ch) { return is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl30find_classic_space_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  209|   363k|        [](char32_t cp) { return detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v44impl12_GLOBAL__N_117find_classic_implIZNS1_33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS4_11char_traitsIcEEEEE3$_0ZNS1_33find_classic_nonspace_narrow_fastES8_E3$_1EEPKcS8_T_T0_:
  130|   321k|{
  131|   321k|    auto it = source.begin();
  132|       |
  133|   401k|    while (it != source.end()) {
  ------------------
  |  Branch (133:12): [True: 288k, False: 113k]
  ------------------
  134|   288k|        auto sv =
  135|   288k|            detail::make_string_view_from_iterators<char>(it, source.end())
  136|   288k|                .substr(0, 8);
  137|       |
  138|   288k|        if (!has_nonascii_char_64(sv)) {
  ------------------
  |  Branch (138:13): [True: 199k, False: 88.6k]
  ------------------
  139|   199k|            auto tmp_it = std::find_if(sv.begin(), sv.end(), cu_cb);
  140|   199k|            it = detail::make_string_view_iterator(source, tmp_it);
  141|   199k|            if (tmp_it != sv.end()) {
  ------------------
  |  Branch (141:17): [True: 123k, False: 75.7k]
  ------------------
  142|   123k|                break;
  143|   123k|            }
  144|  75.7k|            continue;
  145|   199k|        }
  146|       |
  147|   172k|        for (size_t i = 0; i < sv.size(); ++i) {
  ------------------
  |  Branch (147:28): [True: 168k, False: 3.96k]
  ------------------
  148|   168k|            auto tmp =
  149|   168k|                detail::make_string_view_from_iterators<char>(it, source.end());
  150|   168k|            auto res = get_next_code_point(tmp);
  151|   168k|            if (cp_cb(res.value)) {
  ------------------
  |  Branch (151:17): [True: 84.6k, False: 84.1k]
  ------------------
  152|  84.6k|                return it;
  153|  84.6k|            }
  154|  84.1k|            i += ranges::distance(tmp.data(), detail::to_address(res.iterator));
  155|  84.1k|            it = detail::make_string_view_iterator(source, res.iterator);
  156|  84.1k|            SCN_ENSURE(it <= source.end());
  ------------------
  |  | 1105|  84.1k|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|  84.1k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  157|  84.1k|        }
  158|  88.6k|    }
  159|       |
  160|   237k|    return detail::make_string_view_iterator(source, it);
  161|   321k|}
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_0clEc:
  216|   446k|        source, [](char ch) { return !is_ascii_space(ch); },
impl.cpp:_ZZN3scn2v44impl33find_classic_nonspace_narrow_fastENSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEENK3$_1clEDi:
  217|   168k|        [](char32_t cp) { return !detail::is_cp_space(cp); });
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|   108k|{
 2818|   108k|    const auto argcount = args.size();
 2819|   108k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 50.1k, False: 58.3k]
  |  Branch (2819:60): [True: 50.1k, False: 0]
  ------------------
 2820|  50.1k|        auto arg = args.get(0);
 2821|  50.1k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  50.1k|    static_cast<    \
  |  | 1109|  50.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|  50.1k|    }
 2823|       |
 2824|  58.3k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 58.3k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|  58.3k|    SCN_UNLIKELY_ATTR
 2832|  58.3k|    {
 2833|  58.3k|        auto handler = format_handler<false, CharT>{
 2834|  58.3k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  58.3k|    static_cast<    \
  |  | 1109|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  58.3k|    static_cast<    \
  |  | 1109|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|  58.3k|        return vscan_parse_format_string(format, handler);
 2836|  58.3k|    }
 2837|  58.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|   282k|{
 2366|   282k|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 152k, False: 129k]
  ------------------
 2367|   152k|        return false;
 2368|   152k|    }
 2369|   129k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 129k, False: 0]
  |  Branch (2369:39): [True: 129k, False: 0]
  ------------------
 2370|   282k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|  75.2k|{
 2399|  75.2k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 75.2k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|  75.2k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|  75.2k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 75.2k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|  75.2k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|  75.2k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|  75.2k|    static_cast<    \
  |  | 1109|  75.2k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|  75.2k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|  75.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  75.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  75.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 2.64k, False: 72.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  2.64k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  2.64k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  2.64k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  2.64k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  2.64k|    }                                                  \
  |  |  |  | 3957|  75.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  72.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|  72.6k|    return it.position();
 2416|  75.2k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEEOT_NSt3__117basic_string_viewIcNSE_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSL_10locale_refEm:
 2641|  94.6k|        : format_handler_base{argcount},
 2642|  94.6k|          parse_ctx{source_tag<Source&&>, format},
 2643|  94.6k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  94.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  94.6k|    static_cast<    \
  |  | 1109|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  94.6k|    static_cast<    \
  |  | 1109|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|  94.6k|    {
 2645|  94.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_baseC2Em:
 2459|  1.09M|    format_handler_base(size_t argcount) : args_count(argcount)
 2460|  1.09M|    {
 2461|  1.09M|        if (SCN_UNLIKELY(args_count >= 64)) {
  ------------------
  |  | 1039|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 2462|      0|            visited_args_upper.resize((args_count - 64) / 8);
 2463|      0|        }
 2464|  1.09M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcEC2ENS0_6ranges6detail9subrange_8subrangeIPKcS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEENSD_10locale_refE:
 2592|  94.6k|        : contiguous_ctx(source, args, loc)
 2593|  94.6k|    {
 2594|  94.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb1EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|  94.6k|{
 2783|  94.6k|    const auto beg = handler.get_ctx().begin();
 2784|  94.6k|    detail::parse_format_string<false>(format, handler);
 2785|  94.6k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.6k, False: 76.9k]
  |  |  ------------------
  ------------------
 2786|  17.6k|        return unexpected(err.error());
 2787|  17.6k|    }
 2788|  76.9k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|  94.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE7get_ctxEv:
 2766|   613k|    {
 2767|   613k|        return ctx.get();
 2768|   613k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIcE3getEv:
 2597|   613k|    {
 2598|   613k|        return contiguous_ctx;
 2599|   613k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_literal_textEPKcS5_:
 2648|   171k|    {
 2649|   171k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 171k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   171k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorENS0_10scan_errorE:
 2508|  47.6k|    {
 2509|  47.6k|        error = unexpected(err);
 2510|  47.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEmNS1_14format_handlerILb1EcEEEEDaRT_T0_RT1_:
 2420|  94.6k|{
 2421|  94.6k|    auto arg = ctx.arg(id);
 2422|  94.6k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 94.6k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|  94.6k|    return arg;
 2426|  94.6k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base18set_arg_as_visitedEm:
 2534|  1.09M|    {
 2535|  1.09M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 2536|      0|            on_error({scan_error::invalid_format_string,
 2537|      0|                      "Argument ID out-of-range"});
 2538|      0|            return;
 2539|      0|        }
 2540|       |
 2541|  1.09M|        if (SCN_UNLIKELY(has_arg_been_visited(id))) {
  ------------------
  |  | 1039|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 2542|      0|            on_error({scan_error::invalid_format_string,
 2543|      0|                      "Argument with this ID has already been scanned"});
 2544|      0|        }
 2545|       |
 2546|  1.09M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.09M, False: 0]
  |  |  ------------------
  ------------------
 2547|  1.09M|            visited_args_lower64 |= (1ull << id);
 2548|  1.09M|            return;
 2549|  1.09M|        }
 2550|       |
 2551|      0|        id -= 64;
 2552|      0|        visited_args_upper[id / 8] |= (1ull << (id % 8));
 2553|      0|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20has_arg_been_visitedEm:
 2518|  1.09M|    {
 2519|  1.09M|        if (SCN_UNLIKELY(id >= args_count)) {
  ------------------
  |  | 1039|  1.09M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 1.09M]
  |  |  ------------------
  ------------------
 2520|      0|            on_error({scan_error::invalid_format_string,
 2521|      0|                      "Argument ID out-of-range"});
 2522|      0|            return false;
 2523|      0|        }
 2524|       |
 2525|  1.09M|        if (SCN_LIKELY(id < 64)) {
  ------------------
  |  | 1038|  1.09M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.09M, False: 0]
  |  |  ------------------
  ------------------
 2526|  1.09M|            return (visited_args_lower64 >> id) & 1ull;
 2527|  1.09M|        }
 2528|       |
 2529|      0|        id -= 64;
 2530|      0|        return (visited_args_upper[id / 8] >> (id % 8)) & 1ull;
 2531|  1.09M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE9on_arg_idEv:
 2688|  94.6k|    {
 2689|  94.6k|        return parse_ctx.next_arg_id();
 2690|  94.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE15on_format_specsEmPKcS5_:
 2728|  94.6k|    {
 2729|  94.6k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|  94.6k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|  94.6k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 94.6k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|  94.6k|        auto specs = detail::format_specs{};
 2742|  94.6k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|  94.6k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|  94.6k|            detail::get_arg_type(arg)};
 2745|       |
 2746|  94.6k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|  94.6k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 94.6k]
  |  Branch (2747:29): [True: 0, False: 94.6k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|  94.6k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  94.6k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.06k, False: 87.5k]
  |  |  ------------------
  ------------------
 2754|  7.06k|            return parse_ctx.begin();
 2755|  7.06k|        }
 2756|  87.5k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|  87.5k|        on_visit_scan_arg(
 2759|  87.5k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|  87.5k|                                           get_ctx().locale()},
 2761|  87.5k|            arg);
 2762|  87.5k|        return parse_ctx.begin();
 2763|  94.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIcEERSB_:
 2438|  94.6k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|  94.6k|    {
 2440|  94.6k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEcEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEcEEEE:
 2699|  87.5k|    {
 2700|  87.5k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 87.5k]
  |  Branch (2700:13): [True: 0, False: 87.5k]
  |  Branch (2700:29): [True: 0, False: 87.5k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|  87.5k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  87.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  87.5k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  87.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 76.9k]
  |  |  ------------------
  ------------------
 2707|  10.5k|            on_error(r.error());
 2708|  10.5k|        }
 2709|  76.9k|        else {
 2710|  76.9k|            get_ctx().advance_to(*r);
 2711|  76.9k|        }
 2712|  87.5k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base8on_errorEPKc:
 2502|  31.7k|    {
 2503|  31.7k|        SCN_UNLIKELY_ATTR
 2504|  31.7k|        error = detail::unexpected_scan_error(scan_error::invalid_format_string,
 2505|  31.7k|                                              msg);
 2506|  31.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_119format_handler_base20check_args_exhaustedEv:
 2467|  1.09M|    {
 2468|  1.09M|        {
 2469|  1.09M|            const auto args_count_lower64 = args_count >= 64 ? 64 : args_count;
  ------------------
  |  Branch (2469:45): [True: 0, False: 1.09M]
  ------------------
 2470|  1.09M|            const uint64_t mask = args_count_lower64 == 64
  ------------------
  |  Branch (2470:35): [True: 0, False: 1.09M]
  ------------------
 2471|  1.09M|                                      ? std::numeric_limits<uint64_t>::max()
 2472|  1.09M|                                      : (1ull << args_count_lower64) - 1;
 2473|       |
 2474|  1.09M|            if (visited_args_lower64 != mask) {
  ------------------
  |  Branch (2474:17): [True: 0, False: 1.09M]
  ------------------
 2475|      0|                return on_error({scan_error::invalid_format_string,
 2476|      0|                                 "Argument list not exhausted"});
 2477|      0|            }
 2478|  1.09M|        }
 2479|       |
 2480|  1.09M|        if (args_count < 64) {
  ------------------
  |  Branch (2480:13): [True: 1.09M, False: 0]
  ------------------
 2481|  1.09M|            return;
 2482|  1.09M|        }
 2483|       |
 2484|      0|        auto last_args_count = args_count - 64;
 2485|      0|        for (auto it = visited_args_upper.begin();
 2486|      0|             it != visited_args_upper.end() - 1; ++it) {
  ------------------
  |  Branch (2486:14): [True: 0, False: 0]
  ------------------
 2487|      0|            if (*it != std::numeric_limits<uint8_t>::max()) {
  ------------------
  |  Branch (2487:17): [True: 0, False: 0]
  ------------------
 2488|      0|                return on_error({scan_error::invalid_format_string,
 2489|      0|                                 "Argument list not exhausted"});
 2490|      0|            }
 2491|      0|            last_args_count -= 8;
 2492|      0|        }
 2493|       |
 2494|      0|        const auto mask = static_cast<uint8_t>(1u << last_args_count) - 1;
 2495|      0|        if (visited_args_upper.back() != mask) {
  ------------------
  |  Branch (2495:13): [True: 0, False: 0]
  ------------------
 2496|      0|            return on_error({scan_error::invalid_format_string,
 2497|      0|                             "Argument list not exhausted"});
 2498|      0|        }
 2499|      0|    }
impl.cpp:_ZNK3scn2v412_GLOBAL__N_119format_handler_base9get_errorEv:
 2513|  4.35M|    {
 2514|  4.35M|        return error;
 2515|  4.35M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcEC2IRNS0_6detail17basic_scan_bufferIcEEEEOT_NSt3__117basic_string_viewIcNSB_11char_traitsIcEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEcEEEENS5_10locale_refEm:
 2641|  58.3k|        : format_handler_base{argcount},
 2642|  58.3k|          parse_ctx{source_tag<Source&&>, format},
 2643|  58.3k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  58.3k|    static_cast<    \
  |  | 1109|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|  58.3k|    static_cast<    \
  |  | 1109|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|  58.3k|    {
 2645|  58.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcEC2ERNS0_6detail17basic_scan_bufferIcEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEcEEEENS4_10locale_refE:
 2568|  58.3k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|  58.3k|    static_cast<    \
  |  | 1109|  58.3k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|  58.3k|    {
 2570|  58.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIcNS1_14format_handlerILb0EcEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|  58.3k|{
 2783|  58.3k|    const auto beg = handler.get_ctx().begin();
 2784|  58.3k|    detail::parse_format_string<false>(format, handler);
 2785|  58.3k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 8.83k, False: 49.4k]
  |  |  ------------------
  ------------------
 2786|  8.83k|        return unexpected(err.error());
 2787|  8.83k|    }
 2788|  49.4k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|  58.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE7get_ctxEv:
 2766|   383k|    {
 2767|   383k|        return ctx.get();
 2768|   383k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIcE3getEv:
 2573|   383k|    {
 2574|   383k|        return ctx;
 2575|   383k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_literal_textEPKcS5_:
 2648|   107k|    {
 2649|   107k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 107k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   107k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEmNS1_14format_handlerILb0EcEEEEDaRT_T0_RT1_:
 2420|  58.3k|{
 2421|  58.3k|    auto arg = ctx.arg(id);
 2422|  58.3k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 58.3k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|  58.3k|    return arg;
 2426|  58.3k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE9on_arg_idEv:
 2688|  58.3k|    {
 2689|  58.3k|        return parse_ctx.next_arg_id();
 2690|  58.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE15on_format_specsEmPKcS5_:
 2728|  58.3k|    {
 2729|  58.3k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|  58.3k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|  58.3k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 58.3k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|  58.3k|        auto specs = detail::format_specs{};
 2742|  58.3k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|  58.3k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|  58.3k|            detail::get_arg_type(arg)};
 2745|       |
 2746|  58.3k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|  58.3k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 58.3k]
  |  Branch (2747:29): [True: 0, False: 58.3k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|  58.3k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|  58.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.53k, False: 54.7k]
  |  |  ------------------
  ------------------
 2754|  3.53k|            return parse_ctx.begin();
 2755|  3.53k|        }
 2756|  54.7k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|  54.7k|        on_visit_scan_arg(
 2759|  54.7k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|  54.7k|                                           get_ctx().locale()},
 2761|  54.7k|            arg);
 2762|  54.7k|        return parse_ctx.begin();
 2763|  58.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIcEERS6_:
 2438|  58.3k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|  58.3k|    {
 2440|  58.3k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EcE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|  54.7k|    {
 2700|  54.7k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 54.7k]
  |  Branch (2700:13): [True: 0, False: 54.7k]
  |  Branch (2700:29): [True: 0, False: 54.7k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|  54.7k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|  54.7k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|  54.7k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.29k, False: 49.4k]
  |  |  ------------------
  ------------------
 2707|  5.29k|            on_error(r.error());
 2708|  5.29k|        }
 2709|  49.4k|        else {
 2710|  49.4k|            get_ctx().advance_to(*r);
 2711|  49.4k|        }
 2712|  54.7k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|   173k|{
 2798|   173k|    const auto argcount = args.size();
 2799|   173k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 79.1k, False: 94.6k]
  |  Branch (2799:60): [True: 79.1k, False: 0]
  ------------------
 2800|  79.1k|        auto arg = args.get(0);
 2801|  79.1k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|  79.1k|    static_cast<    \
  |  | 1109|  79.1k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|  79.1k|    }
 2803|       |
 2804|  94.6k|    auto handler = format_handler<true, CharT>{
 2805|  94.6k|        ranges::subrange<const CharT*>{source.data(),
 2806|  94.6k|                                       source.data() + source.size()},
 2807|  94.6k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  94.6k|    static_cast<    \
  |  | 1109|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|  94.6k|    static_cast<    \
  |  | 1109|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|  94.6k|    return vscan_parse_format_string(format, handler);
 2809|   173k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIcEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|   118k|{
 2379|   118k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 118k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|   118k|    auto reader =
 2385|   118k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|   118k|            ranges::subrange<const CharT*>{source.data(),
 2387|   118k|                                           source.data() + source.size()},
 2388|   118k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   118k|    static_cast<    \
  |  | 1109|   118k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|   118k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   118k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   118k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   118k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.29k, False: 113k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.29k|    }                                                  \
  |  |  |  | 3957|   118k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   113k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|   113k|    return ranges::distance(source.data(), it);
 2391|   118k|}
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIcEEEENS0_13scan_expectedIlEERT_S7_:
 2897|   133k|{
 2898|   133k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   133k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 122k, False: 11.4k]
  |  |  ------------------
  ------------------
 2899|   122k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   122k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 122k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|   122k|    }
 2905|  11.4k|    else {
 2906|  11.4k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  11.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 11.4k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|  11.4k|    }
 2912|   133k|    return result;
 2913|   133k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEESA_NS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENSD_10locale_refE:
 2797|  1.23M|{
 2798|  1.23M|    const auto argcount = args.size();
 2799|  1.23M|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2799:9): [True: 601k, False: 629k]
  |  Branch (2799:60): [True: 601k, False: 0]
  ------------------
 2800|   601k|        auto arg = args.get(0);
 2801|   601k|        return scan_simple_single_argument(source, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   601k|    static_cast<    \
  |  | 1109|   601k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2802|   601k|    }
 2803|       |
 2804|   629k|    auto handler = format_handler<true, CharT>{
 2805|   629k|        ranges::subrange<const CharT*>{source.data(),
 2806|   629k|                                       source.data() + source.size()},
 2807|   629k|        format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   629k|    static_cast<    \
  |  | 1109|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                      format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   629k|    static_cast<    \
  |  | 1109|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2808|   629k|    return vscan_parse_format_string(format, handler);
 2809|  1.23M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_139is_simple_single_argument_format_stringIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 2365|  1.84M|{
 2366|  1.84M|    if (format.size() != 2) {
  ------------------
  |  Branch (2366:9): [True: 944k, False: 901k]
  ------------------
 2367|   944k|        return false;
 2368|   944k|    }
 2369|   901k|    return format[0] == CharT{'{'} && format[1] == CharT{'}'};
  ------------------
  |  Branch (2369:12): [True: 901k, False: 0]
  |  Branch (2369:39): [True: 901k, False: 0]
  ------------------
 2370|  1.84M|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS5_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagES7_EEEENS0_14basic_scan_argISF_EENSD_10locale_refE:
 2378|   901k|{
 2379|   901k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   901k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 901k]
  |  |  ------------------
  ------------------
 2380|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2381|      0|                                             "Argument #0 not found");
 2382|      0|    }
 2383|       |
 2384|   901k|    auto reader =
 2385|   901k|        impl::default_arg_reader<impl::basic_contiguous_scan_context<CharT>>{
 2386|   901k|            ranges::subrange<const CharT*>{source.data(),
 2387|   901k|                                           source.data() + source.size()},
 2388|   901k|            SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   901k|    static_cast<    \
  |  | 1109|   901k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2389|   901k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   901k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   901k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   901k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   901k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 10.5k, False: 890k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  10.5k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  10.5k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  10.5k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  10.5k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  10.5k|    }                                                  \
  |  |  |  | 3957|   901k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   890k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2390|   890k|    return ranges::distance(source.data(), it);
 2391|   901k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEEOT_NSt3__117basic_string_viewIwNSE_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSL_10locale_refEm:
 2641|   629k|        : format_handler_base{argcount},
 2642|   629k|          parse_ctx{source_tag<Source&&>, format},
 2643|   629k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   629k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   629k|    static_cast<    \
  |  | 1109|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   629k|    static_cast<    \
  |  | 1109|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   629k|    {
 2645|   629k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwEC2ENS0_6ranges6detail9subrange_8subrangeIPKwS9_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEENSD_10locale_refE:
 2592|   629k|        : contiguous_ctx(source, args, loc)
 2593|   629k|    {
 2594|   629k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb1EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   629k|{
 2783|   629k|    const auto beg = handler.get_ctx().begin();
 2784|   629k|    detail::parse_format_string<false>(format, handler);
 2785|   629k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 35.3k, False: 594k]
  |  |  ------------------
  ------------------
 2786|  35.3k|        return unexpected(err.error());
 2787|  35.3k|    }
 2788|   594k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   629k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE7get_ctxEv:
 2766|  4.30M|    {
 2767|  4.30M|        return ctx.get();
 2768|  4.30M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_126contiguous_context_wrapperIwE3getEv:
 2597|  4.30M|    {
 2598|  4.30M|        return contiguous_ctx;
 2599|  4.30M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_literal_textEPKwS5_:
 2648|  1.22M|    {
 2649|  1.22M|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 1.22M]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|  1.22M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEmNS1_14format_handlerILb1EwEEEEDaRT_T0_RT1_:
 2420|   629k|{
 2421|   629k|    auto arg = ctx.arg(id);
 2422|   629k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 629k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   629k|    return arg;
 2426|   629k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE9on_arg_idEv:
 2688|   629k|    {
 2689|   629k|        return parse_ctx.next_arg_id();
 2690|   629k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE15on_format_specsEmPKwS5_:
 2728|   629k|    {
 2729|   629k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   629k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   629k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 629k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   629k|        auto specs = detail::format_specs{};
 2742|   629k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   629k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   629k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   629k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   629k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 629k]
  |  Branch (2747:29): [True: 0, False: 629k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   629k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   629k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 14.1k, False: 615k]
  |  |  ------------------
  ------------------
 2754|  14.1k|            return parse_ctx.begin();
 2755|  14.1k|        }
 2756|   615k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   615k|        on_visit_scan_arg(
 2759|   615k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   615k|                                           get_ctx().locale()},
 2761|   615k|            arg);
 2762|   615k|        return parse_ctx.begin();
 2763|   629k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEC2ERNS0_6detail12format_specsERNS0_24basic_scan_parse_contextIwEERSB_:
 2438|   629k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   629k|    {
 2440|   629k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb1EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEwEEEEEEvOT_NS0_14basic_scan_argINS7_INS0_6detail16buffer_range_tagEwEEEE:
 2699|   615k|    {
 2700|   615k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 615k]
  |  Branch (2700:13): [True: 0, False: 615k]
  |  Branch (2700:29): [True: 0, False: 615k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   615k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   615k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   615k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   615k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 21.1k, False: 594k]
  |  |  ------------------
  ------------------
 2707|  21.1k|            on_error(r.error());
 2708|  21.1k|        }
 2709|   594k|        else {
 2710|   594k|            get_ctx().advance_to(*r);
 2711|   594k|        }
 2712|   615k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114vscan_internalIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENSt3__117basic_string_viewIS7_NSA_11char_traitsIS7_EEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS5_10locale_refE:
 2817|   615k|{
 2818|   615k|    const auto argcount = args.size();
 2819|   615k|    if (is_simple_single_argument_format_string(format) && argcount == 1) {
  ------------------
  |  Branch (2819:9): [True: 300k, False: 314k]
  |  Branch (2819:60): [True: 300k, False: 0]
  ------------------
 2820|   300k|        auto arg = args.get(0);
 2821|   300k|        return scan_simple_single_argument(buffer, SCN_MOVE(args), arg);
  ------------------
  |  | 1108|   300k|    static_cast<    \
  |  | 1109|   300k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2822|   300k|    }
 2823|       |
 2824|   314k|    if (buffer.is_contiguous()) {
  ------------------
  |  Branch (2824:9): [True: 0, False: 314k]
  ------------------
 2825|      0|        auto handler = format_handler<true, CharT>{buffer.get_contiguous(),
 2826|      0|                                                   format, SCN_MOVE(args),
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2827|      0|                                                   SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2828|      0|        return vscan_parse_format_string(format, handler);
 2829|      0|    }
 2830|       |
 2831|   314k|    SCN_UNLIKELY_ATTR
 2832|   314k|    {
 2833|   314k|        auto handler = format_handler<false, CharT>{
 2834|   314k|            buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   314k|    static_cast<    \
  |  | 1109|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                          buffer, format, SCN_MOVE(args), SCN_MOVE(loc), argcount};
  ------------------
  |  | 1108|   314k|    static_cast<    \
  |  | 1109|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2835|   314k|        return vscan_parse_format_string(format, handler);
 2836|   314k|    }
 2837|   314k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_127scan_simple_single_argumentIwEENS0_13scan_expectedIlEERNS0_6detail17basic_scan_bufferIT_EENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagES7_EEEENS0_14basic_scan_argISD_EENS5_10locale_refE:
 2398|   450k|{
 2399|   450k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 450k]
  |  |  ------------------
  ------------------
 2400|      0|        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 2401|      0|                                             "Argument #0 not found");
 2402|      0|    }
 2403|       |
 2404|   450k|    if (SCN_LIKELY(source.is_contiguous())) {
  ------------------
  |  | 1038|   450k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 0, False: 450k]
  |  |  ------------------
  ------------------
 2405|      0|        auto reader = impl::default_arg_reader<
 2406|      0|            impl::basic_contiguous_scan_context<CharT>>{source.get_contiguous(),
 2407|      0|                                                        SCN_MOVE(args), loc};
  ------------------
  |  | 1108|      0|    static_cast<    \
  |  | 1109|      0|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2408|      0|        SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2409|      0|        return ranges::distance(source.get_contiguous().begin(), it);
 2410|      0|    }
 2411|       |
 2412|   450k|    auto reader = impl::default_arg_reader<detail::default_context<CharT>>{
 2413|   450k|        source.get(), SCN_MOVE(args), loc};
  ------------------
  |  | 1108|   450k|    static_cast<    \
  |  | 1109|   450k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2414|   450k|    SCN_TRY(it, arg.visit(SCN_MOVE(reader)));
  ------------------
  |  | 3958|   450k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   450k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   450k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 5.29k, False: 445k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  5.29k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  5.29k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  5.29k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  5.29k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  5.29k|    }                                                  \
  |  |  |  | 3957|   450k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   445k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 2415|   445k|    return it.position();
 2416|   450k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwEC2IRNS0_6detail17basic_scan_bufferIwEEEEOT_NSt3__117basic_string_viewIwNSB_11char_traitsIwEEEENS0_15basic_scan_argsINS0_18basic_scan_contextINS5_16buffer_range_tagEwEEEENS5_10locale_refEm:
 2641|   314k|        : format_handler_base{argcount},
 2642|   314k|          parse_ctx{source_tag<Source&&>, format},
 2643|   314k|          ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1110|   314k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   314k|    static_cast<    \
  |  | 1109|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
                        ctx{SCN_FWD(source), SCN_MOVE(args), SCN_MOVE(loc)}
  ------------------
  |  | 1108|   314k|    static_cast<    \
  |  | 1109|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2644|   314k|    {
 2645|   314k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwEC2ERNS0_6detail17basic_scan_bufferIwEENS0_15basic_scan_argsINS0_18basic_scan_contextINS4_16buffer_range_tagEwEEEENS4_10locale_refE:
 2568|   314k|        : ctx(source.get().begin(), SCN_MOVE(args), loc)
  ------------------
  |  | 1108|   314k|    static_cast<    \
  |  | 1109|   314k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 2569|   314k|    {
 2570|   314k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_125vscan_parse_format_stringIwNS1_14format_handlerILb0EwEEEENS0_13scan_expectedIlEENSt3__117basic_string_viewIT_NS7_11char_traitsIS9_EEEERT0_:
 2782|   314k|{
 2783|   314k|    const auto beg = handler.get_ctx().begin();
 2784|   314k|    detail::parse_format_string<false>(format, handler);
 2785|   314k|    if (auto err = handler.get_error(); SCN_UNLIKELY(!err)) {
  ------------------
  |  | 1039|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 17.6k, False: 297k]
  |  |  ------------------
  ------------------
 2786|  17.6k|        return unexpected(err.error());
 2787|  17.6k|    }
 2788|   297k|    return ranges::distance(beg, handler.get_ctx().begin());
 2789|   314k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE7get_ctxEv:
 2766|  2.15M|    {
 2767|  2.15M|        return ctx.get();
 2768|  2.15M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_122simple_context_wrapperIwE3getEv:
 2573|  2.15M|    {
 2574|  2.15M|        return ctx;
 2575|  2.15M|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_literal_textEPKwS5_:
 2648|   611k|    {
 2649|   611k|        for (; begin != end; ++begin) {
  ------------------
  |  Branch (2649:16): [True: 0, False: 611k]
  ------------------
 2650|      0|            auto it = get_ctx().begin();
 2651|      0|            if (impl::is_range_eof(it, get_ctx().end())) {
  ------------------
  |  Branch (2651:17): [True: 0, False: 0]
  ------------------
 2652|      0|                SCN_UNLIKELY_ATTR
 2653|      0|                return on_error(
 2654|      0|                    {scan_error::invalid_literal, "Unexpected end of source"});
 2655|      0|            }
 2656|       |
 2657|      0|            if (auto [after_space_it, cp, is_space] = impl::is_first_char_space(
 2658|      0|                    detail::make_string_view_from_pointers(begin, end));
 2659|      0|                cp == detail::invalid_code_point) {
  ------------------
  |  Branch (2659:17): [True: 0, False: 0]
  ------------------
 2660|      0|                SCN_UNLIKELY_ATTR
 2661|      0|                return on_error({scan_error::invalid_format_string,
 2662|      0|                                 "Invalid encoding in format string"});
 2663|      0|            }
 2664|      0|            else if (is_space) {
  ------------------
  |  Branch (2664:22): [True: 0, False: 0]
  ------------------
 2665|       |                // Skip all whitespace in input
 2666|      0|                get_ctx().advance_to(
 2667|      0|                    impl::read_while_classic_space(get_ctx().range()));
 2668|       |                // And, skip all whitespace in the format string
 2669|      0|                auto begin_it = impl::read_while_classic_space(
 2670|      0|                    detail::make_string_view_from_pointers(
 2671|      0|                        detail::to_address(after_space_it),
 2672|      0|                        detail::to_address(end)));
 2673|       |                // (-1 because of the for loop ++begin)
 2674|      0|                begin = detail::to_address(begin_it) - 1;
 2675|      0|                continue;
 2676|      0|            }
 2677|       |
 2678|      0|            if (*it != *begin) {
  ------------------
  |  Branch (2678:17): [True: 0, False: 0]
  ------------------
 2679|      0|                SCN_UNLIKELY_ATTR
 2680|      0|                return on_error({scan_error::invalid_literal,
 2681|      0|                                 "Unexpected literal character in source"});
 2682|      0|            }
 2683|      0|            get_ctx().advance_to(ranges::next(it));
 2684|      0|        }
 2685|   611k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_17get_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEmNS1_14format_handlerILb0EwEEEEDaRT_T0_RT1_:
 2420|   314k|{
 2421|   314k|    auto arg = ctx.arg(id);
 2422|   314k|    if (SCN_UNLIKELY(!arg)) {
  ------------------
  |  | 1039|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 314k]
  |  |  ------------------
  ------------------
 2423|      0|        handler.on_error("Failed to find argument with ID");
 2424|      0|    }
 2425|   314k|    return arg;
 2426|   314k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE9on_arg_idEv:
 2688|   314k|    {
 2689|   314k|        return parse_ctx.next_arg_id();
 2690|   314k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE15on_format_specsEmPKwS5_:
 2728|   314k|    {
 2729|   314k|        auto arg = get_arg(get_ctx(), arg_id, *this);
 2730|   314k|        set_arg_as_visited(arg_id);
 2731|       |
 2732|   314k|        if (detail::get_arg_type(arg) == detail::arg_type::custom_type) {
  ------------------
  |  Branch (2732:13): [True: 0, False: 314k]
  ------------------
 2733|      0|            parse_ctx.advance_to(begin);
 2734|      0|            on_visit_scan_arg(
 2735|      0|                impl::custom_reader<detail::default_context<char_type>>{
 2736|      0|                    parse_ctx, get_custom_ctx()},
 2737|      0|                arg);
 2738|      0|            return parse_ctx.begin();
 2739|      0|        }
 2740|       |
 2741|   314k|        auto specs = detail::format_specs{};
 2742|   314k|        detail::specs_checker<specs_handler<context_type>> handler{
 2743|   314k|            specs_handler<context_type>{specs, parse_ctx, get_ctx()},
 2744|   314k|            detail::get_arg_type(arg)};
 2745|       |
 2746|   314k|        begin = detail::parse_format_specs(begin, end, handler);
 2747|   314k|        if (begin == end || *begin != char_type{'}'}) {
  ------------------
  |  Branch (2747:13): [True: 0, False: 314k]
  |  Branch (2747:29): [True: 0, False: 314k]
  ------------------
 2748|      0|            SCN_UNLIKELY_ATTR
 2749|      0|            on_error({scan_error::invalid_format_string,
 2750|      0|                      "Missing '}' in format string"});
 2751|      0|            return parse_ctx.begin();
 2752|      0|        }
 2753|   314k|        if (SCN_UNLIKELY(!handler.get_error())) {
  ------------------
  |  | 1039|   314k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 7.06k, False: 307k]
  |  |  ------------------
  ------------------
 2754|  7.06k|            return parse_ctx.begin();
 2755|  7.06k|        }
 2756|   307k|        parse_ctx.advance_to(begin);
 2757|       |
 2758|   307k|        on_visit_scan_arg(
 2759|   307k|            impl::arg_reader<context_type>{get_ctx().range(), specs,
 2760|   307k|                                           get_ctx().locale()},
 2761|   307k|            arg);
 2762|   307k|        return parse_ctx.begin();
 2763|   314k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_113specs_handlerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEC2ERNS4_12format_specsERNS0_24basic_scan_parse_contextIwEERS6_:
 2438|   314k|        : detail::specs_setter(specs), m_parse_ctx(parse_ctx), m_ctx(ctx)
 2439|   314k|    {
 2440|   314k|    }
impl.cpp:_ZN3scn2v412_GLOBAL__N_114format_handlerILb0EwE17on_visit_scan_argINS0_4impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEEEEvOT_NS0_14basic_scan_argISA_EE:
 2699|   307k|    {
 2700|   307k|        if (!get_error() || !arg) {
  ------------------
  |  Branch (2700:13): [True: 0, False: 307k]
  |  Branch (2700:13): [True: 0, False: 307k]
  |  Branch (2700:29): [True: 0, False: 307k]
  ------------------
 2701|      0|            SCN_UNLIKELY_ATTR
 2702|      0|            return;
 2703|      0|        }
 2704|       |
 2705|   307k|        auto r = arg.visit(SCN_FWD(visitor));
  ------------------
  |  | 1110|   307k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2706|   307k|        if (SCN_UNLIKELY(!r)) {
  ------------------
  |  | 1039|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 297k]
  |  |  ------------------
  ------------------
 2707|  10.5k|            on_error(r.error());
 2708|  10.5k|        }
 2709|   297k|        else {
 2710|   297k|            get_ctx().advance_to(*r);
 2711|   297k|        }
 2712|   307k|    }
impl.cpp:_ZN3scn2v46detail12_GLOBAL__N_116sync_after_vscanINS1_17basic_scan_bufferIwEEEENS0_13scan_expectedIlEERT_S7_:
 2897|   765k|{
 2898|   765k|    if (SCN_LIKELY(result)) {
  ------------------
  |  | 1038|   765k|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 742k, False: 22.9k]
  |  |  ------------------
  ------------------
 2899|   742k|        if (SCN_UNLIKELY(!source.sync(*result))) {
  ------------------
  |  | 1039|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 742k]
  |  |  ------------------
  ------------------
 2900|      0|            return detail::unexpected_scan_error(
 2901|      0|                scan_error::invalid_source_state,
 2902|      0|                "Failed to sync with underlying source");
 2903|      0|        }
 2904|   742k|    }
 2905|  22.9k|    else {
 2906|  22.9k|        if (SCN_UNLIKELY(!source.sync_all())) {
  ------------------
  |  | 1039|  22.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 22.9k]
  |  |  ------------------
  ------------------
 2907|      0|            return detail::unexpected_scan_error(
 2908|      0|                scan_error::invalid_source_state,
 2909|      0|                "Failed to sync with underlying source");
 2910|      0|        }
 2911|  22.9k|    }
 2912|   765k|    return result;
 2913|   765k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|  39.5k|{
 2844|  39.5k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  39.5k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  39.5k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIcEEcEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|  25.0k|{
 2844|  25.0k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|  25.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|  25.0k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS0_6detail16buffer_range_tagET0_EEEE:
 2843|   300k|{
 2844|   300k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|   300k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|   300k|}
impl.cpp:_ZN3scn2v412_GLOBAL__N_120vscan_value_internalIRNS0_6detail17basic_scan_bufferIwEEwEENS0_13scan_expectedIlEEOT_NS0_14basic_scan_argINS0_18basic_scan_contextINS3_16buffer_range_tagET0_EEEE:
 2843|   150k|{
 2844|   150k|    return scan_simple_single_argument(SCN_FWD(source), {}, arg);
  ------------------
  |  | 1110|   150k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 2845|   150k|}

_ZN3scn2v44impl19transcode_to_stringIcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1461|    883|{
 1462|    883|    static_assert(sizeof(SourceCharT) != sizeof(DestCharT));
 1463|       |
 1464|    883|    if constexpr (sizeof(SourceCharT) == 1) {
 1465|       |        if constexpr (sizeof(DestCharT) == 2) {
 1466|       |            std::u32string tmp;
 1467|       |            transcode_to_string_impl_to32(src, tmp);
 1468|       |            return transcode_to_string_impl_32to16<false>(
 1469|       |                std::u32string_view{tmp}, dest);
 1470|       |        }
 1471|    883|        else if constexpr (sizeof(DestCharT) == 4) {
 1472|    883|            return transcode_to_string_impl_to32(src, dest);
 1473|    883|        }
 1474|       |    }
 1475|       |    else if constexpr (sizeof(SourceCharT) == 2) {
 1476|       |        if constexpr (sizeof(DestCharT) == 1) {
 1477|       |            std::u32string tmp;
 1478|       |            transcode_to_string_impl_to32(src, tmp);
 1479|       |            return transcode_to_string_impl_32to8<false>(
 1480|       |                std::u32string_view{tmp}, dest);
 1481|       |        }
 1482|       |        else if constexpr (sizeof(DestCharT) == 4) {
 1483|       |            return trasncode_to_string_impl_to32(src, dest);
 1484|       |        }
 1485|       |    }
 1486|       |    else if constexpr (sizeof(SourceCharT) == 4) {
 1487|       |        if constexpr (sizeof(DestCharT) == 1) {
 1488|       |            return transcode_to_string_impl_32to8<false>(src, dest);
 1489|       |        }
 1490|       |        else if constexpr (sizeof(DestCharT) == 2) {
 1491|       |            return transcode_to_string_impl_32to16<false>(src, dest);
 1492|       |        }
 1493|       |    }
 1494|       |
 1495|    883|    SCN_EXPECT(false);
  ------------------
  |  | 1104|    883|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    883|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1496|      0|    SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 1497|    883|}
_ZN3scn2v44impl29transcode_to_string_impl_to32IcwEEvNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEERNS3_12basic_stringIT0_NS6_ISA_EENS3_9allocatorISA_EEEE:
 1354|    883|{
 1355|    883|    static_assert(sizeof(DestCharT) == 4);
 1356|       |
 1357|    883|    auto it = src.begin();
 1358|   283k|    while (it != src.end()) {
  ------------------
  |  Branch (1358:12): [True: 283k, False: 883]
  ------------------
 1359|   283k|        auto res = get_next_code_point(
 1360|   283k|            detail::make_string_view_from_iterators<SourceCharT>(it,
 1361|   283k|                                                                 src.end()));
 1362|   283k|        if (SCN_UNLIKELY(res.value == detail::invalid_code_point)) {
  ------------------
  |  | 1039|   283k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.01k, False: 280k]
  |  |  ------------------
  ------------------
 1363|  3.01k|            dest.push_back(DestCharT{0xfffd});
 1364|  3.01k|        }
 1365|   280k|        else {
 1366|   280k|            dest.push_back(res.value);
 1367|   280k|        }
 1368|   283k|        it = detail::make_string_view_iterator(src, res.iterator);
 1369|   283k|    }
 1370|    883|}
_ZN3scn2v44impl19get_next_code_pointIcEENS1_21iterator_value_resultINSt3__117basic_string_viewIT_NS4_11char_traitsIS6_EEE8iteratorEDiEES9_:
 1278|   815k|{
 1279|   815k|    SCN_EXPECT(!input.empty());
  ------------------
  |  | 1104|   815k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   815k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1280|       |
 1281|   815k|    const auto len = detail::code_point_length_by_starting_code_unit(input[0]);
 1282|   815k|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|   815k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 13.4k, False: 802k]
  |  |  ------------------
  ------------------
 1283|  13.4k|        return {get_start_for_next_code_point(input),
 1284|  13.4k|                detail::invalid_code_point};
 1285|  13.4k|    }
 1286|   802k|    if (SCN_UNLIKELY(len > input.size())) {
  ------------------
  |  | 1039|   802k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 25.4k, False: 776k]
  |  |  ------------------
  ------------------
 1287|  25.4k|        return {input.end(), detail::invalid_code_point};
 1288|  25.4k|    }
 1289|       |
 1290|   776k|    return {input.begin() + len,
 1291|   776k|            detail::decode_code_point_exhaustive(input.substr(0, len))};
 1292|   802k|}
_ZN3scn2v44impl29get_start_for_next_code_pointINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEEEDTclL_ZNS0_6ranges5beginEEclsr3stdE7declvalIRNS3_9add_constIT_E4typeEEEEESA_:
 1264|  13.4k|{
 1265|  13.4k|    auto it = input.begin();
 1266|  57.2k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 55.0k, False: 2.20k]
  ------------------
 1267|  55.0k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 11.2k, False: 43.7k]
  ------------------
 1268|  11.2k|            break;
 1269|  11.2k|        }
 1270|  55.0k|    }
 1271|  13.4k|    return it;
 1272|  13.4k|}
_ZN3scn2v44impl20reader_error_handler8on_errorEPKc:
 3077|  15.8k|    {
 3078|  15.8k|        SCN_UNLIKELY_ATTR
 3079|  15.8k|        m_msg = msg;
 3080|  15.8k|    }
_ZNK3scn2v44impl20reader_error_handlercvbEv:
 3082|  1.06M|    {
 3083|  1.06M|        return m_msg == nullptr;
 3084|  1.06M|    }
_ZN3scn2v44impl14is_ascii_spaceEc:
  457|  1.53M|{
  458|  1.53M|    return is_ascii_space_lookup[static_cast<size_t>(
  459|  1.53M|        static_cast<unsigned char>(ch))];
  460|  1.53M|}
_ZN3scn2v44impl13is_ascii_charEc:
  468|  38.7k|{
  469|  38.7k|    return static_cast<unsigned char>(ch) <= 127;
  470|  38.7k|}
_ZN3scn2v44impl13is_ascii_charEw:
  473|  14.1k|{
  474|  14.1k|#if WCHAR_MIN < 0
  475|  14.1k|    return ch >= 0 && ch <= 127;
  ------------------
  |  Branch (475:12): [True: 12.8k, False: 1.28k]
  |  Branch (475:23): [True: 8.97k, False: 3.87k]
  ------------------
  476|       |#else
  477|       |    return ch <= 127;
  478|       |#endif
  479|  14.1k|}
_ZN3scn2v44impl16has_byte_greaterEmh:
  538|   734k|{
  539|   734k|    return (word + ~0ull / 255 * (127 - n) | word) & ~0ull / 255 * 128;
  540|   734k|}
_ZN3scn2v44implntENS1_9eof_errorE:
  783|  4.11M|{
  784|  4.11M|    return e != eof_error::good;
  785|  4.11M|}
_ZN3scn2v44impl19make_eof_scan_errorENS1_9eof_errorE:
  797|  12.3k|{
  798|  12.3k|    SCN_EXPECT(err == eof_error::eof);
  ------------------
  |  | 1104|  12.3k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  12.3k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  799|  12.3k|    return scan_error{scan_error::end_of_input, "EOF"};
  800|  12.3k|}
_ZN3scn2v44impl27check_widths_for_arg_readerERKNS0_6detail12format_specsElll:
 6115|  1.01M|{
 6116|  1.01M|    if (specs.width != 0) {
  ------------------
  |  Branch (6116:9): [True: 0, False: 1.01M]
  ------------------
 6117|      0|        if (prefix_width + value_width + postfix_width < specs.width) {
  ------------------
  |  Branch (6117:13): [True: 0, False: 0]
  ------------------
 6118|      0|            return detail::unexpected_scan_error(
 6119|      0|                scan_error::length_too_short,
 6120|      0|                "Scanned value too narrow, width did not exceed what "
 6121|      0|                "was specified in the format string");
 6122|      0|        }
 6123|      0|    }
 6124|  1.01M|    if (specs.precision != 0) {
  ------------------
  |  Branch (6124:9): [True: 0, False: 1.01M]
  ------------------
 6125|       |        // Ensured by take_width_view
 6126|      0|        SCN_ENSURE(prefix_width + value_width + postfix_width <=
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 6127|      0|                   specs.precision);
 6128|      0|    }
 6129|  1.01M|    return {};
 6130|  1.01M|}
_ZNK3scn2v46ranges9next_impl2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EES9_E4typeES9_NS1_20incrementable_traitsIS9_E15difference_typeE:
  303|   391k|    {
  304|   391k|        ranges::advance(x, n);
  305|   391k|        return x;
  306|   391k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclIPKcEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeE:
  267|   391k|    {
  268|   391k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   391k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nIPKcEENSt3__19enable_ifIX22random_access_iteratorIT_EEvE4typeERSA_NS1_20incrementable_traitsISA_E15difference_typeENS0_6detail12priority_tagILm0EEE:
  150|   391k|    {
  151|   391k|        i += n;
  152|   391k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKcS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|   973k|    {
  108|   973k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   973k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKcS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|   973k|    {
   87|   973k|        return s - i;
   88|   973k|    }
_ZNK3scn2v46ranges6detail9distance_2fnclIPKwS7_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SA_EENS1_20incrementable_traitsISA_E15difference_typeEE4typeESA_SB_:
  107|  1.48M|    {
  108|  1.48M|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  1.48M|    }
_ZN3scn2v46ranges6detail9distance_2fn4implIPKwS7_EENSt3__19enable_ifIX18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISB_E15difference_typeEE4typeESB_SA_NS0_6detail12priority_tagILm0EEE:
   86|  1.48M|    {
   87|  1.48M|        return s - i;
   88|  1.48M|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5beginEv:
 3024|   259k|    {
 3025|   259k|        return m_current;
 3026|   259k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5beginEv:
 3024|  1.83M|    {
 3025|  1.83M|        return m_current;
 3026|  1.83M|    }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   128k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   128k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   128k|        auto beg = r.begin();
  991|   128k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 128k, False: 0]
  ------------------
  992|   128k|            return false;
  993|   128k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   128k|}
_ZNK3scn2v44impl12function_refIFbcES3_EclEc:
  762|  31.4k|    {
  763|  31.4k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  31.4k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  31.4k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  7.36k|        : m_fptr([](storage fn,
  743|  7.36k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.36k|              cvref<T> obj = *get<T>(fn);
  745|  7.36k|              if constexpr (std::is_void_v<R>) {
  746|  7.36k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.36k|              }
  748|  7.36k|              else {
  749|  7.36k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.36k|              }
  751|  7.36k|          }),
  752|  7.36k|          m_storage(std::addressof(f))
  753|  7.36k|    {
  754|  7.36k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEcE_clESK_c:
  743|  15.7k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  15.7k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  15.7k|              else {
  749|  15.7k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  15.7k|              }
  751|  15.7k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbcES8_EEEEEEDaNS3_7storageE:
  683|  15.7k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  15.7k|        else if constexpr (std::is_object_v<T>) {
  688|  15.7k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  15.7k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbcES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  7.36k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  7.36k|        {
  662|  7.36k|        }
_ZNK3scn2v44impl12function_refIFbDiES3_EclEDi:
  762|  75.9M|    {
  763|  75.9M|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  75.9M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  75.9M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  2.36M|        : m_fptr([](storage fn,
  743|  2.36M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.36M|              cvref<T> obj = *get<T>(fn);
  745|  2.36M|              if constexpr (std::is_void_v<R>) {
  746|  2.36M|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.36M|              }
  748|  2.36M|              else {
  749|  2.36M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.36M|              }
  751|  2.36M|          }),
  752|  2.36M|          m_storage(std::addressof(f))
  753|  2.36M|    {
  754|  2.36M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEDiE_clESK_Di:
  743|  5.84M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.84M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.84M|              else {
  749|  5.84M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.84M|              }
  751|  5.84M|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbDiES8_EEEEEEDaNS3_7storageE:
  683|  5.84M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  5.84M|        else if constexpr (std::is_object_v<T>) {
  688|  5.84M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.84M|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbDiES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  2.36M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  2.36M|        {
  662|  2.36M|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6143|  53.0k|    {
 6144|  53.0k|        const bool need_skipped_width =
 6145|  53.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 53.0k]
  |  Branch (6145:33): [True: 0, False: 53.0k]
  ------------------
 6146|  53.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|  53.0k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 53.0k]
  ------------------
 6150|  53.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 53.0k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|  53.0k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 53.0k, False: 0]
  |  Branch (6154:56): [True: 50.5k, False: 2.45k]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|  50.5k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 50.5k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   100k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|  50.5k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  50.5k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  50.5k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  50.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 948, False: 49.6k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    948|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    948|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    948|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    948|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    948|    }                                                  \
  |  |  |  | 3957|  50.5k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  49.6k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   100k|                            make_eof_scan_error));
 6165|       |
 6166|   100k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 49.6k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|  49.6k|            return result_type{it, 0};
 6174|   100k|        }
 6175|       |
 6176|  2.45k|        return result_type{rng.begin(), 0};
 6177|  53.0k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|  2.45k|{
 2108|  2.45k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  2.45k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  2.45k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  2.45k|    else {
 2079|  2.45k|        auto first = range.begin();
 2080|  5.31k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 5.24k, False: 76]
  ------------------
 2081|  5.24k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 2.38k, False: 2.86k]
  ------------------
 2082|  2.38k|                return first;
 2083|  2.38k|            }
 2084|  5.24k|        }
 2085|     76|        return first;
 2086|  2.45k|    }
 2087|  2.45k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|  49.4k|    {
  108|  49.4k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|  49.4k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIcE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|  49.4k|    {
   94|  49.4k|        iter_difference_t<I> counter{0};
   95|   524k|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 474k, False: 49.4k]
  ------------------
   96|   474k|            ++i;
   97|   474k|            ++counter;
   98|   474k|        }
   99|  49.4k|        return counter;
  100|  49.4k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|   200k|{
  951|   200k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|   200k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.19k, False: 198k]
  |  |  ------------------
  ------------------
  952|  2.19k|        return eof_error::eof;
  953|  2.19k|    }
  954|   198k|    return eof_error::good;
  955|   200k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  1.43M|{
  945|  1.43M|    return is_range_eof(r.begin(), r.end());
  946|  1.43M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  1.43M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  1.43M|    {
  938|  1.43M|        return begin == end;
  939|  1.43M|    }
  940|  1.43M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESA_EEEEDaOT_:
 1781|   124k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   124k|    else {
 1788|   124k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   124k|    }
 1790|   124k|}
_ZN3scn2v44impl24contiguous_range_factoryIcEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   124k|    {
 1636|   124k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   124k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   124k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorESC_EEEEvOT_:
 1719|   124k|    {
 1720|   124k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   124k|                           ranges::common_range<Range>) {
 1737|   124k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   124k|            auto end_seg = range.end().contiguous_segment();
 1739|   124k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   124k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.06k, False: 121k]
  |  |  ------------------
  ------------------
 1740|   124k|                             detail::to_address(end_seg.end()))) {
 1741|  3.06k|                auto& str = m_storage.emplace();
 1742|  3.06k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.06k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.06k|                m_view = string_view_type{str};
 1745|  3.06k|                return;
 1746|  3.06k|            }
 1747|       |
 1748|   121k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   121k|                                                            end_seg.data());
 1750|   121k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   124k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE4viewEv:
 1680|   244k|    {
 1681|   244k|        return m_view;
 1682|   244k|    }
_ZN3scn2v44impl24contiguous_range_factoryIcED2Ev:
 1670|   124k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6185|  48.9k|    {
 6186|  48.9k|        const bool need_skipped_width =
 6187|  48.9k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 48.9k]
  |  Branch (6187:33): [True: 0, False: 48.9k]
  ------------------
 6188|  48.9k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|  48.9k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 48.9k]
  ------------------
 6191|  48.9k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 48.9k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|  48.9k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 48.9k, False: 0]
  ------------------
 6200|  48.9k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 652, False: 48.3k]
  ------------------
 6201|  48.9k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 652]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|    652|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 652]
  ------------------
 6203|    652|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|  48.9k|        return result_type{rng.begin(), 0};
 6225|  48.9k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_9eof_errorET_:
  950|   315k|{
  951|   315k|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|   315k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.29k, False: 312k]
  |  |  ------------------
  ------------------
  952|  3.29k|        return eof_error::eof;
  953|  3.29k|    }
  954|   312k|    return eof_error::good;
  955|   315k|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEbT_:
  944|   315k|{
  945|   315k|    return is_range_eof(r.begin(), r.end());
  946|   315k|}
_ZN3scn2v44impl12is_range_eofIPKcS4_EEbT_T0_:
  928|   315k|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|   315k|    {
  938|   315k|        return begin == end;
  939|   315k|    }
  940|   315k|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   195k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   195k|                  ranges::sized_range<Range>) {
 1785|   195k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   195k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   195k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2INS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|   195k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   195k|    {
 1589|   195k|    }
_ZNK3scn2v44impl19string_view_wrapperIcE4viewEv:
 1601|  1.07M|    {
 1602|  1.07M|        return sv;
 1603|  1.07M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|  4.91k|{
 2108|  4.91k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  4.91k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  4.91k|{
 2075|  4.91k|    if constexpr (ranges::common_range<Range>) {
 2076|  4.91k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|  4.91k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|   196k|{
 3098|   196k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 196k, False: 0]
  ------------------
 3099|   196k|        auto it = read_while_classic_space(range);
 3100|   196k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   196k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   196k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.15k, False: 194k]
  |  |  ------------------
  ------------------
 3102|  2.15k|            return unexpected(e);
 3103|  2.15k|        }
 3104|       |
 3105|   194k|        return it;
 3106|   196k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   196k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|   196k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|   196k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|   196k|        auto buf = make_contiguous_buffer(range);
 2253|   196k|        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|   196k|        return ranges::next(range.begin(),
 2255|   196k|                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|       |    else {
 2258|       |        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|       |        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|       |            return detail::is_cp_space(cp);
 2271|       |        });
 2272|       |    }
 2273|   196k|}
_ZN3scn2v44impl22make_contiguous_bufferIRNS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDaOT_:
 1781|   391k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|   391k|                  ranges::sized_range<Range>) {
 1785|   391k|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|   391k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|   391k|}
_ZN3scn2v44impl19string_view_wrapperIcEC2IRNS0_6ranges6detail9subrange_8subrangeIPKcSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISF_Esr6rangesE11sized_rangeISF_EEvE4typeELPv0EEEOSF_:
 1587|   391k|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|   391k|    {
 1589|   391k|    }
_ZNK3scn2v46ranges9next_impl2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EESB_E4typeESB_NS1_20incrementable_traitsISB_E15difference_typeE:
  303|  13.8k|    {
  304|  13.8k|        ranges::advance(x, n);
  305|  13.8k|        return x;
  306|  13.8k|    }
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIX24input_or_output_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeE:
  267|   248k|    {
  268|   248k|        fn::impl_i_n(i, n, detail::priority_tag<1>{});
  269|   248k|    }
_ZN3scn2v46ranges6detail8advance_2fn8impl_i_nINS0_6detail17basic_scan_bufferIcE16forward_iteratorEEENSt3__19enable_ifIXnt22bidirectional_iteratorIT_EEvE4typeERSC_NS1_20incrementable_traitsISC_E15difference_typeENS6_12priority_tagILm0EEE:
  180|   248k|    {
  181|   453k|        while (n-- > iter_difference_t<I>{0}) {
  ------------------
  |  Branch (181:16): [True: 205k, False: 248k]
  ------------------
  182|   205k|            ++i;
  183|   205k|        }
  184|   248k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIcE23stores_allocated_stringEv:
 1685|   124k|    {
 1686|   124k|        return m_storage.has_value();
 1687|   124k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIcE20get_allocated_stringEv:
 1690|  1.89k|    {
 1691|  1.89k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|  1.89k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.89k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.89k|        return *m_storage;
 1693|  1.89k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 6295|  54.7k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|  54.7k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|  54.7k|            auto rd = make_reader<T, char_type>();
 6306|  54.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  54.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  54.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.76k, False: 53.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.76k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.76k|    }
  ------------------
 6307|       |
 6308|  53.0k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 53.0k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|  53.0k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|  53.0k|                return impl(rd, range, value);
 6311|  53.0k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  54.7k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEcEEDav:
 5905|   233k|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|       |                       std::is_same_v<T, std::wstring_view>) {
 5920|       |        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|   233k|                       std::is_same_v<T, std::wstring>) {
 5924|   233k|        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|   233k|}
_ZN3scn2v44impl13string_readerIcEC2Ev:
 5299|   336k|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11check_specsERKNS0_6detail12format_specsE:
 3187|   142k|    {
 3188|   142k|        reader_error_handler eh{};
 3189|   142k|        get_derived().check_specs_impl(specs, eh);
 3190|   142k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   142k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 5.29k, False: 137k]
  |  |  ------------------
  ------------------
 3191|  5.29k|            return detail::unexpected_scan_error(
 3192|  5.29k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  5.29k|        }
 3194|   137k|        return {};
 3195|   142k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIcEEcE11get_derivedEv:
 3199|   142k|    {
 3200|   142k|        return static_cast<Derived&>(*this);
 3201|   142k|    }
_ZN3scn2v44impl13string_readerIcE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5303|   142k|    {
 5304|   142k|        detail::check_string_type_specs(specs, eh);
 5305|       |
 5306|   142k|        SCN_GCC_PUSH
 5307|   142k|        SCN_GCC_IGNORE("-Wswitch")
 5308|   142k|        SCN_GCC_IGNORE("-Wswitch-default")
 5309|       |
 5310|   142k|        SCN_CLANG_PUSH
 5311|   142k|        SCN_CLANG_IGNORE("-Wswitch")
 5312|   142k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5313|       |
 5314|   142k|        switch (specs.type) {
  ------------------
  |  Branch (5314:17): [True: 0, False: 142k]
  ------------------
 5315|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5315:13): [True: 0, False: 142k]
  ------------------
 5316|      0|                m_type = reader_type::word;
 5317|      0|                break;
 5318|       |
 5319|   129k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5319:13): [True: 129k, False: 12.6k]
  ------------------
 5320|   129k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5320:21): [True: 0, False: 129k]
  ------------------
 5321|   129k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5321:21): [True: 0, False: 129k]
  ------------------
 5322|      0|                    m_type = reader_type::custom_word;
 5323|      0|                }
 5324|   129k|                else {
 5325|   129k|                    m_type = reader_type::word;
 5326|   129k|                }
 5327|   129k|                break;
 5328|      0|            }
 5329|       |
 5330|  5.29k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5330:13): [True: 5.29k, False: 137k]
  ------------------
 5331|  5.29k|                m_type = reader_type::character;
 5332|  5.29k|                break;
 5333|       |
 5334|  7.36k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5334:13): [True: 7.36k, False: 134k]
  ------------------
 5335|  7.36k|                m_type = reader_type::character_set;
 5336|  7.36k|                break;
 5337|       |
 5338|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5338:13): [True: 0, False: 142k]
  ------------------
 5339|      0|                m_type = reader_type::regex;
 5340|      0|                break;
 5341|       |
 5342|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5342:13): [True: 0, False: 142k]
  ------------------
 5343|      0|                m_type = reader_type::regex_escaped;
 5344|      0|                break;
 5345|   142k|        }
 5346|       |
 5347|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5348|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5349|   142k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6230|  53.0k|    {
 6231|  53.0k|        const bool need_skipped_width =
 6232|  53.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 53.0k]
  |  Branch (6232:33): [True: 0, False: 53.0k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  53.0k|        auto it = rng.begin();
 6236|  53.0k|        std::ptrdiff_t prefix_width = 0;
 6237|  53.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 53.0k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  53.0k|        else {
 6245|  53.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  53.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  53.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  53.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  53.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 948, False: 52.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    948|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    948|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    948|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    948|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    948|    }                                                  \
  |  |  |  | 3957|  53.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  52.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  52.0k|            std::tie(it, prefix_width) = prefix_result;
 6247|  52.0k|        }
 6248|  52.0k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  52.0k|        std::ptrdiff_t value_width = 0;
 6252|  52.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 52.0k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  52.0k|        else {
 6268|  52.0k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  52.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  52.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  52.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.58k, False: 49.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  2.58k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  2.58k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.58k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.58k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  2.58k|    }                                                  \
  |  | 3957|  52.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  52.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  49.4k|                                             specs, value, loc));
 6270|       |
 6271|  49.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 49.4k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  49.4k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  49.4k|        std::ptrdiff_t postfix_width = 0;
 6280|  49.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 48.9k, False: 500]
  ------------------
 6281|  48.9k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  48.9k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  48.9k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  48.9k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  48.9k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 48.9k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  48.9k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  48.9k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  48.9k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  48.9k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  48.9k|                                 value_width));
 6285|  48.9k|            std::tie(it, postfix_width) = postfix_result;
 6286|  48.9k|        }
 6287|       |
 6288|  49.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  49.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  49.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 49.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  49.4k|            specs, prefix_width, value_width, postfix_width));
 6290|  49.4k|        return it;
 6291|  49.4k|    }
_ZNK3scn2v44impl13string_readerIcE19skip_ws_before_readEv:
 5352|   456k|    {
 5353|   456k|        return m_type == reader_type::word;
 5354|   456k|    }
_ZN3scn2v44impl16validate_unicodeIcEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|   320k|{
 1242|   320k|    auto it = src.begin();
 1243|  2.13M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 1.82M, False: 312k]
  ------------------
 1244|  1.82M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  1.82M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 4.64k, False: 1.81M]
  ------------------
 1246|  4.64k|            return false;
 1247|  4.64k|        }
 1248|  1.81M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 802, False: 1.81M]
  ------------------
 1249|    802|            return false;
 1250|    802|        }
 1251|  1.81M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  1.81M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  1.81M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 2.30k, False: 1.81M]
  ------------------
 1254|  2.30k|            return false;
 1255|  2.30k|        }
 1256|  1.81M|        it += len;
 1257|  1.81M|    }
 1258|   312k|    return true;
 1259|   320k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|   122k|{
 3140|   122k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|   122k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3141:13): [True: 1.89k, False: 120k]
  ------------------
 3142|  1.89k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1108|  1.89k|    static_cast<    \
  |  | 1109|  1.89k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3143|  1.89k|        }
 3144|   120k|        else {
 3145|   120k|            dest.assign(source.view());
 3146|   120k|        }
 3147|       |    }
 3148|       |    else {
 3149|       |        return transcode_impl(source.view(), dest);
 3150|       |    }
 3151|       |
 3152|   122k|    return {};
 3153|   122k|}
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helper15handle_nonasciiEv:
 5200|  7.36k|        {
 5201|  7.36k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5201:17): [True: 7.36k, False: 0]
  ------------------
 5202|  7.36k|                return {};
 5203|  7.36k|            }
 5204|       |
 5205|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5206|      0|            auto it = detail::to_address(charset_string.begin());
 5207|      0|            auto set = detail::parse_presentation_set(
 5208|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5209|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5210|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5211|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5212|       |
 5213|      0|            std::sort(nonascii.extra_ranges.begin(),
 5214|      0|                      nonascii.extra_ranges.end());
 5215|      0|            return {};
 5216|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIcE12specs_helper23is_char_set_in_literalsEc:
 5173|  14.0k|        {
 5174|  14.0k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1104|  14.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  14.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5175|  14.0k|            const auto val =
 5176|  14.0k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5177|  14.0k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5178|  14.0k|                    (val % 8)) &
 5179|  14.0k|                   1u;
 5180|  14.0k|        }
_ZNK3scn2v44impl25character_set_reader_implIcE20read_source_callback13on_ascii_onlyEc:
 5224|  15.7k|        {
 5225|  15.7k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5225:17): [True: 1.67k, False: 14.0k]
  ------------------
 5226|  1.67k|                return false;
 5227|  1.67k|            }
 5228|       |
 5229|  14.0k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5230|  15.7k|        }
_ZN3scn2v44impl25character_set_reader_implIcE12specs_helperC2ERKNS0_6detail12format_specsE:
 5170|  7.36k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5370|  52.0k|    {
 5371|  52.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  52.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|  52.0k|        return read_impl(range, specs, value);
 5373|  52.0k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5388|  52.0k|    {
 5389|  52.0k|        SCN_CLANG_PUSH
 5390|  52.0k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|  52.0k|        switch (m_type) {
 5393|  49.6k|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 49.6k, False: 2.45k]
  ------------------
 5394|  49.6k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 0, False: 52.0k]
  ------------------
 5397|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|      0|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 52.0k]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|  2.45k|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 2.45k, False: 49.6k]
  ------------------
 5404|  2.45k|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|  2.45k|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 52.0k]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 52.0k]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 52.0k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|  52.0k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|  52.0k|        }
 5425|       |
 5426|  52.0k|        SCN_CLANG_POP
 5427|  52.0k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4921|   123k|    {
 4922|   123k|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|   123k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEESA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4855|   123k|{
 4856|   123k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|   123k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|   123k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 2.21k, False: 121k]
  ------------------
 4860|  2.21k|        return detail::unexpected_scan_error(
 4861|  2.21k|            scan_error::invalid_scanned_value,
 4862|  2.21k|            "Invalid encoding in scanned string");
 4863|  2.21k|    }
 4864|       |
 4865|   121k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|   121k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   121k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 121k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|   121k|    return SCN_MOVE(result);
  ------------------
  |  | 1108|   121k|    static_cast<    \
  |  | 1109|   121k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|   121k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2219|   123k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|   123k|    else {
 2229|   123k|        auto it = range.begin();
 2230|       |
 2231|   123k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|   123k|            auto seg = get_contiguous_beginning(range);
 2233|   123k|            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|   123k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2234:17): [True: 0, False: 123k]
  ------------------
 2235|      0|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|      0|            }
 2237|   123k|            ranges::advance(it, seg.size());
 2238|   123k|        }
 2239|       |
 2240|      0|        return read_until_code_point(
 2241|   123k|            ranges::subrange{it, range.end()},
 2242|   123k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|   123k|    }
 2244|   123k|}
_ZN3scn2v44impl24get_contiguous_beginningINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDaT_:
 1039|   248k|{
 1040|       |    if constexpr (ranges::contiguous_range<Range> &&
 1041|       |                  ranges::sized_range<Range>) {
 1042|       |        return r;
 1043|       |    }
 1044|       |    else if constexpr (std::is_same_v<
 1045|       |                           ranges::const_iterator_t<Range>,
 1046|       |                           typename detail::basic_scan_buffer<
 1047|   248k|                               detail::char_t<Range>>::forward_iterator>) {
 1048|       |        if constexpr (ranges::common_range<Range>) {
 1049|       |            auto seg = r.begin().contiguous_segment();
 1050|       |            auto dist =
 1051|       |                static_cast<size_t>(ranges::distance(r.begin(), r.end()));
 1052|       |            return seg.substr(0, std::min(seg.size(), dist));
 1053|       |        }
 1054|   248k|        else {
 1055|   248k|            return r.begin().contiguous_segment();
 1056|   248k|        }
 1057|       |    }
 1058|       |    else {
 1059|       |        return std::basic_string_view<detail::char_t<Range>>{};
 1060|       |    }
 1061|   248k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|   234k|{
 2193|   234k|    auto it = range.begin();
 2194|  1.24M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 1.23M, False: 3.89k]
  ------------------
 2195|  1.23M|        const auto val =
 2196|  1.23M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  1.23M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  1.23M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 1.22M, False: 16.5k]
  |  |  ------------------
  ------------------
 2198|  1.22M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  1.22M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  1.22M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 231k, False: 991k]
  ------------------
 2201|   231k|                return it;
 2202|   231k|            }
 2203|  1.22M|        }
 2204|  1.00M|        it = val.iterator;
 2205|  1.00M|    }
 2206|       |
 2207|  3.89k|    return it;
 2208|   234k|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  1.23M|{
 1998|  1.23M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  1.23M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.23M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  1.23M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  1.23M|    auto it = range.begin();
 2002|  1.23M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  1.23M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  1.23M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 16.5k, False: 1.22M]
  |  |  ------------------
  ------------------
 2005|  16.5k|        ++it;
 2006|  16.5k|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|  16.5k|        return {it, {}};
 2008|  16.5k|    }
 2009|       |
 2010|  1.22M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 1.15M, False: 70.6k]
  ------------------
 2011|  1.15M|        ++it;
 2012|  1.15M|        return {it, string_type(1, *range.begin())};
 2013|  1.15M|    }
 2014|       |
 2015|  70.6k|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|  70.6k|    return {it, string_type{range.begin(), it}};
 2017|  1.22M|}
_ZN3scn2v44impl29get_start_for_next_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 1264|  16.5k|{
 1265|  16.5k|    auto it = input.begin();
 1266|  33.1k|    for (; it != input.end(); ++it) {
  ------------------
  |  Branch (1266:12): [True: 32.4k, False: 607]
  ------------------
 1267|  32.4k|        if (detail::code_point_length_by_starting_code_unit(*it) != 0) {
  ------------------
  |  Branch (1267:13): [True: 15.9k, False: 16.5k]
  ------------------
 1268|  15.9k|            break;
 1269|  15.9k|        }
 1270|  32.4k|    }
 1271|  16.5k|    return it;
 1272|  16.5k|}
_ZNK3scn2v46ranges6detail8advance_2fnclINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  282|  70.6k|    {
  283|  70.6k|        return n - fn::impl_i_n_s(i, n, bound);
  284|  70.6k|    }
_ZN3scn2v46ranges6detail8advance_2fn10impl_i_n_sINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS1_18default_sentinel_tEEENSt3__19enable_ifIXaant22bidirectional_iteratorIT_Ent18sized_sentinel_forIT0_SD_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeERSD_SH_SE_:
  251|  70.6k|    {
  252|  70.6k|        constexpr iter_difference_t<I> zero{0};
  253|  70.6k|        iter_difference_t<I> counter{0};
  254|       |
  255|   261k|        while (n-- > zero && i != bound) {
  ------------------
  |  Branch (255:16): [True: 191k, False: 70.1k]
  |  Branch (255:30): [True: 190k, False: 474]
  ------------------
  256|   190k|            ++i;
  257|   190k|            ++counter;
  258|   190k|        }
  259|       |
  260|  70.6k|        return counter;
  261|  70.6k|    }
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIcE16forward_iteratorEcE8is_validEv:
 1988|  1.23M|    {
 1989|  1.23M|        return !codepoint.empty();
 1990|  1.23M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   123k|        : m_fptr([](storage fn,
  743|   123k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   123k|              cvref<T> obj = *get<T>(fn);
  745|   123k|              if constexpr (std::is_void_v<R>) {
  746|   123k|                  obj(static_cast<decltype(args)>(args)...);
  747|   123k|              }
  748|   123k|              else {
  749|   123k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   123k|              }
  751|   123k|          }),
  752|   123k|          m_storage(std::addressof(f))
  753|   123k|    {
  754|   123k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   744k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   744k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   744k|              else {
  749|   744k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   744k|              }
  751|   744k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   744k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   744k|        else if constexpr (std::is_object_v<T>) {
  688|   744k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   744k|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2242|   744k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   123k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   123k|        {
  662|   123k|        }
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5145|  2.45k|    {
 5146|  2.45k|        auto it = read_source_impl(range, {specs});
 5147|  2.45k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.76k, False: 690]
  |  |  ------------------
  ------------------
 5148|  1.76k|            return unexpected(it.error());
 5149|  1.76k|        }
 5150|       |
 5151|    690|        return read_string_impl(range, *it, value);
 5152|  2.45k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5248|  2.45k|    {
 5249|  2.45k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5250|  2.45k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5251|       |
 5252|  2.45k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  2.45k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 2.45k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5253|       |
 5254|  2.45k|        read_source_callback cb_wrapper{helper};
 5255|       |
 5256|  2.45k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5256:13): [True: 0, False: 2.45k]
  ------------------
 5257|      0|            const auto cb = [&](char32_t cp) {
 5258|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|      0|            };
 5260|       |
 5261|      0|            if (is_inverted) {
  ------------------
  |  Branch (5261:17): [True: 0, False: 0]
  ------------------
 5262|      0|                auto it = read_until_code_point(range, cb);
 5263|      0|                return check_nonempty(it, range);
 5264|      0|            }
 5265|      0|            auto it = read_while_code_point(range, cb);
 5266|      0|            return check_nonempty(it, range);
 5267|      0|        }
 5268|       |
 5269|  2.45k|        const auto cb = [&](SourceCharT ch) {
 5270|  2.45k|            return cb_wrapper.on_ascii_only(ch);
 5271|  2.45k|        };
 5272|       |
 5273|  2.45k|        if (is_inverted) {
  ------------------
  |  Branch (5273:13): [True: 0, False: 2.45k]
  ------------------
 5274|      0|            auto it = read_until_code_unit(range, cb);
 5275|      0|            return check_nonempty(it, range);
 5276|      0|        }
 5277|  2.45k|        auto it = read_while_code_unit(range, cb);
 5278|  2.45k|        return check_nonempty(it, range);
 5279|  2.45k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5284|  2.45k|    {
 5285|  2.45k|        if (it == range.begin()) {
  ------------------
  |  Branch (5285:13): [True: 1.76k, False: 690]
  ------------------
 5286|  1.76k|            return detail::unexpected_scan_error(
 5287|  1.76k|                scan_error::invalid_scanned_value,
 5288|  1.76k|                "No characters matched in [character set]");
 5289|  1.76k|        }
 5290|       |
 5291|    690|        return it;
 5292|  2.45k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   111k|{
 2214|   111k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   111k|}
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  2.45k|        : m_fptr([](storage fn,
  743|  2.45k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  2.45k|              cvref<T> obj = *get<T>(fn);
  745|  2.45k|              if constexpr (std::is_void_v<R>) {
  746|  2.45k|                  obj(static_cast<decltype(args)>(args)...);
  747|  2.45k|              }
  748|  2.45k|              else {
  749|  2.45k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  2.45k|              }
  751|  2.45k|          }),
  752|  2.45k|          m_storage(std::addressof(f))
  753|  2.45k|    {
  754|  2.45k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEcE_clES16_c:
  743|  5.24k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  5.24k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  5.24k|              else {
  749|  5.24k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  5.24k|              }
  751|  5.24k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  5.24k|    {
  684|  5.24k|        if constexpr (std::is_const_v<T>) {
  685|  5.24k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  5.24k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlcE_clEc:
 5269|  5.24k|        const auto cb = [&](SourceCharT ch) {
 5270|  5.24k|            return cb_wrapper.on_ascii_only(ch);
 5271|  5.24k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlcE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  2.45k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  2.45k|        {
  667|  2.45k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEERSA_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4855|    690|{
 4856|    690|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    690|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    690|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 0, False: 690]
  ------------------
 4860|      0|        return detail::unexpected_scan_error(
 4861|      0|            scan_error::invalid_scanned_value,
 4862|      0|            "Invalid encoding in scanned string");
 4863|      0|    }
 4864|       |
 4865|    690|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    690|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 690]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    690|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    690|    static_cast<    \
  |  | 1109|    690|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    690|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5370|  41.3k|    {
 5371|  41.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  41.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|  41.3k|        return read_impl(range, specs, value);
 5373|  41.3k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5388|  41.3k|    {
 5389|  41.3k|        SCN_CLANG_PUSH
 5390|  41.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|  41.3k|        switch (m_type) {
 5393|  38.9k|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 38.9k, False: 2.45k]
  ------------------
 5394|  38.9k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 0, False: 41.3k]
  ------------------
 5397|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|      0|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 41.3k]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|  2.45k|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 2.45k, False: 38.9k]
  ------------------
 5404|  2.45k|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|  2.45k|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 41.3k]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 41.3k]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 41.3k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|  41.3k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|  41.3k|        }
 5425|       |
 5426|  41.3k|        SCN_CLANG_POP
 5427|  41.3k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4921|  97.2k|    {
 4922|  97.2k|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|  97.2k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4855|  97.2k|{
 4856|  97.2k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|  97.2k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|  97.2k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 2.77k, False: 94.5k]
  ------------------
 4860|  2.77k|        return detail::unexpected_scan_error(
 4861|  2.77k|            scan_error::invalid_scanned_value,
 4862|  2.77k|            "Invalid encoding in scanned string");
 4863|  2.77k|    }
 4864|       |
 4865|  94.5k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|  94.5k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  94.5k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 94.5k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|  94.5k|    return SCN_MOVE(result);
  ------------------
  |  | 1108|  94.5k|    static_cast<    \
  |  | 1109|  94.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|  94.5k|}
_ZN3scn2v44impl22transcode_if_necessaryIccEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|  95.1k|{
 3160|  95.1k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|  95.1k|        dest.assign(source.view());
 3162|       |    }
 3163|       |    else {
 3164|       |        return transcode_impl(source.view(), dest);
 3165|       |    }
 3166|       |
 3167|  95.1k|    return {};
 3168|  95.1k|}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2219|   194k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|   194k|                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|   194k|        auto buf = make_contiguous_buffer(range);
 2224|   194k|        auto it = find_classic_space_narrow_fast(buf.view());
 2225|   194k|        return ranges::next(range.begin(),
 2226|   194k|                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|       |    else {
 2229|       |        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|       |        return read_until_code_point(
 2241|       |            ranges::subrange{it, range.end()},
 2242|       |            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|       |    }
 2244|   194k|}
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5145|  2.45k|    {
 5146|  2.45k|        auto it = read_source_impl(range, {specs});
 5147|  2.45k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.76k, False: 690]
  |  |  ------------------
  ------------------
 5148|  1.76k|            return unexpected(it.error());
 5149|  1.76k|        }
 5150|       |
 5151|    690|        return read_string_impl(range, *it, value);
 5152|  2.45k|    }
_ZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5248|  4.91k|    {
 5249|  4.91k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5250|  4.91k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5251|       |
 5252|  4.91k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  4.91k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  4.91k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 4.91k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5253|       |
 5254|  4.91k|        read_source_callback cb_wrapper{helper};
 5255|       |
 5256|  4.91k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5256:13): [True: 0, False: 4.91k]
  ------------------
 5257|      0|            const auto cb = [&](char32_t cp) {
 5258|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|      0|            };
 5260|       |
 5261|      0|            if (is_inverted) {
  ------------------
  |  Branch (5261:17): [True: 0, False: 0]
  ------------------
 5262|      0|                auto it = read_until_code_point(range, cb);
 5263|      0|                return check_nonempty(it, range);
 5264|      0|            }
 5265|      0|            auto it = read_while_code_point(range, cb);
 5266|      0|            return check_nonempty(it, range);
 5267|      0|        }
 5268|       |
 5269|  4.91k|        const auto cb = [&](SourceCharT ch) {
 5270|  4.91k|            return cb_wrapper.on_ascii_only(ch);
 5271|  4.91k|        };
 5272|       |
 5273|  4.91k|        if (is_inverted) {
  ------------------
  |  Branch (5273:13): [True: 0, False: 4.91k]
  ------------------
 5274|      0|            auto it = read_until_code_unit(range, cb);
 5275|      0|            return check_nonempty(it, range);
 5276|      0|        }
 5277|  4.91k|        auto it = read_while_code_unit(range, cb);
 5278|  4.91k|        return check_nonempty(it, range);
 5279|  4.91k|    }
_ZN3scn2v44impl25character_set_reader_implIcE14check_nonemptyIPKcNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5284|  4.91k|    {
 5285|  4.91k|        if (it == range.begin()) {
  ------------------
  |  Branch (5285:13): [True: 3.53k, False: 1.38k]
  ------------------
 5286|  3.53k|            return detail::unexpected_scan_error(
 5287|  3.53k|                scan_error::invalid_scanned_value,
 5288|  3.53k|                "No characters matched in [character set]");
 5289|  3.53k|        }
 5290|       |
 5291|  1.38k|        return it;
 5292|  4.91k|    }
_ZN3scn2v44impl12function_refIFbcES3_EC2IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  4.91k|        : m_fptr([](storage fn,
  743|  4.91k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.91k|              cvref<T> obj = *get<T>(fn);
  745|  4.91k|              if constexpr (std::is_void_v<R>) {
  746|  4.91k|                  obj(static_cast<decltype(args)>(args)...);
  747|  4.91k|              }
  748|  4.91k|              else {
  749|  4.91k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.91k|              }
  751|  4.91k|          }),
  752|  4.91k|          m_storage(std::addressof(f))
  753|  4.91k|    {
  754|  4.91k|    }
_ZZN3scn2v44impl12function_refIFbcES3_EC1IRKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEcE_clES13_c:
  743|  10.4k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.4k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  10.4k|              else {
  749|  10.4k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.4k|              }
  751|  10.4k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlcE_EEDaNS3_7storageE:
  683|  10.4k|    {
  684|  10.4k|        if constexpr (std::is_const_v<T>) {
  685|  10.4k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  10.4k|    }
_ZZNK3scn2v44impl25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlcE_clEc:
 5269|  10.4k|        const auto cb = [&](SourceCharT ch) {
 5270|  10.4k|            return cb_wrapper.on_ascii_only(ch);
 5271|  10.4k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIcE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKcSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlcE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  4.91k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  4.91k|        {
  667|  4.91k|        }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4855|    690|{
 4856|    690|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    690|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    690|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 0, False: 690]
  ------------------
 4860|      0|        return detail::unexpected_scan_error(
 4861|      0|            scan_error::invalid_scanned_value,
 4862|      0|            "Invalid encoding in scanned string");
 4863|      0|    }
 4864|       |
 4865|    690|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    690|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    690|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 690]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    690|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    690|    static_cast<    \
  |  | 1109|    690|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    690|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIcNS3_11char_traitsIcEEEEcEEDav:
 5905|   103k|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|   103k|                       std::is_same_v<T, std::wstring_view>) {
 5920|   103k|        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|       |                       std::is_same_v<T, std::wstring>) {
 5924|       |        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|   103k|}
_ZN3scn2v44impl13string_readerIcE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5370|  41.3k|    {
 5371|  41.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  41.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|  41.3k|        return read_impl(range, specs, value);
 5373|  41.3k|    }
_ZN3scn2v44impl13string_readerIcE9read_implINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5388|  41.3k|    {
 5389|  41.3k|        SCN_CLANG_PUSH
 5390|  41.3k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|  41.3k|        switch (m_type) {
 5393|  38.9k|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 38.9k, False: 2.45k]
  ------------------
 5394|  38.9k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 0, False: 41.3k]
  ------------------
 5397|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|      0|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 41.3k]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|  2.45k|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 2.45k, False: 38.9k]
  ------------------
 5404|  2.45k|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|  2.45k|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 41.3k]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 41.3k]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 41.3k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|  41.3k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|  41.3k|        }
 5425|       |
 5426|  41.3k|        SCN_CLANG_POP
 5427|  41.3k|    }
_ZN3scn2v44impl16word_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4928|  97.2k|    {
 4929|  97.2k|        return read_string_view_impl(range, read_until_classic_space(range),
 4930|  97.2k|                                     value);
 4931|  97.2k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4874|  97.2k|{
 4875|  97.2k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|  97.2k|    auto src = [&]() {
 4878|  97.2k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|  97.2k|            return make_contiguous_buffer(
 4880|  97.2k|                ranges::subrange{range.begin().base(), result.base()});
 4881|  97.2k|        }
 4882|  97.2k|        else {
 4883|  97.2k|            return make_contiguous_buffer(
 4884|  97.2k|                ranges::subrange{range.begin(), result});
 4885|  97.2k|        }
 4886|  97.2k|    }();
 4887|  97.2k|    using src_type = decltype(src);
 4888|       |
 4889|  97.2k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|  97.2k|    else {
 4902|  97.2k|        const auto view = src.view();
 4903|  97.2k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|  97.2k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 2.77k, False: 94.5k]
  ------------------
 4906|  2.77k|            return detail::unexpected_scan_error(
 4907|  2.77k|                scan_error::invalid_scanned_value,
 4908|  2.77k|                "Invalid encoding in scanned string_view");
 4909|  2.77k|        }
 4910|       |
 4911|  94.5k|        return SCN_MOVE(result);
  ------------------
  |  | 1108|  94.5k|    static_cast<    \
  |  | 1109|  94.5k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|  97.2k|    }
 4913|  97.2k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EES8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4877|  97.2k|    auto src = [&]() {
 4878|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|       |            return make_contiguous_buffer(
 4880|       |                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|  97.2k|        else {
 4883|  97.2k|            return make_contiguous_buffer(
 4884|  97.2k|                ranges::subrange{range.begin(), result});
 4885|  97.2k|        }
 4886|  97.2k|    }();
_ZN3scn2v44impl25character_set_reader_implIcE4readINS0_6ranges6detail9subrange_8subrangeIPKcSA_EEcEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5159|  2.45k|    {
 5160|  2.45k|        auto it = read_source_impl(range, {specs});
 5161|  2.45k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  2.45k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.76k, False: 690]
  |  |  ------------------
  ------------------
 5162|  1.76k|            return unexpected(it.error());
 5163|  1.76k|        }
 5164|       |
 5165|    690|        return read_string_view_impl(range, *it, value);
 5166|  2.45k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4874|    690|{
 4875|    690|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|    690|    auto src = [&]() {
 4878|    690|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    690|            return make_contiguous_buffer(
 4880|    690|                ranges::subrange{range.begin().base(), result.base()});
 4881|    690|        }
 4882|    690|        else {
 4883|    690|            return make_contiguous_buffer(
 4884|    690|                ranges::subrange{range.begin(), result});
 4885|    690|        }
 4886|    690|    }();
 4887|    690|    using src_type = decltype(src);
 4888|       |
 4889|    690|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|    690|    else {
 4902|    690|        const auto view = src.view();
 4903|    690|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|    690|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 0, False: 690]
  ------------------
 4906|      0|            return detail::unexpected_scan_error(
 4907|      0|                scan_error::invalid_scanned_value,
 4908|      0|                "Invalid encoding in scanned string_view");
 4909|      0|        }
 4910|       |
 4911|    690|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    690|    static_cast<    \
  |  | 1109|    690|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|    690|    }
 4913|    690|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKcS8_EERS8_cEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4877|    690|    auto src = [&]() {
 4878|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|       |            return make_contiguous_buffer(
 4880|       |                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|    690|        else {
 4883|    690|            return make_contiguous_buffer(
 4884|    690|                ranges::subrange{range.begin(), result});
 4885|    690|        }
 4886|    690|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   125k|{
 3098|   125k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 125k, False: 0]
  ------------------
 3099|   125k|        auto it = read_while_classic_space(range);
 3100|   125k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   125k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   125k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.48k, False: 123k]
  |  |  ------------------
  ------------------
 3102|  1.48k|            return unexpected(e);
 3103|  1.48k|        }
 3104|       |
 3105|   123k|        return it;
 3106|   125k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   125k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   125k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   125k|    else {
 2258|   125k|        auto it = range.begin();
 2259|       |
 2260|   125k|        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|   125k|            auto seg = get_contiguous_beginning(range);
 2262|   125k|            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|   125k|                seg_it != seg.end()) {
  ------------------
  |  Branch (2263:17): [True: 13.8k, False: 111k]
  ------------------
 2264|  13.8k|                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|  13.8k|            }
 2266|   111k|            ranges::advance(it, seg.size());
 2267|   111k|        }
 2268|       |
 2269|      0|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   125k|            return detail::is_cp_space(cp);
 2271|   125k|        });
 2272|   125k|    }
 2273|   125k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   111k|        : m_fptr([](storage fn,
  743|   111k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   111k|              cvref<T> obj = *get<T>(fn);
  745|   111k|              if constexpr (std::is_void_v<R>) {
  746|   111k|                  obj(static_cast<decltype(args)>(args)...);
  747|   111k|              }
  748|   111k|              else {
  749|   111k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   111k|              }
  751|   111k|          }),
  752|   111k|          m_storage(std::addressof(f))
  753|   111k|    {
  754|   111k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|   478k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   478k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|   478k|              else {
  749|   478k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   478k|              }
  751|   478k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|   478k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|   478k|        else if constexpr (std::is_object_v<T>) {
  688|   478k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|   478k|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|   478k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   478k|            return detail::is_cp_space(cp);
 2271|   478k|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   111k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   111k|        {
  662|   111k|        }
_ZN3scn2v44impl21is_segment_contiguousINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  981|   754k|{
  982|       |    if constexpr (ranges::contiguous_range<Range> &&
  983|       |                  ranges::sized_range<Range>) {
  984|       |        return true;
  985|       |    }
  986|       |    else if constexpr (std::is_same_v<
  987|       |                           ranges::const_iterator_t<Range>,
  988|       |                           typename detail::basic_scan_buffer<
  989|   754k|                               detail::char_t<Range>>::forward_iterator>) {
  990|   754k|        auto beg = r.begin();
  991|   754k|        if (beg.contiguous_segment().empty()) {
  ------------------
  |  Branch (991:13): [True: 754k, False: 0]
  ------------------
  992|   754k|            return false;
  993|   754k|        }
  994|       |        if constexpr (ranges::common_range<Range>) {
  995|       |            return beg.contiguous_segment().end() ==
  996|       |                   ranges::end(r).contiguous_segment().end();
  997|       |        }
  998|      0|        else {
  999|      0|            if (beg.stores_parent()) {
  ------------------
  |  Branch (999:17): [True: 0, False: 0]
  ------------------
 1000|      0|                return beg.contiguous_segment().end() ==
 1001|      0|                       beg.parent()->current_view().end();
 1002|      0|            }
 1003|      0|            return true;
 1004|      0|        }
 1005|       |    }
 1006|       |    else {
 1007|       |        return false;
 1008|       |    }
 1009|   754k|}
_ZNK3scn2v44impl12function_refIFbwES3_EclEw:
  762|  28.2k|    {
  763|  28.2k|        return m_fptr(m_storage, SCN_FWD(args)...);
  ------------------
  |  | 1110|  28.2k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
  764|  28.2k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_:
  742|  10.9k|        : m_fptr([](storage fn,
  743|  10.9k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  10.9k|              cvref<T> obj = *get<T>(fn);
  745|  10.9k|              if constexpr (std::is_void_v<R>) {
  746|  10.9k|                  obj(static_cast<decltype(args)>(args)...);
  747|  10.9k|              }
  748|  10.9k|              else {
  749|  10.9k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  10.9k|              }
  751|  10.9k|          }),
  752|  10.9k|          m_storage(std::addressof(f))
  753|  10.9k|    {
  754|  10.9k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1INSt3__110__not_fn_tIS4_EES8_TnPNS6_9enable_ifIXaaaasr6detailE11is_not_selfIT_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSB_EEvE4typeELPv0EEEOSA_ENKUlNS1_12fnref_detail4base7storageEwE_clESK_w:
  743|  14.1k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  14.1k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  14.1k|              else {
  749|  14.1k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  14.1k|              }
  751|  14.1k|          }),
_ZN3scn2v44impl12fnref_detail4base3getINSt3__110__not_fn_tINS1_12function_refIFbwES8_EEEEEEDaNS3_7storageE:
  683|  14.1k|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  14.1k|        else if constexpr (std::is_object_v<T>) {
  688|  14.1k|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  14.1k|    }
_ZN3scn2v44impl12fnref_detail4base7storageC2INSt3__110__not_fn_tINS1_12function_refIFbwES9_EEEETnPNS6_9enable_ifIXsr3stdE11is_object_vIT_EEvE4typeELPv0EEEPSD_:
  660|  10.9k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  10.9k|        {
  662|  10.9k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE11impl_prefixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_b:
 6143|   304k|    {
 6144|   304k|        const bool need_skipped_width =
 6145|   304k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 304k]
  |  Branch (6145:33): [True: 0, False: 304k]
  ------------------
 6146|   304k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   304k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 304k]
  ------------------
 6150|   304k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 304k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   304k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 304k, False: 0]
  |  Branch (6154:56): [True: 300k, False: 3.65k]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   300k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 300k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   600k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   300k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   300k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   300k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   300k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 918, False: 299k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    918|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    918|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    918|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    918|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    918|    }                                                  \
  |  |  |  | 3957|   300k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   299k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   600k|                            make_eof_scan_error));
 6165|       |
 6166|   600k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 299k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   299k|            return result_type{it, 0};
 6174|   600k|        }
 6175|       |
 6176|  3.65k|        return result_type{rng.begin(), 0};
 6177|   304k|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2107|  3.65k|{
 2108|  3.65k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  3.65k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbNDTcl4implISF_EEE4typeEENS1_12fnref_detail11qual_fn_sigISN_E8functionEEE:
 2074|  3.65k|{
 2075|       |    if constexpr (ranges::common_range<Range>) {
 2076|       |        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|  3.65k|    else {
 2079|  3.65k|        auto first = range.begin();
 2080|  4.76k|        for (; first != range.end(); ++first) {
  ------------------
  |  Branch (2080:16): [True: 4.71k, False: 48]
  ------------------
 2081|  4.71k|            if (pred(*first)) {
  ------------------
  |  Branch (2081:17): [True: 3.60k, False: 1.10k]
  ------------------
 2082|  3.60k|                return first;
 2083|  3.60k|            }
 2084|  4.71k|        }
 2085|     48|        return first;
 2086|  3.65k|    }
 2087|  3.65k|}
_ZNK3scn2v46ranges6detail9distance_2fnclINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXaa24input_or_output_iteratorIT_E12sentinel_forIT0_SC_EENS1_20incrementable_traitsISC_E15difference_typeEE4typeESC_SD_:
  107|   297k|    {
  108|   297k|        return fn::impl(std::move(first), std::move(last), priority_tag<0>{});
  109|   297k|    }
_ZN3scn2v46ranges6detail9distance_2fn4implINS0_6detail17basic_scan_bufferIwE16forward_iteratorES9_EENSt3__19enable_ifIXnt18sized_sentinel_forIT0_T_EENS1_20incrementable_traitsISD_E15difference_typeEE4typeESD_SC_NS6_12priority_tagILm0EEE:
   93|   297k|    {
   94|   297k|        iter_difference_t<I> counter{0};
   95|  8.77M|        while (i != s) {
  ------------------
  |  Branch (95:16): [True: 8.47M, False: 297k]
  ------------------
   96|  8.47M|            ++i;
   97|  8.47M|            ++counter;
   98|  8.47M|        }
   99|   297k|        return counter;
  100|   297k|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_9eof_errorET_:
  950|  1.20M|{
  951|  1.20M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  1.20M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.29k, False: 1.19M]
  |  |  ------------------
  ------------------
  952|  2.29k|        return eof_error::eof;
  953|  2.29k|    }
  954|  1.19M|    return eof_error::good;
  955|  1.20M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEbT_:
  944|  24.1M|{
  945|  24.1M|    return is_range_eof(r.begin(), r.end());
  946|  24.1M|}
_ZN3scn2v44impl12is_range_eofINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges18default_sentinel_tEEEbT_T0_:
  928|  24.1M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  24.1M|    {
  938|  24.1M|        return begin == end;
  939|  24.1M|    }
  940|  24.1M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESA_EEEEDaOT_:
 1781|   749k|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|       |                  ranges::sized_range<Range>) {
 1785|       |        return string_view_wrapper{SCN_FWD(range)};
 1786|       |    }
 1787|   749k|    else {
 1788|   749k|        return contiguous_range_factory{SCN_FWD(range)};
  ------------------
  |  | 1110|   749k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1789|   749k|    }
 1790|   749k|}
_ZN3scn2v44impl24contiguous_range_factoryIwEC2INS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EETnPNSt3__19enable_ifIXsr6rangesE13forward_rangeIT_EEvE4typeELPv0EEEOSG_:
 1635|   749k|    {
 1636|   749k|        emplace_range(SCN_FWD(range));
  ------------------
  |  | 1110|   749k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1637|   749k|    }
_ZN3scn2v44impl24contiguous_range_factoryIwE13emplace_rangeINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorESC_EEEEvOT_:
 1719|   749k|    {
 1720|   749k|        using value_t = ranges::range_value_t<Range>;
 1721|       |
 1722|       |        if constexpr (ranges::borrowed_range<Range> &&
 1723|       |                      ranges::contiguous_range<Range> &&
 1724|       |                      ranges::sized_range<Range>) {
 1725|       |            m_storage.reset();
 1726|       |            m_view = string_view_type{ranges::data(range), range.size()};
 1727|       |        }
 1728|       |        else if constexpr (std::is_same_v<detail::remove_cvref_t<Range>,
 1729|       |                                          std::basic_string<CharT>>) {
 1730|       |            m_storage.emplace(SCN_FWD(range));
 1731|       |            m_view = string_view_type{*m_storage};
 1732|       |        }
 1733|       |        else if constexpr (std::is_same_v<ranges::iterator_t<Range>,
 1734|       |                                          typename detail::basic_scan_buffer<
 1735|       |                                              value_t>::forward_iterator> &&
 1736|   749k|                           ranges::common_range<Range>) {
 1737|   749k|            auto beg_seg = range.begin().contiguous_segment();
 1738|   749k|            auto end_seg = range.end().contiguous_segment();
 1739|   749k|            if (SCN_UNLIKELY(detail::to_address(beg_seg.end()) !=
  ------------------
  |  | 1039|   749k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.43k, False: 745k]
  |  |  ------------------
  ------------------
 1740|   749k|                             detail::to_address(end_seg.end()))) {
 1741|  3.43k|                auto& str = m_storage.emplace();
 1742|  3.43k|                str.reserve(range.end().position() - range.begin().position());
 1743|  3.43k|                std::copy(range.begin(), range.end(), std::back_inserter(str));
 1744|  3.43k|                m_view = string_view_type{str};
 1745|  3.43k|                return;
 1746|  3.43k|            }
 1747|       |
 1748|   745k|            m_view = detail::make_string_view_from_pointers(beg_seg.data(),
 1749|   745k|                                                            end_seg.data());
 1750|   745k|            m_storage.reset();
 1751|       |        }
 1752|       |        else {
 1753|       |            auto& str = m_storage.emplace();
 1754|       |            if constexpr (ranges::sized_range<Range>) {
 1755|       |                str.reserve(range.size());
 1756|       |            }
 1757|       |            if constexpr (ranges::common_range<Range>) {
 1758|       |                std::copy(ranges::begin(range), ranges::end(range),
 1759|       |                          std::back_inserter(str));
 1760|       |            }
 1761|       |            else {
 1762|       |                for (auto it = ranges::begin(range); it != ranges::end(range);
 1763|       |                     ++it) {
 1764|       |                    str.push_back(*it);
 1765|       |                }
 1766|       |            }
 1767|       |            m_view = string_view_type{str};
 1768|       |        }
 1769|   749k|    }
_ZNK3scn2v44impl24contiguous_range_factoryIwE4viewEv:
 1680|  1.49M|    {
 1681|  1.49M|        return m_view;
 1682|  1.49M|    }
_ZN3scn2v44impl24contiguous_range_factoryIwED2Ev:
 1670|   749k|    ~contiguous_range_factory() = default;
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE12impl_postfixINS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedINSt3__14pairIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRT_EEEElEEEESL_bll:
 6185|   296k|    {
 6186|   296k|        const bool need_skipped_width =
 6187|   296k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 296k]
  |  Branch (6187:33): [True: 0, False: 296k]
  ------------------
 6188|   296k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   296k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 296k]
  ------------------
 6191|   296k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 296k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   296k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 296k, False: 0]
  ------------------
 6200|   296k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 96, False: 296k]
  ------------------
 6201|   296k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 96]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|     96|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 96]
  ------------------
 6203|     96|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   296k|        return result_type{rng.begin(), 0};
 6225|   296k|    }
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISD_EEE4typeEEESD_:
 1997|  45.9M|{
 1998|  45.9M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  45.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  45.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  45.9M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  45.9M|    auto it = range.begin();
 2002|  45.9M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  45.9M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  45.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 45.9M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  45.9M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 45.9M, False: 0]
  ------------------
 2011|  45.9M|        ++it;
 2012|  45.9M|        return {it, string_type(1, *range.begin())};
 2013|  45.9M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  45.9M|}
_ZN3scn2v44impl12is_range_eofINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEbT_:
  944|  48.3M|{
  945|  48.3M|    return is_range_eof(r.begin(), r.end());
  946|  48.3M|}
_ZN3scn2v44impl12is_range_eofIPKwS4_EEbT_T0_:
  928|  48.3M|{
  929|       |#if SCN_NEED_MS_DEBUG_ITERATOR_WORKAROUND
  930|       |    if constexpr (ranges::contiguous_iterator<I> ||
  931|       |                  (ranges::random_access_iterator<I> &&
  932|       |                   detail::can_make_address_from_iterator<I>)) {
  933|       |        return detail::to_address(begin) == detail::to_address(end);
  934|       |    }
  935|       |    else
  936|       |#endif
  937|  48.3M|    {
  938|  48.3M|        return begin == end;
  939|  48.3M|    }
  940|  48.3M|}
_ZNK3scn2v44impl27read_code_point_into_resultIPKwwE8is_validEv:
 1988|  45.9M|    {
 1989|  45.9M|        return !codepoint.empty();
 1990|  45.9M|    }
_ZN3scn2v44impl9eof_checkINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_9eof_errorET_:
  950|  2.40M|{
  951|  2.40M|    if (SCN_UNLIKELY(is_range_eof(range))) {
  ------------------
  |  | 1039|  2.40M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 4.59k, False: 2.39M]
  |  |  ------------------
  ------------------
  952|  4.59k|        return eof_error::eof;
  953|  4.59k|    }
  954|  2.39M|    return eof_error::good;
  955|  2.40M|}
_ZN3scn2v44impl22make_contiguous_bufferINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDaOT_:
 1781|  1.49M|{
 1782|       |    if constexpr (ranges::borrowed_range<Range> &&
 1783|       |                  ranges::contiguous_range<Range> &&
 1784|  1.49M|                  ranges::sized_range<Range>) {
 1785|  1.49M|        return string_view_wrapper{SCN_FWD(range)};
  ------------------
  |  | 1110|  1.49M|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  ------------------
 1786|       |    }
 1787|       |    else {
 1788|       |        return contiguous_range_factory{SCN_FWD(range)};
 1789|       |    }
 1790|  1.49M|}
_ZN3scn2v44impl19string_view_wrapperIwEC2INS0_6ranges6detail9subrange_8subrangeIPKwSA_EETnPNSt3__19enable_ifIXaaaasr6rangesE14borrowed_rangeIT_Esr6rangesE16contiguous_rangeISE_Esr6rangesE11sized_rangeISE_EEvE4typeELPv0EEEOSE_:
 1587|  1.49M|    constexpr string_view_wrapper(Range&& r) : sv(ranges::data(r), r.size())
 1588|  1.49M|    {
 1589|  1.49M|    }
_ZNK3scn2v44impl19string_view_wrapperIwE4viewEv:
 1601|  2.24M|    {
 1602|  2.24M|        return sv;
 1603|  2.24M|    }
_ZN3scn2v44impl20read_while_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2107|  7.30k|{
 2108|  7.30k|    return read_until_code_unit(range, std::not_fn(pred));
 2109|  7.30k|}
_ZN3scn2v44impl20read_until_code_unitINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbNDTcl4implISC_EEE4typeEENS1_12fnref_detail11qual_fn_sigISK_E8functionEEE:
 2074|  7.30k|{
 2075|  7.30k|    if constexpr (ranges::common_range<Range>) {
 2076|  7.30k|        return std::find_if(range.begin(), range.end(), pred);
 2077|       |    }
 2078|       |    else {
 2079|       |        auto first = range.begin();
 2080|       |        for (; first != range.end(); ++first) {
 2081|       |            if (pred(*first)) {
 2082|       |                return first;
 2083|       |            }
 2084|       |        }
 2085|       |        return first;
 2086|       |    }
 2087|  7.30k|}
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSD_b:
 3097|  1.50M|{
 3098|  1.50M|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 1.50M, False: 0]
  ------------------
 3099|  1.50M|        auto it = read_while_classic_space(range);
 3100|  1.50M|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|  1.50M|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  1.50M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.34k, False: 1.49M]
  |  |  ------------------
  ------------------
 3102|  2.34k|            return unexpected(e);
 3103|  2.34k|        }
 3104|       |
 3105|  1.49M|        return it;
 3106|  1.50M|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|  1.50M|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2248|  1.50M|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|  1.50M|    else {
 2258|  1.50M|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|  1.50M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.50M|            return detail::is_cp_space(cp);
 2271|  1.50M|        });
 2272|  1.50M|    }
 2273|  1.50M|}
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2213|  1.50M|{
 2214|  1.50M|    return read_until_code_point(range, std::not_fn(pred));
 2215|  1.50M|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_NS1_12function_refIFbDiESI_EE:
 2192|  2.99M|{
 2193|  2.99M|    auto it = range.begin();
 2194|  45.9M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 45.9M, False: 12.5k]
  ------------------
 2195|  45.9M|        const auto val =
 2196|  45.9M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  45.9M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  45.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 45.9M, False: 0]
  |  |  ------------------
  ------------------
 2198|  45.9M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  45.9M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  45.9M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 2.98M, False: 42.9M]
  ------------------
 2201|  2.98M|                return it;
 2202|  2.98M|            }
 2203|  45.9M|        }
 2204|  42.9M|        it = val.iterator;
 2205|  42.9M|    }
 2206|       |
 2207|  12.5k|    return it;
 2208|  2.99M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.50M|        : m_fptr([](storage fn,
  743|  1.50M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.50M|              cvref<T> obj = *get<T>(fn);
  745|  1.50M|              if constexpr (std::is_void_v<R>) {
  746|  1.50M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.50M|              }
  748|  1.50M|              else {
  749|  1.50M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.50M|              }
  751|  1.50M|          }),
  752|  1.50M|          m_storage(std::addressof(f))
  753|  1.50M|    {
  754|  1.50M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  3.57M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.57M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  3.57M|              else {
  749|  3.57M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.57M|              }
  751|  3.57M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  3.57M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  3.57M|        else if constexpr (std::is_object_v<T>) {
  688|  3.57M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  3.57M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2269|  3.57M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  3.57M|            return detail::is_cp_space(cp);
 2271|  3.57M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.50M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.50M|        {
  662|  1.50M|        }
_ZNK3scn2v44impl24contiguous_range_factoryIwE23stores_allocated_stringEv:
 1685|   743k|    {
 1686|   743k|        return m_storage.has_value();
 1687|   743k|    }
_ZNR3scn2v44impl24contiguous_range_factoryIwE20get_allocated_stringEv:
 1690|  1.10k|    {
 1691|  1.10k|        SCN_EXPECT(stores_allocated_string());
  ------------------
  |  | 1104|  1.10k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  1.10k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1692|  1.10k|        return *m_storage;
 1693|  1.10k|    }
_ZN3scn2v44impl13string_readerIwEC2Ev:
 5299|  2.27M|    constexpr string_reader() = default;
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11check_specsERKNS0_6detail12format_specsE:
 3187|   923k|    {
 3188|   923k|        reader_error_handler eh{};
 3189|   923k|        get_derived().check_specs_impl(specs, eh);
 3190|   923k|        if (SCN_UNLIKELY(!eh)) {
  ------------------
  |  | 1039|   923k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 10.5k, False: 912k]
  |  |  ------------------
  ------------------
 3191|  10.5k|            return detail::unexpected_scan_error(
 3192|  10.5k|                scan_error::invalid_format_string, eh.m_msg);
 3193|  10.5k|        }
 3194|   912k|        return {};
 3195|   923k|    }
_ZN3scn2v44impl11reader_baseINS1_13string_readerIwEEwE11get_derivedEv:
 3199|   923k|    {
 3200|   923k|        return static_cast<Derived&>(*this);
 3201|   923k|    }
_ZN3scn2v44impl13string_readerIwE16check_specs_implERKNS0_6detail12format_specsERNS1_20reader_error_handlerE:
 5303|   923k|    {
 5304|   923k|        detail::check_string_type_specs(specs, eh);
 5305|       |
 5306|   923k|        SCN_GCC_PUSH
 5307|   923k|        SCN_GCC_IGNORE("-Wswitch")
 5308|   923k|        SCN_GCC_IGNORE("-Wswitch-default")
 5309|       |
 5310|   923k|        SCN_CLANG_PUSH
 5311|   923k|        SCN_CLANG_IGNORE("-Wswitch")
 5312|   923k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5313|       |
 5314|   923k|        switch (specs.type) {
  ------------------
  |  Branch (5314:17): [True: 0, False: 923k]
  ------------------
 5315|      0|            case detail::presentation_type::none:
  ------------------
  |  Branch (5315:13): [True: 0, False: 923k]
  ------------------
 5316|      0|                m_type = reader_type::word;
 5317|      0|                break;
 5318|       |
 5319|   901k|            case detail::presentation_type::string: {
  ------------------
  |  Branch (5319:13): [True: 901k, False: 21.5k]
  ------------------
 5320|   901k|                if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (5320:21): [True: 0, False: 901k]
  ------------------
 5321|   901k|                    specs.align == detail::align_type::center) {
  ------------------
  |  Branch (5321:21): [True: 0, False: 901k]
  ------------------
 5322|      0|                    m_type = reader_type::custom_word;
 5323|      0|                }
 5324|   901k|                else {
 5325|   901k|                    m_type = reader_type::word;
 5326|   901k|                }
 5327|   901k|                break;
 5328|      0|            }
 5329|       |
 5330|  10.5k|            case detail::presentation_type::character:
  ------------------
  |  Branch (5330:13): [True: 10.5k, False: 912k]
  ------------------
 5331|  10.5k|                m_type = reader_type::character;
 5332|  10.5k|                break;
 5333|       |
 5334|  10.9k|            case detail::presentation_type::string_set:
  ------------------
  |  Branch (5334:13): [True: 10.9k, False: 912k]
  ------------------
 5335|  10.9k|                m_type = reader_type::character_set;
 5336|  10.9k|                break;
 5337|       |
 5338|      0|            case detail::presentation_type::regex:
  ------------------
  |  Branch (5338:13): [True: 0, False: 923k]
  ------------------
 5339|      0|                m_type = reader_type::regex;
 5340|      0|                break;
 5341|       |
 5342|      0|            case detail::presentation_type::regex_escaped:
  ------------------
  |  Branch (5342:13): [True: 0, False: 923k]
  ------------------
 5343|      0|                m_type = reader_type::regex_escaped;
 5344|      0|                break;
 5345|   923k|        }
 5346|       |
 5347|       |        SCN_CLANG_POP    // -Wswitch-enum, -Wcovered-switch-default
 5348|       |            SCN_GCC_POP  // -Wswitch-enum, -Wswitch-default
 5349|   923k|    }
_ZNK3scn2v44impl13string_readerIwE19skip_ws_before_readEv:
 5352|  3.15M|    {
 5353|  3.15M|        return m_type == reader_type::word;
 5354|  3.15M|    }
_ZN3scn2v44impl16validate_unicodeIwEEbNSt3__117basic_string_viewIT_NS3_11char_traitsIS5_EEEE:
 1241|  2.24M|{
 1242|  2.24M|    auto it = src.begin();
 1243|  62.7M|    while (it != src.end()) {
  ------------------
  |  Branch (1243:12): [True: 60.4M, False: 2.22M]
  ------------------
 1244|  60.4M|        const auto len = detail::code_point_length_by_starting_code_unit(*it);
 1245|  60.4M|        if (len == 0) {
  ------------------
  |  Branch (1245:13): [True: 0, False: 60.4M]
  ------------------
 1246|      0|            return false;
 1247|      0|        }
 1248|  60.4M|        if (src.end() - it < len) {
  ------------------
  |  Branch (1248:13): [True: 0, False: 60.4M]
  ------------------
 1249|      0|            return false;
 1250|      0|        }
 1251|  60.4M|        const auto cp = detail::decode_code_point_exhaustive(
 1252|  60.4M|            detail::make_string_view_from_iterators<CharT>(it, it + len));
 1253|  60.4M|        if (cp >= detail::invalid_code_point) {
  ------------------
  |  Branch (1253:13): [True: 19.6k, False: 60.4M]
  ------------------
 1254|  19.6k|            return false;
 1255|  19.6k|        }
 1256|  60.4M|        it += len;
 1257|  60.4M|    }
 1258|  2.22M|    return true;
 1259|  2.24M|}
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helper15handle_nonasciiEv:
 5200|  10.9k|        {
 5201|  10.9k|            if (!specs.charset_has_nonascii) {
  ------------------
  |  Branch (5201:17): [True: 10.9k, False: 0]
  ------------------
 5202|  10.9k|                return {};
 5203|  10.9k|            }
 5204|       |
 5205|      0|            auto charset_string = specs.charset_string<SourceCharT>();
 5206|      0|            auto it = detail::to_address(charset_string.begin());
 5207|      0|            auto set = detail::parse_presentation_set(
 5208|      0|                it, detail::to_address(charset_string.end()), nonascii);
 5209|      0|            SCN_TRY_DISCARD(nonascii.get_error());
  ------------------
  |  | 3948|      0|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5210|      0|            SCN_ENSURE(it == detail::to_address(charset_string.end()));
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5211|      0|            SCN_ENSURE(set == charset_string);
  ------------------
  |  | 1105|      0|#define SCN_ENSURE(cond) SCN_ASSERT(cond, "Postcondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5212|       |
 5213|      0|            std::sort(nonascii.extra_ranges.begin(),
 5214|      0|                      nonascii.extra_ranges.end());
 5215|      0|            return {};
 5216|      0|        }
_ZNK3scn2v44impl25character_set_reader_implIwE12specs_helper23is_char_set_in_literalsEc:
 5173|  8.97k|        {
 5174|  8.97k|            SCN_EXPECT(is_ascii_char(ch));
  ------------------
  |  | 1104|  8.97k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  8.97k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5175|  8.97k|            const auto val =
 5176|  8.97k|                static_cast<unsigned>(static_cast<unsigned char>(ch));
 5177|  8.97k|            return (static_cast<unsigned>(specs.charset_literals[val / 8]) >>
 5178|  8.97k|                    (val % 8)) &
 5179|  8.97k|                   1u;
 5180|  8.97k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE20read_source_callback13on_ascii_onlyEw:
 5224|  14.1k|        {
 5225|  14.1k|            if (!is_ascii_char(ch)) {
  ------------------
  |  Branch (5225:17): [True: 5.16k, False: 8.97k]
  ------------------
 5226|  5.16k|                return false;
 5227|  5.16k|            }
 5228|       |
 5229|  8.97k|            return helper.is_char_set_in_literals(static_cast<char>(ch));
 5230|  14.1k|        }
_ZN3scn2v44impl25character_set_reader_implIwE12specs_helperC2ERKNS0_6detail12format_specsE:
 5170|  10.9k|        constexpr specs_helper(const detail::format_specs& s) : specs(s) {}
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2219|   749k|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|   749k|    else {
 2229|   749k|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|   749k|        return read_until_code_point(
 2241|   749k|            ranges::subrange{it, range.end()},
 2242|   749k|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|   749k|    }
 2244|   749k|}
_ZN3scn2v44impl21read_until_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2192|  1.49M|{
 2193|  1.49M|    auto it = range.begin();
 2194|  22.9M|    while (it != range.end()) {
  ------------------
  |  Branch (2194:12): [True: 22.9M, False: 6.25k]
  ------------------
 2195|  22.9M|        const auto val =
 2196|  22.9M|            read_code_point_into(ranges::subrange{it, range.end()});
 2197|  22.9M|        if (SCN_LIKELY(val.is_valid())) {
  ------------------
  |  | 1038|  22.9M|#define SCN_LIKELY(x)   __builtin_expect(!!(x), 1)
  |  |  ------------------
  |  |  |  Branch (1038:25): [True: 22.9M, False: 0]
  |  |  ------------------
  ------------------
 2198|  22.9M|            const auto cp = detail::decode_code_point_exhaustive(
 2199|  22.9M|                std::basic_string_view<detail::char_t<Range>>{val.codepoint});
 2200|  22.9M|            if (pred(cp)) {
  ------------------
  |  Branch (2200:17): [True: 1.49M, False: 21.4M]
  ------------------
 2201|  1.49M|                return it;
 2202|  1.49M|            }
 2203|  22.9M|        }
 2204|  21.4M|        it = val.iterator;
 2205|  21.4M|    }
 2206|       |
 2207|  6.25k|    return it;
 2208|  1.49M|}
_ZN3scn2v44impl20read_code_point_intoINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_27read_code_point_into_resultIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEENDTcl4implISG_EEE4typeEEESG_:
 1997|  22.9M|{
 1998|  22.9M|    SCN_EXPECT(!is_range_eof(range));
  ------------------
  |  | 1104|  22.9M|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  22.9M|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 1999|  22.9M|    using string_type = std::basic_string<detail::char_t<Range>>;
 2000|       |
 2001|  22.9M|    auto it = range.begin();
 2002|  22.9M|    const auto len = detail::code_point_length_by_starting_code_unit(*it);
 2003|       |
 2004|  22.9M|    if (SCN_UNLIKELY(len == 0)) {
  ------------------
  |  | 1039|  22.9M|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 0, False: 22.9M]
  |  |  ------------------
  ------------------
 2005|      0|        ++it;
 2006|      0|        it = get_start_for_next_code_point(ranges::subrange{it, range.end()});
 2007|      0|        return {it, {}};
 2008|      0|    }
 2009|       |
 2010|  22.9M|    if (len == 1) {
  ------------------
  |  Branch (2010:9): [True: 22.9M, False: 0]
  ------------------
 2011|  22.9M|        ++it;
 2012|  22.9M|        return {it, string_type(1, *range.begin())};
 2013|  22.9M|    }
 2014|       |
 2015|      0|    ranges::advance(it, static_cast<std::ptrdiff_t>(len), range.end());
 2016|      0|    return {it, string_type{range.begin(), it}};
 2017|  22.9M|}
_ZNK3scn2v44impl27read_code_point_into_resultINS0_6detail17basic_scan_bufferIwE16forward_iteratorEwE8is_validEv:
 1988|  22.9M|    {
 1989|  22.9M|        return !codepoint.empty();
 1990|  22.9M|    }
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   749k|        : m_fptr([](storage fn,
  743|   749k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   749k|              cvref<T> obj = *get<T>(fn);
  745|   749k|              if constexpr (std::is_void_v<R>) {
  746|   749k|                  obj(static_cast<decltype(args)>(args)...);
  747|   749k|              }
  748|   749k|              else {
  749|   749k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   749k|              }
  751|   749k|          }),
  752|   749k|          m_storage(std::addressof(f))
  753|   749k|    {
  754|   749k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  21.1M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  21.1M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  21.1M|              else {
  749|  21.1M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  21.1M|              }
  751|  21.1M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  21.1M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  21.1M|        else if constexpr (std::is_object_v<T>) {
  688|  21.1M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  21.1M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2242|  21.1M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   749k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   749k|        {
  662|   749k|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperE:
 5248|  3.65k|    {
 5249|  3.65k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5250|  3.65k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5251|       |
 5252|  3.65k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  3.65k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 3.65k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5253|       |
 5254|  3.65k|        read_source_callback cb_wrapper{helper};
 5255|       |
 5256|  3.65k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5256:13): [True: 0, False: 3.65k]
  ------------------
 5257|      0|            const auto cb = [&](char32_t cp) {
 5258|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|      0|            };
 5260|       |
 5261|      0|            if (is_inverted) {
  ------------------
  |  Branch (5261:17): [True: 0, False: 0]
  ------------------
 5262|      0|                auto it = read_until_code_point(range, cb);
 5263|      0|                return check_nonempty(it, range);
 5264|      0|            }
 5265|      0|            auto it = read_while_code_point(range, cb);
 5266|      0|            return check_nonempty(it, range);
 5267|      0|        }
 5268|       |
 5269|  3.65k|        const auto cb = [&](SourceCharT ch) {
 5270|  3.65k|            return cb_wrapper.on_ascii_only(ch);
 5271|  3.65k|        };
 5272|       |
 5273|  3.65k|        if (is_inverted) {
  ------------------
  |  Branch (5273:13): [True: 0, False: 3.65k]
  ------------------
 5274|      0|            auto it = read_until_code_unit(range, cb);
 5275|      0|            return check_nonempty(it, range);
 5276|      0|        }
 5277|  3.65k|        auto it = read_while_code_unit(range, cb);
 5278|  3.65k|        return check_nonempty(it, range);
 5279|  3.65k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS0_6ranges6detail9subrange_8subrangeIS8_NS9_18default_sentinel_tEEEEENS0_13scan_expectedIT_EERKSG_T0_:
 5284|  3.65k|    {
 5285|  3.65k|        if (it == range.begin()) {
  ------------------
  |  Branch (5285:13): [True: 3.53k, False: 120]
  ------------------
 5286|  3.53k|            return detail::unexpected_scan_error(
 5287|  3.53k|                scan_error::invalid_scanned_value,
 5288|  3.53k|                "No characters matched in [character set]");
 5289|  3.53k|        }
 5290|       |
 5291|    120|        return it;
 5292|  3.65k|    }
_ZN3scn2v44impl21read_while_code_pointINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_NS1_12function_refIFbDiESL_EE:
 2213|   750k|{
 2214|   750k|    return read_until_code_point(range, std::not_fn(pred));
 2215|   750k|}
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_:
  742|  3.65k|        : m_fptr([](storage fn,
  743|  3.65k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  3.65k|              cvref<T> obj = *get<T>(fn);
  745|  3.65k|              if constexpr (std::is_void_v<R>) {
  746|  3.65k|                  obj(static_cast<decltype(args)>(args)...);
  747|  3.65k|              }
  748|  3.65k|              else {
  749|  3.65k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  3.65k|              }
  751|  3.65k|          }),
  752|  3.65k|          m_storage(std::addressof(f))
  753|  3.65k|    {
  754|  3.65k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_SU_TnPNSK_9enable_ifIXaaaasr6detailE11is_not_selfISM_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSX_EEvE4typeELPv0EEEOSM_ENKUlNS1_12fnref_detail4base7storageEwE_clES16_w:
  743|  4.71k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  4.71k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  4.71k|              else {
  749|  4.71k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  4.71k|              }
  751|  4.71k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS8_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESL_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  4.71k|    {
  684|  4.71k|        if constexpr (std::is_const_v<T>) {
  685|  4.71k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  4.71k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS3_12specs_helperEENKUlwE_clEw:
 5269|  4.71k|        const auto cb = [&](SourceCharT ch) {
 5270|  4.71k|            return cb_wrapper.on_ascii_only(ch);
 5271|  4.71k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS9_18default_sentinel_tEEEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESM_NS7_12specs_helperEEUlwE_TnPNSK_9enable_ifIXsr3stdE11is_object_vISM_EEvE4typeELPv0EEEPKSM_:
  665|  3.65k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  3.65k|        {
  667|  3.65k|        }
_ZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_:
 2219|  1.49M|{
 2220|       |    if constexpr (ranges::contiguous_range<Range> &&
 2221|       |                  ranges::sized_range<Range> &&
 2222|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2223|       |        auto buf = make_contiguous_buffer(range);
 2224|       |        auto it = find_classic_space_narrow_fast(buf.view());
 2225|       |        return ranges::next(range.begin(),
 2226|       |                            ranges::distance(buf.view().begin(), it));
 2227|       |    }
 2228|  1.49M|    else {
 2229|  1.49M|        auto it = range.begin();
 2230|       |
 2231|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2232|       |            auto seg = get_contiguous_beginning(range);
 2233|       |            if (auto seg_it = find_classic_space_narrow_fast(seg);
 2234|       |                seg_it != seg.end()) {
 2235|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2236|       |            }
 2237|       |            ranges::advance(it, seg.size());
 2238|       |        }
 2239|       |
 2240|  1.49M|        return read_until_code_point(
 2241|  1.49M|            ranges::subrange{it, range.end()},
 2242|  1.49M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
 2243|  1.49M|    }
 2244|  1.49M|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_:
  742|  1.49M|        : m_fptr([](storage fn,
  743|  1.49M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.49M|              cvref<T> obj = *get<T>(fn);
  745|  1.49M|              if constexpr (std::is_void_v<R>) {
  746|  1.49M|                  obj(static_cast<decltype(args)>(args)...);
  747|  1.49M|              }
  748|  1.49M|              else {
  749|  1.49M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.49M|              }
  751|  1.49M|          }),
  752|  1.49M|          m_storage(std::addressof(f))
  753|  1.49M|    {
  754|  1.49M|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_SL_TnPNSE_9enable_ifIXaaaasr6detailE11is_not_selfISG_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSN_EEvE4typeELPv0EEEOSG_ENKUlNS1_12fnref_detail4base7storageEDiE_clESW_Di:
  743|  42.3M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  42.3M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  42.3M|              else {
  749|  42.3M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  42.3M|              }
  751|  42.3M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSB_EEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_EUlDiE_EEDaNS3_7storageE:
  683|  42.3M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  42.3M|        else if constexpr (std::is_object_v<T>) {
  688|  42.3M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  42.3M|    }
_ZZN3scn2v44impl24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESC_ENKUlDiE_clEDi:
 2242|  42.3M|            [](char32_t cp) noexcept { return detail::is_cp_space(cp); });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_until_classic_spaceINS0_6ranges6detail9subrange_8subrangeIPKwSC_EEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESG_EUlDiE_TnPNSE_9enable_ifIXsr3stdE11is_object_vISG_EEvE4typeELPv0EEEPSG_:
  660|  1.49M|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|  1.49M|        {
  662|  1.49M|        }
_ZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperE:
 5248|  7.30k|    {
 5249|  7.30k|        const bool is_inverted = helper.specs.charset_is_inverted;
 5250|  7.30k|        const bool accepts_nonascii = helper.specs.charset_has_nonascii;
 5251|       |
 5252|  7.30k|        SCN_TRY_DISCARD(helper.handle_nonascii());
  ------------------
  |  | 3948|  7.30k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  7.30k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 7.30k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 5253|       |
 5254|  7.30k|        read_source_callback cb_wrapper{helper};
 5255|       |
 5256|  7.30k|        if (accepts_nonascii) {
  ------------------
  |  Branch (5256:13): [True: 0, False: 7.30k]
  ------------------
 5257|      0|            const auto cb = [&](char32_t cp) {
 5258|      0|                return cb_wrapper.on_classic_with_extra_ranges(cp);
 5259|      0|            };
 5260|       |
 5261|      0|            if (is_inverted) {
  ------------------
  |  Branch (5261:17): [True: 0, False: 0]
  ------------------
 5262|      0|                auto it = read_until_code_point(range, cb);
 5263|      0|                return check_nonempty(it, range);
 5264|      0|            }
 5265|      0|            auto it = read_while_code_point(range, cb);
 5266|      0|            return check_nonempty(it, range);
 5267|      0|        }
 5268|       |
 5269|  7.30k|        const auto cb = [&](SourceCharT ch) {
 5270|  7.30k|            return cb_wrapper.on_ascii_only(ch);
 5271|  7.30k|        };
 5272|       |
 5273|  7.30k|        if (is_inverted) {
  ------------------
  |  Branch (5273:13): [True: 0, False: 7.30k]
  ------------------
 5274|      0|            auto it = read_until_code_unit(range, cb);
 5275|      0|            return check_nonempty(it, range);
 5276|      0|        }
 5277|  7.30k|        auto it = read_while_code_unit(range, cb);
 5278|  7.30k|        return check_nonempty(it, range);
 5279|  7.30k|    }
_ZN3scn2v44impl25character_set_reader_implIwE14check_nonemptyIPKwNS0_6ranges6detail9subrange_8subrangeIS6_S6_EEEENS0_13scan_expectedIT_EERKSD_T0_:
 5284|  7.30k|    {
 5285|  7.30k|        if (it == range.begin()) {
  ------------------
  |  Branch (5285:13): [True: 7.06k, False: 240]
  ------------------
 5286|  7.06k|            return detail::unexpected_scan_error(
 5287|  7.06k|                scan_error::invalid_scanned_value,
 5288|  7.06k|                "No characters matched in [character set]");
 5289|  7.06k|        }
 5290|       |
 5291|    240|        return it;
 5292|  7.30k|    }
_ZN3scn2v44impl12function_refIFbwES3_EC2IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_:
  742|  7.30k|        : m_fptr([](storage fn,
  743|  7.30k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  7.30k|              cvref<T> obj = *get<T>(fn);
  745|  7.30k|              if constexpr (std::is_void_v<R>) {
  746|  7.30k|                  obj(static_cast<decltype(args)>(args)...);
  747|  7.30k|              }
  748|  7.30k|              else {
  749|  7.30k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  7.30k|              }
  751|  7.30k|          }),
  752|  7.30k|          m_storage(std::addressof(f))
  753|  7.30k|    {
  754|  7.30k|    }
_ZZN3scn2v44impl12function_refIFbwES3_EC1IRKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_SR_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSU_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEwE_clES13_w:
  743|  9.42k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  9.42k|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  9.42k|              else {
  749|  9.42k|                  return obj(static_cast<decltype(args)>(args)...);
  750|  9.42k|              }
  751|  9.42k|          }),
_ZN3scn2v44impl12fnref_detail4base3getIKZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSD_EEEENS0_13scan_expectedIDTclL_ZNS8_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_NS6_12specs_helperEEUlwE_EEDaNS3_7storageE:
  683|  9.42k|    {
  684|  9.42k|        if constexpr (std::is_const_v<T>) {
  685|  9.42k|            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|       |        else if constexpr (std::is_object_v<T>) {
  688|       |            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  9.42k|    }
_ZZNK3scn2v44impl25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_NS3_12specs_helperEENKUlwE_clEw:
 5269|  9.42k|        const auto cb = [&](SourceCharT ch) {
 5270|  9.42k|            return cb_wrapper.on_ascii_only(ch);
 5271|  9.42k|        };
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNKS1_25character_set_reader_implIwE16read_source_implINS0_6ranges6detail9subrange_8subrangeIPKwSE_EEEENS0_13scan_expectedIDTclL_ZNS9_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESJ_NS7_12specs_helperEEUlwE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPKSJ_:
  665|  7.30k|        constexpr explicit storage(const T* p) noexcept : m_cp(p)
  666|  7.30k|        {
  667|  7.30k|        }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 6295|   307k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|       |                          basic_contiguous_scan_context<char_type>>) {
 6300|       |            auto rd = make_reader<T, char_type>();
 6301|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6302|       |            return impl(rd, range, value);
 6303|       |        }
 6304|   307k|        else if constexpr (!detail::is_type_disabled<T>) {
 6305|   307k|            auto rd = make_reader<T, char_type>();
 6306|   307k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   307k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.53k, False: 304k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.53k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.53k|    }
  ------------------
 6307|       |
 6308|   304k|            if (!is_segment_contiguous(range) || specs.precision != 0 ||
  ------------------
  |  Branch (6308:17): [True: 304k, False: 0]
  |  Branch (6308:50): [True: 0, False: 0]
  ------------------
 6309|   304k|                specs.width != 0) {
  ------------------
  |  Branch (6309:17): [True: 0, False: 0]
  ------------------
 6310|   304k|                return impl(rd, range, value);
 6311|   304k|            }
 6312|       |
 6313|      0|            auto crange = get_as_contiguous(range);
 6314|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6315|      0|            return ranges::next(range.begin(),
 6316|      0|                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   307k|    }
_ZN3scn2v44impl11make_readerINSt3__112basic_stringIwNS3_11char_traitsIwEENS3_9allocatorIwEEEEwEEDav:
 5905|  1.51M|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|       |                       std::is_same_v<T, std::wstring_view>) {
 5920|       |        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|  1.51M|                       std::is_same_v<T, std::wstring>) {
 5924|  1.51M|        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|  1.51M|}
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 6230|   304k|    {
 6231|   304k|        const bool need_skipped_width =
 6232|   304k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 304k]
  |  Branch (6232:33): [True: 0, False: 304k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   304k|        auto it = rng.begin();
 6236|   304k|        std::ptrdiff_t prefix_width = 0;
 6237|   304k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 304k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   304k|        else {
 6245|   304k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 918, False: 303k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    918|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    918|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    918|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    918|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    918|    }                                                  \
  |  |  |  | 3957|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   303k|            std::tie(it, prefix_width) = prefix_result;
 6247|   303k|        }
 6248|   303k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   303k|        std::ptrdiff_t value_width = 0;
 6252|   303k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 303k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   303k|        else {
 6268|   303k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.14k, False: 297k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.14k|    }                                                  \
  |  | 3957|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   297k|                                             specs, value, loc));
 6270|       |
 6271|   297k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 297k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   297k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   297k|        std::ptrdiff_t postfix_width = 0;
 6280|   297k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 296k, False: 772]
  ------------------
 6281|   296k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   296k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   296k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   296k|                                 value_width));
 6285|   296k|            std::tie(it, postfix_width) = postfix_result;
 6286|   296k|        }
 6287|       |
 6288|   297k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   297k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 297k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   297k|            specs, prefix_width, value_width, postfix_width));
 6290|   297k|        return it;
 6291|   297k|    }
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEEONS1_24contiguous_range_factoryIT_EERNSt3__112basic_stringIT0_NS9_11char_traitsISB_EENS9_9allocatorISB_EEEE:
 3139|   742k|{
 3140|   742k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3141|   742k|        if (source.stores_allocated_string()) {
  ------------------
  |  Branch (3141:13): [True: 1.10k, False: 741k]
  ------------------
 3142|  1.10k|            dest.assign(SCN_MOVE(source.get_allocated_string()));
  ------------------
  |  | 1108|  1.10k|    static_cast<    \
  |  | 1109|  1.10k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3143|  1.10k|        }
 3144|   741k|        else {
 3145|   741k|            dest.assign(source.view());
 3146|   741k|        }
 3147|       |    }
 3148|       |    else {
 3149|       |        return transcode_impl(source.view(), dest);
 3150|       |    }
 3151|       |
 3152|   742k|    return {};
 3153|   742k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_NS9_10locale_refE:
 5370|   303k|    {
 5371|   303k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   303k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|   303k|        return read_impl(range, specs, value);
 5373|   303k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RKNS9_12format_specsERT0_:
 5388|   303k|    {
 5389|   303k|        SCN_CLANG_PUSH
 5390|   303k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|   303k|        switch (m_type) {
 5393|   299k|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 299k, False: 3.65k]
  ------------------
 5394|   299k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 0, False: 303k]
  ------------------
 5397|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|      0|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 303k]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|  3.65k|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 3.65k, False: 299k]
  ------------------
 5404|  3.65k|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|  3.65k|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 303k]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 303k]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 303k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|   303k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|   303k|        }
 5425|       |
 5426|   303k|        SCN_CLANG_POP
 5427|   303k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RNSG_12basic_stringIT0_NSG_11char_traitsISP_EENSG_9allocatorISP_EEEE:
 4921|   749k|    {
 4922|   749k|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|   749k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEESA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESG_OT0_RNSE_12basic_stringIT1_NSE_11char_traitsISP_EENSE_9allocatorISP_EEEE:
 4855|   749k|{
 4856|   749k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|   749k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|   749k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 6.53k, False: 742k]
  ------------------
 4860|  6.53k|        return detail::unexpected_scan_error(
 4861|  6.53k|            scan_error::invalid_scanned_value,
 4862|  6.53k|            "Invalid encoding in scanned string");
 4863|  6.53k|    }
 4864|       |
 4865|   742k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|   742k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 742k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|   742k|    return SCN_MOVE(result);
  ------------------
  |  | 1108|   742k|    static_cast<    \
  |  | 1109|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|   742k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESI_RKNS9_12format_specsERNSG_12basic_stringIT0_NSG_11char_traitsISS_EENSG_9allocatorISS_EEEE:
 5145|  3.65k|    {
 5146|  3.65k|        auto it = read_source_impl(range, {specs});
 5147|  3.65k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.53k, False: 120]
  |  |  ------------------
  ------------------
 5148|  3.53k|            return unexpected(it.error());
 5149|  3.53k|        }
 5150|       |
 5151|    120|        return read_string_impl(range, *it, value);
 5152|  3.65k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEERSA_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESH_OT0_RNSF_12basic_stringIT1_NSF_11char_traitsISQ_EENSF_9allocatorISQ_EEEE:
 4855|    120|{
 4856|    120|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    120|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    120|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 0, False: 120]
  ------------------
 4860|      0|        return detail::unexpected_scan_error(
 4861|      0|            scan_error::invalid_scanned_value,
 4862|      0|            "Invalid encoding in scanned string");
 4863|      0|    }
 4864|       |
 4865|    120|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    120|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 120]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    120|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    120|    static_cast<    \
  |  | 1109|    120|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    120|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_NSR_10locale_refE:
 5370|   303k|    {
 5371|   303k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   303k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|   303k|        return read_impl(range, specs, value);
 5373|   303k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RKNS0_6detail12format_specsERT0_:
 5388|   303k|    {
 5389|   303k|        SCN_CLANG_PUSH
 5390|   303k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|   303k|        switch (m_type) {
 5393|   299k|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 299k, False: 3.65k]
  ------------------
 5394|   299k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 0, False: 303k]
  ------------------
 5397|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|      0|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 303k]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|  3.65k|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 3.65k, False: 299k]
  ------------------
 5404|  3.65k|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|  3.65k|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 303k]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 303k]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 303k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|   303k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|   303k|        }
 5425|       |
 5426|   303k|        SCN_CLANG_POP
 5427|   303k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_12basic_stringIT0_NSD_11char_traitsISM_EENSD_9allocatorISM_EEEE:
 4921|   749k|    {
 4922|   749k|        return read_string_impl(range, read_until_classic_space(range), value);
 4923|   749k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_12basic_stringIT1_NSB_11char_traitsISM_EENSB_9allocatorISM_EEEE:
 4855|   749k|{
 4856|   749k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|   749k|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|   749k|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 6.53k, False: 742k]
  ------------------
 4860|  6.53k|        return detail::unexpected_scan_error(
 4861|  6.53k|            scan_error::invalid_scanned_value,
 4862|  6.53k|            "Invalid encoding in scanned string");
 4863|  6.53k|    }
 4864|       |
 4865|   742k|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|   742k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   742k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 742k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|   742k|    return SCN_MOVE(result);
  ------------------
  |  | 1108|   742k|    static_cast<    \
  |  | 1109|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|   742k|}
_ZN3scn2v44impl22transcode_if_necessaryIwwEENS0_13scan_expectedIvEENS1_19string_view_wrapperIT_EERNSt3__112basic_stringIT0_NS8_11char_traitsISA_EENS8_9allocatorISA_EEEE:
 3159|   742k|{
 3160|   742k|    if constexpr (std::is_same_v<SourceCharT, DestCharT>) {
 3161|   742k|        dest.assign(source.view());
 3162|       |    }
 3163|       |    else {
 3164|       |        return transcode_impl(source.view(), dest);
 3165|       |    }
 3166|       |
 3167|   742k|    return {};
 3168|   742k|}
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_12basic_stringIT0_NSD_11char_traitsISQ_EENSD_9allocatorISQ_EEEE:
 5145|  3.65k|    {
 5146|  3.65k|        auto it = read_source_impl(range, {specs});
 5147|  3.65k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.53k, False: 120]
  |  |  ------------------
  ------------------
 5148|  3.53k|            return unexpected(it.error());
 5149|  3.53k|        }
 5150|       |
 5151|    120|        return read_string_impl(range, *it, value);
 5152|  3.65k|    }
_ZN3scn2v44impl16read_string_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_12basic_stringIT1_NSC_11char_traitsISN_EENSC_9allocatorISN_EEEE:
 4855|    120|{
 4856|    120|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4857|       |
 4858|    120|    auto src = make_contiguous_buffer(ranges::subrange{range.begin(), result});
 4859|    120|    if (!validate_unicode(src.view())) {
  ------------------
  |  Branch (4859:9): [True: 0, False: 120]
  ------------------
 4860|      0|        return detail::unexpected_scan_error(
 4861|      0|            scan_error::invalid_scanned_value,
 4862|      0|            "Invalid encoding in scanned string");
 4863|      0|    }
 4864|       |
 4865|    120|    SCN_TRY_DISCARD(transcode_if_necessary(SCN_MOVE(src), value));
  ------------------
  |  | 3948|    120|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|    120|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 120]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 4866|    120|    return SCN_MOVE(result);
  ------------------
  |  | 1108|    120|    static_cast<    \
  |  | 1109|    120|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4867|    120|}
_ZN3scn2v44impl11make_readerINSt3__117basic_string_viewIwNS3_11char_traitsIwEEEEwEEDav:
 5905|   758k|{
 5906|       |    if constexpr (std::is_same_v<T, bool>) {
 5907|       |        return reader_impl_for_bool<CharT>{};
 5908|       |    }
 5909|       |    else if constexpr (std::is_same_v<T, char>) {
 5910|       |        return reader_impl_for_char<CharT>{};
 5911|       |    }
 5912|       |    else if constexpr (std::is_same_v<T, wchar_t>) {
 5913|       |        return reader_impl_for_wchar<CharT>{};
 5914|       |    }
 5915|       |    else if constexpr (std::is_same_v<T, char32_t>) {
 5916|       |        return reader_impl_for_code_point<CharT>{};
 5917|       |    }
 5918|       |    else if constexpr (std::is_same_v<T, std::string_view> ||
 5919|   758k|                       std::is_same_v<T, std::wstring_view>) {
 5920|   758k|        return reader_impl_for_string<CharT>{};
 5921|       |    }
 5922|       |    else if constexpr (std::is_same_v<T, std::string> ||
 5923|       |                       std::is_same_v<T, std::wstring>) {
 5924|       |        return reader_impl_for_string<CharT>{};
 5925|       |    }
 5926|       |#if !SCN_DISABLE_REGEX
 5927|       |    else if constexpr (std::is_same_v<T, regex_matches> ||
 5928|       |                       std::is_same_v<T, wregex_matches>) {
 5929|       |        return reader_impl_for_regex_matches<CharT>{};
 5930|       |    }
 5931|       |#endif
 5932|       |    else if constexpr (std::is_same_v<T, void*>) {
 5933|       |        return reader_impl_for_voidptr<CharT>{};
 5934|       |    }
 5935|       |    else if constexpr (std::is_floating_point_v<T>) {
 5936|       |        return reader_impl_for_float<CharT>{};
 5937|       |    }
 5938|       |    else if constexpr (std::is_same_v<T, signed char> ||
 5939|       |                       std::is_same_v<T, short> || std::is_same_v<T, int> ||
 5940|       |                       std::is_same_v<T, long> ||
 5941|       |                       std::is_same_v<T, long long> ||
 5942|       |                       std::is_same_v<T, unsigned char> ||
 5943|       |                       std::is_same_v<T, unsigned short> ||
 5944|       |                       std::is_same_v<T, unsigned int> ||
 5945|       |                       std::is_same_v<T, unsigned long> ||
 5946|       |                       std::is_same_v<T, unsigned long long>
 5947|       |#if SCN_HAS_INT128
 5948|       |                       || std::is_same_v<T, int128> ||
 5949|       |                       std::is_same_v<T, uint128>
 5950|       |#endif
 5951|       |    ) {
 5952|       |        return reader_impl_for_int<CharT>{};
 5953|       |    }
 5954|       |    else {
 5955|       |        return reader_impl_for_monostate<CharT>{};
 5956|       |    }
 5957|   758k|}
_ZN3scn2v44impl13string_readerIwE10read_specsINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_NSP_10locale_refE:
 5370|   303k|    {
 5371|   303k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   303k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5372|   303k|        return read_impl(range, specs, value);
 5373|   303k|    }
_ZN3scn2v44impl13string_readerIwE9read_implINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RKNS0_6detail12format_specsERT0_:
 5388|   303k|    {
 5389|   303k|        SCN_CLANG_PUSH
 5390|   303k|        SCN_CLANG_IGNORE("-Wcovered-switch-default")
 5391|       |
 5392|   303k|        switch (m_type) {
 5393|   299k|            case reader_type::word:
  ------------------
  |  Branch (5393:13): [True: 299k, False: 3.65k]
  ------------------
 5394|   299k|                return word_reader_impl<SourceCharT>{}.read(range, value);
 5395|       |
 5396|      0|            case reader_type::custom_word:
  ------------------
  |  Branch (5396:13): [True: 0, False: 303k]
  ------------------
 5397|      0|                return custom_word_reader_impl<SourceCharT>{}.read(range, specs,
 5398|      0|                                                                   value);
 5399|       |
 5400|      0|            case reader_type::character:
  ------------------
  |  Branch (5400:13): [True: 0, False: 303k]
  ------------------
 5401|      0|                return character_reader_impl<SourceCharT>{}.read(range, value);
 5402|       |
 5403|  3.65k|            case reader_type::character_set:
  ------------------
  |  Branch (5403:13): [True: 3.65k, False: 299k]
  ------------------
 5404|  3.65k|                return character_set_reader_impl<SourceCharT>{}.read(
 5405|  3.65k|                    range, specs, value);
 5406|       |
 5407|      0|#if !SCN_DISABLE_REGEX
 5408|      0|            case reader_type::regex:
  ------------------
  |  Branch (5408:13): [True: 0, False: 303k]
  ------------------
 5409|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5410|      0|                    range, specs.charset_string<SourceCharT>(),
 5411|      0|                    specs.regexp_flags, value);
 5412|       |
 5413|      0|            case reader_type::regex_escaped:
  ------------------
  |  Branch (5413:13): [True: 0, False: 303k]
  ------------------
 5414|      0|                return regex_string_reader_impl<SourceCharT>{}.read(
 5415|      0|                    range,
 5416|      0|                    get_unescaped_regex_pattern(
 5417|      0|                        specs.charset_string<SourceCharT>()),
 5418|      0|                    specs.regexp_flags, value);
 5419|      0|#endif
 5420|       |
 5421|      0|            default:
  ------------------
  |  Branch (5421:13): [True: 0, False: 303k]
  ------------------
 5422|      0|                SCN_EXPECT(false);
  ------------------
  |  | 1104|      0|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|      0|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 5423|   303k|                SCN_UNREACHABLE;
  ------------------
  |  | 1067|      0|#define SCN_UNREACHABLE __builtin_unreachable()
  ------------------
 5424|   303k|        }
 5425|       |
 5426|   303k|        SCN_CLANG_POP
 5427|   303k|    }
_ZN3scn2v44impl16word_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RNSD_17basic_string_viewIT0_NSD_11char_traitsISM_EEEE:
 4928|   749k|    {
 4929|   749k|        return read_string_view_impl(range, read_until_classic_space(range),
 4930|   749k|                                     value);
 4931|   749k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEE:
 4874|   749k|{
 4875|   749k|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|   749k|    auto src = [&]() {
 4878|   749k|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|   749k|            return make_contiguous_buffer(
 4880|   749k|                ranges::subrange{range.begin().base(), result.base()});
 4881|   749k|        }
 4882|   749k|        else {
 4883|   749k|            return make_contiguous_buffer(
 4884|   749k|                ranges::subrange{range.begin(), result});
 4885|   749k|        }
 4886|   749k|    }();
 4887|   749k|    using src_type = decltype(src);
 4888|       |
 4889|   749k|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|   749k|    else {
 4902|   749k|        const auto view = src.view();
 4903|   749k|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|   749k|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 6.53k, False: 742k]
  ------------------
 4906|  6.53k|            return detail::unexpected_scan_error(
 4907|  6.53k|                scan_error::invalid_scanned_value,
 4908|  6.53k|                "Invalid encoding in scanned string_view");
 4909|  6.53k|        }
 4910|       |
 4911|   742k|        return SCN_MOVE(result);
  ------------------
  |  | 1108|   742k|    static_cast<    \
  |  | 1109|   742k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|   749k|    }
 4913|   749k|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EES8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESD_OT0_RNSB_17basic_string_viewIT1_NSB_11char_traitsISM_EEEEENKUlvE_clEv:
 4877|   749k|    auto src = [&]() {
 4878|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|       |            return make_contiguous_buffer(
 4880|       |                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|   749k|        else {
 4883|   749k|            return make_contiguous_buffer(
 4884|   749k|                ranges::subrange{range.begin(), result});
 4885|   749k|        }
 4886|   749k|    }();
_ZN3scn2v44impl25character_set_reader_implIwE4readINS0_6ranges6detail9subrange_8subrangeIPKwSA_EEwEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESF_RKNS0_6detail12format_specsERNSD_17basic_string_viewIT0_NSD_11char_traitsISQ_EEEE:
 5159|  3.65k|    {
 5160|  3.65k|        auto it = read_source_impl(range, {specs});
 5161|  3.65k|        if (SCN_UNLIKELY(!it)) {
  ------------------
  |  | 1039|  3.65k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 3.53k, False: 120]
  |  |  ------------------
  ------------------
 5162|  3.53k|            return unexpected(it.error());
 5163|  3.53k|        }
 5164|       |
 5165|    120|        return read_string_view_impl(range, *it, value);
 5166|  3.65k|    }
_ZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEE:
 4874|    120|{
 4875|    120|    static_assert(ranges::forward_iterator<detail::remove_cvref_t<Iterator>>);
 4876|       |
 4877|    120|    auto src = [&]() {
 4878|    120|        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|    120|            return make_contiguous_buffer(
 4880|    120|                ranges::subrange{range.begin().base(), result.base()});
 4881|    120|        }
 4882|    120|        else {
 4883|    120|            return make_contiguous_buffer(
 4884|    120|                ranges::subrange{range.begin(), result});
 4885|    120|        }
 4886|    120|    }();
 4887|    120|    using src_type = decltype(src);
 4888|       |
 4889|    120|    if (src.stores_allocated_string()) {
  ------------------
  |  Branch (4889:9): [Folded - Ignored]
  ------------------
 4890|      0|        return detail::unexpected_scan_error(
 4891|      0|            scan_error::invalid_format_string,
 4892|      0|            "Cannot read a string_view from this source range (not "
 4893|      0|            "contiguous)");
 4894|      0|    }
 4895|       |    if constexpr (!std::is_same_v<typename src_type::char_type, ValueCharT>) {
 4896|       |        return detail::unexpected_scan_error(scan_error::invalid_format_string,
 4897|       |                                             "Cannot read a string_view from "
 4898|       |                                             "this source range (would require "
 4899|       |                                             "transcoding)");
 4900|       |    }
 4901|    120|    else {
 4902|    120|        const auto view = src.view();
 4903|    120|        value = std::basic_string_view<ValueCharT>(view.data(), view.size());
 4904|       |
 4905|    120|        if (!validate_unicode(value)) {
  ------------------
  |  Branch (4905:13): [True: 0, False: 120]
  ------------------
 4906|      0|            return detail::unexpected_scan_error(
 4907|      0|                scan_error::invalid_scanned_value,
 4908|      0|                "Invalid encoding in scanned string_view");
 4909|      0|        }
 4910|       |
 4911|    120|        return SCN_MOVE(result);
  ------------------
  |  | 1108|    120|    static_cast<    \
  |  | 1109|    120|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 4912|    120|    }
 4913|    120|}
_ZZN3scn2v44impl21read_string_view_implINS0_6ranges6detail9subrange_8subrangeIPKwS8_EERS8_wEENS0_13scan_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEESE_OT0_RNSC_17basic_string_viewIT1_NSC_11char_traitsISN_EEEEENKUlvE_clEv:
 4877|    120|    auto src = [&]() {
 4878|       |        if constexpr (detail::is_specialization_of_v<Range, take_width_view>) {
 4879|       |            return make_contiguous_buffer(
 4880|       |                ranges::subrange{range.begin().base(), result.base()});
 4881|       |        }
 4882|    120|        else {
 4883|    120|            return make_contiguous_buffer(
 4884|    120|                ranges::subrange{range.begin(), result});
 4885|    120|        }
 4886|    120|    }();
_ZN3scn2v44impl23skip_classic_whitespaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEEEERKSG_b:
 3097|   750k|{
 3098|   750k|    if (!allow_exhaustion) {
  ------------------
  |  Branch (3098:9): [True: 750k, False: 0]
  ------------------
 3099|   750k|        auto it = read_while_classic_space(range);
 3100|   750k|        if (auto e = eof_check(ranges::subrange{it, range.end()});
 3101|   750k|            SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   750k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.17k, False: 749k]
  |  |  ------------------
  ------------------
 3102|  1.17k|            return unexpected(e);
 3103|  1.17k|        }
 3104|       |
 3105|   749k|        return it;
 3106|   750k|    }
 3107|       |
 3108|      0|    return read_while_classic_space(range);
 3109|   750k|}
_ZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_:
 2248|   750k|{
 2249|       |    if constexpr (ranges::contiguous_range<Range> &&
 2250|       |                  ranges::sized_range<Range> &&
 2251|       |                  std::is_same_v<detail::char_t<Range>, char>) {
 2252|       |        auto buf = make_contiguous_buffer(range);
 2253|       |        auto it = find_classic_nonspace_narrow_fast(buf.view());
 2254|       |        return ranges::next(range.begin(),
 2255|       |                            ranges::distance(buf.view().begin(), it));
 2256|       |    }
 2257|   750k|    else {
 2258|   750k|        auto it = range.begin();
 2259|       |
 2260|       |        if constexpr (std::is_same_v<detail::char_t<Range>, char>) {
 2261|       |            auto seg = get_contiguous_beginning(range);
 2262|       |            if (auto seg_it = find_classic_nonspace_narrow_fast(seg);
 2263|       |                seg_it != seg.end()) {
 2264|       |                return ranges::next(it, ranges::distance(seg.begin(), seg_it));
 2265|       |            }
 2266|       |            ranges::advance(it, seg.size());
 2267|       |        }
 2268|       |
 2269|   750k|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|   750k|            return detail::is_cp_space(cp);
 2271|   750k|        });
 2272|   750k|    }
 2273|   750k|}
_ZN3scn2v44impl12function_refIFbDiES3_EC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_:
  742|   750k|        : m_fptr([](storage fn,
  743|   750k|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|   750k|              cvref<T> obj = *get<T>(fn);
  745|   750k|              if constexpr (std::is_void_v<R>) {
  746|   750k|                  obj(static_cast<decltype(args)>(args)...);
  747|   750k|              }
  748|   750k|              else {
  749|   750k|                  return obj(static_cast<decltype(args)>(args)...);
  750|   750k|              }
  751|   750k|          }),
  752|   750k|          m_storage(std::addressof(f))
  753|   750k|    {
  754|   750k|    }
_ZZN3scn2v44impl12function_refIFbDiES3_EC1IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_SO_TnPNSH_9enable_ifIXaaaasr6detailE11is_not_selfISJ_S4_Entsr3stdE19is_member_pointer_vIT0_E18is_invocable_usingIRSQ_EEvE4typeELPv0EEEOSJ_ENKUlNS1_12fnref_detail4base7storageEDiE_clESZ_Di:
  743|  1.78M|                    fnref_detail::param_t<Args>... args) noexcept(noex) -> R {
  744|  1.78M|              cvref<T> obj = *get<T>(fn);
  745|       |              if constexpr (std::is_void_v<R>) {
  746|       |                  obj(static_cast<decltype(args)>(args)...);
  747|       |              }
  748|  1.78M|              else {
  749|  1.78M|                  return obj(static_cast<decltype(args)>(args)...);
  750|  1.78M|              }
  751|  1.78M|          }),
_ZN3scn2v44impl12fnref_detail4base3getIZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS6_18default_sentinel_tEEEEEDTclL_ZNS6_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESI_EUlDiE_EEDaNS3_7storageE:
  683|  1.78M|    {
  684|       |        if constexpr (std::is_const_v<T>) {
  685|       |            return static_cast<T*>(s.m_cp);
  686|       |        }
  687|  1.78M|        else if constexpr (std::is_object_v<T>) {
  688|  1.78M|            return static_cast<T*>(s.m_p);
  689|       |        }
  690|       |        else {
  691|       |            return reinterpret_cast<T*>(s.m_fp);
  692|       |        }
  693|  1.78M|    }
_ZZN3scn2v44impl24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEEDTclL_ZNS3_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESF_ENKUlDiE_clEDi:
 2269|  1.78M|        return read_while_code_point(range, [](char32_t cp) noexcept {
 2270|  1.78M|            return detail::is_cp_space(cp);
 2271|  1.78M|        });
_ZN3scn2v44impl12fnref_detail4base7storageC2IZNS1_24read_while_classic_spaceINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS7_18default_sentinel_tEEEEEDTclL_ZNS7_5beginEEclsr3stdE7declvalIRNSt3__19add_constIT_E4typeEEEEESJ_EUlDiE_TnPNSH_9enable_ifIXsr3stdE11is_object_vISJ_EEvE4typeELPv0EEEPSJ_:
  660|   750k|        constexpr explicit storage(T* p) noexcept : m_p(p)
  661|   750k|        {
  662|   750k|        }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKcS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|   118k|{
 5892|   118k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   118k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.13k, False: 117k]
  |  |  ------------------
  ------------------
 5893|  1.13k|        return unexpected(e);
 5894|  1.13k|    }
 5895|       |
 5896|   117k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 117k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   117k|    return skip_classic_whitespace(range);
 5901|   117k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|  59.3k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  59.3k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  59.3k|            auto rd = make_reader<T, char_type>();
 5985|  59.3k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  59.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5971|  59.3k|    {
 5972|  59.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  59.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  59.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  59.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  59.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 987, False: 58.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    987|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    987|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    987|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    987|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    987|    }                                                  \
  |  |  |  | 3957|  59.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  58.3k|                        .transform_error(make_eof_scan_error));
 5974|  58.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  59.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__112basic_stringIcNSC_11char_traitsIcEENSC_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5359|  58.3k|    {
 5360|  58.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  58.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|  58.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|  58.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|  59.3k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|  59.3k|                          basic_contiguous_scan_context<char_type>>) {
 5984|  59.3k|            auto rd = make_reader<T, char_type>();
 5985|  59.3k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  59.3k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5971|  59.3k|    {
 5972|  59.3k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  59.3k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  59.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  59.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  59.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 987, False: 58.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    987|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    987|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    987|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    987|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    987|    }                                                  \
  |  |  |  | 3957|  59.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  58.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  58.3k|                        .transform_error(make_eof_scan_error));
 5974|  58.3k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  59.3k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKcSA_EENSt3__117basic_string_viewIcNSC_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5359|  58.3k|    {
 5360|  58.3k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  58.3k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|  58.3k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|  58.3k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5891|  75.2k|{
 5892|  75.2k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 717, False: 74.5k]
  |  |  ------------------
  ------------------
 5893|    717|        return unexpected(e);
 5894|    717|    }
 5895|       |
 5896|  74.5k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 74.5k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|  74.5k|    return skip_classic_whitespace(range);
 5901|  74.5k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEEclINSt3__112basic_stringIcNS9_11char_traitsIcEENS9_9allocatorIcEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIcE16forward_iteratorEEERT_:
 5979|  75.2k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|  75.2k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|  75.2k|            auto rd = make_reader<T, char_type>();
 5989|  75.2k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 75.2k, False: 0]
  ------------------
 5990|  75.2k|                return impl(rd, range, value);
 5991|  75.2k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|  75.2k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEcEEE4implINS1_22reader_impl_for_stringIcEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIcE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIcNSK_11char_traitsIcEENSK_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5971|  75.2k|    {
 5972|  75.2k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|  75.2k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  75.2k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  75.2k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  75.2k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.25k, False: 74.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.25k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.25k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.25k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.25k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.25k|    }                                                  \
  |  |  |  | 3957|  75.2k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  74.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|  74.0k|                        .transform_error(make_eof_scan_error));
 5974|  74.0k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|  75.2k|    }
_ZN3scn2v44impl13string_readerIcE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIcE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIcNSF_11char_traitsIcEENSF_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5359|  74.0k|    {
 5360|  74.0k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|  74.0k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|  74.0k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|  74.0k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEcEEEENSL_10locale_refE:
 3017|  94.6k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|  94.6k|    static_cast<    \
  |  | 1109|  94.6k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|  94.6k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|  94.6k|          m_current(m_range.begin())
 3020|  94.6k|    {
 3021|  94.6k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE3endEv:
 3029|   164k|    {
 3030|   164k|        return m_range.end();
 3031|   164k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE10advance_toES7_:
 3044|  76.9k|    {
 3045|  76.9k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|  76.9k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  76.9k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|  76.9k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|  76.9k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 76.9k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|  76.9k|        }
 3051|  76.9k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|  76.9k|    static_cast<    \
  |  | 1109|  76.9k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|  76.9k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS7_EEcE5rangeEv:
 3034|  87.5k|    {
 3035|  87.5k|        return ranges::subrange{begin(), end()};
 3036|  87.5k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|  84.0k|    {
 6144|  84.0k|        const bool need_skipped_width =
 6145|  84.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 84.0k]
  |  Branch (6145:33): [True: 0, False: 84.0k]
  ------------------
 6146|  84.0k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|  84.0k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 84.0k]
  ------------------
 6150|  84.0k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 84.0k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|  84.0k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 84.0k, False: 0]
  |  Branch (6154:56): [True: 79.1k, False: 4.91k]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|  79.1k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 79.1k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|   156k|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|  79.1k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  79.1k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  79.1k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  79.1k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.31k, False: 77.8k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.31k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.31k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.31k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.31k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.31k|    }                                                  \
  |  |  |  | 3957|  79.1k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  77.8k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|   156k|                            make_eof_scan_error));
 6165|       |
 6166|   156k|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 77.8k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|  77.8k|            return result_type{it, 0};
 6174|   156k|        }
 6175|       |
 6176|  4.91k|        return result_type{rng.begin(), 0};
 6177|  84.0k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|  76.1k|    {
 6186|  76.1k|        const bool need_skipped_width =
 6187|  76.1k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 76.1k]
  |  Branch (6187:33): [True: 0, False: 76.1k]
  ------------------
 6188|  76.1k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|  76.1k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 76.1k]
  ------------------
 6191|  76.1k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 76.1k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|  76.1k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 76.1k, False: 0]
  ------------------
 6200|  76.1k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 1.30k, False: 74.8k]
  ------------------
 6201|  76.1k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 1.30k]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|  1.30k|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 1.30k]
  ------------------
 6203|  1.30k|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|  76.1k|        return result_type{rng.begin(), 0};
 6225|  76.1k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__112basic_stringIcNSE_11char_traitsIcEENSE_9allocatorIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|  43.7k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  43.7k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  43.7k|            auto rd = make_reader<T, char_type>();
 6301|  43.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  43.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.76k, False: 42.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.76k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.76k|    }
  ------------------
 6302|  42.0k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  43.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__112basic_stringIcNSG_11char_traitsIcEENSG_9allocatorIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6230|  42.0k|    {
 6231|  42.0k|        const bool need_skipped_width =
 6232|  42.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 42.0k]
  |  Branch (6232:33): [True: 0, False: 42.0k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  42.0k|        auto it = rng.begin();
 6236|  42.0k|        std::ptrdiff_t prefix_width = 0;
 6237|  42.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 42.0k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  42.0k|        else {
 6245|  42.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 658, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    658|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    658|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    658|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    658|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    658|    }                                                  \
  |  |  |  | 3957|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  41.3k|            std::tie(it, prefix_width) = prefix_result;
 6247|  41.3k|        }
 6248|  41.3k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  41.3k|        std::ptrdiff_t value_width = 0;
 6252|  41.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 41.3k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  41.3k|        else {
 6268|  41.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.87k, False: 38.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  2.87k|    }                                                  \
  |  | 3957|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  38.4k|                                             specs, value, loc));
 6270|       |
 6271|  38.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 38.4k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  38.4k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  38.4k|        std::ptrdiff_t postfix_width = 0;
 6280|  38.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 38.0k, False: 416]
  ------------------
 6281|  38.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  38.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  38.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  38.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  38.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  38.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  38.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  38.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  38.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  38.0k|                                 value_width));
 6285|  38.0k|            std::tie(it, postfix_width) = postfix_result;
 6286|  38.0k|        }
 6287|       |
 6288|  38.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  38.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  38.4k|            specs, prefix_width, value_width, postfix_width));
 6290|  38.4k|        return it;
 6291|  38.4k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEEclINSt3__117basic_string_viewIcNSE_11char_traitsIcEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|  43.7k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|  43.7k|                          basic_contiguous_scan_context<char_type>>) {
 6300|  43.7k|            auto rd = make_reader<T, char_type>();
 6301|  43.7k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|  43.7k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  43.7k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 1.76k, False: 42.0k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  1.76k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  1.76k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  1.76k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  1.76k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  1.76k|    }
  ------------------
 6302|  42.0k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|  43.7k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKcS9_EEcEEE4implINS1_22reader_impl_for_stringIcEESA_NSt3__117basic_string_viewIcNSG_11char_traitsIcEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6230|  42.0k|    {
 6231|  42.0k|        const bool need_skipped_width =
 6232|  42.0k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 42.0k]
  |  Branch (6232:33): [True: 0, False: 42.0k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|  42.0k|        auto it = rng.begin();
 6236|  42.0k|        std::ptrdiff_t prefix_width = 0;
 6237|  42.0k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 42.0k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|  42.0k|        else {
 6245|  42.0k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|  42.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  42.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  42.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  42.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 658, False: 41.3k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    658|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    658|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    658|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    658|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    658|    }                                                  \
  |  |  |  | 3957|  42.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|  41.3k|            std::tie(it, prefix_width) = prefix_result;
 6247|  41.3k|        }
 6248|  41.3k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|  41.3k|        std::ptrdiff_t value_width = 0;
 6252|  41.3k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 41.3k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|  41.3k|        else {
 6268|  41.3k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|  41.3k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|  41.3k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|  41.3k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 2.87k, False: 38.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  2.87k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  2.87k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  2.87k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  2.87k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  2.87k|    }                                                  \
  |  | 3957|  41.3k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|  41.3k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|  38.4k|                                             specs, value, loc));
 6270|       |
 6271|  38.4k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 38.4k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|  38.4k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|  38.4k|        std::ptrdiff_t postfix_width = 0;
 6280|  38.4k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 38.0k, False: 416]
  ------------------
 6281|  38.0k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|  38.0k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|  38.0k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|  38.0k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|  38.0k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.0k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|  38.0k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|  38.0k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|  38.0k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|  38.0k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|  38.0k|                                 value_width));
 6285|  38.0k|            std::tie(it, postfix_width) = postfix_result;
 6286|  38.0k|        }
 6287|       |
 6288|  38.4k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|  38.4k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|  38.4k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 38.4k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|  38.4k|            specs, prefix_width, value_width, postfix_width));
 6290|  38.4k|        return it;
 6291|  38.4k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeIPKwS8_EEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSB_:
 5891|   901k|{
 5892|   901k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   901k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 2.24k, False: 899k]
  |  |  ------------------
  ------------------
 5893|  2.24k|        return unexpected(e);
 5894|  2.24k|    }
 5895|       |
 5896|   899k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 899k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   899k|    return skip_classic_whitespace(range);
 5901|   899k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|   450k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|   450k|                          basic_contiguous_scan_context<char_type>>) {
 5984|   450k|            auto rd = make_reader<T, char_type>();
 5985|   450k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|   450k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 5971|   450k|    {
 5972|   450k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|   450k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   450k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   450k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.37k, False: 449k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.37k|    }                                                  \
  |  |  |  | 3957|   450k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|   449k|                        .transform_error(make_eof_scan_error));
 5974|   449k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|   450k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__112basic_stringIwNSC_11char_traitsIwEENSC_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESL_RT0_NS0_6detail10locale_refE:
 5359|   449k|    {
 5360|   449k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   449k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|   449k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|   449k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 5979|   450k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|   450k|                          basic_contiguous_scan_context<char_type>>) {
 5984|   450k|            auto rd = make_reader<T, char_type>();
 5985|   450k|            return impl(rd, range, value);
 5986|       |        }
 5987|       |        else if constexpr (!detail::is_type_disabled<T>) {
 5988|       |            auto rd = make_reader<T, char_type>();
 5989|       |            if (!is_segment_contiguous(range)) {
 5990|       |                return impl(rd, range, value);
 5991|       |            }
 5992|       |            auto crange = get_as_contiguous(range);
 5993|       |            SCN_TRY(it, impl(rd, crange, value));
 5994|       |            return ranges::next(range.begin(),
 5995|       |                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|   450k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 5971|   450k|    {
 5972|   450k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|   450k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   450k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   450k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.37k, False: 449k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.37k|    }                                                  \
  |  |  |  | 3957|   450k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|   449k|                        .transform_error(make_eof_scan_error));
 5974|   449k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|   450k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeIPKwSA_EENSt3__117basic_string_viewIwNSC_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSC_9add_constIT_E4typeEEEEEEESJ_RT0_NS0_6detail10locale_refE:
 5359|   449k|    {
 5360|   449k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   449k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|   449k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|   449k|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwEC2IRS8_TnPNSt3__19enable_ifIXaasr6rangesE16contiguous_rangeIT_Esr6rangesE14borrowed_rangeISE_EEvE4typeELPv0EEEOSE_NS0_15basic_scan_argsINS1_INS0_6detail16buffer_range_tagEwEEEENSL_10locale_refE:
 3017|   629k|        : base(SCN_MOVE(a), loc),
  ------------------
  |  | 1108|   629k|    static_cast<    \
  |  | 1109|   629k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3018|   629k|          m_range(ranges::data(r), ranges::data(r) + ranges::size(r)),
 3019|   629k|          m_current(m_range.begin())
 3020|   629k|    {
 3021|   629k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE3endEv:
 3029|  1.20M|    {
 3030|  1.20M|        return m_range.end();
 3031|  1.20M|    }
_ZN3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE10advance_toES7_:
 3044|   594k|    {
 3045|   594k|        SCN_EXPECT(it <= end());
  ------------------
  |  | 1104|   594k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   594k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
 3046|   594k|        if constexpr (detail::is_comparable_with_nullptr<iterator>) {
 3047|   594k|            if (it == nullptr) {
  ------------------
  |  Branch (3047:17): [True: 0, False: 594k]
  ------------------
 3048|      0|                it = end();
 3049|      0|            }
 3050|   594k|        }
 3051|   594k|        m_current = SCN_MOVE(it);
  ------------------
  |  | 1108|   594k|    static_cast<    \
  |  | 1109|   594k|        typename ::scn::detail::remove_reference<decltype(x)>::type&&>(x)
  ------------------
 3052|   594k|    }
_ZNK3scn2v418basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS7_EEwE5rangeEv:
 3034|   615k|    {
 3035|   615k|        return ranges::subrange{begin(), end()};
 3036|   615k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE11impl_prefixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_b:
 6143|   608k|    {
 6144|   608k|        const bool need_skipped_width =
 6145|   608k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6145:13): [True: 0, False: 608k]
  |  Branch (6145:33): [True: 0, False: 608k]
  ------------------
 6146|   608k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6147|       |
 6148|       |        // Read prefix
 6149|   608k|        if (specs.align == detail::align_type::right ||
  ------------------
  |  Branch (6149:13): [True: 0, False: 608k]
  ------------------
 6150|   608k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6150:13): [True: 0, False: 608k]
  ------------------
 6151|      0|            return skip_fill(rng, specs.precision, specs.fill,
 6152|      0|                             need_skipped_width);
 6153|      0|        }
 6154|   608k|        if (specs.align == detail::align_type::none && rd_skip_ws_before_read) {
  ------------------
  |  Branch (6154:13): [True: 608k, False: 0]
  |  Branch (6154:56): [True: 601k, False: 7.30k]
  ------------------
 6155|       |            // Default alignment:
 6156|       |            // Skip preceding whitespace, if required by the reader
 6157|   601k|            if (specs.precision != 0) {
  ------------------
  |  Branch (6157:17): [True: 0, False: 601k]
  ------------------
 6158|      0|                auto max_width_view = take_width(rng, specs.precision);
 6159|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6160|      0|                                  .transform_error(make_eof_scan_error));
 6161|      0|                return result_type{w_it.base(), specs.precision - w_it.count()};
 6162|      0|            }
 6163|  1.20M|            SCN_TRY(it, skip_classic_whitespace(rng).transform_error(
  ------------------
  |  | 3958|   601k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   601k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   601k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   601k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.83k, False: 599k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.83k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.83k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.83k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.83k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.83k|    }                                                  \
  |  |  |  | 3957|   601k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   599k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6164|  1.20M|                            make_eof_scan_error));
 6165|       |
 6166|  1.20M|            if (need_skipped_width) {
  ------------------
  |  Branch (6166:17): [True: 0, False: 599k]
  ------------------
 6167|      0|                return result_type{
 6168|      0|                    it,
 6169|      0|                    calculate_text_width(make_contiguous_buffer(
 6170|      0|                                             ranges::subrange{rng.begin(), it})
 6171|      0|                                             .view())};
 6172|      0|            }
 6173|   599k|            return result_type{it, 0};
 6174|  1.20M|        }
 6175|       |
 6176|  7.30k|        return result_type{rng.begin(), 0};
 6177|   608k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE12impl_postfixISA_EENS0_13scan_expectedINSt3__14pairIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT_EEEElEEEESH_bll:
 6185|   592k|    {
 6186|   592k|        const bool need_skipped_width =
 6187|   592k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6187:13): [True: 0, False: 592k]
  |  Branch (6187:33): [True: 0, False: 592k]
  ------------------
 6188|   592k|        using result_type = skip_fill_result<ranges::iterator_t<Range>>;
 6189|       |
 6190|   592k|        if (specs.align == detail::align_type::left ||
  ------------------
  |  Branch (6190:13): [True: 0, False: 592k]
  ------------------
 6191|   592k|            specs.align == detail::align_type::center) {
  ------------------
  |  Branch (6191:13): [True: 0, False: 592k]
  ------------------
 6192|      0|            if (specs.precision != 0 &&
  ------------------
  |  Branch (6192:17): [True: 0, False: 0]
  ------------------
 6193|      0|                specs.precision - value_width - prefix_width == 0) {
  ------------------
  |  Branch (6193:17): [True: 0, False: 0]
  ------------------
 6194|      0|                return result_type{rng.begin(), 0};
 6195|      0|            }
 6196|      0|            return skip_fill(rng, specs.precision - value_width - prefix_width,
 6197|      0|                             specs.fill, need_skipped_width);
 6198|      0|        }
 6199|   592k|        if (specs.align == detail::align_type::none &&
  ------------------
  |  Branch (6199:13): [True: 592k, False: 0]
  ------------------
 6200|   592k|            !rd_skip_ws_before_read &&
  ------------------
  |  Branch (6200:13): [True: 192, False: 592k]
  ------------------
 6201|   592k|            ((specs.width != 0 && prefix_width + value_width < specs.width) ||
  ------------------
  |  Branch (6201:15): [True: 0, False: 192]
  |  Branch (6201:35): [True: 0, False: 0]
  ------------------
 6202|    192|             (specs.precision != 0 &&
  ------------------
  |  Branch (6202:15): [True: 0, False: 192]
  ------------------
 6203|    192|              prefix_width + value_width < specs.precision))) {
  ------------------
  |  Branch (6203:15): [True: 0, False: 0]
  ------------------
 6204|      0|            if (specs.precision != 0) {
  ------------------
  |  Branch (6204:17): [True: 0, False: 0]
  ------------------
 6205|      0|                const auto initial_width =
 6206|      0|                    specs.precision - prefix_width - value_width;
 6207|      0|                auto max_width_view = take_width(rng, initial_width);
 6208|      0|                SCN_TRY(w_it, skip_classic_whitespace(max_width_view, true)
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6209|      0|                                  .transform_error(make_eof_scan_error));
 6210|      0|                return result_type{w_it.base(), initial_width - w_it.count()};
 6211|      0|            }
 6212|      0|            SCN_TRY(it, skip_classic_whitespace(rng, true).transform_error(
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6213|      0|                            make_eof_scan_error));
 6214|       |
 6215|      0|            if (need_skipped_width) {
  ------------------
  |  Branch (6215:17): [True: 0, False: 0]
  ------------------
 6216|      0|                return result_type{
 6217|      0|                    it,
 6218|      0|                    calculate_text_width(make_contiguous_buffer(
 6219|      0|                                             ranges::subrange{rng.begin(), it})
 6220|      0|                                             .view())};
 6221|      0|            }
 6222|      0|            return result_type{it, 0};
 6223|      0|        }
 6224|   592k|        return result_type{rng.begin(), 0};
 6225|   592k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__112basic_stringIwNSE_11char_traitsIwEENSE_9allocatorIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|   307k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   307k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   307k|            auto rd = make_reader<T, char_type>();
 6301|   307k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   307k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.53k, False: 304k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.53k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.53k|    }
  ------------------
 6302|   304k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   307k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__112basic_stringIwNSG_11char_traitsIwEENSG_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SO_RT1_:
 6230|   304k|    {
 6231|   304k|        const bool need_skipped_width =
 6232|   304k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 304k]
  |  Branch (6232:33): [True: 0, False: 304k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   304k|        auto it = rng.begin();
 6236|   304k|        std::ptrdiff_t prefix_width = 0;
 6237|   304k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 304k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   304k|        else {
 6245|   304k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 918, False: 303k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    918|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    918|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    918|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    918|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    918|    }                                                  \
  |  |  |  | 3957|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   303k|            std::tie(it, prefix_width) = prefix_result;
 6247|   303k|        }
 6248|   303k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   303k|        std::ptrdiff_t value_width = 0;
 6252|   303k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 303k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   303k|        else {
 6268|   303k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.14k, False: 297k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.14k|    }                                                  \
  |  | 3957|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   297k|                                             specs, value, loc));
 6270|       |
 6271|   297k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 297k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   297k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   297k|        std::ptrdiff_t postfix_width = 0;
 6280|   297k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 296k, False: 772]
  ------------------
 6281|   296k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   296k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   296k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   296k|                                 value_width));
 6285|   296k|            std::tie(it, postfix_width) = postfix_result;
 6286|   296k|        }
 6287|       |
 6288|   297k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   297k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 297k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   297k|            specs, prefix_width, value_width, postfix_width));
 6290|   297k|        return it;
 6291|   297k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEEclINSt3__117basic_string_viewIwNSE_11char_traitsIwEEEEEENS0_13scan_expectedIS9_EERT_:
 6295|   307k|    {
 6296|       |        if constexpr (!detail::is_type_disabled<T> &&
 6297|       |                      std::is_same_v<
 6298|       |                          context_type,
 6299|   307k|                          basic_contiguous_scan_context<char_type>>) {
 6300|   307k|            auto rd = make_reader<T, char_type>();
 6301|   307k|            SCN_TRY_DISCARD(rd.check_specs(specs));
  ------------------
  |  | 3948|   307k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   307k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 3.53k, False: 304k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|  3.53k|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|  3.53k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  3.53k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  3.53k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|  3.53k|    }
  ------------------
 6302|   304k|            return impl(rd, range, value);
 6303|       |        }
 6304|       |        else if constexpr (!detail::is_type_disabled<T>) {
 6305|       |            auto rd = make_reader<T, char_type>();
 6306|       |            SCN_TRY_DISCARD(rd.check_specs(specs));
 6307|       |
 6308|       |            if (!is_segment_contiguous(range) || specs.precision != 0 ||
 6309|       |                specs.width != 0) {
 6310|       |                return impl(rd, range, value);
 6311|       |            }
 6312|       |
 6313|       |            auto crange = get_as_contiguous(range);
 6314|       |            SCN_TRY(it, impl(rd, crange, value));
 6315|       |            return ranges::next(range.begin(),
 6316|       |                                ranges::distance(crange.begin(), it));
 6317|       |        }
 6318|       |        else {
 6319|       |            SCN_EXPECT(false);
 6320|       |            SCN_UNREACHABLE;
 6321|       |        }
 6322|   307k|    }
_ZN3scn2v44impl10arg_readerINS0_18basic_scan_contextINS0_6ranges6detail9subrange_8subrangeIPKwS9_EEwEEE4implINS1_22reader_impl_for_stringIwEESA_NSt3__117basic_string_viewIwNSG_11char_traitsIwEEEEEENS0_13scan_expectedIDTclL_ZNS4_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SM_RT1_:
 6230|   304k|    {
 6231|   304k|        const bool need_skipped_width =
 6232|   304k|            specs.width != 0 || specs.precision != 0;
  ------------------
  |  Branch (6232:13): [True: 0, False: 304k]
  |  Branch (6232:33): [True: 0, False: 304k]
  ------------------
 6233|       |
 6234|       |        // Read prefix
 6235|   304k|        auto it = rng.begin();
 6236|   304k|        std::ptrdiff_t prefix_width = 0;
 6237|   304k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6237:13): [True: 0, False: 304k]
  ------------------
 6238|      0|            auto max_width_view = take_width(rng, specs.precision);
 6239|      0|            SCN_TRY(prefix_result,
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6240|      0|                    impl_prefix(max_width_view, rd.skip_ws_before_read()));
 6241|      0|            it = prefix_result.first.base();
 6242|      0|            prefix_width = prefix_result.second;
 6243|      0|        }
 6244|   304k|        else {
 6245|   304k|            SCN_TRY(prefix_result, impl_prefix(rng, rd.skip_ws_before_read()));
  ------------------
  |  | 3958|   304k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   304k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   304k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   304k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 918, False: 303k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|    918|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|    918|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|    918|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|    918|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|    918|    }                                                  \
  |  |  |  | 3957|   304k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6246|   303k|            std::tie(it, prefix_width) = prefix_result;
 6247|   303k|        }
 6248|   303k|        auto prefix_end_it = it;
 6249|       |
 6250|       |        // Read value
 6251|   303k|        std::ptrdiff_t value_width = 0;
 6252|   303k|        if (specs.precision != 0) {
  ------------------
  |  Branch (6252:13): [True: 0, False: 303k]
  ------------------
 6253|      0|            if (specs.precision <= prefix_width) {
  ------------------
  |  Branch (6253:17): [True: 0, False: 0]
  ------------------
 6254|      0|                return detail::unexpected_scan_error(
 6255|      0|                    scan_error::invalid_fill,
 6256|      0|                    "Too many fill characters before value, "
 6257|      0|                    "precision exceeded before reading value");
 6258|      0|            }
 6259|       |
 6260|      0|            const auto initial_width = specs.precision - prefix_width;
 6261|      0|            auto max_width_view =
 6262|      0|                take_width(ranges::subrange{it, rng.end()}, initial_width);
 6263|      0|            SCN_TRY(w_it, rd.read_specs(max_width_view, specs, value, loc));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6264|      0|            it = w_it.base();
 6265|      0|            value_width = initial_width - w_it.count();
 6266|      0|        }
 6267|   303k|        else {
 6268|   303k|            SCN_TRY_ASSIGN(it, rd.read_specs(ranges::subrange{it, rng.end()},
  ------------------
  |  | 3953|   303k|    auto&& SCN_TRY_TMP = (x);                          \
  |  | 3954|   303k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  ------------------
  |  |  |  | 1039|   303k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 6.14k, False: 297k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3955|  6.14k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  ------------------
  |  |  |  | 3945|  6.14k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|  6.14k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|  6.14k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3956|  6.14k|    }                                                  \
  |  | 3957|   303k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  ------------------
  |  |  |  | 1110|   303k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  ------------------
  ------------------
 6269|   297k|                                             specs, value, loc));
 6270|       |
 6271|   297k|            if (need_skipped_width) {
  ------------------
  |  Branch (6271:17): [True: 0, False: 297k]
  ------------------
 6272|      0|                value_width = calculate_text_width(
 6273|      0|                    make_contiguous_buffer(ranges::subrange{prefix_end_it, it})
 6274|      0|                        .view());
 6275|      0|            }
 6276|   297k|        }
 6277|       |
 6278|       |        // Read postfix
 6279|   297k|        std::ptrdiff_t postfix_width = 0;
 6280|   297k|        if (it != rng.end()) {
  ------------------
  |  Branch (6280:13): [True: 296k, False: 772]
  ------------------
 6281|   296k|            SCN_TRY(postfix_result,
  ------------------
  |  | 3958|   296k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   296k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   296k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   296k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 296k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|   296k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   296k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 6282|   296k|                    impl_postfix(ranges::subrange{it, rng.end()},
 6283|   296k|                                 rd.skip_ws_before_read(), prefix_width,
 6284|   296k|                                 value_width));
 6285|   296k|            std::tie(it, postfix_width) = postfix_result;
 6286|   296k|        }
 6287|       |
 6288|   297k|        SCN_TRY_DISCARD(check_widths_for_arg_reader(
  ------------------
  |  | 3948|   297k|    if (auto&& SCN_TRY_TMP = (x); SCN_UNLIKELY(!SCN_TRY_TMP)) { \
  |  |  ------------------
  |  |  |  | 1039|   297k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  ------------------
  |  |  |  |  |  Branch (1039:25): [True: 0, False: 297k]
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3949|      0|        return ::scn::unexpected(SCN_TRY_TMP.error());          \
  |  |  ------------------
  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  ------------------
  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  ------------------
  |  | 3950|      0|    }
  ------------------
 6289|   297k|            specs, prefix_width, value_width, postfix_width));
 6290|   297k|        return it;
 6291|   297k|    }
_ZN3scn2v44impl26skip_ws_before_if_requiredINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS3_18default_sentinel_tEEEEENS1_12eof_expectedIDTclL_ZNS3_5beginEEclsr3stdE7declvalIRT_EEEEEEbSE_:
 5891|   450k|{
 5892|   450k|    if (auto e = eof_check(range); SCN_UNLIKELY(!e)) {
  ------------------
  |  | 1039|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  ------------------
  |  |  |  Branch (1039:25): [True: 1.12k, False: 449k]
  |  |  ------------------
  ------------------
 5893|  1.12k|        return unexpected(e);
 5894|  1.12k|    }
 5895|       |
 5896|   449k|    if (!is_required) {
  ------------------
  |  Branch (5896:9): [True: 0, False: 449k]
  ------------------
 5897|      0|        return range.begin();
 5898|      0|    }
 5899|       |
 5900|   449k|    return skip_classic_whitespace(range);
 5901|   449k|}
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEEclINSt3__112basic_stringIwNS9_11char_traitsIwEENS9_9allocatorIwEEEEEENS0_13scan_expectedINS4_17basic_scan_bufferIwE16forward_iteratorEEERT_:
 5979|   450k|    {
 5980|       |        if constexpr (!detail::is_type_disabled<T> &&
 5981|       |                      std::is_same_v<
 5982|       |                          context_type,
 5983|       |                          basic_contiguous_scan_context<char_type>>) {
 5984|       |            auto rd = make_reader<T, char_type>();
 5985|       |            return impl(rd, range, value);
 5986|       |        }
 5987|   450k|        else if constexpr (!detail::is_type_disabled<T>) {
 5988|   450k|            auto rd = make_reader<T, char_type>();
 5989|   450k|            if (!is_segment_contiguous(range)) {
  ------------------
  |  Branch (5989:17): [True: 450k, False: 0]
  ------------------
 5990|   450k|                return impl(rd, range, value);
 5991|   450k|            }
 5992|      0|            auto crange = get_as_contiguous(range);
 5993|      0|            SCN_TRY(it, impl(rd, crange, value));
  ------------------
  |  | 3958|      0|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|      0|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|      0|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|      0|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 0, False: 0]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|      0|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|      0|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|      0|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|      0|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|      0|    }                                                  \
  |  |  |  | 3957|      0|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|      0|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5994|      0|            return ranges::next(range.begin(),
 5995|      0|                                ranges::distance(crange.begin(), it));
 5996|       |        }
 5997|       |        else {
 5998|       |            SCN_EXPECT(false);
 5999|       |            SCN_UNREACHABLE;
 6000|       |        }
 6001|   450k|    }
_ZN3scn2v44impl18default_arg_readerINS0_18basic_scan_contextINS0_6detail16buffer_range_tagEwEEE4implINS1_22reader_impl_for_stringIwEENS0_6ranges6detail9subrange_8subrangeINS4_17basic_scan_bufferIwE16forward_iteratorENSB_18default_sentinel_tEEENSt3__112basic_stringIwNSK_11char_traitsIwEENSK_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNSB_5beginEEclsr3stdE7declvalIRT0_EEEEEERT_SS_RT1_:
 5971|   450k|    {
 5972|   450k|        SCN_TRY(it, skip_ws_before_if_required(rd.skip_ws_before_read(), rng)
  ------------------
  |  | 3958|   450k|#define SCN_TRY(name, x) SCN_TRY_ASSIGN(auto name, x)
  |  |  ------------------
  |  |  |  | 3953|   450k|    auto&& SCN_TRY_TMP = (x);                          \
  |  |  |  | 3954|   450k|    if (SCN_UNLIKELY(!SCN_TRY_TMP)) {                  \
  |  |  |  |  ------------------
  |  |  |  |  |  | 1039|   450k|#define SCN_UNLIKELY(x) __builtin_expect(!!(x), 0)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  Branch (1039:25): [True: 1.37k, False: 449k]
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3955|  1.37k|        return ::scn::unexpected(SCN_TRY_TMP.error()); \
  |  |  |  |  ------------------
  |  |  |  |  |  | 3945|  1.37k|#define SCN_TRY_TMP                SCN_TRY_IMPL_CONCAT2(_scn_try_tmp_, __LINE__)
  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  | 3944|  1.37k|#define SCN_TRY_IMPL_CONCAT2(a, b) SCN_TRY_IMPL_CONCAT(a, b)
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  |  |  |  | 3943|  1.37k|#define SCN_TRY_IMPL_CONCAT(a, b)  a##b
  |  |  |  |  |  |  |  |  ------------------
  |  |  |  |  |  |  ------------------
  |  |  |  |  ------------------
  |  |  |  | 3956|  1.37k|    }                                                  \
  |  |  |  | 3957|   450k|    init = *SCN_FWD(SCN_TRY_TMP);
  |  |  |  |  ------------------
  |  |  |  |  |  | 1110|   449k|#define SCN_FWD(x)          static_cast<decltype(x)&&>(x)
  |  |  |  |  ------------------
  |  |  ------------------
  ------------------
 5973|   449k|                        .transform_error(make_eof_scan_error));
 5974|   449k|        return rd.read_default(ranges::subrange{it, rng.end()}, value, loc);
 5975|   450k|    }
_ZN3scn2v44impl13string_readerIwE12read_defaultINS0_6ranges6detail9subrange_8subrangeINS0_6detail17basic_scan_bufferIwE16forward_iteratorENS5_18default_sentinel_tEEENSt3__112basic_stringIwNSF_11char_traitsIwEENSF_9allocatorIwEEEEEENS0_13scan_expectedIDTclL_ZNS5_5beginEEclsr3stdE7declvalIRNSF_9add_constIT_E4typeEEEEEEESO_RT0_NS9_10locale_refE:
 5359|   449k|    {
 5360|   449k|        SCN_UNUSED(loc);
  ------------------
  |  | 1089|   449k|#define SCN_UNUSED(x) static_cast<void>(sizeof(x))
  ------------------
 5361|   449k|        return word_reader_impl<SourceCharT>{}.read(range, value);
 5362|   449k|    }

_ZN3scn4fuzz16make_input_viewsEPKhm:
   52|    883|{
   53|    883|    SCN_EXPECT(size <= max_input_bytes);
  ------------------
  |  | 1104|    883|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|    883|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
   54|       |
   55|       |    // narrow
   56|    883|    string_buffer.resize(size);
   57|    883|    std::copy(data, data + size, reinterpret_cast<uint8_t*>(&string_buffer[0]));
   58|    883|    auto sv = std::string_view{string_buffer};
   59|       |
   60|       |    // wide, bitwise reinterpret
   61|    883|    const auto wsv_reinterpret_size =
   62|    883|        size < sizeof(wchar_t) ? 1 : (size / sizeof(wchar_t));
  ------------------
  |  Branch (62:9): [True: 151, False: 732]
  ------------------
   63|    883|    wstring_buffer_reinterpreted.resize(wsv_reinterpret_size);
   64|    883|    std::memcpy(wstring_buffer_reinterpreted.data(), data, size);
   65|    883|    auto wsv_reintepreted = std::wstring_view{wstring_buffer_reinterpreted};
   66|       |
   67|       |    // wide, transcode to correct encoding (utf16 or utf32)
   68|    883|    scn::impl::transcode_to_string(sv, wstring_buffer_transcoded_wide);
   69|    883|    std::wstring_view wsv_transcoded{wstring_buffer_transcoded_wide};
   70|       |
   71|    883|    return std::make_tuple(sv, wsv_reintepreted, wsv_transcoded);
   72|    883|}
_ZN3scn4fuzz18get_format_stringsIcJPKcS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    883|{
  123|    883|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    883|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    883|    buf.resize(sizeof...(Args));
  126|    883|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    883|    return buf;
  128|    883|}
_ZN3scn4fuzz29get_format_string_view_bufferIcEERDav:
  108|    883|{
  109|    883|    if constexpr (std::is_same_v<CharT, char>) {
  110|    883|        return format_string_view_buffer;
  111|       |    }
  112|       |    else {
  113|       |        return wformat_string_view_buffer;
  114|       |    }
  115|    883|}
_ZN3scn4fuzz12do_basic_runIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|    883|{
  186|    883|    do_basic_run_for_source<CharT>(data, format_strings);
  187|    883|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|    883|                                   format_strings);
  189|    883|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_17basic_string_viewIcS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|    883|{
  134|       |    // Regular scan
  135|  5.29k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.29k, False: 883]
  ------------------
  136|  5.29k|        auto it = scn::ranges::begin(source);
  137|  43.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  43.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  43.4k|            auto result = scn::scan<T>(
  140|  43.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  43.4k|                scn::runtime_format(f));
  142|  43.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.29k, False: 38.1k]
  ------------------
  143|  5.29k|                break;
  144|  5.29k|            }
  145|  38.1k|            it = result->begin();
  146|  38.1k|        }
  147|  5.29k|    }
  148|       |
  149|       |    // scan localized
  150|  5.29k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.29k, False: 883]
  ------------------
  151|  5.29k|        auto it = scn::ranges::begin(source);
  152|  43.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  43.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  43.4k|            auto result = scn::scan<T>(
  155|  43.4k|                global_locale,
  156|  43.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  43.4k|                scn::runtime_format(f));
  158|  43.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.29k, False: 38.1k]
  ------------------
  159|  5.29k|                break;
  160|  5.29k|            }
  161|  38.1k|            it = result->begin();
  162|  38.1k|        }
  163|  5.29k|    }
  164|       |
  165|       |    // scan_value
  166|    883|    {
  167|    883|        auto it = scn::ranges::begin(source);
  168|  19.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.7k|            auto result = scn::scan_value<T>(
  171|  19.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 883, False: 18.9k]
  ------------------
  173|    883|                break;
  174|    883|            }
  175|  18.9k|            it = result->begin();
  176|  18.9k|        }
  177|    883|    }
  178|    883|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|    883|{
  134|       |    // Regular scan
  135|  5.29k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.29k, False: 883]
  ------------------
  136|  5.29k|        auto it = scn::ranges::begin(source);
  137|  43.4k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  43.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  43.4k|            auto result = scn::scan<T>(
  140|  43.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  43.4k|                scn::runtime_format(f));
  142|  43.4k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.29k, False: 38.1k]
  ------------------
  143|  5.29k|                break;
  144|  5.29k|            }
  145|  38.1k|            it = result->begin();
  146|  38.1k|        }
  147|  5.29k|    }
  148|       |
  149|       |    // scan localized
  150|  5.29k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.29k, False: 883]
  ------------------
  151|  5.29k|        auto it = scn::ranges::begin(source);
  152|  43.4k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  43.4k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  43.4k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  43.4k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  43.4k|            auto result = scn::scan<T>(
  155|  43.4k|                global_locale,
  156|  43.4k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  43.4k|                scn::runtime_format(f));
  158|  43.4k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.29k, False: 38.1k]
  ------------------
  159|  5.29k|                break;
  160|  5.29k|            }
  161|  38.1k|            it = result->begin();
  162|  38.1k|        }
  163|  5.29k|    }
  164|       |
  165|       |    // scan_value
  166|    883|    {
  167|    883|        auto it = scn::ranges::begin(source);
  168|  19.7k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  19.7k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  19.7k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  19.7k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  19.7k|            auto result = scn::scan_value<T>(
  171|  19.7k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  19.7k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 883, False: 18.9k]
  ------------------
  173|    883|                break;
  174|    883|            }
  175|  18.9k|            it = result->begin();
  176|  18.9k|        }
  177|    883|    }
  178|    883|}
_ZN3scn4fuzz21do_basic_run_for_typeIcNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEKNS2_5dequeIcS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|    883|{
  134|       |    // Regular scan
  135|  5.29k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 5.29k, False: 883]
  ------------------
  136|  5.29k|        auto it = scn::ranges::begin(source);
  137|  54.2k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|  54.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  54.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  54.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|  54.2k|            auto result = scn::scan<T>(
  140|  54.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|  54.2k|                scn::runtime_format(f));
  142|  54.2k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 5.29k, False: 48.9k]
  ------------------
  143|  5.29k|                break;
  144|  5.29k|            }
  145|  48.9k|            it = result->begin();
  146|  48.9k|        }
  147|  5.29k|    }
  148|       |
  149|       |    // scan localized
  150|  5.29k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 5.29k, False: 883]
  ------------------
  151|  5.29k|        auto it = scn::ranges::begin(source);
  152|  54.2k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|  54.2k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  54.2k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  54.2k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|  54.2k|            auto result = scn::scan<T>(
  155|  54.2k|                global_locale,
  156|  54.2k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|  54.2k|                scn::runtime_format(f));
  158|  54.2k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 5.29k, False: 48.9k]
  ------------------
  159|  5.29k|                break;
  160|  5.29k|            }
  161|  48.9k|            it = result->begin();
  162|  48.9k|        }
  163|  5.29k|    }
  164|       |
  165|       |    // scan_value
  166|    883|    {
  167|    883|        auto it = scn::ranges::begin(source);
  168|  25.0k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|  25.0k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|  25.0k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|  25.0k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|  25.0k|            auto result = scn::scan_value<T>(
  171|  25.0k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|  25.0k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 883, False: 24.2k]
  ------------------
  173|    883|                break;
  174|    883|            }
  175|  24.2k|            it = result->begin();
  176|  24.2k|        }
  177|    883|    }
  178|    883|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEERKDaRT_:
   90|    883|{
   91|    883|    using char_type = ranges::range_value_t<Source>;
   92|    883|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|    883|    deque.clear();
   94|    883|    std::copy(ranges::begin(source), ranges::end(source),
   95|    883|              std::back_inserter(deque));
   96|    883|    return deque;
   97|    883|}
_ZN3scn4fuzz24get_noncontiguous_bufferIcEERDav:
   79|    883|{
   80|    883|    if constexpr (std::is_same_v<CharT, char>) {
   81|    883|        return noncontiguous_buffer;
   82|       |    }
   83|       |    else {
   84|       |        return wnoncontiguous_buffer;
   85|       |    }
   86|    883|}
_ZN3scn4fuzz18get_format_stringsIwJPKwS3_S3_S3_S3_S3_EEERKNSt3__16vectorINS4_17basic_string_viewIT_NS4_11char_traitsIS7_EEEENS4_9allocatorISA_EEEEDpT0_:
  122|    883|{
  123|    883|    std::array<const CharT*, sizeof...(Args)> tmp = {{strings...}};
  124|    883|    auto& buf = get_format_string_view_buffer<CharT>();
  125|    883|    buf.resize(sizeof...(Args));
  126|    883|    std::copy(tmp.begin(), tmp.end(), buf.begin());
  127|    883|    return buf;
  128|    883|}
_ZN3scn4fuzz29get_format_string_view_bufferIwEERDav:
  108|    883|{
  109|       |    if constexpr (std::is_same_v<CharT, char>) {
  110|       |        return format_string_view_buffer;
  111|       |    }
  112|    883|    else {
  113|    883|        return wformat_string_view_buffer;
  114|    883|    }
  115|    883|}
_ZN3scn4fuzz12do_basic_runIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvT0_RKNS2_6vectorINS3_IT_NS4_IS9_EEEENS2_9allocatorISB_EEEE:
  185|  1.76k|{
  186|  1.76k|    do_basic_run_for_source<CharT>(data, format_strings);
  187|  1.76k|    do_basic_run_for_source<CharT>(populate_noncontiguous(data),
  188|  1.76k|                                   format_strings);
  189|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEENS2_17basic_string_viewIwS5_EEEEvRT1_RKNS2_6vectorINS9_IT_NS4_ISE_EEEENS6_ISG_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|   307k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   307k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   307k|            auto result = scn::scan<T>(
  140|   307k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   307k|                scn::runtime_format(f));
  142|   307k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 297k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|   297k|            it = result->begin();
  146|   297k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|   307k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   307k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   307k|            auto result = scn::scan<T>(
  155|   307k|                global_locale,
  156|   307k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   307k|                scn::runtime_format(f));
  158|   307k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 297k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|   297k|            it = result->begin();
  162|   297k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|   150k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   150k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   150k|            auto result = scn::scan_value<T>(
  171|   150k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   150k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 148k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|   148k|            it = result->begin();
  176|   148k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEES6_EEvRT1_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|   307k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   307k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   307k|            auto result = scn::scan<T>(
  140|   307k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   307k|                scn::runtime_format(f));
  142|   307k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 297k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|   297k|            it = result->begin();
  146|   297k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|   307k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   307k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   307k|            auto result = scn::scan<T>(
  155|   307k|                global_locale,
  156|   307k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   307k|                scn::runtime_format(f));
  158|   307k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 297k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|   297k|            it = result->begin();
  162|   297k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|   150k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   150k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   150k|            auto result = scn::scan_value<T>(
  171|   150k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   150k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 148k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|   148k|            it = result->begin();
  176|   148k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz21do_basic_run_for_typeIwNSt3__112basic_stringIwNS2_11char_traitsIwEENS2_9allocatorIwEEEEKNS2_5dequeIwS7_EEEEvRT1_RKNS2_6vectorINS2_17basic_string_viewIT_NS4_ISG_EEEENS6_ISI_EEEE:
  133|  1.76k|{
  134|       |    // Regular scan
  135|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (135:24): [True: 10.5k, False: 1.76k]
  ------------------
  136|  10.5k|        auto it = scn::ranges::begin(source);
  137|   307k|        while (true) {
  ------------------
  |  Branch (137:16): [Folded - Ignored]
  ------------------
  138|   307k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  139|   307k|            auto result = scn::scan<T>(
  140|   307k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  141|   307k|                scn::runtime_format(f));
  142|   307k|            if (!result) {
  ------------------
  |  Branch (142:17): [True: 10.5k, False: 297k]
  ------------------
  143|  10.5k|                break;
  144|  10.5k|            }
  145|   297k|            it = result->begin();
  146|   297k|        }
  147|  10.5k|    }
  148|       |
  149|       |    // scan localized
  150|  10.5k|    for (const auto& f : format_strings) {
  ------------------
  |  Branch (150:24): [True: 10.5k, False: 1.76k]
  ------------------
  151|  10.5k|        auto it = scn::ranges::begin(source);
  152|   307k|        while (true) {
  ------------------
  |  Branch (152:16): [Folded - Ignored]
  ------------------
  153|   307k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   307k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   307k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  154|   307k|            auto result = scn::scan<T>(
  155|   307k|                global_locale,
  156|   307k|                scn::ranges::subrange{it, scn::ranges::end(source)},
  157|   307k|                scn::runtime_format(f));
  158|   307k|            if (!result) {
  ------------------
  |  Branch (158:17): [True: 10.5k, False: 297k]
  ------------------
  159|  10.5k|                break;
  160|  10.5k|            }
  161|   297k|            it = result->begin();
  162|   297k|        }
  163|  10.5k|    }
  164|       |
  165|       |    // scan_value
  166|  1.76k|    {
  167|  1.76k|        auto it = scn::ranges::begin(source);
  168|   150k|        while (true) {
  ------------------
  |  Branch (168:16): [Folded - Ignored]
  ------------------
  169|   150k|            SCN_EXPECT(it <= scn::ranges::end(source));
  ------------------
  |  | 1104|   150k|#define SCN_EXPECT(cond) SCN_ASSERT(cond, "Precondition violation")
  |  |  ------------------
  |  |  |  | 1101|   150k|#define SCN_ASSERT(cond, msg) assert((cond) && msg)
  |  |  ------------------
  ------------------
  170|   150k|            auto result = scn::scan_value<T>(
  171|   150k|                scn::ranges::subrange{it, scn::ranges::end(source)});
  172|   150k|            if (!result) {
  ------------------
  |  Branch (172:17): [True: 1.76k, False: 148k]
  ------------------
  173|  1.76k|                break;
  174|  1.76k|            }
  175|   148k|            it = result->begin();
  176|   148k|        }
  177|  1.76k|    }
  178|  1.76k|}
_ZN3scn4fuzz22populate_noncontiguousINSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEERKDaRT_:
   90|  1.76k|{
   91|  1.76k|    using char_type = ranges::range_value_t<Source>;
   92|  1.76k|    auto& deque = get_noncontiguous_buffer<char_type>();
   93|  1.76k|    deque.clear();
   94|  1.76k|    std::copy(ranges::begin(source), ranges::end(source),
   95|  1.76k|              std::back_inserter(deque));
   96|  1.76k|    return deque;
   97|  1.76k|}
_ZN3scn4fuzz24get_noncontiguous_bufferIwEERDav:
   79|  1.76k|{
   80|       |    if constexpr (std::is_same_v<CharT, char>) {
   81|       |        return noncontiguous_buffer;
   82|       |    }
   83|  1.76k|    else {
   84|  1.76k|        return wnoncontiguous_buffer;
   85|  1.76k|    }
   86|  1.76k|}

LLVMFuzzerTestOneInput:
   57|    884|{
   58|    884|    scn::fuzz::run(data, size);
   59|    884|    return 0;
   60|    884|}
string_fuzz.cpp:_ZN3scn4fuzz12_GLOBAL__N_13runEPKhm:
   35|    884|{
   36|    884|    if (size > max_input_bytes || size == 0) {
  ------------------
  |  Branch (36:9): [True: 1, False: 883]
  |  Branch (36:35): [True: 0, False: 883]
  ------------------
   37|      1|        return;
   38|      1|    }
   39|       |
   40|    883|    auto [sv, wsv_reinterpret, wsv_transcode] = make_input_views(data, size);
   41|       |
   42|    883|    const auto& f = get_format_strings<char>("{}", "{:L}", "{:s}", "{:64c}",
   43|    883|                                             "{:64U}", "{:[A-Za-z]}");
   44|    883|    do_basic_run(sv, f);
   45|       |
   46|    883|    const auto& wf = get_format_strings<wchar_t>(
   47|    883|        L"{}", L"{:L}", L"{:s}", L"{:64c}", L"{:64U}", L"{:[A-Za-z]}");
   48|    883|    do_basic_run(wsv_reinterpret, wf);
   49|    883|    if (!wsv_transcode.empty()) {
  ------------------
  |  Branch (49:9): [True: 883, False: 0]
  ------------------
   50|    883|        do_basic_run(wsv_transcode, wf);
   51|    883|    }
   52|    883|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcNSt3__117basic_string_viewIcNS2_11char_traitsIcEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|    883|{
   25|    883|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    883|                                                           format_strings);
   27|    883|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|    883|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|    883|            source, format_strings);
   30|    883|    }
   31|    883|}
_ZN3scn4fuzz23do_basic_run_for_sourceIcKNSt3__15dequeIcNS2_9allocatorIcEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|    883|{
   25|    883|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|    883|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|    883|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwNSt3__117basic_string_viewIwNS2_11char_traitsIwEEEEEEvRT0_RKNS2_6vectorINS3_IT_NS4_ISA_EEEENS2_9allocatorISC_EEEE:
   24|  1.76k|{
   25|  1.76k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.76k|                                                           format_strings);
   27|  1.76k|    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|  1.76k|        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|  1.76k|            source, format_strings);
   30|  1.76k|    }
   31|  1.76k|}
_ZN3scn4fuzz23do_basic_run_for_sourceIwKNSt3__15dequeIwNS2_9allocatorIwEEEEEEvRT0_RKNS2_6vectorINS2_17basic_string_viewIT_NS2_11char_traitsISC_EEEENS4_ISF_EEEE:
   24|  1.76k|{
   25|  1.76k|    do_basic_run_for_type<CharT, std::basic_string<CharT>>(source,
   26|  1.76k|                                                           format_strings);
   27|       |    if constexpr (scn::ranges::contiguous_range<Source>) {
   28|       |        do_basic_run_for_type<CharT, std::basic_string_view<CharT>>(
   29|       |            source, format_strings);
   30|       |    }
   31|  1.76k|}

